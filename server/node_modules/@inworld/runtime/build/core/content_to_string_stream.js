"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentToStringStream = void 0;
const common_1 = require("../common");
const helpers_1 = require("../common/helpers");
const expose_binary_1 = require("../expose_binary");
/**
 * Class for handling string-based streams.
 * Provides functionality to read text data and tool calls from native stream implementations.
 * @internal
 */
class ContentToStringStream {
    /**
     * Creates a new ContentStream instance.
     *
     * @param {ExternalReference} stream - External reference to the native stream implementation
     * @param {Function} onDestroy - Optional callback to execute when stream is consumed
     */
    constructor(stream, onDestroy) {
        this.stream = stream;
        this.onDestroy = onDestroy;
    }
    /**
     * Returns the external reference to the native stream implementation.
     *
     * @returns External reference object
     */
    getStream() {
        return this.stream;
    }
    /**
     * Asynchronously reads the next item from the stream.
     *
     * @returns Promise resolving to a result object with text content and tool calls or done flag
     * @throws InworldError if reading from the stream fails
     */
    async next() {
        var _a, _b;
        while (await expose_binary_1.ContentToStringStreamFunctions.hasNext(this.stream)) {
            let inputStatus = await expose_binary_1.ContentToStringStreamFunctions.read(this.stream);
            if (!expose_binary_1.ContentToStringStreamFunctions.isOK(inputStatus)) {
                (_a = this.onDestroy) === null || _a === void 0 ? void 0 : _a.call(this);
                throw new common_1.InworldError('Failed to read input stream', (0, helpers_1.getStatus)(inputStatus));
            }
            else {
                const text = expose_binary_1.ContentToStringStreamFunctions.getContent(inputStatus);
                const result = {
                    text,
                    done: false,
                };
                return result;
            }
        }
        (_b = this.onDestroy) === null || _b === void 0 ? void 0 : _b.call(this);
        return { done: true };
    }
    /**
     * Creates a new ContentStream instance from an external reference.
     *
     * @param {ExternalReference} external - External reference to the native stream implementation
     * @returns {ContentToStringStream} A new ContentStream instance
     * @internal
     */
    static fromExternal(external) {
        return new ContentToStringStream(external, () => {
            expose_binary_1.ContentToStringStreamFunctions.delete(external);
        });
    }
}
exports.ContentToStringStream = ContentToStringStream;
