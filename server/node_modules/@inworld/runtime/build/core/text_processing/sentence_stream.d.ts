import { ExternalReference } from '../../common/data_types/common';
/**
 * Class for processing text stream into sentences.
 * Provides functionality to stream text data sentence by sentence.
 */
export declare class SentenceStream {
    private external;
    /**
     * Creates a new SentenceStream instance.
     *
     * @param {ExternalReference} sentenceStream - External reference to the native sentence stream implementation
     */
    constructor(sentenceStream: ExternalReference);
    /**
     * Creates a new SentenceStream from an input stream.
     *
     * @param {ExternalReference} inputStream - External reference to the input stream
     * @returns {Promise<SentenceStream>} Promise resolving to a new SentenceStream instance
     * @throws InworldError if sentence stream creation fails
     */
    static create(inputStream: ExternalReference): Promise<any>;
    /**
     * Returns the external reference to the native sentence stream implementation.
     *
     * @returns External reference object
     */
    get(): any;
    /**
     * Asynchronously reads the next sentence from the stream.
     *
     * @returns Promise resolving to a result object with text content or done flag
     * @throws InworldError if reading from the stream fails
     */
    next(): Promise<{
        text: any;
        done: boolean;
    } | {
        done: boolean;
        text?: undefined;
    }>;
    /**
     * Cleans up resources associated with this sentence stream.
     */
    destroy(): void;
}
