"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubstringRemover = void 0;
const common_1 = require("../../common");
const expose_binary_1 = require("../../expose_binary");
const stream_text_processor_1 = require("./stream_text_processor");
/**
 * Text processor that removes specified substrings from text streams.
 * Extends the StreamTextProcessor with substring removal functionality.
 */
class SubstringRemover extends stream_text_processor_1.StreamTextProcessor {
    /**
     * Creates a new SubstringRemover instance asynchronously.
     *
     * @param {ExternalReference} textStream - External reference to the text stream
     * @param {string[]} substrings - Vector of substrings to remove from the text
     * @returns {Promise<SubstringRemover>} Promise resolving to a new SubstringRemover instance
     * @throws InworldError if creation fails
     */
    static async create(textStream, substrings) {
        const vector = new common_1.VectorString(substrings);
        return stream_text_processor_1.StreamTextProcessor.createInstance(SubstringRemover, expose_binary_1.SubstringRemoverFunctions, expose_binary_1.StatusOrSubstringRemoverFunctions, textStream, () => {
            vector.destroy();
        }, vector.getExternal());
    }
}
exports.SubstringRemover = SubstringRemover;
