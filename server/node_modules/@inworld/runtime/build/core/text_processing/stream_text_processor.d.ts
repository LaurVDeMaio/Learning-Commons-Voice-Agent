import { ExternalReference } from '../../common/data_types/common';
/**
 * Abstract base class for text processing stream operations.
 * Provides common functionality for different text processors.
 * @abstract
 * @internal
 */
export declare abstract class StreamTextProcessor {
    #private;
    protected stream: ExternalReference | null;
    /**
     * Creates a new StreamTextProcessor instance.
     *
     * @param textStream - External reference to the text stream
     * @param destroy - Function to call when destroying the processor
     */
    constructor(textStream: ExternalReference, destroy: VoidFunction);
    /**
     * Creates a processor instance asynchronously.
     *
     * @param ClassType - The constructor of the processor class
     * @param streamFunctions - Native functions for stream operations
     * @param statusStreamFunctions - Native functions for status operations
     * @param rest - Additional parameters for stream creation
     * @returns Promise resolving to a new processor instance
     * @throws InworldError if creation fails
     */
    protected static createInstance<T>(ClassType: new (value: number, destroy: VoidFunction) => T, streamFunctions: Record<string, any>, statusStreamFunctions: Record<string, any>, textStream: ExternalReference, onDestroy?: VoidFunction, ...rest: unknown[]): Promise<any>;
    /**
     * Returns the external reference to the native text stream implementation.
     *
     * @returns External reference object
     */
    getStream(): any;
    /**
     * Asynchronously reads the next item from the text stream.
     *
     * @returns Promise resolving to a result object with text content or done flag
     * @throws InworldError if reading from the stream fails
     */
    next(): Promise<{
        text: any;
        done: boolean;
    } | {
        done: boolean;
        text?: undefined;
    }>;
    /**
     * Cleans up resources associated with this processor.
     */
    destroy(): void;
}
