import { ExternalReference } from '../common/data_types/common';
/**
 * Enumeration of supported device types for computations.
 */
export declare enum DeviceType {
    /** CPU device */
    CPU = "CPU",
    /** CUDA GPU device */
    CUDA = "CUDA",
    /** Metal GPU device (Apple) */
    Metal = "Metal"
}
/**
 * Registry for accessing available computation devices on the system.
 */
export declare class DeviceRegistry {
    /**
     * Returns a list of all available computation devices.
     *
     * @returns Array of Device instances representing available hardware
     */
    static getAvailableDevices(): Device[];
}
/**
 * Represents a computation device that can be used for processing.
 */
export declare class Device {
    private external;
    /**
     * Creates a new Device instance.
     *
     * @param external - External reference to the native device implementation
     * @internal
     */
    constructor(external: ExternalReference);
    /**
     * Returns the type of this device.
     *
     * @returns The device type enum value
     * @throws InworldError if the device type is invalid
     */
    getType(): DeviceType;
    /**
     * Returns the index of this device.
     *
     * @returns The device index
     */
    getIndex(): any;
    /**
     * Returns information about this device.
     *
     * @returns Information about the device
     */
    getInfo(): {
        name: any;
        freeMemoryBytes: any;
        totalMemoryBytes: any;
    };
    /**
     * Returns the external reference to the native device implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
}
