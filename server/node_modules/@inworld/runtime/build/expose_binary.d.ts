import * as koffi from 'koffi';
export declare const ConfigParserFunctions: {
    new: koffi.KoffiFunction;
    parseWithSubstitutions: koffi.KoffiFunction;
    parse: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    statusOrOk: koffi.KoffiFunction;
    statusOrValue: koffi.KoffiFunction;
    statusOrStatus: koffi.KoffiFunction;
    statusOrDelete: koffi.KoffiFunction;
    statusOrCompiledGraphOk: koffi.KoffiFunction;
    statusOrCompiledGraphValue: koffi.KoffiFunction;
    statusOrCompiledGraphStatus: koffi.KoffiFunction;
    statusOrCompiledGraphDelete: koffi.KoffiFunction;
};
export declare const LLMFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const RemoteLLMConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setProvider: koffi.KoffiFunction;
    setModelName: koffi.KoffiFunction;
    setAPIKey: koffi.KoffiFunction;
};
export declare const LocalLLMConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setModelPath: koffi.KoffiFunction;
    setDevice: koffi.KoffiFunction;
    setDefaultConfig: koffi.KoffiFunction;
};
export declare const DeviceFunctions: {
    getDeviceRegistryInstance: koffi.KoffiFunction;
    getAvailableDevices: koffi.KoffiFunction;
    getDevicesSize: koffi.KoffiFunction;
    deleteDevice: koffi.KoffiFunction;
    getDevice: koffi.KoffiFunction;
    getDeviceType: koffi.KoffiFunction;
    getDeviceIndex: koffi.KoffiFunction;
    getDeviceInfo: koffi.KoffiFunction;
    getDeviceInfoName: koffi.KoffiFunction;
    getDeviceInfoFreeMemoryBytes: koffi.KoffiFunction;
    getDeviceInfoTotalMemoryBytes: koffi.KoffiFunction;
};
export declare const TextConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setMaxTokens: koffi.KoffiFunction;
    setRepetitionPenalty: koffi.KoffiFunction;
    setTopP: koffi.KoffiFunction;
    setMaxPrompt: koffi.KoffiFunction;
    setTemperature: koffi.KoffiFunction;
    setFrequencyPenalty: koffi.KoffiFunction;
    setPresencePenalty: koffi.KoffiFunction;
    setStopSequences: koffi.KoffiFunction;
};
export declare const LLMInterfaceFunctions: {
    createRemote: Function;
    createLocal: Function;
    delete: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    generateContentFromPrompt: Function;
    generateContentFromMessages: Function;
    generateContentFromMessagesWithTools: Function;
};
export declare const LLMJinjaInterfaceFunctions: {
    renderJinja: Function;
};
export declare const VectorMapStringStringFunctions: {
    newVector: koffi.KoffiFunction;
    deleteVector: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const MapStringStringFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    set: koffi.KoffiFunction;
};
export declare const InputStreamFunctions: {
    isOK: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    hasNext: Function;
    read: Function;
    deleteStream: koffi.KoffiFunction;
};
export declare const ContentStreamFunctions: {
    isOK: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getContent: koffi.KoffiFunction;
    getText: koffi.KoffiFunction;
    getToolCalls: koffi.KoffiFunction;
    hasNext: Function;
    read: Function;
    deleteStream: koffi.KoffiFunction;
};
export declare const InworldStringFunctions: {
    get: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
};
export declare const StatusFunctions: {
    toString: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    createStatus: koffi.KoffiFunction;
};
export declare const TextEmbedderFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const LocalTextEmbedderConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setModelPath: koffi.KoffiFunction;
    setDevice: koffi.KoffiFunction;
};
export declare const RemoteTextEmbedderConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setAPIKey: koffi.KoffiFunction;
    setModelName: koffi.KoffiFunction;
    setProvider: koffi.KoffiFunction;
};
export declare const TextEmbedderCreationConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setLocalConfig: koffi.KoffiFunction;
    setRemoteConfig: koffi.KoffiFunction;
    hasLocalConfig: koffi.KoffiFunction;
    hasRemoteConfig: koffi.KoffiFunction;
    getLocalConfig: koffi.KoffiFunction;
    getRemoteConfig: koffi.KoffiFunction;
};
export declare const TextEmbedderInterfaceFunctions: {
    create: Function;
    deleteStatusOrInterface: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    embed: Function;
    embedBatch: Function;
};
export declare const OptionalTextEmbedderInterfaceFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    copy: koffi.KoffiFunction;
    hasValue: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    reset: koffi.KoffiFunction;
};
export declare const VectorStringFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const VectorFloatFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const VectorVectorFloatFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    clear: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const EmbeddingsStatusFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const BatchEmbeddingsStatusFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const TTSInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    synthesizeSpeech: Function;
    synthesizeSpeechWithInstruction: Function;
};
export declare const TTSRequestFunctions: {
    newWithText: koffi.KoffiFunction;
    newWithString: koffi.KoffiFunction;
    newWithDataStream: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    hasTextContent: koffi.KoffiFunction;
    hasStreamContent: koffi.KoffiFunction;
    toBaseData: koffi.KoffiFunction;
    getVoice: koffi.KoffiFunction;
};
export declare const SpeechSynthesisInferenceConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setTemperature: koffi.KoffiFunction;
    getTemperature: koffi.KoffiFunction;
    setPitch: koffi.KoffiFunction;
    getPitch: koffi.KoffiFunction;
    setSpeakingRate: koffi.KoffiFunction;
    getSpeakingRate: koffi.KoffiFunction;
};
export declare const SpeechSynthesisPostprocessingConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setSampleRate: koffi.KoffiFunction;
    getSampleRate: koffi.KoffiFunction;
};
export declare const InworldSpeechSynthesisConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setModelId: koffi.KoffiFunction;
    getModelId: koffi.KoffiFunction;
    setPostprocessing: koffi.KoffiFunction;
    getPostprocessing: koffi.KoffiFunction;
    setInference: koffi.KoffiFunction;
    getInference: koffi.KoffiFunction;
};
export declare const SpeechSynthesisConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getInworldConfig: koffi.KoffiFunction;
};
export declare const VoiceFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setSpeakerId: koffi.KoffiFunction;
};
export declare const OptionalVoiceFunctions: {
    new: koffi.KoffiFunction;
    newWithValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    hasValue: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
};
export declare const MatchedIntentsFunctions: {
    toMatchedIntents: koffi.KoffiFunction;
    getMatches: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
};
export declare const MatchedKeywordsFunctions: {
    toMatchedKeywords: koffi.KoffiFunction;
    getMatches: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
};
export declare const ClassificationResultFunctions: {
    toClassificationResult: koffi.KoffiFunction;
    getClasses: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
};
export declare const GoalAdvancementFunctions: {
    toGoalAdvancement: koffi.KoffiFunction;
    getActivatedGoals: koffi.KoffiFunction;
    getCompletedGoals: koffi.KoffiFunction;
    getCurrentGoals: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
};
export declare const MemoryStateFunctions: {
    toMemoryState: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
};
export declare const TextFunctions: {
    asText: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
};
export declare const SpeechChunkFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getWaveform: koffi.KoffiFunction;
    getSampleRate: koffi.KoffiFunction;
    getPhonemeTimestamps: koffi.KoffiFunction;
    toBaseStream: koffi.KoffiFunction;
    fromBaseData: koffi.KoffiFunction;
    toStream: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
};
export declare const PhonemeTimestampFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getPhoneme: koffi.KoffiFunction;
    getStartTimeSec: koffi.KoffiFunction;
};
export declare const PhonemeTimestampVectorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const SpeechChunkStatusFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const SpeechChunkInputStreamFunctions: {
    isOK: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getStream: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    deleteStream: koffi.KoffiFunction;
    hasNext: Function;
    read: Function;
};
export declare const TTSFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createTTS: Function;
};
export declare const TTSInterfaceStatusFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const RemoteTTSConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setSynthesisConfig: koffi.KoffiFunction;
    setApiKey: koffi.KoffiFunction;
};
export declare const KnowledgeRecordFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setText: koffi.KoffiFunction;
    setEmbedding: koffi.KoffiFunction;
    setMetadata: koffi.KoffiFunction;
};
export declare const VectorKnowledgeRecordFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const VectorTopicThresholdFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const SafetyConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setForbiddenTopics: koffi.KoffiFunction;
};
export declare const KnowledgeCollectionFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setKnowledgeRecords: koffi.KoffiFunction;
};
export declare const VectorKnowledgeCollectionFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const KnowledgeCollectionFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createKnowledgeCollection: koffi.KoffiFunction;
};
export declare const RetrievalConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setThreshold: koffi.KoffiFunction;
    setTopK: koffi.KoffiFunction;
};
export declare const KnowledgeRetrieverInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    retrieveKnowledge: Function;
};
export declare const KnowledgeRetrieverFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createKnowledgeRetriever: Function;
};
export declare const StatusOrKnowledgeRetrieverInterfaceFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrVectorStringFunctions: {
    getValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const EventFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getSpeech: koffi.KoffiFunction;
    getAction: koffi.KoffiFunction;
    setAgentName: koffi.KoffiFunction;
    setUtterance: koffi.KoffiFunction;
    setName: koffi.KoffiFunction;
    setParameters: koffi.KoffiFunction;
};
export declare const VectorEventFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const StatusOrMemoryInterfaceFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const MemoryInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    getMemory: Function;
    getMemoryWithRollingSummary: Function;
    updateMemory: Function;
};
export declare const StatusOrMemorySnapshotFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const MemorySnapshotFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setRollingSummary: koffi.KoffiFunction;
    setFlashMemory: koffi.KoffiFunction;
    setLongTermMemory: koffi.KoffiFunction;
};
export declare const RollingSummaryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setSummarizedText: koffi.KoffiFunction;
    setTurnsSinceLastUpdate: koffi.KoffiFunction;
};
export declare const FlashMemoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setKnowledgeCollection: koffi.KoffiFunction;
};
export declare const LongTermMemoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setKnowledgeCollection: koffi.KoffiFunction;
};
export declare const RollingSummaryConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setNumberOfTurnsBeforeSummary: koffi.KoffiFunction;
    setStartWindowSize: koffi.KoffiFunction;
    setMaxSummarySentences: koffi.KoffiFunction;
    setTextGenerationConfig: koffi.KoffiFunction;
};
export declare const FlashMemoryConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setDialogueCutoffSize: koffi.KoffiFunction;
    setNHistoryTurns: koffi.KoffiFunction;
    setMemoriesSimilarityThreshold: koffi.KoffiFunction;
    setMaxFlashMemory: koffi.KoffiFunction;
    setMaxTopicsPerMemory: koffi.KoffiFunction;
    setTextGenerationConfig: koffi.KoffiFunction;
};
export declare const LongTermMemoryConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setMaxTopicSummaryLenToAppend: koffi.KoffiFunction;
    setMaxNumberOfFlashMemory: koffi.KoffiFunction;
    setMaxNumberOfTopics: koffi.KoffiFunction;
    setTextGenerationConfig: koffi.KoffiFunction;
};
export declare const STTFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const SpeechRecognitionConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const RemoteSTTConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setApiKey: koffi.KoffiFunction;
};
export declare const LocalSTTConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setModelPath: koffi.KoffiFunction;
    setDevice: koffi.KoffiFunction;
};
export declare const AudioChunkFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setSampleRate: koffi.KoffiFunction;
    setData: koffi.KoffiFunction;
};
export declare const STTInterfaceFunctions: {
    createRemote: Function;
    createLocal: Function;
    delete: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    recognizeSpeech: Function;
};
export declare const VoiceActivityDetectionConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setSpeechThreshold: koffi.KoffiFunction;
    getSpeechThreshold: koffi.KoffiFunction;
};
export declare const LocalVADConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setModelPath: koffi.KoffiFunction;
    setDevice: koffi.KoffiFunction;
    setDefaultConfig: koffi.KoffiFunction;
};
export declare const VADFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createVAD: Function;
};
export declare const StatusOrVADInterfaceFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const VADInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    detectVoiceActivity: Function;
};
export declare const EmojiRemoverFunctions: {
    create: Function;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrEmojiRemoverFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const SubstringRemoverFunctions: {
    create: Function;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSubstringRemoverFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const TextInBracketsRemoverFunctions: {
    create: Function;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrTextInBracketsRemoverFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const SentenceStreamFunctions: {
    create: Function;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSentenceStreamFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const IntentCompilerInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    compileIntents: Function;
};
export declare const IntentCompilerFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createWithTextEmbedder: Function;
    create: Function;
};
export declare const StatusOrIntentCompilerInterfaceFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
};
export declare const VectorIntentFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const IntentFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setName: koffi.KoffiFunction;
    getName: koffi.KoffiFunction;
    setPhrases: koffi.KoffiFunction;
    getPhrases: koffi.KoffiFunction;
};
export declare const StatusOrVectorCompiledIntentFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
};
export declare const VectorCompiledIntentFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const CompiledIntentFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setName: koffi.KoffiFunction;
    getName: koffi.KoffiFunction;
    setNormalizedPhrases: koffi.KoffiFunction;
    getNormalizedPhrases: koffi.KoffiFunction;
    setPhraseEmbeddings: koffi.KoffiFunction;
    getPhraseEmbeddings: koffi.KoffiFunction;
};
export declare const IntentMatcherConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setEmbedding: koffi.KoffiFunction;
    getEmbedding: koffi.KoffiFunction;
    setLlm: koffi.KoffiFunction;
    getLlm: koffi.KoffiFunction;
    setTopNIntents: koffi.KoffiFunction;
    getTopNIntents: koffi.KoffiFunction;
};
export declare const IntentMatcherCreationConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setMatcherConfig: koffi.KoffiFunction;
    getMatcherConfig: koffi.KoffiFunction;
    setCompiledIntents: koffi.KoffiFunction;
    getCompiledIntents: koffi.KoffiFunction;
};
export declare const IntentMatcherInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    matchIntents: Function;
};
export declare const IntentMatcherFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createWithTextEmbedderAndLLM: Function;
    createWithTextEmbedder: Function;
    createWithLLM: Function;
};
export declare const StatusOrIntentMatcherInterfaceFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
};
export declare const StatusOrVectorIntentMatchFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
};
export declare const VectorIntentMatchFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const IntentMatchFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setIntentName: koffi.KoffiFunction;
    getIntentName: koffi.KoffiFunction;
    setScore: koffi.KoffiFunction;
    getScore: koffi.KoffiFunction;
};
export declare const VectorKeywordMatchFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const KeywordMatchFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getGroupName: koffi.KoffiFunction;
    getKeyword: koffi.KoffiFunction;
};
export declare const ListToolsDataFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
    getListToolsSwig: koffi.KoffiFunction;
    toListToolsData: koffi.KoffiFunction;
};
export declare const ToolDataFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
    getTool: koffi.KoffiFunction;
};
export declare const VectorToolDataFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    isEmpty: koffi.KoffiFunction;
};
export declare const ListToolCallsResultsFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    getToolCallResultsSwig: koffi.KoffiFunction;
    toListToolCallsResults: koffi.KoffiFunction;
};
export declare const ToolCallResultFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
    getToolCallId: koffi.KoffiFunction;
    getResult: koffi.KoffiFunction;
    toToolCallResult: koffi.KoffiFunction;
};
export declare const VectorToolCallResultFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const ListToolCallDataFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    getToolCallsSwig: koffi.KoffiFunction;
    toListToolCallData: koffi.KoffiFunction;
};
export declare const ToolCallDataFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    getToolCall: koffi.KoffiFunction;
    toToolCallData: koffi.KoffiFunction;
};
export declare const VectorToolCallDataFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const OptionalEmbeddingMatcherConfigFunctions: {
    newWithValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    hasValue: koffi.KoffiFunction;
    valueConst: koffi.KoffiFunction;
};
export declare const EmbeddingMatcherConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setSimilarityThreshold: koffi.KoffiFunction;
    getSimilarityThreshold: koffi.KoffiFunction;
};
export declare const OptionalLlmMatcherConfigFunctions: {
    newWithValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    valueConst: koffi.KoffiFunction;
};
export declare const LlmMatcherConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setGenerationConfig: koffi.KoffiFunction;
    getGenerationConfig: koffi.KoffiFunction;
    setPromptTemplate: koffi.KoffiFunction;
    getPromptTemplate: koffi.KoffiFunction;
    setEmbeddingSimilarityThreshold: koffi.KoffiFunction;
    getEmbeddingSimilarityThreshold: koffi.KoffiFunction;
    setMaxEmbeddingMatchesForLlm: koffi.KoffiFunction;
    getMaxEmbeddingMatchesForLlm: koffi.KoffiFunction;
};
export declare const OptionalFloatFunctions: {
    newWithValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    hasValue: koffi.KoffiFunction;
    valueConst: koffi.KoffiFunction;
};
export declare const StatusOrIntFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrJsonFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrLLMChatNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrLLMCompletionNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrLLMChatRequestBuilderNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrLLMPromptBuilderNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrGoalAdvancementNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrIntentNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrKnowledgeNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrMemoryUpdateNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrMemoryRetrieveNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrRandomCannedTextNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrSafetyCheckerNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrKeywordMatcherNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrSTTNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrTextAggregatorNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrTextChunkingNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrTTSNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrMCPListToolsNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSharedPtrMCPCallToolNodeFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const GraphFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    addNode: koffi.KoffiFunction;
    createEdge: koffi.KoffiFunction;
    setAsStart: koffi.KoffiFunction;
    setAsEnd: koffi.KoffiFunction;
    compiledGraphStatus: koffi.KoffiFunction;
    compiledGraphStatusDelete: koffi.KoffiFunction;
    compiledGraphStatusIsOK: koffi.KoffiFunction;
    compiledGraphStatusValue: koffi.KoffiFunction;
    compiledGraphDelete: koffi.KoffiFunction;
    jsonFromString: koffi.KoffiFunction;
    visualize: Function;
    compileAndReturnRaw: koffi.KoffiFunction;
    getCreationContextHelper: koffi.KoffiFunction;
};
export declare const EdgeWrapperFunctions: {
    copy: koffi.KoffiFunction;
    setCondition: koffi.KoffiFunction;
    setConditionCallback: koffi.KoffiFunction;
    setToOptional: koffi.KoffiFunction;
    setToLoop: koffi.KoffiFunction;
    build: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const EdgeConditionExecutorFunctions: {
    new: koffi.KoffiFunction;
    getInput: koffi.KoffiFunction;
    setOutput: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const VectorNodeFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const GraphExecutorFunctions: {
    factoryHelperCreate: koffi.KoffiFunction;
    createExecutor: koffi.KoffiFunction;
    factoryHelperDelete: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    start: koffi.KoffiFunction;
    stop: koffi.KoffiFunction;
    execute: koffi.KoffiFunction;
    executeWithUserContext: koffi.KoffiFunction;
    hasMoreResults: Function;
    next: Function;
    closeExecution: koffi.KoffiFunction;
    cleanupAllExecutions: koffi.KoffiFunction;
};
export declare const BTreeMapStringToStringFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    empty: koffi.KoffiFunction;
    clear: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    set: koffi.KoffiFunction;
    contains: koffi.KoffiFunction;
};
export declare const UserContextFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getAttributes: koffi.KoffiFunction;
    setAttributes: koffi.KoffiFunction;
    getTargetingKey: koffi.KoffiFunction;
    setTargetingKey: koffi.KoffiFunction;
};
export declare const TextDataFunctions: {
    new: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const AudioDataFunctions: {
    new: koffi.KoffiFunction;
    waveForm: koffi.KoffiFunction;
    sampleRate: koffi.KoffiFunction;
};
export declare const JsonDataFunctions: {
    fromString: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
    valueAsString: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const LLMChatRequestFunctions: {
    new: koffi.KoffiFunction;
    newFull: koffi.KoffiFunction;
    toBaseData: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    getMessages: koffi.KoffiFunction;
    getTools: koffi.KoffiFunction;
    getToolChoice: koffi.KoffiFunction;
    getResponseFormat: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const MessagesFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    capacity: koffi.KoffiFunction;
    reserve: koffi.KoffiFunction;
    isEmpty: koffi.KoffiFunction;
    clear: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    set: koffi.KoffiFunction;
};
export declare const MessageFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setRole: koffi.KoffiFunction;
    getRole: koffi.KoffiFunction;
    setContent: koffi.KoffiFunction;
    getContent: koffi.KoffiFunction;
    setToolCalls: koffi.KoffiFunction;
    getToolCalls: koffi.KoffiFunction;
    setToolCallId: koffi.KoffiFunction;
    getToolCallId: koffi.KoffiFunction;
    isTextContent: koffi.KoffiFunction;
    isMultimodalContent: koffi.KoffiFunction;
    getContentItems: koffi.KoffiFunction;
    setContentItems: koffi.KoffiFunction;
};
export declare const ImageUrlFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setUrl: koffi.KoffiFunction;
    getUrl: koffi.KoffiFunction;
    setDetail: koffi.KoffiFunction;
    getDetail: koffi.KoffiFunction;
};
export declare const ContentItemFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isText: koffi.KoffiFunction;
    isImage: koffi.KoffiFunction;
    getText: koffi.KoffiFunction;
    getImageUrl: koffi.KoffiFunction;
    setText: koffi.KoffiFunction;
    setImageUrl: koffi.KoffiFunction;
};
export declare const ContentItemsVectorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    empty: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    set: koffi.KoffiFunction;
    clear: koffi.KoffiFunction;
};
export declare const FunctionChoiceFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setType: koffi.KoffiFunction;
    getType: koffi.KoffiFunction;
    setName: koffi.KoffiFunction;
    getName: koffi.KoffiFunction;
};
export declare const ToolChoiceFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    isStringChoice: koffi.KoffiFunction;
    isFunctionChoice: koffi.KoffiFunction;
    getStringChoice: koffi.KoffiFunction;
    getFunctionChoice: koffi.KoffiFunction;
    setStringChoice: koffi.KoffiFunction;
    setFunctionChoice: koffi.KoffiFunction;
};
export declare const OptionalToolChoiceFunctions: {
    new: koffi.KoffiFunction;
    newWithValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    hasValue: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    setValue: koffi.KoffiFunction;
    reset: koffi.KoffiFunction;
};
export declare const LLMChatResponseFunctions: {
    toBaseData: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    isStreaming: koffi.KoffiFunction;
    getStream: koffi.KoffiFunction;
    getContent: koffi.KoffiFunction;
    hasCompleteContent: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
};
export declare const LLMCompletionResponseFunctions: {
    toBaseData: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    isStreaming: koffi.KoffiFunction;
    getStream: koffi.KoffiFunction;
    getText: koffi.KoffiFunction;
};
export declare const BaseDataFunctions: {
    delete: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
    errorToString: koffi.KoffiFunction;
    asText: koffi.KoffiFunction;
};
export declare const VectorBaseDataFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
};
export declare const StatusOrBaseDataFunctions: {
    newFromStatus: koffi.KoffiFunction;
    newFromBaseData: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const TTSOutputFunctions: {
    new: koffi.KoffiFunction;
    toStream: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    getStream: koffi.KoffiFunction;
    streamHasNext: Function;
    streamRead: Function;
    streamDelete: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getText: koffi.KoffiFunction;
    getAudio: koffi.KoffiFunction;
    audioDelete: koffi.KoffiFunction;
};
export declare const SafetyCheckerFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createSafetyChecker: Function;
};
export declare const SafetyCheckerCreationConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setModelWeightsPath: koffi.KoffiFunction;
};
export declare const TopicThresholdFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setTopicName: koffi.KoffiFunction;
    setConfidence: koffi.KoffiFunction;
};
export declare const DetectedTopicFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getTopicName: koffi.KoffiFunction;
    getConfidence: koffi.KoffiFunction;
};
export declare const VectorDetectedTopicFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
};
export declare const CheckSafetyResponseFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setIsSafe: koffi.KoffiFunction;
    getIsSafe: koffi.KoffiFunction;
    setDetectedTopics: koffi.KoffiFunction;
    getDetectedTopics: koffi.KoffiFunction;
};
export declare const StatusOrCheckSafetyResponseFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrSafetyCheckerInterfaceFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const SafetyCheckerInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    checkSafety: Function;
    checkSafetyWithConfig: Function;
};
export declare const TelemetryFunctions: {
    init: koffi.KoffiFunction;
    shutdown: koffi.KoffiFunction;
    configNew: koffi.KoffiFunction;
    configDelete: koffi.KoffiFunction;
    configSetEndpoint: koffi.KoffiFunction;
    configSetApiKey: koffi.KoffiFunction;
    configSetServiceName: koffi.KoffiFunction;
    configSetAppVersion: koffi.KoffiFunction;
    configSetLogger: koffi.KoffiFunction;
    configSetTracer: koffi.KoffiFunction;
    configSetExporterType: koffi.KoffiFunction;
    configLoggerNew: koffi.KoffiFunction;
    configLoggerDelete: koffi.KoffiFunction;
    configLoggerSetLevel: koffi.KoffiFunction;
    configLoggerSetSinkAbslLogs: koffi.KoffiFunction;
    configTracerNew: koffi.KoffiFunction;
    configTracerDelete: koffi.KoffiFunction;
    configTracerSetSamplingRate: koffi.KoffiFunction;
    metricConfigNew: koffi.KoffiFunction;
    metricConfigDelete: koffi.KoffiFunction;
    metricConfigSetMetricType: koffi.KoffiFunction;
    metricConfigGetMetricType: koffi.KoffiFunction;
    metricConfigSetName: koffi.KoffiFunction;
    metricConfigGetName: koffi.KoffiFunction;
    metricConfigSetDescription: koffi.KoffiFunction;
    metricConfigGetDescription: koffi.KoffiFunction;
    metricConfigSetUnit: koffi.KoffiFunction;
    metricConfigGetUnit: koffi.KoffiFunction;
    configureMetric: koffi.KoffiFunction;
    recordCounterUInt: koffi.KoffiFunction;
    recordCounterUIntWithTags: koffi.KoffiFunction;
    recordCounterDouble: koffi.KoffiFunction;
    recordCounterDoubleWithTags: koffi.KoffiFunction;
    recordGaugeInt: koffi.KoffiFunction;
    recordGaugeIntWithTags: koffi.KoffiFunction;
    recordGaugeDouble: koffi.KoffiFunction;
    recordGaugeDoubleWithTags: koffi.KoffiFunction;
    recordHistogramUInt: koffi.KoffiFunction;
    recordHistogramUIntWithTags: koffi.KoffiFunction;
    recordHistogramDouble: koffi.KoffiFunction;
    recordHistogramDoubleWithTags: koffi.KoffiFunction;
    generateExecutionId: koffi.KoffiFunction;
    startSpan: koffi.KoffiFunction;
    startSpanWithAttributes: koffi.KoffiFunction;
    startSpanWithParent: koffi.KoffiFunction;
    spanSetAttribute: koffi.KoffiFunction;
    spanSetAttributeArray: koffi.KoffiFunction;
    spanSetOK: koffi.KoffiFunction;
    spanSetError: koffi.KoffiFunction;
    spanEnd: koffi.KoffiFunction;
    spanDelete: koffi.KoffiFunction;
    vectorSpanNew: koffi.KoffiFunction;
    vectorSpanDelete: koffi.KoffiFunction;
    vectorSpanSize: koffi.KoffiFunction;
    vectorSpanPushBack: koffi.KoffiFunction;
    vectorSpanGet: koffi.KoffiFunction;
    vectorSpanSet: koffi.KoffiFunction;
    vectorSpanClear: koffi.KoffiFunction;
    vectorSpanEmpty: koffi.KoffiFunction;
    logMessage: koffi.KoffiFunction;
    logMessageWithMap: koffi.KoffiFunction;
    logMessageWithMapAndProcessContext: koffi.KoffiFunction;
};
export declare const NERInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    extractEntities: Function;
};
export declare const NERCreationConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setEntities: koffi.KoffiFunction;
    getEntities: koffi.KoffiFunction;
};
export declare const NERFactoryFunctions: {
    delete: koffi.KoffiFunction;
    createNER: Function;
};
export declare const StatusOrNERInterfaceFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const EntityMatchFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setEntityName: koffi.KoffiFunction;
    getEntityName: koffi.KoffiFunction;
    setRuleName: koffi.KoffiFunction;
    getRuleName: koffi.KoffiFunction;
    setText: koffi.KoffiFunction;
    getText: koffi.KoffiFunction;
};
export declare const VectorEntityMatchFunctions: {
    new: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrVectorEntityMatchFunctions: {
    new: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const EntityFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setName: koffi.KoffiFunction;
    getName: koffi.KoffiFunction;
    setRules: koffi.KoffiFunction;
    getRules: koffi.KoffiFunction;
};
export declare const VectorEntityFunctions: {
    new: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const DictionaryRuleFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setName: koffi.KoffiFunction;
    getName: koffi.KoffiFunction;
    setDisplayName: koffi.KoffiFunction;
    getDisplayName: koffi.KoffiFunction;
    setSynonyms: koffi.KoffiFunction;
    getSynonyms: koffi.KoffiFunction;
};
export declare const VectorDictionaryRuleFunctions: {
    new: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StreamStringFunctions: {
    new: koffi.KoffiFunction;
    toStream: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    getStream: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    deleteStream: koffi.KoffiFunction;
};
export declare const CustomNodeWrapperFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const CustomNodeThreadedProcessExecutorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setOutput: koffi.KoffiFunction;
    getInputs: koffi.KoffiFunction;
    getContext: koffi.KoffiFunction;
};
export declare const ProcessContextFunctions: {
    getVariant: koffi.KoffiFunction;
    isCancelled: koffi.KoffiFunction;
    getConfig: koffi.KoffiFunction;
};
export declare const KnowledgeFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createKnowledgeWithLocalConfig: Function;
    createKnowledgeWithRemoteConfig: Function;
};
export declare const LocalKnowledgeConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setKnowledgeCompileConfig: koffi.KoffiFunction;
    getKnowledgeCompileConfig: koffi.KoffiFunction;
    setEmbedderComponentId: koffi.KoffiFunction;
    getEmbedderComponentId: koffi.KoffiFunction;
};
export declare const RemoteKnowledgeConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setKnowledgeCompileConfig: koffi.KoffiFunction;
    setApiKey: koffi.KoffiFunction;
};
export declare const ParsingConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setMaxCharsPerChunk: koffi.KoffiFunction;
    setMaxChunksPerDocument: koffi.KoffiFunction;
};
export declare const KnowledgeCompileConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setParsingConfig: koffi.KoffiFunction;
};
export declare const KnowledgeInterfaceFunctions: {
    delete: koffi.KoffiFunction;
    getKnowledge: Function;
    compileKnowledgeFromRecords: Function;
    compileKnowledgeFromFile: Function;
    removeKnowledge: Function;
};
export declare const FileFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setContent: koffi.KoffiFunction;
    setType: koffi.KoffiFunction;
};
export declare const FileContentFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setBytes: koffi.KoffiFunction;
};
export declare const KnowledgeStatusFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const KnowledgeVectorStatusFunctions: {
    isOK: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const VectorCharFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    memcpyTo: koffi.KoffiFunction;
};
export declare const KnowledgeNodeHelperFunctions: {
    toKnowledgeRecords: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    getRecords: koffi.KoffiFunction;
    toString: koffi.KoffiFunction;
};
export declare const TransformationStreamFunctions: {
    newDestructor: koffi.KoffiFunction;
    deleteDestructor: koffi.KoffiFunction;
    value: koffi.KoffiFunction;
    toStream: koffi.KoffiFunction;
};
export declare const TransformationStreamContentToTextFunctions: {
    newDataStream: koffi.KoffiFunction;
    newStreamWithoutFilter: koffi.KoffiFunction;
    newStreamWithFilter: koffi.KoffiFunction;
    deleteStream: koffi.KoffiFunction;
    newTransformExecutorExecutor: koffi.KoffiFunction;
    deleteTransformExecutorExecutor: koffi.KoffiFunction;
    getTransformExecutorInput: koffi.KoffiFunction;
    setTransformExecutorOutput: koffi.KoffiFunction;
    newFilterExecutorExecutor: koffi.KoffiFunction;
    deleteFilterExecutorExecutor: koffi.KoffiFunction;
    getFilterExecutorInput: koffi.KoffiFunction;
    setFilterExecutorOutput: koffi.KoffiFunction;
    streamDelete: koffi.KoffiFunction;
    newEntity: koffi.KoffiFunction;
    newStatus: koffi.KoffiFunction;
    getInputStream: koffi.KoffiFunction;
};
export declare const ContentToStringStreamFunctions: {
    create: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    read: koffi.KoffiFunction;
    hasNext: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getContent: koffi.KoffiFunction;
};
export declare const TransformationStreamStringToStringFunctions: {
    newDataStream: koffi.KoffiFunction;
    newStreamWithCallbackOnly: koffi.KoffiFunction;
    deleteStream: koffi.KoffiFunction;
    newEntity: koffi.KoffiFunction;
    getInputStream: koffi.KoffiFunction;
};
export declare const TransformationStreamDestructorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const TransformationStreamStrToTTSOutputFunctions: {
    newDataStream: koffi.KoffiFunction;
    newStreamWithoutFilter: koffi.KoffiFunction;
    newStreamWithFilter: koffi.KoffiFunction;
    newStreamWithCallbackOnly: koffi.KoffiFunction;
    deleteStream: koffi.KoffiFunction;
    newTransformExecutorExecutor: koffi.KoffiFunction;
    deleteTransformExecutorExecutor: koffi.KoffiFunction;
    getTransformExecutorInput: koffi.KoffiFunction;
    setTransformExecutorOutput: koffi.KoffiFunction;
    newFilterExecutorExecutor: koffi.KoffiFunction;
    deleteFilterExecutorExecutor: koffi.KoffiFunction;
    getFilterExecutorInput: koffi.KoffiFunction;
    setFilterExecutorOutput: koffi.KoffiFunction;
    streamDelete: koffi.KoffiFunction;
    newEntity: koffi.KoffiFunction;
    newStatus: koffi.KoffiFunction;
    getInputStream: koffi.KoffiFunction;
};
export declare const ContentFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setContent: koffi.KoffiFunction;
    getContent: koffi.KoffiFunction;
    setToolCalls: koffi.KoffiFunction;
    getToolCalls: koffi.KoffiFunction;
};
export declare const ToolFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setName: koffi.KoffiFunction;
    getName: koffi.KoffiFunction;
    setDescription: koffi.KoffiFunction;
    getDescription: koffi.KoffiFunction;
    setPropertiesFromString: koffi.KoffiFunction;
    getPropertiesAsString: koffi.KoffiFunction;
};
export declare const ToolCallFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setId: koffi.KoffiFunction;
    getId: koffi.KoffiFunction;
    setName: koffi.KoffiFunction;
    getName: koffi.KoffiFunction;
    setArgs: koffi.KoffiFunction;
    getArgs: koffi.KoffiFunction;
};
export declare const ToolsVectorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    isEmpty: koffi.KoffiFunction;
};
export declare const ToolCallsVectorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    isEmpty: koffi.KoffiFunction;
};
export declare const MemoryFactoryFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    createMemory: Function;
};
export declare const MessagesVectorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    pushBack: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    isEmpty: koffi.KoffiFunction;
};
export declare const NodeCreateFunctions: {
    createLLMChatNode: koffi.KoffiFunction;
    createLLMCompletionNode: koffi.KoffiFunction;
    createGoalAdvancementNode: koffi.KoffiFunction;
    createIntentNode: koffi.KoffiFunction;
    createKnowledgeNode: koffi.KoffiFunction;
    createMemoryUpdateNode: koffi.KoffiFunction;
    createMemoryUpdateNodeSimple: koffi.KoffiFunction;
    createMemoryRetrieveNode: koffi.KoffiFunction;
    createRandomCannedTextNode: koffi.KoffiFunction;
    createSafetyCheckerNode: koffi.KoffiFunction;
    createKeywordMatcherNode: koffi.KoffiFunction;
    createKeywordMatcherNodeSimple: koffi.KoffiFunction;
    createSTTNode: koffi.KoffiFunction;
    createTextAggregatorNode: koffi.KoffiFunction;
    createTextChunkingNode: koffi.KoffiFunction;
    createTTSNode: koffi.KoffiFunction;
    createLLMChatRequestBuilderNode: koffi.KoffiFunction;
    createLLMPromptBuilderNode: koffi.KoffiFunction;
    createMCPListToolsNode: koffi.KoffiFunction;
    createMCPCallToolNode: koffi.KoffiFunction;
};
export declare const ExecutionConfigFunctions: {
    toJsonString: koffi.KoffiFunction;
    nodeExecutionConfigIsValid: koffi.KoffiFunction;
    newIntentNodeExecutionConfig: koffi.KoffiFunction;
    deleteIntentNodeExecutionConfig: koffi.KoffiFunction;
    setMatcherConfigForIntentNodeExecutionConfig: koffi.KoffiFunction;
    setReportToClientForIntentNodeExecutionConfig: koffi.KoffiFunction;
    newSTTNodeExecutionConfig: koffi.KoffiFunction;
    deleteSTTNodeExecutionConfig: koffi.KoffiFunction;
    setReportToClientForSTTNodeExecutionConfig: koffi.KoffiFunction;
    setSTTComponentIdForSTTNodeExecutionConfig: koffi.KoffiFunction;
    getSTTComponentIdForSTTNodeExecutionConfig: koffi.KoffiFunction;
    newTTSNodeExecutionConfig: koffi.KoffiFunction;
    setVoiceForTTSNodeExecutionConfig: koffi.KoffiFunction;
    setReportToClientForTTSNodeExecutionConfig: koffi.KoffiFunction;
    setTTSComponentIdForTTSNodeExecutionConfig: koffi.KoffiFunction;
    getTTSComponentIdForTTSNodeExecutionConfig: koffi.KoffiFunction;
    deleteTTSNodeExecutionConfig: koffi.KoffiFunction;
    newLLMNodeExecutionConfig: koffi.KoffiFunction;
    setTextGenerationConfigForLLMNodeExecutionConfig: koffi.KoffiFunction;
    setLLMComponentIdForLLMNodeExecutionConfig: koffi.KoffiFunction;
    setStreamIdForLLMNodeExecutionConfig: koffi.KoffiFunction;
    setReportToClientForLLMNodeExecutionConfig: koffi.KoffiFunction;
    deleteLLMNodeExecutionConfig: koffi.KoffiFunction;
    newNodeExecutionConfig: koffi.KoffiFunction;
    deleteNodeExecutionConfig: koffi.KoffiFunction;
    setReportToClientForNodeExecutionConfig: koffi.KoffiFunction;
    getReportToClientForNodeExecutionConfig: koffi.KoffiFunction;
};
export declare const ComponentRegistryFunctions: {
    initializeRegistries: koffi.KoffiFunction;
    getInstance: koffi.KoffiFunction;
    isComponentRegistered: koffi.KoffiFunction;
    registerCustomNode: koffi.KoffiFunction;
    unregisterComponent: koffi.KoffiFunction;
    clear: koffi.KoffiFunction;
    createComponentSTTInterface: koffi.KoffiFunction;
    createComponentTTSInterface: koffi.KoffiFunction;
    createComponentTextEmbedderInterfaceLocal: koffi.KoffiFunction;
    createComponentTextEmbedderInterfaceRemote: koffi.KoffiFunction;
    createComponentKnowledgeInterfaceLocal: koffi.KoffiFunction;
    createComponentKnowledgeInterfaceRemote: koffi.KoffiFunction;
    createComponentMCPClientInterface: koffi.KoffiFunction;
    createComponentLLMInterfaceLocal: koffi.KoffiFunction;
    createComponentLLMInterfaceRemote: koffi.KoffiFunction;
    createComponentLLMRouting: koffi.KoffiFunction;
    createComponentSTTInterfaceLocal: koffi.KoffiFunction;
    createComponentSTTInterfaceRemote: koffi.KoffiFunction;
    createComponentTTSInterfaceRemote: koffi.KoffiFunction;
    registerCustomEdgeCondition: koffi.KoffiFunction;
    registerCustomEdgeConditionThreaded: koffi.KoffiFunction;
    registerEdgeConditionCallback: koffi.KoffiFunction;
    registerCallbackNode: koffi.KoffiFunction;
};
export declare const CustomNodeThreadedCreateExecutorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getInputId: koffi.KoffiFunction;
    getInputConfigs: koffi.KoffiFunction;
    getInputExecutionConfig: koffi.KoffiFunction;
    setOutput: koffi.KoffiFunction;
};
export declare const ConfigWrapperDestructorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const CustomConfigWrapperFunctions: {
    size: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    typeId: koffi.KoffiFunction;
    value: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    new: koffi.KoffiFunction;
};
export declare const StatusOrCustomConfigWrapperFunctions: {
    new: koffi.KoffiFunction;
    newFromCustomConfigWrapper: koffi.KoffiFunction;
    newFromStatus: koffi.KoffiFunction;
    ok: koffi.KoffiFunction;
    status: koffi.KoffiFunction;
    value: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const CustomConfigThreadedDeserializeExecutorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getInput: koffi.KoffiFunction;
    setOutput: koffi.KoffiFunction;
};
export declare const CustomConfigThreadedSerializeExecutorFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    getInput: koffi.KoffiFunction;
    setOutput: koffi.KoffiFunction;
};
export declare const ConfigRegistryFunctions: {
    getInstance: koffi.KoffiFunction;
    registerCustomConfig: koffi.KoffiFunction;
    deserializeCustomConfig: koffi.KoffiFunction;
    serializeCustomConfig: koffi.KoffiFunction;
};
export declare const GraphManagerConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setEnableRemoteConfig: koffi.KoffiFunction;
    getEnableRemoteConfig: koffi.KoffiFunction;
    setPollIntervalSeconds: koffi.KoffiFunction;
    getPollIntervalSeconds: koffi.KoffiFunction;
    setAddress: koffi.KoffiFunction;
    getAddress: koffi.KoffiFunction;
    setTargetingKey: koffi.KoffiFunction;
    getTargetingKey: koffi.KoffiFunction;
    setInworldApiKey: koffi.KoffiFunction;
    getInworldApiKey: koffi.KoffiFunction;
    setMode: koffi.KoffiFunction;
    getMode: koffi.KoffiFunction;
    setConfigEnvironmentVariables: koffi.KoffiFunction;
    getConfigEnvironmentVariables: koffi.KoffiFunction;
    Default: koffi.KoffiFunction;
    WithDisabledRemoteConfig: koffi.KoffiFunction;
    WithRemoteConfig5: koffi.KoffiFunction;
    WithRemoteConfig4: koffi.KoffiFunction;
    WithRemoteConfig3: koffi.KoffiFunction;
    WithRemoteConfig2: koffi.KoffiFunction;
};
export declare const GraphExecutorConfigFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    setWorkerStrategy: koffi.KoffiFunction;
    getWorkerStrategy: koffi.KoffiFunction;
    setWorkerCount: koffi.KoffiFunction;
    getWorkerCount: koffi.KoffiFunction;
    setCoreMultiplier: koffi.KoffiFunction;
    getCoreMultiplier: koffi.KoffiFunction;
    setGraphManagerConfig: koffi.KoffiFunction;
    getGraphManagerConfig: koffi.KoffiFunction;
    Default: koffi.KoffiFunction;
    WithFixedWorkers: koffi.KoffiFunction;
    WithSystemCoresF: koffi.KoffiFunction;
    WithSystemCores: koffi.KoffiFunction;
    WithGraphManager: koffi.KoffiFunction;
    WithLocalGraphManager: koffi.KoffiFunction;
};
export declare const HashMapStringToStringFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    size: koffi.KoffiFunction;
    empty: koffi.KoffiFunction;
    clear: koffi.KoffiFunction;
    get: koffi.KoffiFunction;
    set: koffi.KoffiFunction;
    contains: koffi.KoffiFunction;
};
export declare const FFIFunctions: {
    makeDataStream: koffi.KoffiFunction;
    makeDataStreamWithCancellation: koffi.KoffiFunction;
    makeCustomNode: koffi.KoffiFunction;
    getCustomNodeValue: koffi.KoffiFunction;
    registerEdgeConditionCallback: koffi.KoffiFunction;
    registerCallbackNode: koffi.KoffiFunction;
    setConditionCallback: koffi.KoffiFunction;
};
export declare const CreationContextFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const StatusOrCreationContextFunctions: {
    new: koffi.KoffiFunction;
    newWithCreationContext: koffi.KoffiFunction;
    newWithStatus: koffi.KoffiFunction;
    isOK: koffi.KoffiFunction;
    getStatus: koffi.KoffiFunction;
    getValue: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
};
export declare const ComponentStoreFunctions: {
    new: koffi.KoffiFunction;
    newWithString: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    clear: koffi.KoffiFunction;
};
export declare const LLMRoutingHelperFunctions: {
    createLLMRouting: koffi.KoffiFunction;
};
export declare const CancellationContextFunctions: {
    delete: koffi.KoffiFunction;
    isCancelled: koffi.KoffiFunction;
    isValid: koffi.KoffiFunction;
};
export declare const LinearGraphFunctions: {
    new: koffi.KoffiFunction;
    delete: koffi.KoffiFunction;
    addNode: koffi.KoffiFunction;
    getCreationContextHelper: koffi.KoffiFunction;
    addComponentLLMInterface: koffi.KoffiFunction;
    addComponentSTTInterface: koffi.KoffiFunction;
    addComponentTTSInterface: koffi.KoffiFunction;
    addComponentTextEmbedderInterface: koffi.KoffiFunction;
    addComponentKnowledgeInterface: koffi.KoffiFunction;
    addComponentMCPClientInterface: koffi.KoffiFunction;
};
