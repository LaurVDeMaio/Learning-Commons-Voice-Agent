import { ExternalReference } from '../../common/data_types/common';
import { ContentStreamIterator } from '../../common/stream/content';
import { LLMMessageInterface, ToolInterface } from './messages';
import { TextGenerationConfigInterface } from './text_generator';
/**
 * Class for interacting with Language Models (LLMs).
 * Provides functionality to generate text using prompts or message sequences.
 */
export declare class LLM {
    private factory;
    private llm;
    /**
     * Creates a new LLM instance.
     *
     * @param llm - External reference to the native LLM implementation
     * @param factory - External reference to the LLM factory
     * @internal
     */
    constructor(llm: ExternalReference, factory: ExternalReference);
    /**
     * Generates text based on a prompt or message sequence.
     * This method now uses ContentStream to be consistent with other LLM methods.
     *
     * @param props - Configuration for text generation
     * @param props.prompt - Optional text prompt to use for generation
     * @param props.messages - Optional array of message objects for chat-like interactions
     * @param props.config - Configuration parameters for text generation
     * @returns A content stream iterator for the generated content (text + potential tool calls)
     * @throws InworldError if neither prompt nor messages are provided, or generation fails
     */
    generateText(props: {
        prompt?: string;
        messages?: LLMMessageInterface[];
        config: TextGenerationConfigInterface;
    }): Promise<ContentStreamIterator>;
    /**
     * Generates content based on messages with optional tool calling support.
     * This is the advanced API that supports structured content with tool calls.
     *
     * @param props - Configuration for content generation
     * @param props.messages - Array of message objects for chat-like interactions
     * @param props.config - Configuration parameters for text generation
     * @param props.tools - Optional array of tools that the model may call
     * @returns A stream iterator for the generated content (text + tool calls)
     * @throws InworldError if messages are not provided, or generation fails
     */
    generateContent(props: {
        messages: LLMMessageInterface[];
        config: TextGenerationConfigInterface;
        tools?: ToolInterface[];
    }): Promise<ContentStreamIterator>;
    /**
     * Generates content stream based on messages with optional tool calling support.
     * This method returns a content stream that can contain both text and tool calls.
     *
     * @param props - Configuration for content generation
     * @param props.messages - Array of message objects for chat-like interactions
     * @param props.config - Configuration parameters for text generation
     * @param props.tools - Optional array of tools that the model may call
     * @returns A content stream iterator for the generated content (text + tool calls)
     * @throws InworldError if messages are not provided, or generation fails
     */
    generateContentStream(props: {
        messages: LLMMessageInterface[];
        config: TextGenerationConfigInterface;
        tools?: ToolInterface[];
    }): Promise<ContentStreamIterator>;
    /**
     * Returns the external reference to the native LLM implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this LLM.
     */
    destroy(): void;
    /**
     * Builds the generate status object for text generation.
     *
     * @param props - Configuration for text generation
     * @returns Promise resolving to the generate status object
     * @private
     */
    private buildGenerateStatus;
    /**
     * Creates a content stream iterator for the generated content.
     *
     * @param inputStream - External reference to the input stream
     * @param messages - Optional messages object
     * @returns Content stream iterator object
     * @private
     */
    private contentStreamIterator;
}
