import { Device } from '../../core';
/**
 * Interface for configuring remote text embedder.
 * Used for cloud-based text embedding services.
 */
export interface RemoteTextEmbedderConfigInterface {
    /** API key for accessing the remote embedding service */
    apiKey: string;
    /** Model name to use for generating embeddings */
    modelName: string;
    /**
     * Provider name (defaults to DEFAULT_PROVIDER if not specified).
     * @default inworld
     */
    provider?: string;
}
/**
 * Interface for configuring local text embedder.
 * Used for running embedding models locally.
 */
export interface LocalTextEmbedderConfigInterface {
    /** Path to the local embedding model file */
    modelPath: string;
    /** Computation device to use for model execution */
    device?: Device;
}
/**
 * Union type for text embedder configuration options.
 */
export type TextEmbedderConfigInterface = RemoteTextEmbedderConfigInterface | LocalTextEmbedderConfigInterface;
/**
 * Unified configuration interface that matches C++ TextEmbedderCreationConfig.
 * Supports both local and remote embedder configurations.
 */
export interface TextEmbedderCreationConfigInterface {
    /** Type of embedder configuration */
    type: 'local' | 'remote';
    /** Configuration parameters for the embedder */
    config: LocalTextEmbedderConfigInterface | RemoteTextEmbedderConfigInterface;
}
/**
 * Class for configuring remote text embedder settings.
 * Manages parameters for cloud-based embedding services.
 * @internal
 */
export declare class RemoteTextEmbedderConfig {
    private external;
    /**
     * Creates a new RemoteTextEmbedderConfig instance.
     *
     * @param config - Configuration parameters for remote text embedder
     */
    constructor(config: RemoteTextEmbedderConfigInterface);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy(): void;
    /**
     * Converts the configuration to JSON format.
     *
     * @returns JSON representation of the configuration
     */
    toJSON(): {
        provider: string;
        model_name: string;
        api_key: string;
    };
}
/**
 * Class for configuring local text embedder settings.
 * Manages parameters for locally running embedding models.
 * @internal
 */
export declare class LocalTextEmbedderConfig {
    private external;
    /**
     * Creates a new LocalTextEmbedderConfig instance.
     *
     * @param config - Configuration parameters for local text embedder
     */
    constructor(config: LocalTextEmbedderConfigInterface);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy(): void;
    /**
     * Converts the configuration to JSON format.
     *
     * @returns JSON representation of the configuration
     */
    toJSON(): {
        model_path: string;
        device: any;
    };
}
/**
 * Class for configuring text embedder creation settings.
 * Manages the variant type that can hold either local or remote config.
 * @internal
 */
export declare class TextEmbedderCreationConfig {
    private external;
    /**
     * Creates a new TextEmbedderCreationConfig instance.
     *
     * @param config - Configuration parameters for text embedder creation
     */
    constructor(config: TextEmbedderCreationConfigInterface | LocalTextEmbedderConfig | RemoteTextEmbedderConfig);
    /**
     * Returns the external reference to the native config implementation.
     *
     * @returns External reference object
     */
    getExternal(): any;
    /**
     * Cleans up resources associated with this configuration.
     */
    destroy(): void;
    /**
     * Checks if the configuration has a local config.
     *
     * @returns True if local config is set
     */
    hasLocalConfig(): boolean;
    /**
     * Checks if the configuration has a remote config.
     *
     * @returns True if remote config is set
     */
    hasRemoteConfig(): boolean;
}
/**
 * Utility functions for configuration validation and conversion.
 */
export declare class TextEmbedderConfigUtils {
    /**
     * Validates a text embedder configuration.
     * Ensures all required fields are present.
     *
     * @param config - Configuration to validate
     * @throws Error if configuration is invalid
     */
    static validateConfig(config: TextEmbedderCreationConfigInterface): void;
    /**
     * Converts a configuration to JSON format.
     *
     * @param config - Configuration to convert
     * @returns JSON representation
     */
    static toJSON(config: TextEmbedderCreationConfigInterface): any;
    /**
     * Creates a configuration from JSON format.
     *
     * @param json - JSON representation of configuration
     * @returns Configuration object
     * @throws Error if JSON is invalid
     */
    static fromJSON(json: any): TextEmbedderCreationConfigInterface;
    /**
     * Creates a Device instance from JSON representation.
     * This is a simplified implementation - in practice, you'd need to
     * create the device through the DeviceRegistry.
     *
     * @param deviceJson - JSON representation of device
     * @returns Device instance
     * @private
     */
    private static createDeviceFromJSON;
}
