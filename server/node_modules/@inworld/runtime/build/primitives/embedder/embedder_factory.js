"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextEmbedderFactory = void 0;
const inworld_1 = require("../../common/error/inworld");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const embedder_1 = require("./embedder");
/**
 * Factory class for creating TextEmbedder instances.
 * Provides methods to create local or remote text embedders.
 */
class TextEmbedderFactory {
    /**
     * Creates a text embedder using the specified configuration.
     * This is the main factory method that matches the C++ implementation.
     *
     * @param {TextEmbedderCreationConfigInterface} config - Unified configuration for the embedder (local or remote)
     * @returns {Promise<TextEmbedder>} Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     */
    static async createTextEmbedder(config) {
        // Validate configuration
        config_1.TextEmbedderConfigUtils.validateConfig(config);
        let embedderConfig = null;
        let embedder = null;
        try {
            // Create the appropriate config object
            if (config.type === 'local') {
                embedderConfig = new config_1.LocalTextEmbedderConfig(config.config);
            }
            else {
                embedderConfig = new config_1.RemoteTextEmbedderConfig(config.config);
            }
            embedder = await this.create(embedderConfig);
        }
        finally {
            embedderConfig === null || embedderConfig === void 0 ? void 0 : embedderConfig.destroy();
        }
        return embedder;
    }
    /**
     * Creates a local text embedder using the specified configuration.
     * Convenience method for backward compatibility.
     *
     * @param {LocalTextEmbedderConfigInterface} config - Configuration for local text embedder
     * @returns {Promise<TextEmbedder>} Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     */
    static async createLocal(config) {
        return this.createTextEmbedder({
            type: 'local',
            config,
        });
    }
    /**
     * Creates a remote text embedder using the specified configuration.
     * Convenience method for backward compatibility.
     *
     * @param {RemoteTextEmbedderConfigInterface} config - Configuration for remote text embedder
     * @returns {Promise<TextEmbedder>} Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     */
    static async createRemote(config) {
        return this.createTextEmbedder({
            type: 'remote',
            config,
        });
    }
    /**
     * Internal method to create a TextEmbedder instance from configuration.
     *
     * @param {LocalTextEmbedderConfig | RemoteTextEmbedderConfig} config - Text embedder configuration (local or remote)
     * @returns {Promise<TextEmbedder>} Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     * @private
     */
    static async create(config) {
        let factory;
        let embedder = null;
        let statusOrEmbedder;
        let creationConfig = null;
        try {
            factory = expose_binary_1.TextEmbedderFactoryFunctions.new();
            // Create TextEmbedderCreationConfig directly from the existing config
            creationConfig = new config_1.TextEmbedderCreationConfig(config);
            statusOrEmbedder = await expose_binary_1.TextEmbedderInterfaceFunctions.create(factory, creationConfig.getExternal());
            if (!expose_binary_1.TextEmbedderInterfaceFunctions.isOK(statusOrEmbedder)) {
                throw new inworld_1.InworldError('Failed to create text embedder', (0, helpers_1.getStatus)(statusOrEmbedder));
            }
            const embedderRef = expose_binary_1.TextEmbedderInterfaceFunctions.get(statusOrEmbedder);
            embedder = new embedder_1.TextEmbedder(embedderRef, factory);
        }
        catch (error) {
            if (factory) {
                expose_binary_1.TextEmbedderFactoryFunctions.delete(factory);
            }
            throw error;
        }
        finally {
            if (statusOrEmbedder) {
                expose_binary_1.TextEmbedderInterfaceFunctions.deleteStatusOrInterface(statusOrEmbedder);
            }
            if (creationConfig) {
                creationConfig.destroy();
            }
        }
        return embedder;
    }
}
exports.TextEmbedderFactory = TextEmbedderFactory;
