import { LocalTextEmbedderConfigInterface, RemoteTextEmbedderConfigInterface, TextEmbedderCreationConfigInterface } from './config';
import { TextEmbedder } from './embedder';
/**
 * Factory class for creating TextEmbedder instances.
 * Provides methods to create local or remote text embedders.
 */
export declare class TextEmbedderFactory {
    /**
     * Creates a text embedder using the specified configuration.
     * This is the main factory method that matches the C++ implementation.
     *
     * @param {TextEmbedderCreationConfigInterface} config - Unified configuration for the embedder (local or remote)
     * @returns {Promise<TextEmbedder>} Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     */
    static createTextEmbedder(config: TextEmbedderCreationConfigInterface): Promise<TextEmbedder>;
    /**
     * Creates a local text embedder using the specified configuration.
     * Convenience method for backward compatibility.
     *
     * @param {LocalTextEmbedderConfigInterface} config - Configuration for local text embedder
     * @returns {Promise<TextEmbedder>} Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     */
    static createLocal(config: LocalTextEmbedderConfigInterface): Promise<TextEmbedder>;
    /**
     * Creates a remote text embedder using the specified configuration.
     * Convenience method for backward compatibility.
     *
     * @param {RemoteTextEmbedderConfigInterface} config - Configuration for remote text embedder
     * @returns {Promise<TextEmbedder>} Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     */
    static createRemote(config: RemoteTextEmbedderConfigInterface): Promise<TextEmbedder>;
    /**
     * Internal method to create a TextEmbedder instance from configuration.
     *
     * @param {LocalTextEmbedderConfig | RemoteTextEmbedderConfig} config - Text embedder configuration (local or remote)
     * @returns {Promise<TextEmbedder>} Promise resolving to a new TextEmbedder instance
     * @throws InworldError if creation fails
     * @private
     */
    private static create;
}
