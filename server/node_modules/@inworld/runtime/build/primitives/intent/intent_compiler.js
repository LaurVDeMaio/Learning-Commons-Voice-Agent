"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentCompiler = void 0;
const inworld_1 = require("../../common/error/inworld");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const compiled_intent_1 = require("./compiled_intent");
const intent_1 = require("./intent");
/**
 * Class for compiling intents into an optimized form for matching.
 * Provides functionality to transform raw intents into compiled intents
 * that include embeddings and normalized text.
 * @internal
 */
class IntentCompiler {
    /**
     * Creates a new IntentCompiler instance.
     *
     * @param compiler - External reference to the native intent compiler implementation
     * @internal
     */
    constructor(compiler) {
        this.intents = [];
        this.compiler = compiler;
    }
    /**
     * Compiles a list of intents into their optimized form for intent matching.
     * The compiled intents include embeddings and normalized phrases for more effective matching.
     *
     * @param intents - Array of intents to compile
     * @returns Promise resolving to an array of compiled intents
     * @throws InworldError if compilation fails
     */
    async compileIntents(intents) {
        let vectorIntents = null;
        let statusCompiledIntents = null;
        let compiledIntentsRef = null;
        let compiledIntents = null;
        try {
            // Create vector of intents
            vectorIntents = expose_binary_1.VectorIntentFunctions.new();
            // Add all intents to the vector
            for (const intent of intents) {
                const intentObject = new intent_1.Intent(intent);
                this.intents.push(intentObject);
                expose_binary_1.VectorIntentFunctions.pushBack(vectorIntents, intentObject.getExternal());
            }
            // Compile the intents
            statusCompiledIntents =
                await expose_binary_1.IntentCompilerInterfaceFunctions.compileIntents(this.compiler, vectorIntents);
            if (!expose_binary_1.StatusOrVectorCompiledIntentFunctions.isOK(statusCompiledIntents)) {
                throw new inworld_1.InworldError('Failed to compile intents', (0, helpers_1.getStatus)(statusCompiledIntents));
            }
            compiledIntentsRef = expose_binary_1.StatusOrVectorCompiledIntentFunctions.getValue(statusCompiledIntents);
            const vectorCompiledIntents = new compiled_intent_1.VectorCompiledIntents(compiledIntentsRef);
            compiledIntents = compiled_intent_1.VectorCompiledIntents.toCompiledIntentsArray(vectorCompiledIntents);
            vectorCompiledIntents.destroy();
        }
        finally {
            if (vectorIntents) {
                expose_binary_1.VectorIntentFunctions.delete(vectorIntents);
            }
            if (statusCompiledIntents) {
                expose_binary_1.StatusOrVectorCompiledIntentFunctions.delete(statusCompiledIntents);
            }
        }
        return compiledIntents;
    }
    /**
     * Returns the external reference to the native compiler implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal() {
        return this.compiler;
    }
    /**
     * Cleans up resources associated with this intent compiler.
     */
    destroy() {
        var _a;
        if (this.compiler) {
            expose_binary_1.IntentCompilerInterfaceFunctions.delete(this.compiler);
            this.compiler = null;
        }
        if ((_a = this.intents) === null || _a === void 0 ? void 0 : _a.length) {
            for (const intent of this.intents) {
                intent.destroy();
            }
        }
    }
}
exports.IntentCompiler = IntentCompiler;
