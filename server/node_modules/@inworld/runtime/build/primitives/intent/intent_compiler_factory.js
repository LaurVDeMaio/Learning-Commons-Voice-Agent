"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentCompilerFactory = void 0;
const inworld_1 = require("../../common/error/inworld");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const intent_compiler_1 = require("./intent_compiler");
/**
 * Factory class for creating IntentCompiler instances.
 * Provides methods to create intent compilers with or without text embedder support.
 */
class IntentCompilerFactory {
    /**
     * Creates an intent compiler with text embedder support for enhanced intent compilation.
     * This version can generate embeddings for intents to enable embedding-based matching.
     *
     * @param textEmbedder - Optional text embedder to use for generating embeddings
     * @returns Promise resolving to a new IntentCompiler instance
     * @throws InworldError if creation fails
     */
    static async create(textEmbedder) {
        let status;
        let compiler = null;
        let factory;
        try {
            factory = expose_binary_1.IntentCompilerFactoryFunctions.new();
            if (textEmbedder) {
                status = await expose_binary_1.IntentCompilerFactoryFunctions.createWithTextEmbedder(factory, textEmbedder.getExternal());
            }
            else {
                status = await expose_binary_1.IntentCompilerFactoryFunctions.create(factory);
            }
            if (!expose_binary_1.StatusOrIntentCompilerInterfaceFunctions.isOK(status)) {
                throw new inworld_1.InworldError('Failed to create IntentCompiler', (0, helpers_1.getStatus)(status));
            }
            compiler = new intent_compiler_1.IntentCompiler(expose_binary_1.StatusOrIntentCompilerInterfaceFunctions.getValue(status));
        }
        finally {
            if (status) {
                expose_binary_1.StatusOrIntentCompilerInterfaceFunctions.delete(status);
            }
            if (factory) {
                expose_binary_1.IntentCompilerFactoryFunctions.delete(factory);
            }
        }
        return compiler;
    }
}
exports.IntentCompilerFactory = IntentCompilerFactory;
