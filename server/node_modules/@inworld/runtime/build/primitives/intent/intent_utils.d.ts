import { TextEmbedder } from '../embedder';
import { LLM } from '../llm';
import { CompiledIntent } from './compiled_intent';
import { IntentInterface } from './intent';
import { IntentMatcher } from './intent_matcher';
/**
 * Utility class for intent operations.
 * Provides helper methods for creating intent compilers and matchers with default configurations.
 */
export declare class IntentUtils {
    /**
     * Creates an intent compiler and compiles the provided intents.
     *
     * @param intents - Array of intents to compile
     * @param embedder - Optional text embedder for generating embeddings
     * @returns Promise resolving to compiled intents
     * @throws InworldError if compilation fails
     */
    static compileIntents(intents: IntentInterface[], embedder?: TextEmbedder): Promise<CompiledIntent[]>;
    /**
     * Creates an intent matcher with the specified embedder and compiled intents.
     * Uses default embedding configuration.
     *
     * @param embedder - Text embedder for embedding-based matching
     * @param compiledIntents - Compiled intents to match against
     * @param config - Optional custom configuration (uses default if not provided)
     * @returns Promise resolving to an intent matcher
     * @throws InworldError if creation fails
     */
    static createIntentMatcherWithEmbedder(embedder: TextEmbedder, compiledIntents: CompiledIntent[], config?: any): Promise<IntentMatcher>;
    /**
     * Creates an intent matcher with the specified LLM and compiled intents.
     * Uses default LLM configuration.
     *
     * @param llm - LLM for LLM-based matching
     * @param compiledIntents - Compiled intents to match against
     * @param config - Optional custom configuration (uses default if not provided)
     * @returns Promise resolving to an intent matcher
     * @throws InworldError if creation fails
     */
    static createIntentMatcherWithLLM(llm: LLM, compiledIntents: CompiledIntent[], config?: any): Promise<IntentMatcher>;
    /**
     * Creates an intent matcher with both embedder and LLM for compound matching.
     * Uses default compound configuration.
     *
     * @param embedder - Text embedder for embedding-based matching
     * @param llm - LLM for LLM-based matching
     * @param compiledIntents - Compiled intents to match against
     * @param config - Optional custom configuration (uses default if not provided)
     * @returns Promise resolving to an intent matcher
     * @throws InworldError if creation fails
     */
    static createIntentMatcherWithEmbedderAndLLM(embedder: TextEmbedder, llm: LLM, compiledIntents: CompiledIntent[], config?: any): Promise<IntentMatcher>;
    /**
     * Creates a complete intent matching pipeline.
     * Compiles intents and creates a matcher in one operation.
     *
     * @param intents - Intents to compile and match against
     * @param embedder - Optional text embedder
     * @param llm - Optional LLM
     * @param config - Optional custom configuration
     * @returns Promise resolving to an intent matcher
     * @throws InworldError if creation fails
     */
    static createIntentMatcherPipeline(intents: IntentInterface[], embedder?: TextEmbedder, llm?: LLM, config?: any): Promise<IntentMatcher>;
}
