"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteTTSConfig = exports.SpeechSynthesisConfig = exports.SpeechSynthesisPostprocessingConfig = exports.SpeechSynthesisInferenceConfig = void 0;
const expose_binary_1 = require("../../expose_binary");
/**
 * @internal
 */
class SpeechSynthesisInferenceConfig {
    constructor(config) {
        this.external = null;
        this.external = expose_binary_1.SpeechSynthesisInferenceConfigFunctions.new();
        if ((config === null || config === void 0 ? void 0 : config.temperature) != undefined) {
            expose_binary_1.SpeechSynthesisInferenceConfigFunctions.setTemperature(this.external, config.temperature);
        }
        if ((config === null || config === void 0 ? void 0 : config.pitch) != undefined) {
            expose_binary_1.SpeechSynthesisInferenceConfigFunctions.setPitch(this.external, config.pitch);
        }
        if ((config === null || config === void 0 ? void 0 : config.speaking_rate) != undefined) {
            expose_binary_1.SpeechSynthesisInferenceConfigFunctions.setSpeakingRate(this.external, config.speaking_rate);
        }
    }
    getExternal() {
        return this.external;
    }
    destroy() {
        if (this.external) {
            expose_binary_1.SpeechSynthesisInferenceConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
    static getDefault() {
        // default values for speech synthesis inference config
        return {
            temperature: 0.8,
            pitch: 0,
            speaking_rate: 1.0,
        };
    }
}
exports.SpeechSynthesisInferenceConfig = SpeechSynthesisInferenceConfig;
/**
 * @internal
 */
class SpeechSynthesisPostprocessingConfig {
    constructor(config) {
        this.external = null;
        this.external = expose_binary_1.SpeechSynthesisPostprocessingConfigFunctions.new();
        if ((config === null || config === void 0 ? void 0 : config.sample_rate) != undefined) {
            expose_binary_1.SpeechSynthesisPostprocessingConfigFunctions.setSampleRate(this.external, config.sample_rate);
        }
    }
    getExternal() {
        return this.external;
    }
    destroy() {
        if (this.external) {
            expose_binary_1.SpeechSynthesisPostprocessingConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
    static getDefault() {
        return {
            sample_rate: 48000,
        };
    }
}
exports.SpeechSynthesisPostprocessingConfig = SpeechSynthesisPostprocessingConfig;
/**
 * Class for configuring speech synthesis settings.
 */
class SpeechSynthesisConfig {
    /**
     * Creates a new SpeechSynthesisConfig instance.
     *
     * @param config - Configuration options for speech synthesis
     * @internal
     */
    constructor(config) {
        this.external = null;
        this.postprocessingConfig = null;
        this.inferenceConfig = null;
        this.external = expose_binary_1.SpeechSynthesisConfigFunctions.new();
        // Default to inworld if no type specified
        const configType = (config === null || config === void 0 ? void 0 : config.type) || 'inworld';
        if (configType === 'inworld') {
            // Handle both new interface structure and legacy structure for backward compatibility
            const inworldConfig = (config === null || config === void 0 ? void 0 : config.config) || config;
            if (inworldConfig === null || inworldConfig === void 0 ? void 0 : inworldConfig.model_id) {
                expose_binary_1.InworldSpeechSynthesisConfigFunctions.setModelId(this.getInworldConfig(), inworldConfig.model_id);
            }
            if (inworldConfig === null || inworldConfig === void 0 ? void 0 : inworldConfig.postprocessing) {
                this.postprocessingConfig = new SpeechSynthesisPostprocessingConfig(inworldConfig.postprocessing);
                expose_binary_1.InworldSpeechSynthesisConfigFunctions.setPostprocessing(this.getInworldConfig(), this.postprocessingConfig.getExternal());
            }
            if (inworldConfig === null || inworldConfig === void 0 ? void 0 : inworldConfig.inference) {
                this.inferenceConfig = new SpeechSynthesisInferenceConfig(inworldConfig.inference);
                expose_binary_1.InworldSpeechSynthesisConfigFunctions.setInference(this.getInworldConfig(), this.inferenceConfig.getExternal());
            }
        }
        else if (configType === 'elevenlabs') {
            // TODO: Implement ElevenLabs configuration when bindings are available
            throw new Error('ElevenLabs TTS configuration is not yet supported in Node.js bindings');
        }
    }
    getInworldConfig() {
        return expose_binary_1.SpeechSynthesisConfigFunctions.getInworldConfig(this.external);
    }
    /**
     * Returns the external reference to the speech synthesis configuration.
     * @returns External reference to the speech synthesis configuration
     * @internal
     */
    getExternal() {
        return this.external;
    }
    /**
     * Destroys the speech synthesis configuration.
     * @internal
     */
    destroy() {
        if (this.postprocessingConfig) {
            this.postprocessingConfig.destroy();
            this.postprocessingConfig = null;
        }
        if (this.inferenceConfig) {
            this.inferenceConfig.destroy();
            this.inferenceConfig = null;
        }
        if (this.external) {
            expose_binary_1.SpeechSynthesisConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
    /**
     * Returns the default speech synthesis configuration.
     * @returns Default speech synthesis configuration
     */
    static getDefault() {
        return {
            type: 'inworld',
            config: {
                model_id: 'inworld-tts-1',
                postprocessing: SpeechSynthesisPostprocessingConfig.getDefault(),
                inference: SpeechSynthesisInferenceConfig.getDefault(),
            },
        };
    }
}
exports.SpeechSynthesisConfig = SpeechSynthesisConfig;
/**
 * @internal
 */
class RemoteTTSConfig {
    constructor(config) {
        this.synthesisConfig = null;
        this.external = expose_binary_1.RemoteTTSConfigFunctions.new();
        if (config.apiKey) {
            expose_binary_1.RemoteTTSConfigFunctions.setApiKey(this.getExternal(), config.apiKey);
        }
        if (config.synthesisConfig) {
            this.synthesisConfig = new SpeechSynthesisConfig(config.synthesisConfig);
            expose_binary_1.RemoteTTSConfigFunctions.setSynthesisConfig(this.getExternal(), this.synthesisConfig.getExternal());
        }
    }
    getExternal() {
        return this.external;
    }
    destroy() {
        var _a;
        (_a = this.synthesisConfig) === null || _a === void 0 ? void 0 : _a.destroy();
        this.synthesisConfig = null;
        if (this.external) {
            expose_binary_1.RemoteTTSConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.RemoteTTSConfig = RemoteTTSConfig;
