"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TTSFactory = void 0;
const inworld_1 = require("../../common/error/inworld");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const tts_1 = require("./tts");
/**
 * Factory class for creating TTS (Text-to-Speech) instances.
 * Provides methods to create remote speech synthesis models.
 */
class TTSFactory {
    /**
     * Creates a remote TTS instance.
     *
     * @param config - Configuration for the remote TTS
     * @returns Promise resolving to a new TTS instance
     */
    static async createRemote(config) {
        let ttsConfig = null;
        let tts = null;
        try {
            ttsConfig = new config_1.RemoteTTSConfig(config);
            tts = await this.create(ttsConfig);
        }
        finally {
            ttsConfig === null || ttsConfig === void 0 ? void 0 : ttsConfig.destroy();
        }
        return tts;
    }
    /**
     * Internal method to create a TTS instance from a config.
     *
     * @param config - TTS configuration (remote only)
     * @returns Promise resolving to a new TTS instance
     * @throws InworldError if TTS creation fails
     * @private
     */
    static async create(config) {
        let status;
        let tts;
        let factory;
        try {
            factory = expose_binary_1.TTSFactoryFunctions.new();
            status = await expose_binary_1.TTSFactoryFunctions.createTTS(factory, config.getExternal());
            if (!expose_binary_1.TTSInterfaceStatusFunctions.isOK(status)) {
                throw new inworld_1.InworldError('Failed to create TTS', (0, helpers_1.getStatus)(status));
            }
            tts = new tts_1.TTS(expose_binary_1.TTSInterfaceStatusFunctions.getValue(status));
        }
        finally {
            if (status) {
                expose_binary_1.TTSInterfaceStatusFunctions.delete(status);
            }
            if (factory) {
                expose_binary_1.TTSFactoryFunctions.delete(factory);
            }
        }
        return tts;
    }
}
exports.TTSFactory = TTSFactory;
