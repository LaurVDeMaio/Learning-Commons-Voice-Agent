"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBinaryPath = exports.isSupportedPlatform = exports.getPlatform = exports.SUPPORTED_NODE_ADDON_PLATFORMS = exports.SUPPORTED_PLATFORMS = void 0;
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const inworld_1 = require("./error/inworld");
exports.SUPPORTED_PLATFORMS = {
    linux_x64: path.join('linux_x64', 'libinworld.so'),
    win32_x64: path.join('win32_x64', 'inworld.dll'),
    darwin_arm64: path.join('darwin_arm64', 'libinworld.dylib'),
};
exports.SUPPORTED_NODE_ADDON_PLATFORMS = {
    linux_x64: path.join('linux_x64', 'libinworld.node'),
    win32_x64: path.join('win32_x64', 'inworld.node'),
    darwin_arm64: path.join('darwin_arm64', 'libinworld.node'),
};
/**
 * Gets the platform and architecture of the current system.
 *
 * @returns Object containing the platform and architecture
 * @internal
 */
const getPlatform = () => {
    return { platform: os.platform(), arch: os.arch() };
};
exports.getPlatform = getPlatform;
/**
 * Checks if the current platform is supported.
 *
 * @returns True if the platform is supported, false otherwise
 * @internal
 */
const isSupportedPlatform = ({ platform, arch, nodeAddon, }) => {
    if (nodeAddon) {
        return (exports.SUPPORTED_NODE_ADDON_PLATFORMS[`${platform}_${arch}`] !== undefined);
    }
    return (exports.SUPPORTED_PLATFORMS[`${platform}_${arch}`] !== undefined);
};
exports.isSupportedPlatform = isSupportedPlatform;
const firstExisting = (paths) => paths.find((p) => fs.existsSync(p));
/**
 * Gets the path to the binary for the current platform.
 *
 * @returns The path to the binary
 * @internal
 */
const getBinaryPath = (baseDir, nodeAddon) => {
    const { platform, arch } = (0, exports.getPlatform)(); // 'win32' | 'linux' | 'darwin', 'x64' | 'arm64'
    const dir = path.join(baseDir, `${platform}_${arch}`);
    // Build candidate list by type
    const candidates = nodeAddon
        ? [
            // new layout
            path.join(dir, 'node', 'inworld.node'),
            // legacy layout
            path.join(dir, 'inworld.node'),
            // temporary tolerance for mac/linux legacy naming
            path.join(dir, 'libinworld.node'),
        ]
        : [
            // new layout
            ...(platform === 'win32'
                ? [path.join(dir, 'lib', 'inworld.dll')]
                : platform === 'linux'
                    ? [path.join(dir, 'lib', 'libinworld.so')]
                    : platform === 'darwin'
                        ? [path.join(dir, 'lib', 'libinworld.dylib')]
                        : []),
            // legacy layout
            ...(platform === 'win32'
                ? [path.join(dir, 'inworld.dll')]
                : platform === 'linux'
                    ? [path.join(dir, 'libinworld.so')]
                    : platform === 'darwin'
                        ? [path.join(dir, 'libinworld.dylib')]
                        : []),
        ];
    const found = firstExisting(candidates);
    if (!found) {
        throw new inworld_1.InworldError(`Binary not found for ${platform} ${arch}. Looked in:\n` +
            candidates.map((c) => `  - ${c}`).join('\n'));
    }
    return found;
};
exports.getBinaryPath = getBinaryPath;
