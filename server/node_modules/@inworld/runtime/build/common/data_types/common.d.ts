/**
 * Represents a reference to a native/external object.
 * Used to interface with the underlying C++ implementation.
 * @internal
 */
export type ExternalReference = any;
/**
 * Interface representing audio data with sample rate.
 */
export interface AudioChunkInterface {
    /** Raw audio data as Float32Array or number array */
    data: number[];
    /** Audio sample rate in Hz */
    sampleRate: number;
}
/**
 * Interface for configuring knowledge retrieval behavior.
 */
export interface RetrievalConfigInterface {
    /** Similarity threshold for retrieval (0-1, higher is more strict) */
    threshold?: number;
    /** Maximum number of knowledge records to return */
    topK?: number;
}
/**
 * Interface representing TTS output data.
 */
export interface TTSOutputInterface {
    /** Text content of the TTS output */
    text: string;
    /** Audio data of the TTS output */
    audio: AudioChunkInterface;
    /** Phonemes of the TTS output */
    phonemes: string[];
    /** Timestamps of the TTS output */
    timestamps: number[];
}
/**
 * Interface representing the result of a TextStream iteration.
 */
export interface TextStreamIterationResult {
    /** The generated text */
    text?: string;
    /** Indicates if the stream is finished */
    done: boolean;
}
/**
 * Interface for transforming text in a TextStream.
 * @internal
 */
export interface TextStreamIterationToTextResponseInterface {
    /** Transform function for text */
    transform: (text: string) => Promise<string> | string;
    /** Filter function for text */
    filter?: (text: string) => boolean;
}
/**
 * Interface representing the result of a TTSOutputStream iteration.
 */
export interface TTSOutputStreamIterationResult {
    /** The generated audio */
    audio?: AudioChunkInterface;
    /** Initial text */
    text?: string;
    /** Indicates if the stream is finished */
    done: boolean;
}
/**
 * Streaming interface for Text-to-Speech (TTS) output from graph nodes.
 *
 * Provides asynchronous streaming for synthesized speech data with audio and metadata.
 */
export interface TTSOutputStreamIterator {
    /**
     * Returns external reference to the native stream implementation.
     * @returns External reference to the native stream implementation
     * @internal
     */
    getStream?: () => ExternalReference;
    /**
     * Asynchronously reads the next TTS output chunk from the stream.
     * @returns Promise resolving to a result object with TTS output content or done flag
     */
    next: () => Promise<TTSOutputStreamIterationResult>;
}
