"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphTypesTypeGuards = void 0;
exports.getTypeName = getTypeName;
const export_1 = require("../export");
const stream_1 = require("../stream");
const classification_result_1 = require("./api/classification_result");
const content_1 = require("./api/content");
const goal_advancement_1 = require("./api/goal_advancement");
const knowledge_records_1 = require("./api/knowledge_records");
const list_tools_response_1 = require("./api/list_tools_response");
const llm_chat_request_1 = require("./api/llm_chat_request");
const matched_intents_1 = require("./api/matched_intents");
const matched_keywords_1 = require("./api/matched_keywords");
const memory_state_1 = require("./api/memory_state");
const tool_call_response_1 = require("./api/tool_call_response");
const tts_request_1 = require("./api/tts_request");
/**
 * Represents a custom-typed pointer to any structure.
 * This is a virtual TypeScript type that provides type safety without runtime overhead.
 * At runtime, this will just be the raw object, but TypeScript will understand the structure.
 *
 * @template T - The TypeScript type of the data structure
 *
 * @example
 * ```typescript
 * function process(input: Custom<{internalFields: string}>) {
 *   // TypeScript understands the structure
 *   console.log(input.internalFields);
 * }
 * ```
 */
/**
 * Type guards for CustomNodeInputTypes to enable easy type checking and switch-case patterns.
 * These functions help distinguish between different types in graph output streams.
 */
var GraphTypesTypeGuards;
(function (GraphTypesTypeGuards) {
    function isString(value) {
        return typeof value === 'string';
    }
    GraphTypesTypeGuards.isString = isString;
    function isCustom(value) {
        return typeof value === 'object' && value !== null && !hasKnownType(value);
    }
    GraphTypesTypeGuards.isCustom = isCustom;
    function isClassificationResult(value) {
        return value instanceof classification_result_1.ClassificationResult;
    }
    GraphTypesTypeGuards.isClassificationResult = isClassificationResult;
    function isContent(value) {
        return value instanceof content_1.Content;
    }
    GraphTypesTypeGuards.isContent = isContent;
    function isGoalAdvancement(value) {
        return value instanceof goal_advancement_1.GoalAdvancement;
    }
    GraphTypesTypeGuards.isGoalAdvancement = isGoalAdvancement;
    function isKnowledgeRecords(value) {
        return value instanceof knowledge_records_1.KnowledgeRecords;
    }
    GraphTypesTypeGuards.isKnowledgeRecords = isKnowledgeRecords;
    function isListToolsResponse(value) {
        return value instanceof list_tools_response_1.ListToolsResponse;
    }
    GraphTypesTypeGuards.isListToolsResponse = isListToolsResponse;
    function isLLMChatRequest(value) {
        return value instanceof llm_chat_request_1.LLMChatRequest;
    }
    GraphTypesTypeGuards.isLLMChatRequest = isLLMChatRequest;
    function isTTSRequest(value) {
        return value instanceof tts_request_1.TTSRequest;
    }
    GraphTypesTypeGuards.isTTSRequest = isTTSRequest;
    function isMatchedIntents(value) {
        return value instanceof matched_intents_1.MatchedIntents;
    }
    GraphTypesTypeGuards.isMatchedIntents = isMatchedIntents;
    function isMatchedKeywords(value) {
        return value instanceof matched_keywords_1.MatchedKeywords;
    }
    GraphTypesTypeGuards.isMatchedKeywords = isMatchedKeywords;
    function isMemoryState(value) {
        return value instanceof memory_state_1.MemoryState;
    }
    GraphTypesTypeGuards.isMemoryState = isMemoryState;
    function isToolCallResponse(value) {
        return value instanceof tool_call_response_1.ToolCallResponse;
    }
    GraphTypesTypeGuards.isToolCallResponse = isToolCallResponse;
    function isTextStream(value) {
        return value instanceof stream_1.TextStream;
    }
    GraphTypesTypeGuards.isTextStream = isTextStream;
    function isContentStream(value) {
        return value instanceof stream_1.ContentStream;
    }
    GraphTypesTypeGuards.isContentStream = isContentStream;
    function isTTSOutputStream(value) {
        return value instanceof stream_1.TTSOutputStream;
    }
    GraphTypesTypeGuards.isTTSOutputStream = isTTSOutputStream;
    function isSpeechChunkStream(value) {
        return value instanceof stream_1.SpeechChunkStream;
    }
    GraphTypesTypeGuards.isSpeechChunkStream = isSpeechChunkStream;
    /**
     * Helper function to check if a value is one of the known typed classes
     * @internal
     */
    function hasKnownType(value) {
        return (value instanceof classification_result_1.ClassificationResult ||
            value instanceof content_1.Content ||
            value instanceof goal_advancement_1.GoalAdvancement ||
            value instanceof knowledge_records_1.KnowledgeRecords ||
            value instanceof list_tools_response_1.ListToolsResponse ||
            value instanceof llm_chat_request_1.LLMChatRequest ||
            value instanceof tts_request_1.TTSRequest ||
            value instanceof matched_intents_1.MatchedIntents ||
            value instanceof matched_keywords_1.MatchedKeywords ||
            value instanceof memory_state_1.MemoryState ||
            value instanceof tool_call_response_1.ToolCallResponse ||
            value instanceof stream_1.TextStream ||
            value instanceof stream_1.ContentStream ||
            value instanceof stream_1.TTSOutputStream ||
            value instanceof stream_1.SpeechChunkStream);
    }
})(GraphTypesTypeGuards || (exports.GraphTypesTypeGuards = GraphTypesTypeGuards = {}));
/**
 * Helper function to get a human-readable type name for CustomNodeInputTypes
 */
function getTypeName(value) {
    if (GraphTypesTypeGuards.isString(value))
        return 'string';
    if (GraphTypesTypeGuards.isClassificationResult(value))
        return 'ClassificationResult';
    if (GraphTypesTypeGuards.isContent(value))
        return 'Content';
    if (GraphTypesTypeGuards.isGoalAdvancement(value))
        return 'GoalAdvancement';
    if (GraphTypesTypeGuards.isKnowledgeRecords(value))
        return 'KnowledgeRecords';
    if (GraphTypesTypeGuards.isListToolsResponse(value))
        return 'ListToolsResponse';
    if (GraphTypesTypeGuards.isLLMChatRequest(value))
        return 'LLMChatRequest';
    if (GraphTypesTypeGuards.isTTSRequest(value))
        return 'TTSRequest';
    if (GraphTypesTypeGuards.isMatchedIntents(value))
        return 'MatchedIntents';
    if (GraphTypesTypeGuards.isMatchedKeywords(value))
        return 'MatchedKeywords';
    if (GraphTypesTypeGuards.isMemoryState(value))
        return 'MemoryState';
    if (GraphTypesTypeGuards.isToolCallResponse(value))
        return 'ToolCallResponse';
    if (GraphTypesTypeGuards.isTextStream(value))
        return 'TextStream';
    if (GraphTypesTypeGuards.isContentStream(value))
        return 'ContentStream';
    if (GraphTypesTypeGuards.isTTSOutputStream(value))
        return 'TTSOutputStream';
    if (GraphTypesTypeGuards.isSpeechChunkStream(value))
        return 'SpeechChunkStream';
    if (GraphTypesTypeGuards.isCustom(value))
        return 'Custom';
    else {
        throw new export_1.InworldError(`Unknown type: ${value}`);
    }
}
