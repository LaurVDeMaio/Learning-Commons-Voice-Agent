import { ContentStream, SpeechChunkStream, TextStream, TTSOutputStream } from '../stream';
import { GraphTypes } from '.';
import { ClassificationResult } from './api/classification_result';
import { Content } from './api/content';
import { Custom } from './api/custom';
import { GoalAdvancement } from './api/goal_advancement';
import { KnowledgeRecords } from './api/knowledge_records';
import { ListToolsResponse } from './api/list_tools_response';
import { LLMChatRequest } from './api/llm_chat_request';
import { MatchedIntents } from './api/matched_intents';
import { MatchedKeywords } from './api/matched_keywords';
import { MemoryState } from './api/memory_state';
import { ToolCallResponse } from './api/tool_call_response';
import { TTSRequest } from './api/tts_request';
/**
 * Represents a custom-typed pointer to any structure.
 * This is a virtual TypeScript type that provides type safety without runtime overhead.
 * At runtime, this will just be the raw object, but TypeScript will understand the structure.
 *
 * @template T - The TypeScript type of the data structure
 *
 * @example
 * ```typescript
 * function process(input: Custom<{internalFields: string}>) {
 *   // TypeScript understands the structure
 *   console.log(input.internalFields);
 * }
 * ```
 */
/**
 * Type guards for CustomNodeInputTypes to enable easy type checking and switch-case patterns.
 * These functions help distinguish between different types in graph output streams.
 */
export declare namespace GraphTypesTypeGuards {
    function isString(value: CustomNodeInputTypes): value is string;
    function isCustom<T extends Object = any>(value: CustomNodeInputTypes): value is Custom<T>;
    function isClassificationResult(value: CustomNodeInputTypes): value is ClassificationResult;
    function isContent(value: CustomNodeInputTypes): value is Content;
    function isGoalAdvancement(value: CustomNodeInputTypes): value is GoalAdvancement;
    function isKnowledgeRecords(value: CustomNodeInputTypes): value is KnowledgeRecords;
    function isListToolsResponse(value: CustomNodeInputTypes): value is ListToolsResponse;
    function isLLMChatRequest(value: CustomNodeInputTypes): value is LLMChatRequest;
    function isTTSRequest(value: CustomNodeInputTypes): value is TTSRequest;
    function isMatchedIntents(value: CustomNodeInputTypes): value is MatchedIntents;
    function isMatchedKeywords(value: CustomNodeInputTypes): value is MatchedKeywords;
    function isMemoryState(value: CustomNodeInputTypes): value is MemoryState;
    function isToolCallResponse(value: CustomNodeInputTypes): value is ToolCallResponse;
    function isTextStream(value: CustomNodeInputTypes): value is TextStream;
    function isContentStream(value: CustomNodeInputTypes): value is ContentStream;
    function isTTSOutputStream(value: CustomNodeInputTypes): value is TTSOutputStream;
    function isSpeechChunkStream(value: CustomNodeInputTypes): value is SpeechChunkStream;
}
/**
 * Helper function to get a human-readable type name for CustomNodeInputTypes
 */
export declare function getTypeName(value: CustomNodeInputTypes): CustomNodeInputTypeName;
export type CustomNodeInputTypes = GraphTypes.ClassificationResult | GraphTypes.Content | GraphTypes.GoalAdvancement | GraphTypes.KnowledgeRecords | GraphTypes.ListToolsResponse | GraphTypes.LLMChatRequest | GraphTypes.TTSRequest | GraphTypes.MatchedIntents | GraphTypes.MatchedKeywords | GraphTypes.MemoryState | GraphTypes.ToolCallResponse | GraphTypes.TextStream | GraphTypes.ContentStream | GraphTypes.TTSOutputStream | GraphTypes.SpeechChunkStream | GraphTypes.Custom<any> | string;
export type CustomNodeOutputTypes = string | GraphTypes.LLMChatRequest | GraphTypes.TTSRequest | GraphTypes.TextStream | GraphTypes.SpeechChunkStream | GraphTypes.TTSOutputStream | GraphTypes.ListToolsResponse | GraphTypes.ToolCallResponse | GraphTypes.TransformationStreamTextToText | GraphTypes.TransformationStreamTextToTTS | GraphTypes.Custom<any>;
export type CustomNodeInputTypeName = 'string' | 'ClassificationResult' | 'Content' | 'GoalAdvancement' | 'KnowledgeRecords' | 'ListToolsResponse' | 'LLMChatRequest' | 'TTSRequest' | 'MatchedIntents' | 'MatchedKeywords' | 'MemoryState' | 'ToolCallResponse' | 'TextStream' | 'ContentStream' | 'TTSOutputStream' | 'SpeechChunkStream' | 'Custom';
