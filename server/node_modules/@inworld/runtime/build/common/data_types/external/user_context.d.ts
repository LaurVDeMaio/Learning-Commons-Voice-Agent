import { ExternalReference } from '../common';
/**
 * User context attributes as key-value pairs.
 */
export interface UserContextAttributes {
    [key: string]: string;
}
/**
 * User context configuration.
 */
export interface UserContextInterface {
    /** User attributes as key-value pairs. */
    attributes: UserContextAttributes;
    /** Targeting key for user identification. */
    targetingKey: string;
}
/**
 * User context for graph execution.
 *
 * Provides user-specific attributes and targeting information for personalized interactions.
 */
export declare class UserContext implements UserContextInterface {
    attributes: UserContextAttributes;
    targetingKey: string;
    /**
     * @internal
     */
    private external;
    /**
     * Creates a new UserContext instance.
     *
     * @param {UserContextAttributes} attributes - User attributes as key-value pairs
     * @param {string} targetingKey - Targeting key for user identification
     */
    constructor(attributes: UserContextAttributes, targetingKey: string);
    /**
     * @internal
     * Gets the external reference for this UserContext.
     * Creates the external reference if it doesn't exist.
     *
     * @returns {ExternalReference} External reference to the UserContext
     */
    getExternal(): ExternalReference;
    /**
     * Sets the attributes for this UserContext.
     * This method updates the external UserContext with new attributes.
     *
     * @param {UserContextAttributes} attributes - New user attributes as key-value pairs
     */
    setAttributes(attributes: UserContextAttributes): void;
    setTargetingKey(targetingKey: string): void;
    /**
     * Converts a UserContextAttributes object to a native attributes map.
     *
     * @param {UserContextAttributes} attributes - User attributes to convert
     * @returns {ExternalReference} Native attributes map reference
     * @private
     */
    private toNativeAttributesMapFromObject;
    destroy(): void;
}
