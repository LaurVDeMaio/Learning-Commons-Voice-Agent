"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolCallResponseData = exports.ToolCallResult = exports.ToolCallRequestData = exports.ToolCallData = void 0;
const expose_binary_1 = require("../../../expose_binary");
const messages_1 = require("../../vector/messages");
const base_data_1 = require("./base_data");
/**
 * Class for managing a ToolCallData, which wraps a ToolCall object.
 */
class ToolCallData extends base_data_1.BaseData {
    constructor(external) {
        super(external);
    }
    /**
     * Creates a new ToolCallData instance from a ToolCallInterface.
     *
     * @param {ToolCallInterface} toolCallInterface - The tool call interface to wrap
     */
    static fromToolCallInterface(toolCallInterface) {
        const toolCall = messages_1.ToolCall.fromToolCallInterface(toolCallInterface);
        const toolCallWrapper = expose_binary_1.ToolCallDataFunctions.new(toolCall.getExternal());
        return new ToolCallData(toolCallWrapper);
    }
    /**
     * Destroys the ToolCallData instance and frees associated resources.
     * This method should be called when the object is no longer needed to prevent memory leaks.
     */
    destroy() {
        expose_binary_1.ToolCallDataFunctions.delete(this.external);
    }
}
exports.ToolCallData = ToolCallData;
/**
 * Class for managing a collection of ToolCallData objects.
 *
 * This class provides functionality to manage multiple tool call data objects
 * as a single unit.
 */
class ToolCallRequestData extends base_data_1.BaseData {
    constructor(external) {
        super(external);
    }
    /**
     * Creates a new ToolCallRequestData instance from an array of ToolCallInterface objects.
     *
     * @param {ToolCallInterface[]} toolCalls - Array of tool call interfaces to wrap
     */
    static fromToolCallInterfaces(toolCalls) {
        const vector = expose_binary_1.VectorToolCallDataFunctions.new();
        toolCalls.forEach((toolCall) => {
            const toolCallData = ToolCallData.fromToolCallInterface(toolCall);
            expose_binary_1.VectorToolCallDataFunctions.pushBack(vector, toolCallData.getExternal());
            toolCallData.destroy();
        });
        const external = expose_binary_1.ListToolCallDataFunctions.new(vector);
        expose_binary_1.VectorToolCallDataFunctions.delete(vector);
        return new ToolCallRequestData(external);
    }
    /**
     * Destroys the ToolCallRequestData instance and frees associated resources.
     * This method should be called when the object is no longer needed to prevent memory leaks.
     */
    destroy() {
        super.destroy();
    }
}
exports.ToolCallRequestData = ToolCallRequestData;
/**
 * Class for managing a single tool call result.
 *
 * This class represents the result of executing a tool call, containing the tool call ID
 * and the result string. It extends BaseData to provide consistent lifecycle management
 * and external reference handling.
 *
 * @example
 * ```typescript
 * const toolCallResult = new ToolCallResult('call_123', '{"temperature": 72}');
 * const result = toolCallResult.getToolCallResult();
 * console.log(result.toolCallId); // 'call_123'
 * console.log(result.result); // '{"temperature": 72}'
 * toolCallResult.destroy(); // Clean up when done
 * ```
 */
class ToolCallResult extends base_data_1.BaseData {
    constructor(external) {
        super(external);
    }
    static fromToolCallResultInterface(toolCallResult) {
        const external = expose_binary_1.ToolCallResultFunctions.new(toolCallResult.toolCallId, toolCallResult.result);
        return new ToolCallResult(external);
    }
    /**
     * @internal
     * Creates a new ToolCallResult instance from an external reference.
     *
     * This method is used internally by the runtime to create ToolCallResult instances
     * from external data sources.
     *
     * @param {ExternalReference} external - External reference to the tool call result data
     * @returns {ToolCallResult} A new ToolCallResult instance
     */
    static fromExternal(external) {
        return new ToolCallResult(external);
    }
    /**
     * Checks if the ToolCallResult instance is valid.
     *
     * @returns {boolean} True if the instance is valid, false otherwise
     */
    isValid() {
        return expose_binary_1.ToolCallResultFunctions.isValid(this.external);
    }
    /**
     * Gets the tool call result as a ToolCallResultInterface.
     *
     * @returns {ToolCallResultInterface} Object containing the tool call ID and result string
     */
    getToolCallResult() {
        return {
            toolCallId: expose_binary_1.ToolCallResultFunctions.getToolCallId(this.external),
            result: expose_binary_1.ToolCallResultFunctions.getResult(this.external),
        };
    }
    /**
     * Destroys the ToolCallResult instance and frees associated resources.
     * This method should be called when the object is no longer needed to prevent memory leaks.
     */
    onDestroy() {
        expose_binary_1.ToolCallResultFunctions.delete(this.external);
    }
}
exports.ToolCallResult = ToolCallResult;
/**
 * Class for managing a collection of tool call results.
 *
 * This class provides functionality to manage multiple tool call results as a single unit.
 * It can be constructed from either an array of ToolCallResultInterface objects or an
 * external reference. It extends BaseData to provide consistent lifecycle management
 * and external reference handling.
 *
 * @example
 * ```typescript
 * // Create from array of results
 * const results: ToolCallResultInterface[] = [
 *   { toolCallId: 'call_1', result: '{"weather": "sunny"}' },
 *   { toolCallId: 'call_2', result: '{"time": "14:30"}' }
 * ];
 * const listResults = new ToolCallResponseData(results);
 *
 * // Get all results
 * const allResults = listResults.getToolCallResponse();
 * console.log(allResults.length); // 2
 *
 * // Clean up
 * listResults.destroy();
 * ```
 */
class ToolCallResponseData extends base_data_1.BaseData {
    /**
     * Creates a new ToolCallResponseData instance.
     *
     * @param {ExternalReference} external - External reference to the list tool calls results data
     */
    constructor(external) {
        super(external);
    }
    static fromToolCallResultInterfaces(toolCallResults) {
        const vector = expose_binary_1.VectorToolCallResultFunctions.new();
        toolCallResults.forEach((result) => {
            const toolCallResult = ToolCallResult.fromToolCallResultInterface(result);
            expose_binary_1.VectorToolCallResultFunctions.pushBack(vector, toolCallResult.getExternal());
        });
        const external = expose_binary_1.ListToolCallsResultsFunctions.new(vector);
        expose_binary_1.VectorToolCallResultFunctions.delete(vector);
        return new ToolCallResponseData(external);
    }
    /**
     * @internal
     * Creates a new ToolCallResponseData instance from an external reference.
     *
     * This method is used internally by the runtime to create ToolCallResponseData instances
     * from external data sources. It validates the external reference before creating the instance.
     *
     * @param {ExternalReference} external - External reference to the list tool calls results data
     * @returns {ToolCallResponseData | null} A new ToolCallResponseData instance if valid, null otherwise
     */
    static fromExternal(external) {
        const baseData = expose_binary_1.ListToolCallsResultsFunctions.toListToolCallsResults(external);
        if (baseData && expose_binary_1.ListToolCallsResultsFunctions.isValid(baseData)) {
            return new ToolCallResponseData(baseData);
        }
        return null;
    }
    /**
     * Gets all tool call results as an array of ToolCallResultInterface objects.
     *
     * This method returns the tool call results either from the cached internal array
     * or by extracting them from the external reference if the cache is not available.
     *
     * @returns {ToolCallResultInterface[]} Array of tool call result interfaces
     */
    getToolCallResponse() {
        if (this.external) {
            const toolCallResults = [];
            const vectorToolCallResponse = expose_binary_1.ListToolCallsResultsFunctions.getToolCallResultsSwig(this.external);
            const size = expose_binary_1.VectorToolCallResultFunctions.size(vectorToolCallResponse);
            for (let i = 0; i < size; i++) {
                const toolCallResultData = expose_binary_1.VectorToolCallResultFunctions.get(vectorToolCallResponse, i);
                const toolCallResult = ToolCallResult.fromExternal(toolCallResultData).getToolCallResult();
                toolCallResults.push(toolCallResult);
            }
            return toolCallResults;
        }
        return [];
    }
    /**
     * Checks if the ToolCallResponseData instance is valid.
     *
     * @returns {boolean} True if the instance is valid, false otherwise
     */
    isValid() {
        return expose_binary_1.ListToolCallsResultsFunctions.isValid(this.external);
    }
    /**
     * Destroys the ToolCallResponseData instance and frees associated resources.
     *
     * This method cleans up all internal ToolCallResult instances and then calls
     * the parent destroy method. It should be called when the object is no longer
     * needed to prevent memory leaks.
     */
    destroy() {
        super.destroy();
    }
}
exports.ToolCallResponseData = ToolCallResponseData;
