import { ToolInterface } from '../../vector/messages';
import { ExternalReference } from '../common';
import { BaseData } from './base_data';
/**
 * Collection of available tools for function calling.
 *
 * Contains a list of tool definitions that can be made available to language models.
 */
export interface ListToolsResponseInterface {
    /** Array of tool definitions available for function calling. */
    tools: ToolInterface[];
}
/**
 * Class for handling result of listing MCP tools in graphs.
 * Extends BaseData with tools list-specific functionality.
 * @internal
 */
export declare class ListToolsResponseData extends BaseData {
    constructor(external: ExternalReference);
    static fromToolInterfaces(tools: ToolInterface[]): ListToolsResponseData;
    /**
     * @internal
     * Creates a new ListToolsResponseData instance from an external reference.
     *
     * @param {ExternalReference} external - The external reference to create the instance from
     * @returns {ListToolsResponseData | null} A new ListToolsResponseData instance or null if invalid
     */
    static fromExternal(external: ExternalReference): ListToolsResponseData | null;
    /**
     * Gets the tools list as an interface.
     * If external is set, it will parse from the external reference,
     * else it will return the tools array
     *
     * @returns {ListToolsResponseInterface} The tools list interface object
     */
    getListTools(): ListToolsResponseInterface;
    /**
     * Checks if the ListToolsResponseData is valid.
     *
     * @returns {boolean} True if valid, false otherwise
     */
    isValid(): boolean;
    /**
     * Cleans up resources used by the ListToolsResponseData instance.
     */
    destroy(): void;
}
