"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserContext = void 0;
const expose_binary_1 = require("../../../expose_binary");
/**
 * User context for graph execution.
 *
 * Provides user-specific attributes and targeting information for personalized interactions.
 */
class UserContext {
    /**
     * Creates a new UserContext instance.
     *
     * @param {UserContextAttributes} attributes - User attributes as key-value pairs
     * @param {string} targetingKey - Targeting key for user identification
     */
    constructor(attributes, targetingKey) {
        this.attributes = attributes;
        this.targetingKey = targetingKey;
        /**
         * @internal
         */
        this.external = null;
        this.external = expose_binary_1.UserContextFunctions.new();
        this.setAttributes(attributes);
        this.setTargetingKey(targetingKey);
    }
    /**
     * @internal
     * Gets the external reference for this UserContext.
     * Creates the external reference if it doesn't exist.
     *
     * @returns {ExternalReference} External reference to the UserContext
     */
    getExternal() {
        return this.external;
    }
    /**
     * Sets the attributes for this UserContext.
     * This method updates the external UserContext with new attributes.
     *
     * @param {UserContextAttributes} attributes - New user attributes as key-value pairs
     */
    setAttributes(attributes) {
        if (!this.external) {
            throw new Error('UserContext external reference not initialized');
        }
        const attributesMap = this.toNativeAttributesMapFromObject(attributes);
        expose_binary_1.UserContextFunctions.setAttributes(this.external, attributesMap);
        expose_binary_1.BTreeMapStringToStringFunctions.delete(attributesMap);
        Object.assign(this.attributes, attributes);
    }
    setTargetingKey(targetingKey) {
        if (!this.external) {
            throw new Error('UserContext external reference not initialized');
        }
        expose_binary_1.UserContextFunctions.setTargetingKey(this.external, targetingKey);
        this.targetingKey = targetingKey;
    }
    /**
     * Converts a UserContextAttributes object to a native attributes map.
     *
     * @param {UserContextAttributes} attributes - User attributes to convert
     * @returns {ExternalReference} Native attributes map reference
     * @private
     */
    toNativeAttributesMapFromObject(attributes) {
        const map = expose_binary_1.BTreeMapStringToStringFunctions.new();
        for (const [key, value] of Object.entries(attributes)) {
            expose_binary_1.BTreeMapStringToStringFunctions.set(map, key, value);
        }
        return map;
    }
    destroy() {
        if (this.external) {
            expose_binary_1.UserContextFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.UserContext = UserContext;
