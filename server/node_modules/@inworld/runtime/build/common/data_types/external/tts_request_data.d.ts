import { TextStream } from '../../stream';
import { VoiceInterface } from '../../voice/voice';
import { ExternalReference } from '../common';
import { BaseData } from './base_data';
/**
 * Content types supported by TTSRequest
 */
export type TTSContentType = 'text' | 'stream';
/**
 * Structured TTS request for text-to-speech synthesis.
 *
 * Contains either text content or stream content, and optional voice configuration.
 */
export interface TTSRequestInterface {
    /** Type of content - either 'text' or 'stream' */
    contentType: TTSContentType;
    /** Text content when contentType is 'text' */
    text?: string;
    /** Stream content when contentType is 'stream' (handled internally) */
    stream?: TextStream;
    /** Optional voice configuration for synthesis */
    voice?: VoiceInterface;
}
/**
 * Class for handling TTS requests in graphs.
 * Extends BaseData with TTS request-specific functionality.
 */
export declare class TTSRequestData extends BaseData {
    private textData;
    private streamData;
    private voice?;
    private voiceObj?;
    private contentType;
    constructor(requestOrExternal: TTSRequestInterface | ExternalReference | string, voice?: VoiceInterface);
    /**
     * Type guard to check if object is TTSRequestInterface
     */
    private static isTTSRequestInterface;
    /**
     * Creates TTSRequest from string input
     */
    private static createFromString;
    /**
     * Creates TTSRequest from TTSRequestInterface
     */
    private static createFromInterface;
    /**
     * Helper method to safely handle optional voice creation and cleanup
     */
    private static withOptionalVoice;
    /**
     * @internal
     * Creates a new TTSRequestData instance from an external reference.
     *
     * @param {ExternalReference} external - The external reference to create the instance from
     * @returns {TTSRequestData | null} A new TTSRequestData instance or null if invalid
     */
    static fromExternal(external: ExternalReference): TTSRequestData | null;
    /**
     * Gets the TTSRequest data as an interface.
     * If external is set, it will parse the external reference,
     * else it will use the stored properties
     *
     * @returns {TTSRequestInterface} The TTSRequest interface object
     */
    getTTSRequest(): TTSRequestInterface;
    /**
     * Checks if the TTSRequest has text content.
     *
     * @returns {boolean} True if the request contains text content
     */
    hasTextContent(): boolean;
    /**
     * Checks if the TTSRequest has stream content.
     *
     * @returns {boolean} True if the request contains stream content
     */
    hasStreamContent(): boolean;
    /**
     * Gets the voice configuration.
     *
     * @returns {VoiceInterface | undefined} The voice configuration if available
     */
    getVoice(): VoiceInterface | undefined;
    /**
     * Cleans up resources used by the TTSRequestData instance.
     */
    destroy(): void;
}
