import { ExternalReference } from '../data_types/common';
/**
 * Represents a function choice for tool selection.
 */
export interface FunctionChoiceInterface {
    /** The type of the function choice. If empty, default to 'function'. */
    type?: string;
    /** The name of the function to be called. */
    name: string;
}
/**
 * Represents a tool choice configuration.
 * Can be either a string choice or a specific function choice.
 */
export type ToolChoiceInterface = {
    choice: string | FunctionChoiceInterface;
};
/**
 * Represents a tool that the model may call.
 */
export interface ToolInterface {
    /** The name of the function to be called. */
    name: string;
    /** A description of what the function does. */
    description: string;
    /** The parameters the function accepts, described as a JSON schema. */
    properties: Record<string, any>;
}
/**
 * Represents a tool call made by the model.
 */
export interface ToolCallInterface {
    /** A unique identifier for the tool call. */
    id: string;
    /** The name of the tool to be called. */
    name: string;
    /** The arguments for the tool call. It is a JSON string. */
    args: string;
}
/**
 * Represents an image URL with detail level specification.
 */
export interface ImageUrlInterface {
    /** The URL of the image. */
    url: string;
    /** Specifies the detail level of the image: 'low', 'high', 'auto'. Defaults to 'auto'. */
    detail?: string;
}
/**
 * Represents a single content item in a message.
 * Content items can be either text or image content.
 */
export interface ContentItemInterface {
    /** The content type: 'text' or 'image' */
    type: 'text' | 'image';
    /** The text content (when the type is 'text') */
    text?: string;
    /** The image URL (when the type is 'image') */
    image_url?: ImageUrlInterface;
}
/**
 * Represents a message in a chat system.
 */
export interface LLMMessageInterface {
    /** The role of the message: user, assistant, system, tool, etc. */
    role: string;
    /** The content of the message - either text or multimodal content items */
    content: string | ContentItemInterface[];
    /** The tool calls generated by the model, such as function calls. */
    toolCalls?: ToolCallInterface[];
    /** Tool call that this message is responding to. Only used for the 'tool' role. */
    toolCallId?: string;
}
/**
 * Content response from a language model.
 *
 * Contains text content and optional tool calls from the model.
 */
export interface ContentInterface {
    /** The text content generated by the model. */
    content: string;
    /** Optional array of tool calls that the model has decided to make. */
    toolCalls?: ToolCallInterface[];
}
/**
 * Class for managing an image URL.
 * @internal
 */
export declare class ImageUrlData {
    private external;
    constructor(external: ExternalReference);
    static fromImageUrlInterface(imageUrlInterface: ImageUrlInterface): ImageUrlData;
    getExternal(): any;
    destroy(): void;
}
/**
 * Class for managing a content item.
 * @internal
 */
export declare class ContentItem {
    private external;
    constructor(external: ExternalReference);
    static fromContentItemInterface(contentItemInterface: ContentItemInterface): ContentItem;
    /**
     * @internal
     * @param external
     */
    static fromExternal(external: ExternalReference): ContentItem;
    getContentItemInterface(): ContentItemInterface;
    getExternal(): any;
    destroy(): void;
}
/**
 * Class for managing a collection of content items.
 * @internal
 */
export declare class ContentItems {
    private external;
    constructor(external: ExternalReference);
    static fromContentItemInterfaces(contentItemInterfaces: ContentItemInterface[]): ContentItems;
    /**
     * @internal
     * @param external
     */
    static fromExternal(external: ExternalReference): ContentItems;
    getContentItemInterfaces(): ContentItemInterface[];
    getExternal(): any;
    destroy(): void;
}
/**
 * Class for managing a tool definition.
 * @internal
 */
export declare class Tool {
    private external;
    constructor(external: ExternalReference);
    static fromToolInterface(toolInterface: ToolInterface): Tool;
    static fromExternal(external: ExternalReference): Tool;
    getExternal(): any;
    getToolInterface(): ToolInterface;
    destroy(): void;
}
/**
 * Class for managing a tool call.
 * @internal
 */
export declare class ToolCall {
    private toolCall;
    constructor(external: ExternalReference);
    static fromToolCallInterface(toolCallInterface: ToolCallInterface): ToolCall;
    /**
     * @internal
     * @param external
     */
    static fromExternal(external: ExternalReference): ToolCall;
    getExternal(): any;
    getToolCallInterface(): ToolCallInterface;
    destroy(): void;
}
/**
 * Class for managing a collection of tools.
 * @internal
 */
export declare class Tools {
    private external;
    constructor(external: ExternalReference);
    static fromToolInterfaces(tools: ToolInterface[]): Tools;
    static fromExternal(external: ExternalReference): Tools;
    getExternal(): any;
    getTools(): ToolInterface[];
    destroy(): void;
}
/**
 * Class for managing a collection of tool calls.
 * @internal
 */
export declare class ToolCalls {
    private toolCalls;
    constructor(external: ExternalReference);
    static fromToolCallInterfaces(toolCallInterfaces: ToolCallInterface[]): ToolCalls;
    /**
     * Creates ToolCallInterface array from a native tool calls vector
     * @param {ExternalReference} toolCallsVector - External reference to tool calls vector
     * @returns {ToolCallInterface[]} Array of tool call interfaces
     * @static
     */
    static getToolCallInterfaces(toolCallsVector: ExternalReference): ToolCallInterface[];
    getExternal(): any;
    destroy(): void;
}
/**
 * @internal
 */
export declare class Messages {
    private external;
    constructor(external: ExternalReference);
    static fromLLMMessageInterfaces(items?: LLMMessageInterface[]): Messages;
    getMessages(): LLMMessageInterface[];
    /**
     * @internal
     * @param external
     */
    static fromExternal(external: ExternalReference): Messages;
    getExternal(): any;
    destroy(): void;
}
