import { ToolInterface } from '../vector/messages';
import { BaseData } from './BaseData';
import { ExternalReference } from './common';
/**
 * Tool data wrapper for list operations.
 */
export interface ToolDataInterface {
    /** The tool definition wrapped in this data structure. */
    tool: ToolInterface;
}
/**
 * Collection of available tools for function calling.
 *
 * Contains a list of tool definitions that can be made available to language models.
 */
export interface ListToolsInterface {
    /** Array of tool definitions available for function calling. */
    list_tools: ToolDataInterface[];
}
/**
 * Class for handling list of tools data in graphs.
 * Extends BaseData with tools list-specific functionality.
 * @internal
 */
export declare class ListToolsData extends BaseData {
    private tools;
    private toolInstances;
    constructor(toolsOrExternal: ToolInterface[] | ExternalReference);
    /**
     * @internal
     * Creates a new ListToolsData instance from an external reference.
     *
     * @param {ExternalReference} external - The external reference to create the instance from
     * @returns {ListToolsData | null} A new ListToolsData instance or null if invalid
     */
    static fromExternal(external: ExternalReference): ListToolsData | null;
    /**
     * Gets the tools list as an interface.
     * If external is set, it will parse from the external reference,
     * else it will return the tools array
     *
     * @returns {ListToolsInterface} The tools list interface object
     */
    getListTools(): ListToolsInterface;
    /**
     * Gets the tools array directly.
     *
     * @returns {ToolInterface[]} Array of tool interfaces
     */
    getTools(): ToolInterface[];
    /**
     * Checks if the ListToolsData is valid.
     *
     * @returns {boolean} True if valid, false otherwise
     */
    isValid(): boolean;
    /**
     * Cleans up resources used by the ListToolsData instance.
     */
    destroy(): void;
}
