import { ExternalReference, TTSOutputInterface } from '../common';
export declare enum TransformationStreamType {
    TEXT_TO_TEXT = "TEXT_TO_TEXT",
    TEXT_TO_TTS = "TEXT_TO_TTS"
}
/**
 * Base class for transformation streams.
 * @internal
 */
export declare class BaseTransformationStream<T> {
    private streamFunctions;
    private outputType;
    private external;
    private filterCallback;
    private transformCallback;
    private destructorCallback;
    constructor(options: {
        outputType: TransformationStreamType;
        stream: ExternalReference;
        transform: (input: string) => Promise<T> | T;
        filter?: (input: string) => boolean;
    });
    /**
     * Returns the external reference to the native data implementation.
     *
     * @returns External reference object
     */
    getExternal(): ExternalReference;
    destroy(): void;
    private static getStreamFunctions;
    private prepareOutput;
    private static getError;
    private registerTransformCallback;
    private registerFilterCallback;
    private registerDestructorCallback;
}
export declare class TransformationStreamTextToText extends BaseTransformationStream<string> {
    constructor(stream: ExternalReference, transform: (input: string) => Promise<string> | string, filter?: (input: string) => boolean);
}
export declare class TransformationStreamTextToTTS extends BaseTransformationStream<TTSOutputInterface> {
    constructor(stream: ExternalReference, transform: (input: string) => Promise<TTSOutputInterface> | TTSOutputInterface, filter?: (input: string) => boolean);
}
