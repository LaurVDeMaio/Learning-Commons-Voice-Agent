"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TTSOutputStream = void 0;
const expose_binary_1 = require("../../../expose_binary");
const inworld_1 = require("../../error/inworld");
const helpers_1 = require("../../helpers");
const AudioData_1 = require("../AudioData");
/**
 * Class for handling string-based streams.
 * Provides functionality to read text data from native stream implementations.
 * @internal
 */
class TTSOutputStream {
    /**
     * Creates a new TTSOutputStream instance.
     *
     * @param stream - External reference to the native stream implementation
     */
    constructor(stream) {
        this.stream = stream;
    }
    /**
     * Asynchronously reads the next item from the stream.
     *
     * @returns Promise resolving to a result object with text content or done flag
     * @throws InworldError if reading from the stream fails
     */
    async next() {
        while (await expose_binary_1.TTSOutputFunctions.streamHasNext(this.stream)) {
            let externalAudio;
            try {
                const streamRead = await expose_binary_1.TTSOutputFunctions.streamRead(this.stream);
                if (expose_binary_1.TTSOutputFunctions.isOK(streamRead)) {
                    const value = expose_binary_1.TTSOutputFunctions.getValue(streamRead);
                    externalAudio = expose_binary_1.TTSOutputFunctions.getAudio(value);
                    return {
                        audio: AudioData_1.AudioData.fromExternal(externalAudio).getData(),
                        text: expose_binary_1.TTSOutputFunctions.getText(value),
                        done: false,
                    };
                }
                else {
                    throw new inworld_1.InworldError('Failed to get TTS output', (0, helpers_1.getStatus)(streamRead));
                }
            }
            finally {
                if (externalAudio) {
                    expose_binary_1.TTSOutputFunctions.audioDelete(externalAudio);
                }
            }
        }
        return { done: true };
    }
    getStream() {
        return this.stream;
    }
    /**
     * Creates a new TTSOutputStream instance from an external reference.
     *
     * @param stream - External reference to the native stream implementation
     * @returns A new TTSOutputStream instance
     * @internal
     */
    static fromExternal(stream) {
        return new TTSOutputStream(stream);
    }
}
exports.TTSOutputStream = TTSOutputStream;
