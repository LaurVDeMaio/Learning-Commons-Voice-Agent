"use strict";
/**
 * Concrete implementations of transformation streams for different input/output types.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformationStreamTextToTTS = exports.TransformationStreamContentToText = exports.TransformationStreamTextToText = void 0;
const base_transformation_1 = require("./base_transformation");
const interfaces_1 = require("./interfaces");
/**
 * Transformation stream for text-to-text processing.
 * Processes string input and produces string output.
 */
class TransformationStreamTextToText extends base_transformation_1.BaseTransformationStream {
    constructor(stream, transform) {
        super({
            outputType: interfaces_1.TransformationStreamType.TEXT_TO_TEXT,
            stream,
            transform,
            // filter, // TODO: need to prepare napi changes
        });
    }
}
exports.TransformationStreamTextToText = TransformationStreamTextToText;
/**
 * Transformation stream for content-to-text processing.
 * Processes content stream input and produces string output.
 */
class TransformationStreamContentToText extends base_transformation_1.BaseTransformationStream {
    constructor(stream, transform) {
        super({
            outputType: interfaces_1.TransformationStreamType.CONTENT_TO_TEXT,
            stream,
            transform,
            // filter,// TODO: need to prepare napi changes
        });
    }
}
exports.TransformationStreamContentToText = TransformationStreamContentToText;
/**
 * Transformation stream for text-to-TTS processing.
 * Processes string input and produces TTSOutputInterface output.
 */
class TransformationStreamTextToTTS extends base_transformation_1.BaseTransformationStream {
    constructor(stream, transform) {
        super({
            outputType: interfaces_1.TransformationStreamType.TEXT_TO_TTS,
            stream,
            transform,
            // filter,// TODO: need to prepare napi changes
        });
    }
}
exports.TransformationStreamTextToTTS = TransformationStreamTextToTTS;
