import { ToolCallInterface } from '../../primitives/llm/messages';
import { ExternalReference, TextStreamIterationResult, TextStreamIterationToTextResponseInterface, TTSOutputInterface } from '../data_types/common';
import { BaseDataStream } from './base';
import { TransformationStreamTextToText, TransformationStreamTextToTTS } from './transformation_stream';
/**
 * Streaming interface for rich content from advanced language model nodes.
 *
 * Provides asynchronous streaming for complex content with text and tool calls.
 */
export interface ContentStreamIterator {
    /**
     * Returns external reference to the native stream implementation.
     * @returns External reference to the native stream implementation
     * @internal
     */
    getStream: () => ExternalReference;
    /**
     * Asynchronously reads the next content chunk from the stream.
     * @returns Promise resolving to a result object with content and tool calls or done flag
     */
    next: () => Promise<ContentStreamIterationResult>;
    /**
     * Converts the stream to a text response format.
     * @param {TextStreamIterationToTextResponseInterface} props - Configuration for text response conversion
     * @returns TransformationStreamTextToText instance for text processing
     */
    toTextResponse: (props: TextStreamIterationToTextResponseInterface) => TransformationStreamTextToText;
    /**
     * Converts the stream to a TTS output response format.
     * @param props - Configuration for TTS output response conversion
     * @param props.transform - Function that converts text to TTS output. Takes a string input and returns
     *                         either a Promise resolving to TTSOutputInterface or TTSOutputInterface directly
     * @param props.filter - Optional predicate function to filter text before processing.
     *                      Returns true to include the text, false to exclude it
     * @returns TransformationStreamTextToTTS instance for audio processing
     */
    toTTSOutputResponse: (props: {
        transform: (text: string) => Promise<TTSOutputInterface> | TTSOutputInterface;
        filter?: (text: string) => boolean;
    }) => TransformationStreamTextToTTS;
}
/**
 * Enhanced result type that includes tool calls
 */
export interface ContentStreamIterationResult extends TextStreamIterationResult {
    toolCalls?: ToolCallInterface[];
}
/**
 * Class for handling string-based streams.
 * Provides functionality to read text data and tool calls from native stream implementations.
 * @internal
 */
export declare class ContentStream extends BaseDataStream<ContentStreamIterationResult> implements ContentStreamIterator {
    /**
     * @internal
     * Creates a new ContentStream instance.
     *
     * @param {ExternalReference} stream - External reference to the native stream implementation
     * @param {() => void} [onDestroy] - Optional callback to execute when stream is consumed
     */
    constructor(stream: ExternalReference, onDestroy?: () => void);
    /**
     * Extracts tool calls from a native tool calls vector
     * @param {ExternalReference} toolCallsVector - External reference to tool calls vector
     * @returns {ToolCallInterface[]} Array of tool call interfaces
     * @private
     */
    private extractToolCalls;
    /**
     * Asynchronously reads the next item from the stream.
     *
     * @returns {Promise<ContentStreamIterationResult>} Promise resolving to a result object with text content and tool calls or done flag
     * @throws {InworldError} if reading from the stream fails
     */
    next(): Promise<ContentStreamIterationResult>;
    [Symbol.asyncIterator](): AsyncIterator<ContentStreamIterationResult>;
    /**
     * Creates a new ContentStream instance from an external reference.
     *
     * @param {ExternalReference} external - External reference to the native stream implementation
     * @returns {ContentStream} A new ContentStream instance
     * @internal
     */
    static fromExternal(external: ExternalReference): ContentStream;
    /**
     * Converts the stream to a text response format.
     * @param {TextStreamIterationToTextResponseInterface} props - Configuration for text response conversion
     * @returns {TransformationStreamTextToText} TransformationStreamTextToText instance
     */
    toTextResponse(props: TextStreamIterationToTextResponseInterface): TransformationStreamTextToText;
    /**
     * Converts the stream to a TTS output response format.
     * @param {Object} props - Configuration for TTS output response conversion
     * @param {(text: string) => Promise<TTSOutputInterface> | TTSOutputInterface} props.transform - Function that converts text to TTS output
     * @param {(text: string) => boolean} [props.filter] - Optional predicate function to filter text before processing
     * @returns {TransformationStreamTextToTTS} TransformationStreamTextToTTS instance
     */
    toTTSOutputResponse(props: {
        transform: (text: string) => Promise<TTSOutputInterface> | TTSOutputInterface;
        filter?: (text: string) => boolean;
    }): TransformationStreamTextToTTS;
}
