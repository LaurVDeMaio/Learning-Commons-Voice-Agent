/**
 * Concrete implementations of transformation streams for different input/output types.
 */
import { ExternalReference, TTSOutputInterface } from '../data_types/common';
import { BaseTransformationStream } from './base_transformation';
import { ITransformationStreamContentToText, ITransformationStreamTextToText, ITransformationStreamTextToTTS } from './interfaces';
/**
 * Transformation stream for text-to-text processing.
 * Processes string input and produces string output.
 */
export declare class TransformationStreamTextToText extends BaseTransformationStream<string, string> implements ITransformationStreamTextToText {
    constructor(stream: ExternalReference, transform: (input: string) => Promise<string> | string);
}
/**
 * Transformation stream for content-to-text processing.
 * Processes content stream input and produces string output.
 */
export declare class TransformationStreamContentToText<ContentType = any> extends BaseTransformationStream<ContentType, string> implements ITransformationStreamContentToText<ContentType> {
    constructor(stream: ExternalReference, transform: (input: ContentType) => Promise<string> | string);
}
/**
 * Transformation stream for text-to-TTS processing.
 * Processes string input and produces TTSOutputInterface output.
 */
export declare class TransformationStreamTextToTTS extends BaseTransformationStream<string, TTSOutputInterface> implements ITransformationStreamTextToTTS<TTSOutputInterface> {
    constructor(stream: ExternalReference, transform: (input: string) => Promise<TTSOutputInterface> | TTSOutputInterface);
}
