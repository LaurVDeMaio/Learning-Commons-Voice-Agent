import { ExternalReference } from '../data_types/common';
/**
 * Enum defining the types of transformation streams available.
 */
export declare enum TransformationStreamType {
    TEXT_TO_TEXT = "TEXT_TO_TEXT",
    CONTENT_TO_TEXT = "CONTENT_TO_TEXT",
    TEXT_TO_TTS = "TEXT_TO_TTS"
}
/**
 * Interface for base transformation stream functionality.
 * Defines the contract for all transformation stream implementations.
 */
export interface IBaseTransformationStream<IT = any, OT = any> {
    /**
     * Returns the external reference to the native data implementation.
     * @returns External reference object
     */
    getExternal(): ExternalReference;
    /**
     * Destroys the transformation stream and cleans up resources.
     */
    destroy(): void;
}
/**
 * Configuration options for creating a transformation stream.
 */
export interface TransformationStreamOptions<IT, OT> {
    /**
     * The type of transformation stream to create.
     */
    outputType: TransformationStreamType;
    /**
     * External reference to the stream.
     */
    stream: ExternalReference;
    /**
     * Transform function that processes input to output.
     */
    transform: (input: IT) => Promise<OT> | OT;
}
/**
 * Interface for text-to-text transformation streams.
 */
export interface ITransformationStreamTextToText extends IBaseTransformationStream<string, string> {
}
/**
 * Interface for content-to-text transformation streams.
 */
export interface ITransformationStreamContentToText<ContentType = any> extends IBaseTransformationStream<ContentType, string> {
}
/**
 * Interface for text-to-TTS transformation streams.
 */
export interface ITransformationStreamTextToTTS<TTSOutputType = any> extends IBaseTransformationStream<string, TTSOutputType> {
}
