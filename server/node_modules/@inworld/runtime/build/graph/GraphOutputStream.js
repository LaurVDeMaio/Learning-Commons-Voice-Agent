"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphOutputStream = void 0;
const data_types_1 = require("../common/data_types");
const inworld_1 = require("../common/error/inworld");
const internal_1 = __importDefault(require("../internal/decorators/internal"));
const GraphOutputStreamResponse_1 = require("./GraphOutputStreamResponse");
const custom_context_datastore_1 = require("./nodes/custom/custom_context_datastore");
const from_external_1 = require("./utils/from_external");
/**
 * Represents a handler for a graph execution.
 */
let GraphOutputStream = (() => {
    var _a;
    let _onStreamFinished_decorators;
    let _onStreamFinished_initializers = [];
    let _onStreamFinished_extraInitializers = [];
    return _a = class GraphOutputStream {
            /**
             * Creates a new GraphOutputStream instance.
             * @param index - The index of the execution
             * @param graphExecutor - The graph executor associated with the execution
             * @internal
             */
            constructor(graphExecutor, index, executionId, data) {
                /**
                 * Optional callback to call when the stream is finished
                 * @internal
                 */
                this.onStreamFinished = __runInitializers(this, _onStreamFinished_initializers, void 0);
                __runInitializers(this, _onStreamFinished_extraInitializers);
                this.index = index;
                this.executionId = executionId;
                this.graphExecutor = graphExecutor;
                this.data = data;
            }
            /**
             * Handles the response from a node.
             * @returns A promise that resolves to the response from the node
             */
            async next() {
                if (this.index && (await this.graphExecutor.hasNext(this.index))) {
                    const next = await this.graphExecutor.next(this.index);
                    this.checkStatus(next);
                    const response = (0, from_external_1.fromExternal)(next);
                    if (response) {
                        const streamResponse = new GraphOutputStreamResponse_1.GraphOutputStreamResponse(response);
                        if (this.onStreamFinished) {
                            streamResponse.setOnProcessingComplete(async () => {
                                const hasMore = await this.graphExecutor.hasNext(this.index);
                                if (!hasMore) {
                                    this.onStreamFinished();
                                }
                            });
                        }
                        return streamResponse;
                    }
                }
                this.data.destroy();
                const finalResponse = new GraphOutputStreamResponse_1.GraphOutputStreamResponse(undefined, true);
                if (this.onStreamFinished) {
                    finalResponse.setOnProcessingComplete(() => {
                        if (this.onStreamFinished) {
                            this.onStreamFinished();
                        }
                    });
                }
                // cleanup datastore
                custom_context_datastore_1.CustomExecutionContextRegistry.getInstance().dispose(this.executionId);
                return finalResponse;
            }
            /**
             * Sets a callback to be called when the stream is finished.
             * This allows automatic cleanup without user intervention.
             *
             * @param callback - Function to call when stream ends
             */
            setOnFinished(callback) {
                this.onStreamFinished = callback;
            }
            /**
             * Enables async iteration over graph output responses.
             */
            [(_onStreamFinished_decorators = [internal_1.default], Symbol.asyncIterator)]() {
                return {
                    next: async () => {
                        const result = await this.next();
                        if (result.done) {
                            return { done: true, value: undefined };
                        }
                        return { done: false, value: result };
                    },
                };
            }
            /**
             * Checks the status of data and throws an error if there's a problem.
             *
             * @param data - External reference to the data to check
             * @throws InworldError if the data contains an error status
             */
            checkStatus(data) {
                const status = data_types_1.BaseData.getError(data);
                if (status) {
                    throw new inworld_1.InworldError('Graph Output Stream error', status);
                }
            }
        },
        (() => {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            __esDecorate(null, null, _onStreamFinished_decorators, { kind: "field", name: "onStreamFinished", static: false, private: false, access: { has: obj => "onStreamFinished" in obj, get: obj => obj.onStreamFinished, set: (obj, value) => { obj.onStreamFinished = value; } }, metadata: _metadata }, _onStreamFinished_initializers, _onStreamFinished_extraInitializers);
            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(),
        _a;
})();
exports.GraphOutputStream = GraphOutputStream;
