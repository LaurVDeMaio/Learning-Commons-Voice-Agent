import { ExternalReference } from '../common/data_types/common';
import { GraphExecutor } from './graph_executor';
import { GraphOutputStreamResponse } from './nodes/types';
/**
 * Represents a handler for a graph execution.
 */
export declare class GraphOutputStream {
    /**
     * The index of the execution.
     */
    readonly index: number;
    /**
     * The graph executor associated with the execution.
     * @internal
     */
    private graphExecutor;
    /**
     * The data associated with the execution.
     */
    private data;
    /**
     * Creates a new GraphOutputStream instance.
     * @param index - The index of the execution
     * @param graphExecutor - The graph executor associated with the execution
     * @internal
     */
    constructor(graphExecutor: GraphExecutor, index: number, data: ExternalReference);
    /**
     * Handles the response from a node.
     * @returns A promise that resolves to the response from the node
     */
    next(): Promise<GraphOutputStreamResponse>;
    /**
     * Checks the status of data and throws an error if there's a problem.
     *
     * @param data - External reference to the data to check
     * @throws InworldError if the data contains an error status
     */
    private checkStatus;
    private toListToolsData;
    private toToolCallsResults;
    private toLLMChatResponse;
    private toLLMCompletionResponse;
    private toTextStream;
    private toTTSStream;
    private toSpeechChunkStream;
    private toKnowledgeRecords;
    private toIntents;
    private toMatchedKeywords;
    private toClassificationResult;
    private toGoalAdvancement;
    private toMemoryState;
    private toText;
    private toLLMChatRequest;
    private toJson;
}
