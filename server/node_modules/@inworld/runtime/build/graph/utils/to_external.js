"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toExternal = toExternal;
const data_types_1 = require("../../common/data_types");
const expose_binary_1 = require("../../expose_binary");
function toExternal(output) {
    if (typeof output === 'string') {
        return new data_types_1.TextData(output);
    }
    else if (output instanceof data_types_1.GraphTypes.Audio) {
        return new data_types_1.AudioData(output);
    }
    else if (output instanceof data_types_1.GraphTypes.LLMChatRequest) {
        return data_types_1.LLMChatRequestData.fromLLMChatRequestInterface(output.request);
    }
    else if (output instanceof data_types_1.GraphTypes.TTSRequest) {
        return new data_types_1.TTSRequestData(output.request);
    }
    else if (output instanceof data_types_1.GraphTypes.TextStream) {
        return new data_types_1.BaseData(expose_binary_1.StreamStringFunctions.new(output.getStream(), null));
    }
    else if (output instanceof data_types_1.GraphTypes.TransformationStreamTextToText) {
        return output;
    }
    else if (output instanceof data_types_1.GraphTypes.TransformationStreamTextToTTS) {
        return output;
    }
    else if (output instanceof data_types_1.GraphTypes.SpeechChunkStream) {
        return new data_types_1.BaseData(expose_binary_1.SpeechChunkFunctions.toBaseStream(output.getStream()));
    }
    else if (output instanceof data_types_1.GraphTypes.TTSOutputStream) {
        return new data_types_1.BaseData(expose_binary_1.TTSOutputFunctions.toStream(output.getStream()));
    }
    else if (output instanceof data_types_1.GraphTypes.ToolCallRequest) {
        return data_types_1.ToolCallRequestData.fromToolCallInterfaces(output.toolCalls);
    }
    else if (output instanceof data_types_1.GraphTypes.ListToolsResponse) {
        return data_types_1.ListToolsResponseData.fromToolInterfaces(output.tools);
    }
    else if (output instanceof data_types_1.GraphTypes.ToolCallResponse) {
        return data_types_1.ToolCallResponseData.fromToolCallResultInterfaces(output.toolCallResults);
    }
    else {
        // catch-all
        return new data_types_1.JsonData(output);
    }
}
