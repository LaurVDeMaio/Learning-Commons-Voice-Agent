"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeConditionExecutor = void 0;
const node_api_1 = require("../node-api");
const from_external_1 = require("./utils/from_external");
/**
 * EdgeConditionExecutor class for implementing conditional edge logic.
 * Allows edges to be traversed only when specific conditions are met.
 * @internal
 */
class EdgeConditionExecutor {
    /**
     * Creates a new EdgeConditionExecutor with a condition callback.
     *
     * @param condition - Function that determines if the edge should be traversed
     */
    constructor(condition) {
        const wrappedCondition = async function WrappedCondition(context, input) {
            try {
                const inputData = (0, from_external_1.fromExternal)(input);
                return await condition(inputData);
            }
            catch (error) {
                // On error, don't traverse the edge
                // eslint-disable-next-line no-console
                console.warn('Edge condition callback error:', error);
                return false;
            }
        };
        this.callbackWrapper = (0, node_api_1.createNodeCallbackWrapper)(wrappedCondition);
    }
    /**
     * Gets the callback wrapper for use with C++ bindings.
     *
     * @returns Callback wrapper reference
     */
    getCallbackWrapper() {
        return this.callbackWrapper;
    }
    /**
     * Cleans up resources associated with this executor.
     * Note: With the new Node-API system, cleanup is handled automatically.
     */
    destroy() {
        this.callbackWrapper = null;
    }
}
exports.EdgeConditionExecutor = EdgeConditionExecutor;
