import { LocalLLMConfigInterface, RemoteLLMConfigInterface } from '../primitives/llm';
import { LocalSTTConfigInterface, RemoteSTTConfigInterface } from '../primitives/stt';
import { RemoteTTSConfigInterface } from '../primitives/tts';
export default class ComponentRegistry {
    /**
     * Registers a remote LLM component in the component registry.
     *
     * @param componentId - Unique identifier for the LLM component
     * @param llmConfig - Configuration for the remote LLM
     * @returns Promise resolving to the component registry instance
     */
    static registerRemoteLLMComponent(componentId: string, llmConfig: RemoteLLMConfigInterface): Promise<any>;
    /**
     * Registers a local LLM component in the component registry.
     *
     * @param componentId - Unique identifier for the LLM component
     * @param llmConfig - Configuration for the local LLM
     * @returns Promise resolving to the component registry instance
     */
    static registerLocalLLMComponent(componentId: string, llmConfig: LocalLLMConfigInterface): Promise<any>;
    /**
     * Registers a remote STT component in the component registry.
     *
     * @param componentId - Unique identifier for the STT component
     * @param sttConfig - Configuration for the remote STT
     * @returns Promise resolving to the component registry instance
     */
    static registerRemoteSTTComponent(componentId: string, sttConfig: RemoteSTTConfigInterface): Promise<any>;
    /**
     * Registers a local STT component in the component registry.
     *
     * @param componentId - Unique identifier for the STT component
     * @param sttConfig - Configuration for the local STT
     * @returns Promise resolving to the component registry instance
     */
    static registerLocalSTTComponent(componentId: string, sttConfig: LocalSTTConfigInterface): Promise<any>;
    /**
     * Registers a remote TTS component in the component registry.
     *
     * @param componentId - Unique identifier for the TTS component
     * @param ttsConfig - Configuration for the remote TTS
     * @returns Promise resolving to the component registry instance
     */
    static registerRemoteTTSComponent(componentId: string, ttsConfig: RemoteTTSConfigInterface): Promise<any>;
    static initializeRegistries(): void;
    static getComponentRegistry(): any;
    static destroy(): any;
}
