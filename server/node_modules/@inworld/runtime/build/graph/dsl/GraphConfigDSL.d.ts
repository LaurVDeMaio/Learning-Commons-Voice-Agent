import { Camelize } from 'camelize-ts';
import { SpeechSynthesisConfigInterface } from '../../primitives/tts';
import { Graph as RuntimeGraph } from '../graph';
import { Component, Intent, IntentMatcherConfig, InworldBasicConfigurationSchema, LLMChatNodeExecutionConfig, LLMCompletionNodeExecutionConfig, MCPSessionCreationConfig, MessageTemplate, Node, NodeExecutionConfig, RemoteSTTConfig, RetrievalConfig, Subgraph, TextGenerationConfig, Tool, Voice } from './GraphConfigSchema';
type LLMNode = Node & {
    llmConfig?: {
        provider: string;
        modelName: string;
        apiKey: string;
        textGenerationConfig?: Camelize<TextGenerationConfig>;
    };
};
type LLMChatNodeExecutionConfigDslFull = {
    id: string;
    executionConfig: Camelize<LLMChatNodeExecutionConfig>;
};
type LLMChatNodeExecutionConfigDslFast = {
    id: string;
    llmConfig: {
        provider: string;
        modelName: string;
        apiKey: string;
        textGenerationConfig?: Camelize<TextGenerationConfig>;
        stream?: boolean;
        reportToClient?: boolean;
    };
};
type LLMCompletionNodeExecutionConfigDslFull = {
    id: string;
    executionConfig: Camelize<LLMCompletionNodeExecutionConfig>;
};
type LLMCompletionNodeExecutionConfigDslFast = {
    id: string;
    llmConfig: {
        provider: string;
        modelName: string;
        apiKey: string;
        textGenerationConfig?: Camelize<TextGenerationConfig>;
        stream?: boolean;
        reportToClient?: boolean;
    };
};
export type LLMCompletionNodeExecutionConfigDsl = LLMCompletionNodeExecutionConfigDslFull | LLMCompletionNodeExecutionConfigDslFast;
export type RequestBuilderToolChoice = {
    type?: 'string';
    [k: string]: unknown;
} | {
    type?: 'function';
    function: {
        type: 'function';
        name: string;
    };
};
export type LLMChatNodeExecutionConfigDsl = LLMChatNodeExecutionConfigDslFull | LLMChatNodeExecutionConfigDslFast;
export declare class NodeFactory {
    static createRemoteLLMChatNode(config: LLMChatNodeExecutionConfigDsl): LLMNode;
    static createRemoteLLMCompletionNode(config: LLMCompletionNodeExecutionConfigDsl): LLMNode;
    static createIntentNode(config: {
        id: string;
        intents: Intent[];
        embedderComponentId?: string;
        llmComponentId?: string;
        matcherConfig?: Camelize<IntentMatcherConfig>;
        reportToClient?: boolean;
    }): Node;
    static createKnowledgeNode(config: {
        id: string;
        knowledgeId: string;
        knowledgeRecords: string[];
        knowledgeComponentId: string;
        retrievalConfig?: Camelize<RetrievalConfig>;
    }): Node;
    static createRemoteTTSNode(config: {
        id: string;
        ttsComponentId: string;
        voice?: Camelize<Voice>;
        synthesisConfig?: Camelize<SpeechSynthesisConfigInterface>;
    }): Node;
    static createRemoteSTTNode(config: {
        id: string;
        sttComponentId: string;
    }): Node;
    static createTextChunkingNode(config: {
        id: string;
        reportToClient?: boolean;
    }): Node;
    static createTextAggregatorNode(config: {
        id: string;
        reportToClient?: boolean;
    }): Node;
    static createRandomCannedTextNode(config: {
        id: string;
        cannedPhrases: string[];
    }): Node;
    static createLLMChatRequestBuilderNode(config: {
        id: string;
        messages?: MessageTemplate[];
        tools?: Tool[];
        toolChoice?: RequestBuilderToolChoice;
        responseFormat?: 'text' | 'json' | 'json_schema';
        reportToClient?: boolean;
    }): Node;
    static createProxyNode(config: {
        id: string;
        reportToClient?: boolean;
    }): Node;
    static createMCPListToolsNode(config: {
        id: string;
        mcpComponentId: string;
        reportToClient?: boolean;
    }): Node;
    static createMCPCallToolNode(config: {
        id: string;
        mcpComponentId: string;
        reportToClient?: boolean;
    }): Node;
    static createCustomNode(config: {
        id: string;
        type: string;
        executionConfig?: Camelize<NodeExecutionConfig>;
    }): Node;
    static createSubgraphNode(config: {
        id: string;
        subgraphId: string;
        parameters?: {
            [k: string]: string | number | boolean;
        };
    }): Node;
}
export declare class ComponentFactory {
    static createRemoteLLMComponent(config: {
        id: string;
        provider: string;
        modelName: string;
        apiKey: string;
        defaultConfig?: Camelize<TextGenerationConfig>;
    }): Component;
    static createRemoteEmbedderComponent(config: {
        id: string;
        provider: string;
        modelName: string;
        apiKey: string;
    }): Component;
    static createRemoteKnowledgeComponent(config: {
        id: string;
        apiKey: string;
        maxCharsPerChunk?: number;
        maxChunksPerDocument?: number;
    }): Component;
    static createRemoteSTTComponent(config: {
        id: string;
        sttConfig: Camelize<RemoteSTTConfig>;
    }): Component;
    static createRemoteTTSComponent(config: {
        id: string;
        apiKey: string;
        synthesisConfig?: Camelize<SpeechSynthesisConfigInterface>;
    }): Component;
    static createMCPClientComponent(config: {
        id: string;
        sessionConfig: Camelize<MCPSessionCreationConfig>;
    }): Component;
}
export declare class SubgraphBuilder {
    private subgraph;
    private nodes;
    private edges;
    private startNode;
    private endNode;
    constructor(id: string);
    addParameter(config: {
        name: string;
        type: 'string' | 'number' | 'integer' | 'boolean';
    }): this;
    addParameters(parameters: {
        name: string;
        type: 'string' | 'number' | 'integer' | 'boolean';
    }[]): this;
    addNode(node: Node): this;
    addEdge(fromNode: Node | string, toNode: Node | string, options?: {
        conditionExpression?: string;
        optional?: boolean;
        loop?: boolean;
    }): this;
    setStartNode(node: Node | string): this;
    setEndNode(node: Node | string): this;
    build(): Subgraph;
}
export declare class Graph {
    private config;
    private nodes;
    private edges;
    private components;
    private subgraphs;
    private startNodes;
    private endNodes;
    constructor(id?: string);
    addSubgraph(subgraph: Subgraph | SubgraphBuilder): this;
    addNode(node: Node | LLMNode): this;
    addEdge(fromNode: Node | string, toNode: Node | string, options?: {
        conditionExpression?: string;
        optional?: boolean;
        loop?: boolean;
    }): this;
    addComponent(component: Component): this;
    setStartNode(node: Node | string): this;
    setEndNode(node: Node | string): this;
    setStartNodes(nodes: (Node | string)[]): this;
    setEndNodes(nodes: (Node | string)[]): this;
    build(): InworldBasicConfigurationSchema;
    toJSON(): string;
    getExecutor(): RuntimeGraph;
}
export declare const DEFAULT_TEXT_CONFIG: TextGenerationConfig;
export declare const DEFAULT_INTENT_MATCHER_CONFIG: IntentMatcherConfig;
export declare const DEFAULT_RETRIEVAL_CONFIG: RetrievalConfig;
export declare const DEFAULT_LLM_MODEL_NAME = "meta-llama/Llama-3.1-70b-Instruct";
export declare const DEFAULT_EMBEDDER_MODEL_NAME = "text-embedding-ada-002";
export declare const DEFAULT_PROVIDER = "inworld";
export {};
