import { Component as GraphConfigComponent } from '../graph_config_schema';
import { AbstractComponent, AbstractComponentProps } from './abstract_component';
/**
 * @typedef {Object} RemoteEmbedderComponentProps
 * @property {string} [id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
 * @property {string} [provider] - Embedder provider (e.g., 'openai', 'inworld').
 * @property {string} [modelName] - Provider-specific model name.
 *
 * Configuration interface for `RemoteEmbedderComponent` creation.
 *
 * @remarks
 * If `provider` or `modelName` are omitted, defaults from DSL constants are used.
 */
interface RemoteEmbedderComponentProps extends AbstractComponentProps {
    /** LLM provider (e.g., 'openai', 'anthropic', 'inworld') */
    provider?: string;
    /** Model name to use. Model name is specific to the selected provider */
    modelName?: string;
}
/**
 * Remote embedder component for text embedding services.
 * Provides access to external embedding providers for converting text into
 * vector representations used for similarity matching and retrieval.
 *
 * @example
 * ```typescript
 * const embedderComponent = new RemoteEmbedderComponent({
 *   provider: 'openai',
 *   modelName: 'text-embedding-ada-002',
 * });
 * ```
 */
export declare class RemoteEmbedderComponent extends AbstractComponent {
    private provider;
    private modelName;
    /**
     * Creates a new RemoteEmbedderComponent instance.
     *
     * @param {Object} props - Configuration for the remote embedder component
     * @param {string} [props.id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
     * @param {string} [props.provider] - Embedder provider (e.g., 'openai', 'inworld')
     * @param {string} [props.modelName] - Provider-specific model name.
     */
    constructor(props: RemoteEmbedderComponentProps);
    /**
     * Converts the remote embedder component to a graph configuration component.
     *
     * @returns The configured remote embedder component for graph execution
     */
    protected toGraphConfigComponent(): GraphConfigComponent;
}
export {};
