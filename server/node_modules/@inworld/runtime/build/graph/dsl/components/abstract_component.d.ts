import { Component as GraphConfigComponent } from '../graph_config_schema';
export declare const TO_GRAPH_CONFIG_COMPONENT: unique symbol;
/**
 * Base configuration for any graph component.
 *
 * @typedef {Object} AbstractComponentProps
 * @property {string} [id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
 * a unique ID based on the class name is generated.
 */
export interface AbstractComponentProps {
    id?: string;
}
/**
 * Abstract base class for all DSL components.
 *
 * Provides common functionality such as ID generation and conversion to a
 * graph configuration component.
 */
export declare abstract class AbstractComponent {
    private static componentsByTypeCounter;
    id: string;
    /**
     * Creates a new `AbstractComponent`.
     *
     * @param {Object} [props] - Component configuration
     * @param {string} [props.id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
     */
    constructor(props?: AbstractComponentProps);
    private static getId;
    /**
     * Converts this DSL component to a serializable graph configuration component.
     */
    [TO_GRAPH_CONFIG_COMPONENT](): GraphConfigComponent;
    /**
     * Implemented by subclasses to provide their graph configuration
     * representation.
     */
    protected abstract toGraphConfigComponent(): GraphConfigComponent;
}
