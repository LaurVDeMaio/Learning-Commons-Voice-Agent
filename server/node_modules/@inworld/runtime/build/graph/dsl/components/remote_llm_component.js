"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteLLMComponent = void 0;
const constants_1 = require("../constants");
const snakify_1 = __importDefault(require("../utils/snakify"));
const abstract_component_1 = require("./abstract_component");
/**
 * Remote LLM component for text generation services.
 * This component provides access to external LLM providers like OpenAI, Anthropic, or Inworld.
 * It sets defaults for provider/model and carries default text generation config.
 *
 * @remarks
 * API key injection is handled by the graph builder at assembly time. You do not
 * need to include secrets in this component definition.
 *
 * @example
 * ```typescript
 * const llmComponent = new RemoteLLMComponent({
 *   id: 'my-llm-component',
 *   provider: 'openai',
 *   modelName: 'gpt-4o-mini',
 *   defaultConfig: {
 *     temperature: 0.7,
 *     maxNewTokens: 1000
 *   }
 * });
 * ```
 */
class RemoteLLMComponent extends abstract_component_1.AbstractComponent {
    /**
     * Creates a new `RemoteLLMComponent` instance.
     *
     * Defaults to a provider and model when omitted, and accepts a camelCased
     * `defaultConfig` that will be converted to snake_case for the runtime.
     *
     * @param {Object} [props] - Configuration for the remote LLM component
     * @param {string} [props.id] - Optional explicit component identifier
     * @param {string} [props.provider] - LLM provider (e.g., 'openai', 'anthropic', 'inworld')
     * @param {string} [props.modelName] - Provider-specific model name (e.g., 'gpt-4o-mini')
     * @param {import('../graph_config_schema').TextGenerationConfig} [props.defaultConfig] - Default text generation config (camelCase required)
     */
    constructor(props) {
        var _a, _b, _c;
        super(props);
        this.provider = (_a = props === null || props === void 0 ? void 0 : props.provider) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_PROVIDER;
        this.modelName = (_b = props === null || props === void 0 ? void 0 : props.modelName) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_LLM_MODEL_NAME;
        this.defaultConfig = (_c = props === null || props === void 0 ? void 0 : props.defaultConfig) !== null && _c !== void 0 ? _c : {};
    }
    /**
     * Converts the remote LLM component to a graph configuration component.
     *
     * @returns The configured remote LLM component for graph execution
     */
    toGraphConfigComponent() {
        return {
            id: this.id,
            type: 'LLMInterface',
            creation_config: {
                type: 'RemoteLLMConfig',
                properties: {
                    provider: this.provider,
                    model_name: this.modelName,
                    default_config: (0, snakify_1.default)(this.defaultConfig),
                },
            },
        };
    }
}
exports.RemoteLLMComponent = RemoteLLMComponent;
