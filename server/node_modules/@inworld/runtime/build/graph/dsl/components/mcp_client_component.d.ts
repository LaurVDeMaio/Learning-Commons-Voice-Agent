import { Camelize } from '../constants';
import { Component as GraphConfigComponent, MCPSessionCreationConfig } from '../graph_config_schema';
import { AbstractComponent, AbstractComponentProps } from './abstract_component';
/**
 * @typedef {Object} MCPClientComponentProps
 * @property {string} [id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
 * @property {import('../graph_config_schema').MCPSessionCreationConfig} sessionConfig - MCP session config (camelCase required).
 *
 * Configuration interface for `MCPClientComponent` creation.
 *
 * @remarks
 * `sessionConfig` follows the `MCPSessionCreationConfig` shape but accepts
 * camelCase keys. It will be converted to snake_case when producing the
 * runtime configuration.
 */
interface MCPClientComponentProps extends AbstractComponentProps {
    /** MCP session configuration */
    sessionConfig: Camelize<MCPSessionCreationConfig>;
}
/**
 * MCP client component for Model Context Protocol services.
 * This component provides access to MCP servers for tool calling and context management,
 * enabling integration with external tools and services through the MCP protocol.
 *
 * @remarks
 * This component does not require API key injection by the builder.
 *
 * @example
 * ```typescript
 * const mcpComponent = new MCPClientComponent({
 *   sessionConfig: {
 *     serverPath: '/path/to/mcp-server',
 *     serverArgs: ['--config', 'config.json'],
 *     timeout: 30000
 *   }
 * });
 * ```
 */
export declare class MCPClientComponent extends AbstractComponent {
    private sessionConfig;
    /**
     * Creates a new `MCPClientComponent` instance.
     *
     * The provided camelCase `sessionConfig` is converted to snake_case when
     * generating the runtime configuration.
     *
     * @param {Object} props - Configuration for the MCP client component
     * @param {string} [props.id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
     * @param {import('../graph_config_schema').MCPSessionCreationConfig} props.sessionConfig - MCP session config (camelCase allowed)
     */
    constructor(props: MCPClientComponentProps);
    /**
     * Converts the MCP client component to a graph configuration component.
     *
     * @returns The configured MCP client component for graph execution
     */
    protected toGraphConfigComponent(): GraphConfigComponent;
}
export {};
