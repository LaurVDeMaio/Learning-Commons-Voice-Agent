import { Component as GraphConfigComponent } from '../graph_config_schema';
import { AbstractComponent, AbstractComponentProps } from './abstract_component';
/**
 * @typedef {Object} RemoteKnowledgeComponentProps
 * @property {string} [id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
 * @property {number} [maxCharsPerChunk] - Maximum characters per chunk (default: 1000).
 * @property {number} [maxChunksPerDocument] - Maximum chunks per document (default: 10).
 *
 * Configuration interface for `RemoteKnowledgeComponent` creation.
 *
 * @remarks
 * If omitted, defaults are used: `maxCharsPerChunk = 1000`, `maxChunksPerDocument = 10`.
 */
interface RemoteKnowledgeComponentProps extends AbstractComponentProps {
    /** Maximum characters per chunk (default: 1000) */
    maxCharsPerChunk?: number;
    /** Maximum chunks per document (default: 10) */
    maxChunksPerDocument?: number;
}
/**
 * Remote knowledge component for knowledge base services.
 * Provides access to external knowledge storage and retrieval services,
 * handling document parsing, chunking, and embedding for semantic search.
 *
 * @example
 * ```typescript
 * const knowledgeComponent = new RemoteKnowledgeComponent({
 *   maxCharsPerChunk: 1500,
 *   maxChunksPerDocument: 20
 * });
 * ```
 */
export declare class RemoteKnowledgeComponent extends AbstractComponent {
    private maxCharsPerChunk;
    private maxChunksPerDocument;
    /**
     * Creates a new RemoteKnowledgeComponent instance.
     *
     * @param {Object} props - Configuration for the remote knowledge component
     * @param {string} [props.id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
     * @param {number} [props.maxCharsPerChunk=1000] - Maximum characters per chunk
     * @param {number} [props.maxChunksPerDocument=10] - Maximum chunks per document
     */
    constructor(props: RemoteKnowledgeComponentProps);
    /**
     * Converts the remote knowledge component to a graph configuration component.
     *
     * @returns The configured remote knowledge component for graph execution
     */
    protected toGraphConfigComponent(): GraphConfigComponent;
}
export {};
