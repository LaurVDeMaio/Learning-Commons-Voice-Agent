import { CustomNodeInputTypes, CustomNodeOutputTypes } from '../../../../common/data_types/type_mapping';
import { ProcessContext } from '../../../nodes';
import { CustomNodeTypeReference } from '../../../nodes/types';
import { Node as GraphConfigNode } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './AbstractNode';
interface CustomNodeProps extends AbstractNodeProps {
    executionConfig?: {
        [key: string]: string | number | boolean;
    };
}
export declare abstract class CustomNode extends AbstractNode {
    private executionConfig;
    protected static typeReferences: {
        [key: string]: CustomNodeTypeReference;
    };
    constructor(props?: CustomNodeProps);
    abstract process(context: ProcessContext, ...inputs: CustomNodeInputTypes[]): CustomNodeOutputTypes | Promise<CustomNodeOutputTypes>;
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
