import { RemoteKnowledgeComponent } from '../../components/RemoteKnowledgeComponent';
import { Camelize } from '../../constants';
import { Node as GraphConfigNode, RetrievalConfig } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './AbstractNode';
/**
 * Configuration for KnowledgeNode using knowledge provider settings.
 * This approach creates both the node and the underlying knowledge component.
 */
interface KnowledgeNodeProps extends AbstractNodeProps {
    /** ID of the knowledge collection */
    knowledgeId: string;
    /** Collection of knowledge records */
    knowledgeRecords: string[];
    /** Maximum characters per chunk (default: 1000) */
    maxCharsPerChunk?: number;
    /** Maximum chunks per document (default: 10) */
    maxChunksPerDocument?: number;
    /** Configuration for retrieving relevant information */
    retrievalConfig?: Camelize<RetrievalConfig>;
}
/**
 * Configuration for KnowledgeNode using an existing knowledge component.
 * This approach references a pre-configured knowledge component that could be reused across multiple nodes.
 */
interface KnowledgeNodeWithComponentProps extends AbstractNodeProps {
    /** ID of the knowledge collection */
    knowledgeId: string;
    /** Collection of knowledge records */
    knowledgeRecords: string[];
    /** ID of the existing knowledge component to use */
    knowledgeComponent: RemoteKnowledgeComponent;
    /** Configuration for retrieving relevant information */
    retrievalConfig?: Camelize<RetrievalConfig>;
}
/**
 * Knowledge retrieval node for accessing stored information.
 * You can either use a pre-configured knowledge component that could be reused across multiple nodes
 * or node will create a new component for you.
 *
 * @input {TextData} {@link TextData} - The data type that KnowledgeNode accepts as input
 * @output {KnowledgeRecords} {@link KnowledgeRecordsData} - The data type that KnowledgeNode accepts as output
 *
 * @example
 * ```typescript
 * // Using knowledge provider configuration
 * const knowledgeNode = new KnowledgeNode({
 *   id: 'my-knowledge-node',
 *   knowledgeId: 'company-docs',
 *   knowledgeRecords: ['policy-1', 'policy-2', 'faq-1'],
 *   apiKey: 'your-api-key',
 *   retrievalConfig: {
 *     threshold: 0.8,
 *     topK: 3
 *   }
 * });
 *
 * // Using existing knowledge component
 * const knowledgeNodeWithComponent = new KnowledgeNode({
 *   id: 'my-knowledge-node',
 *   knowledgeId: 'company-docs',
 *   knowledgeRecords: ['policy-1', 'policy-2', 'faq-1'],
 *   knowledgeComponentId: 'existing-knowledge-component'
 * });
 * ```
 */
export declare class KnowledgeNode extends AbstractNode {
    private knowledgeId;
    private knowledgeRecords;
    private retrievalConfig;
    /**
     * Creates a new KnowledgeNode instance.
     *
     * @param props - Configuration for the knowledge node. Can specify either knowledge provider settings
     *                or reference an existing knowledge component, but not both.
     */
    constructor(props: KnowledgeNodeProps | KnowledgeNodeWithComponentProps);
    /**
     * Converts the knowledge node to a graph configuration node.
     *
     * @returns The configured knowledge node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
