import { Node as GraphConfigNode } from 'graph/dsl/graph_config_schema';
import { ExtractOutputTypeFromSpec, InferInputTypesFromSpecs, InputTypeSpec, OutputTypeSpec } from '../../../../common/data-types/type-mapping';
import { CustomNodeTypeReference, ProcessContext } from '../../../../graph/nodes';
import { AbstractNode, AbstractNodeProps } from '../builtin/AbstractNode';
interface CustomNodeProps extends AbstractNodeProps {
    executionConfig: {
        [key: string]: string | number | boolean;
    };
}
export declare abstract class CustomNode extends AbstractNode {
    private executionConfig;
    constructor(props?: CustomNodeProps);
    protected abstract typeRef: CustomNodeTypeReference;
    protected inputTypes: readonly InputTypeSpec[];
    protected outputType: OutputTypeSpec;
    protected registerCutomNodeType<IT extends readonly InputTypeSpec[], OT extends OutputTypeSpec>(inputTypes: readonly [...IT], outputType: OT, processFunction: (context: ProcessContext, ...inputs: InferInputTypesFromSpecs<IT>) => ExtractOutputTypeFromSpec<OT> | Promise<ExtractOutputTypeFromSpec<OT>>): CustomNodeTypeReference;
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
