"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteLLMChatNode = void 0;
const RemoteLLMComponent_1 = require("../../components/RemoteLLMComponent");
const constants_1 = require("../../constants");
const snakify_1 = __importDefault(require("../../utils/snakify"));
const AbstractNode_1 = require("./AbstractNode");
/**
 * Remote LLM chat node.
 * You can either use a pre-configured LLM component that could be reused across multiple nodes
 * or provide the LLM provider and model name and the node will create a new component for you.
 *
 * @input {LLMChatRequest} {@link LLMChatRequestData} - The data type that LLMChatNode accepts as input
 * @output {LLMChatResponse} {@link LLMChatResponseData} - The data type that LLMChatNode accepts as output
 *
 * @example
 * ```typescript
 * // Using LLM provider configuration
 * const llmNode = new RemoteLLMChatNode({
 *   id: 'my-llm-node',
 *   provider: 'openai',
 *   modelName: 'gpt-4o-mini',
 *   stream: true
 * });
 *
 * // Using existing LLM component
 * const llmNodeWithComponent = new RemoteLLMChatNode({
 *   id: 'my-llm-node',
 *   llmComponent: existingLLMComponent
 * });
 *
 * // Using default settings
 * const defaultLlmNode = new RemoteLLMChatNode();
 * ```
 */
class RemoteLLMChatNode extends AbstractNode_1.AbstractNode {
    /**
     * Creates a new RemoteLLMChatNode instance.
     *
     * @param props - Optional configuration for the LLM chat node. Can specify either LLM provider settings
     *                or reference an existing LLM component, but not both. If not provided, uses default settings.
     */
    constructor(props = {}) {
        var _a, _b, _c, _d, _e;
        super(props);
        this.executionConfig = {
            llmComponentId: '',
            textGenerationConfig: Object.assign({}, (0, snakify_1.default)((_a = props.textGenerationConfig) !== null && _a !== void 0 ? _a : {})),
            stream: (_b = props.stream) !== null && _b !== void 0 ? _b : false,
            reportToClient: (_c = props.reportToClient) !== null && _c !== void 0 ? _c : false,
        };
        let llmComponent;
        if ('llmComponent' in props) {
            llmComponent = props.llmComponent;
        }
        else {
            llmComponent = new RemoteLLMComponent_1.RemoteLLMComponent({
                id: `${this.id}_llm_component`,
                provider: (_d = props.provider) !== null && _d !== void 0 ? _d : constants_1.DEFAULT_PROVIDER,
                modelName: (_e = props.modelName) !== null && _e !== void 0 ? _e : constants_1.DEFAULT_LLM_MODEL_NAME,
            });
        }
        this.executionConfig.llmComponentId = llmComponent.id;
        this.addComponent(llmComponent);
    }
    toGraphConfigNode() {
        return {
            id: this.id,
            type: 'LLMChatNode',
            execution_config: {
                type: 'LLMChatNodeExecutionConfig',
                properties: (0, snakify_1.default)(this.executionConfig),
            },
        };
    }
}
exports.RemoteLLMChatNode = RemoteLLMChatNode;
