import { RemoteLLMComponent } from '../../components/remote_llm_component';
import { Camelize } from '../../constants';
import { Node as GraphConfigNode, TextGenerationConfig } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './abstract_node';
/**
 * Configuration for RemoteLLMChatNode using LLM provider settings.
 * This approach creates both the node and the underlying LLM component.
 * Provider and modelName are optional and will use defaults if not specified.
 */
interface RemoteLLMChatNodeProps extends AbstractNodeProps {
    /** Text generation configuration parameters */
    textGenerationConfig?: Camelize<TextGenerationConfig>;
    /** Whether to stream responses */
    stream?: boolean;
    /** LLM provider (e.g., 'openai', 'anthropic', 'inworld') */
    provider?: string;
    /** Model name specific to the provider (e.g., 'gpt-4', 'claude-3-5-sonnet-20241022') */
    modelName?: string;
}
/**
 * Configuration for RemoteLLMChatNode using an existing LLM component.
 * This approach references a pre-configured LLM component that could be reused across multiple nodes.
 */
interface RemoteLLMChatNodeWithLLMComponentProps extends AbstractNodeProps {
    /** ID of the existing LLM component to use */
    llmComponent: RemoteLLMComponent;
    /** Text generation configuration parameters */
    textGenerationConfig?: Camelize<TextGenerationConfig>;
    /** Whether to stream responses */
    stream?: boolean;
}
/**
 * Remote LLM chat node.
 * You can either use a pre-configured LLM component that could be reused across multiple nodes
 * or provide the LLM provider and model name and the node will create a new component for you.
 *
 * @input {LLMChatRequest} {@link GraphTypes.LLMChatRequest} - The data type that LLMChatNode accepts as input
 * @output {LLMChatResponse} {@link GraphTypes.LLMChatResponse} - The data type that LLMChatNode outputs
 *
 * @example
 * ```typescript
 * // Using LLM provider configuration
 * const llmNode = new RemoteLLMChatNode({
 *   id: 'my-llm-node',
 *   provider: 'openai',
 *   modelName: 'gpt-4o-mini',
 *   stream: true
 * });
 *
 * // Using existing LLM component
 * const llmNodeWithComponent = new RemoteLLMChatNode({
 *   id: 'my-llm-node',
 *   llmComponent: existingLLMComponent
 * });
 *
 * // Using default settings
 * const defaultLlmNode = new RemoteLLMChatNode();
 * ```
 */
export declare class RemoteLLMChatNode extends AbstractNode {
    private executionConfig;
    /**
     * Creates a new RemoteLLMChatNode instance.
     *
     * @param props - Optional configuration for the LLM chat node. Can specify either LLM provider settings
     *                or reference an existing LLM component, but not both. If not provided, uses default settings.
     */
    constructor(props?: RemoteLLMChatNodeProps | RemoteLLMChatNodeWithLLMComponentProps);
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
