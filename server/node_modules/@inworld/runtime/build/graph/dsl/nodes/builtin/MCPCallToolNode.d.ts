import { MCPClientComponent } from '../../components/MCPClientComponent';
import { Camelize } from '../../constants';
import { MCPSessionCreationConfig, Node as GraphConfigNode } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './AbstractNode';
interface MCPCallToolNodeProps extends AbstractNodeProps {
    /** MCP session configuration */
    sessionConfig: Camelize<MCPSessionCreationConfig>;
}
/**
 * Configuration interface for MCPCallToolNode creation.
 */
interface MCPCallToolNodeWithComponentProps extends AbstractNodeProps {
    /** ID of the MCP component to use */
    mcpComponent: MCPClientComponent;
}
/**
 * MCP call tool node that calls multiple tools on an MCP server in parallel.
 * This node processes tool call requests and executes them against the configured
 * MCP server, returning the results of all tool executions.
 *
 * @input {ToolCallRequestData} {@link ToolCallRequestData} - The data type that MCPCallToolNode accepts as input
 * @output {ToolCallResponseData} {@link ToolCallResponseData} - The data type that MCPCallToolNode accepts as output
 *
 * @example
 * ```typescript
 * const mcpCallToolNode = new MCPCallToolNode({
 *   id: 'mcp-call-tool',
 *   mcpComponentId: 'my-mcp-component',
 *   reportToClient: true
 * });
 * ```
 */
export declare class MCPCallToolNode extends AbstractNode {
    /**
     * Creates a new MCPCallToolNode instance.
     *
     * @param props - Configuration for the MCP call tool node
     */
    constructor(props: MCPCallToolNodeProps | MCPCallToolNodeWithComponentProps);
    /**
     * Converts the MCP call tool node to a graph configuration node.
     *
     * @returns The configured MCP call tool node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
