import { Node as GraphConfigNode } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './AbstractNode';
/**
 * Configuration interface for SubgraphNode creation.
 */
interface SubgraphNodeProps extends AbstractNodeProps {
    /** ID of the subgraph to reference */
    subgraphId: string;
    /** Parameters to pass to the subgraph */
    parameters?: {
        [k: string]: string | number | boolean;
    };
}
/**
 * Subgraph node that represents a compiled subgraph.
 * This node allows you to execute another graph as a component within the current graph,
 * enabling modular and reusable graph architectures.
 *
 * @input {any} any - The data type that SubgraphNode accepts as input
 * @output {any} any - The data type that SubgraphNode accepts as output
 *
 * @example
 * ```typescript
 * const subgraphNode = new SubgraphNode({
 *   id: 'intent-processing-subgraph',
 *   subgraphId: 'intent-handler-v2',
 *   parameters: {
 *     confidence_threshold: 0.8,
 *     max_intents: 5,
 *     fallback_enabled: true
 *   }
 * });
 * ```
 */
export declare class SubgraphNode extends AbstractNode {
    private subgraphId;
    private parameters?;
    /**
     * Creates a new SubgraphNode instance.
     *
     * @param props - Configuration for the subgraph node
     */
    constructor(props: SubgraphNodeProps);
    /**
     * Converts the subgraph node to a graph configuration node.
     *
     * @returns The configured subgraph node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
