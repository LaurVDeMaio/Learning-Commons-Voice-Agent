import { RemoteTTSComponent } from '../../components/RemoteTTSComponent';
import { Node as GraphConfigNode } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './AbstractNode';
/**
 * Configuration for RemoteTTSNode using provider settings.
 * This approach creates both the node and the underlying TTS component.
 */
interface RemoteTTSNodeProps extends AbstractNodeProps {
    /** Voice configuration for synthesis */
    speakerId?: string;
    languageCode?: string;
    modelId?: string;
    temperature?: number;
    speakingRate?: number;
    sampleRate?: number;
    ttsComponent?: RemoteTTSComponent;
}
/**
 * Remote TTS (Text-to-Speech) node for audio synthesis.
 * You can either use a pre-configured TTS component that could be reused across multiple nodes
 * or provide synthesis configuration, and the node will create a new component for you.
 *
 * @input {TextData | TextStreamData | TTSRequestData} {@link TextData} | {@link TextStreamData} | {@link TTSRequestData} - The data type that TTSNode accepts as input
 * @output {TTSOutputData} {@link TTSOutputData} - The data type that TTSNode accepts as output
 *
 * @example
 * ```typescript
 * // Using provider configuration
 * const ttsNode = new RemoteTTSNode({
 *   id: 'my-tts-node',
 *   synthesisConfig: {
 *     type: 'inworld',
 *     config: { inference: { temperature: 1.0 } }
 *   }
 * });
 *
 * // Using existing TTS component
 * const ttsNodeWithComponent = new RemoteTTSNode({
 *   id: 'my-tts-node',
 *   ttsComponent: existingTTSComponent
 * });
 * ```
 */
export declare class RemoteTTSNode extends AbstractNode {
    private executionConfig;
    private mergeSynthesisConfigWithDefault;
    /**
     * Creates a new RemoteTTSNode instance.
     *
     * @param props - Configuration for the TTS node. Can specify either synthesis settings
     *                or reference an existing TTS component, but not both.
     */
    constructor(props?: RemoteTTSNodeProps);
    /**
     * Converts the TTS node to a graph configuration node.
     *
     * @returns The configured TTS node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
