import { MCPClientComponent } from '../../components/mcp_client_component';
import { Camelize } from '../../constants';
import { MCPSessionCreationConfig, Node as GraphConfigNode } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './abstract_node';
interface MCPListToolsNodeProps extends AbstractNodeProps {
    /** MCP session configuration */
    sessionConfig: Camelize<MCPSessionCreationConfig>;
    /** Whether to report results to a client */
    reportToClient?: boolean;
}
/**
 * Configuration interface for MCPListToolsNode creation.
 */
interface MCPListToolsNodePropsWithComponent extends AbstractNodeProps {
    /** Existing MCP component to use */
    mcpComponent: MCPClientComponent;
    /** Whether to report results to a client */
    reportToClient?: boolean;
}
/**
 * MCP list tools node that lists available tools from an MCP server.
 * This node connects to an MCP server and retrieves the list of available
 * tools. It takes no inputs and returns a ListToolsResponseData containing all
 * available tools.
 *
 * @input {any} any - The data type that MCPListToolsNode accepts as input
 * @output {GraphTypes.ListToolsResponse} {@link GraphTypes.ListToolsResponse} - The data type that MCPListToolsNode outputs
 *
 * @example
 * ```typescript
 * const mcpComponent = new MCPClientComponent({ id: 'my-mcp-component', sessionConfig: { ... } });
 * const mcpListToolsNode = new MCPListToolsNode({
 *   mcpComponent,
 *   reportToClient: true
 * });
 * ```
 */
export declare class MCPListToolsNode extends AbstractNode {
    /**
     * Creates a new MCPListToolsNode instance.
     *
     * @param props - Configuration for the MCP list tools node
     */
    constructor(props: MCPListToolsNodeProps | MCPListToolsNodePropsWithComponent);
    /**
     * Converts the MCP list tools node to a graph configuration node.
     *
     * @returns The configured MCP list tools node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
