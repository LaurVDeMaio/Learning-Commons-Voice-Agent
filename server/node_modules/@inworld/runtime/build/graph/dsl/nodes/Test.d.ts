type ClassReference<T extends BaseInputType> = new (...args: any[]) => T;
type InstanceTypes<T extends readonly (new (...args: any[]) => any)[]> = {
    [P in keyof T]: InstanceType<T[P]>;
};
declare class BaseInputType {
    name: string;
    constructor(name: string);
}
declare class InputType extends BaseInputType {
    name: string;
    test: string;
    constructor(name: string);
}
declare abstract class TestNode {
    abstract readonly inputTypes: ClassReference<BaseInputType>[];
    abstract process(...inputs: InstanceTypes<this['inputTypes']>): string;
}
export declare class TestNodeTest extends TestNode {
    readonly inputTypes: readonly [typeof InputType];
    process(input: InputType): string;
}
export {};
