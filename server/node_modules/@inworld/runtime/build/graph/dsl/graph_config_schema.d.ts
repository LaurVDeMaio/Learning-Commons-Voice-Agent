/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "ComponentCreationConfig".
 */
export type ComponentCreationConfig = {
    [k: string]: unknown;
} & {
    /**
     * Type of creation configuration
     */
    type: ('LocalTextEmbedderConfig' | 'RemoteTextEmbedderConfig' | 'LocalLLMConfig' | 'RemoteLLMConfig' | 'LLMRoutingCreationConfig' | 'LocalAECFilterConfig' | 'LocalStreamingSTTConfig' | 'RemoteStreamingSTTConfig' | 'LocalSTTConfig' | 'RemoteSTTConfig' | 'RemoteTTSConfig' | 'LocalVADConfig' | 'LocalKnowledgeConfig' | 'RemoteKnowledgeConfig' | 'NERCreationConfig' | 'TextClassifierCreationConfig' | 'MCPClientCreationConfig') | string;
    /**
     * Configuration object specific to the creation type
     */
    properties: {
        [k: string]: unknown;
    };
};
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Node".
 */
export type Node = RegularNode | SubgraphNode;
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "NodeCreationConfig".
 */
export type NodeCreationConfig = {
    [k: string]: unknown;
} & {
    /**
     * Type of node creation configuration
     */
    type: ('KnowledgeNodeCreationConfig' | 'TextClassifierNodeCreationConfig' | 'IntentNodeCreationConfig' | 'GoalAdvancementNodeCreationConfig' | 'KeywordMatcherNodeCreationConfig') | string;
    /**
     * Node-specific creation configuration
     */
    properties: {
        [k: string]: unknown;
    };
};
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "NodeExecutionConfig".
 */
export type NodeExecutionConfig = {
    [k: string]: unknown;
} & {
    /**
     * Type of node execution configuration
     */
    type: ('NodeExecutionConfig' | 'GoalAdvancementNodeExecutionConfig' | 'IntentNodeExecutionConfig' | 'KnowledgeNodeExecutionConfig' | 'LLMChatNodeExecutionConfig' | 'LLMChatRequestBuilderNodeExecutionConfig' | 'LLMCompletionNodeExecutionConfig' | 'LLMPromptBuilderNodeExecutionConfig' | 'MemoryRetrieveNodeExecutionConfig' | 'RandomCannedTextNodeExecutionConfig' | 'STTNodeExecutionConfig' | 'TextClassifierNodeExecutionConfig' | 'TTSNodeExecutionConfig' | 'SafetyCheckerNodeExecutionConfig' | 'IntentEmbedderMatchNodeExecutionConfig' | 'MemoryUpdateNodeCreationConfig' | 'MCPListToolsNodeExecutionConfig' | 'MCPCallToolNodeExecutionConfig' | 'KeywordMatcherNodeCreationConfig' | 'IntentLLMPromptVariablesBuilderNodeExecutionConfig' | 'IntentTopNFilterNodeExecutionConfig') | string;
    /**
     * Node-specific execution configuration
     */
    properties: {
        [k: string]: unknown;
    };
};
/**
 * Template string in the format {{parameter_name}}
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "TemplateString".
 */
export type TemplateString = string;
/**
 * Speech synthesis configuration for the TTS model
 */
export type SpeechSynthesisConfig = {
    [k: string]: unknown;
} & {
    /**
     * Configuration variant for different TTS providers
     */
    config: {
        [k: string]: unknown;
    };
    type: 'inworld' | 'elevenlabs';
};
/**
 * Compiled intent with embeddings for runtime use
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "CompiledIntent".
 */
export type CompiledIntent = Intent & {
    /**
     * Normalized training phrases
     */
    normalized_phrases?: string[];
    /**
     * Embeddings for the phrases
     */
    phrase_embeddings?: number[][];
};
/**
 * Authentication configuration for MCP session
 */
export type MCPAuthConfig = {
    [k: string]: unknown;
} & {
    /**
     * Type of authentication configuration
     */
    type: 'http' | 'stdio';
    /**
     * Authentication configuration object
     */
    config: {
        [k: string]: unknown;
    };
};
/**
 * Authentication configuration for MCP
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MCPAuthConfig".
 */
export type MCPAuthConfig1 = {
    [k: string]: unknown;
};
/**
 * Text content that can be static or templated
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "TextContent".
 */
export type TextContent = {
    [k: string]: unknown;
} & {
    /**
     * Type of content: 'text' for direct text, 'template' for Jinja template
     */
    type: 'text' | 'template';
    [k: string]: unknown;
};
/**
 * Image content for multimodal messages
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "ImageContent".
 */
export type ImageContent = ImageContent1 & {
    /**
     * Content type identifier
     */
    type: 'image';
    /**
     * Image URL as static string
     */
    url?: string;
    /**
     * Image URL as Jinja template
     */
    url_template?: string;
    /**
     * Detail level for image processing: 'low', 'high', or 'auto'
     */
    detail?: string;
};
export type ImageContent1 = {
    [k: string]: unknown;
};
/**
 * Content item for multimodal messages
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "ChatMessageContent".
 */
export type ChatMessageContent = TextContent | ImageContent;
/**
 * Template for chat messages supporting both single text and multimodal content
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MessageTemplate".
 */
export type MessageTemplate = MessageTemplate1 & {
    /**
     * Role of the message sender
     */
    role: 'user' | 'assistant' | 'system';
    content?: TextContent1;
    /**
     * Multiple content items
     */
    content_items?: ChatMessageContent[];
};
export type MessageTemplate1 = {
    [k: string]: unknown;
};
/**
 * Single text content.
 */
export type TextContent1 = {
    [k: string]: unknown;
} & {
    /**
     * Type of content: 'text' for direct text, 'template' for Jinja template
     */
    type: 'text' | 'template';
    [k: string]: unknown;
};
/**
 * Configuration for speech synthesis
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "SpeechSynthesisConfig".
 */
export type SpeechSynthesisConfig1 = {
    [k: string]: unknown;
};
/**
 * The speech synthesis configuration for the TTSNode
 */
export type SpeechSynthesisConfig2 = {
    [k: string]: unknown;
} & {
    /**
     * Configuration variant for different TTS providers
     */
    config: {
        [k: string]: unknown;
    };
    type: 'inworld' | 'elevenlabs';
};
/**
 * Schema for validating Inworld graph JSON configuration. Checks the basic structure of the configuration.
 */
export interface InworldBasicConfigurationSchema {
    /**
     * Version of the configuration schema
     */
    schema_version: '1.0.0';
    /**
     * List of components that can be used by graph nodes
     */
    components?: Component[];
    /**
     * List of subgraphs that can be referenced by SubgraphNode nodes
     */
    subgraphs?: Subgraph[];
    main: MainGraph;
}
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Component".
 */
export interface Component {
    /**
     * Unique identifier of the component
     */
    id: string;
    /**
     * Type of the component
     */
    type: ('TextEmbedderInterface' | 'LLMInterface' | 'LLMRouting' | 'AECFilterInterface' | 'StreamingSTTInterface' | 'STTInterface' | 'TTSInterface' | 'VADInterface' | 'KnowledgeInterface' | 'NERFactory' | 'TextClassifierFactory' | 'MCPClientInterface') | string;
    creation_config?: ComponentCreationConfig;
}
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Subgraph".
 */
export interface Subgraph {
    /**
     * Unique identifier of the graph
     */
    id: string;
    /**
     * List of parameters that can be passed to this graph with their types
     */
    parameters?: {
        /**
         * Name of the parameter
         */
        name: string;
        /**
         * Type of the parameter
         */
        type: 'string' | 'number' | 'integer' | 'boolean';
    }[];
    /**
     * List of nodes that make up the graph
     *
     * @minItems 1
     */
    nodes?: [Node, ...Node[]];
    /**
     * List of edges that connect nodes
     */
    edges?: Edge[];
    /**
     * List of node IDs that serve as entry points of the graph
     *
     * @minItems 1
     * @maxItems 1
     */
    start_nodes?: [string];
    /**
     * List of node IDs that serve as exit points of the graph
     *
     * @minItems 1
     * @maxItems 1
     */
    end_nodes?: [string];
}
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RegularNode".
 */
export interface RegularNode {
    /**
     * Unique identifier of the node
     */
    id: string;
    /**
     * Type of the node
     */
    type: string;
    creation_config?: NodeCreationConfig;
    execution_config?: NodeExecutionConfig;
}
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "SubgraphNode".
 */
export interface SubgraphNode {
    /**
     * Unique identifier of the node
     */
    id: string;
    /**
     * Type of the node
     */
    type: 'SubgraphNode';
    /**
     * ID of the graph to reference
     */
    subgraph_id: string;
    /**
     * Parameter values to pass to a subgraph
     */
    parameters?: {
        [k: string]: string | number | boolean;
    };
}
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Edge".
 */
export interface Edge {
    /**
     * ID of the source node
     */
    from_node: string;
    /**
     * ID of the destination node
     */
    to_node: string;
    /**
     * CEL template expression for edge condition
     */
    condition_expression?: string;
    /**
     * ID of a component that implements EdgeCondition
     */
    condition_id?: string;
    /**
     * Whether this edge is optional
     */
    optional?: boolean | TemplateString;
    /**
     * Whether this edge creates a loop
     */
    loop?: boolean | TemplateString;
}
/**
 * Main graph that serves as the entry point
 */
export interface MainGraph {
    /**
     * Unique identifier of the main graph
     */
    id: string;
    /**
     * List of nodes that make up the main graph
     */
    nodes?: Node[];
    /**
     * List of edges that connect nodes
     */
    edges?: Edge[];
    /**
     * List of node IDs that serve as entry points of the graph
     *
     * @minItems 1
     */
    start_nodes?: [string, ...string[]];
    /**
     * List of node IDs that serve as exit points of the graph
     */
    end_nodes?: string[];
}
/**
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MainGraph".
 */
export interface MainGraph1 {
    /**
     * Unique identifier of the main graph
     */
    id: string;
    /**
     * List of nodes that make up the main graph
     */
    nodes?: Node[];
    /**
     * List of edges that connect nodes
     */
    edges?: Edge[];
    /**
     * List of node IDs that serve as entry points of the graph
     *
     * @minItems 1
     */
    start_nodes?: [string, ...string[]];
    /**
     * List of node IDs that serve as exit points of the graph
     */
    end_nodes?: string[];
}
/**
 * Device abstraction for hardware resources
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Device".
 */
export interface Device {
    /**
     * Type of the device
     */
    type?: 'CPU' | 'CUDA' | 'Metal' | 'ROCm';
    [k: string]: unknown;
}
/**
 * Configuration for text generation
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "TextGenerationConfig".
 */
export interface TextGenerationConfig {
    /**
     * Maximum number of tokens to generate
     */
    max_new_tokens?: number | TemplateString;
    /**
     * Maximum length of the prompt in tokens
     */
    max_prompt_length?: number | TemplateString;
    /**
     * Controls randomness of generated text
     */
    temperature?: number | TemplateString;
    /**
     * Probability for most probable tokens sampling
     */
    top_p?: number | TemplateString;
    /**
     * Repetition penalty
     */
    repetition_penalty?: number | TemplateString;
    /**
     * Frequency penalty
     */
    frequency_penalty?: number | TemplateString;
    /**
     * Presence penalty
     */
    presence_penalty?: number | TemplateString;
    /**
     * List of sequences to stop generation
     */
    stop_sequences?: string[];
    /**
     * Random seed for controlling the randomness of text generation
     */
    seed?: number | TemplateString;
    /**
     * Logit bias to modify token likelihood
     */
    logit_bias?: {
        /**
         * ID of the token
         */
        token_id: string;
        /**
         * Bias value from -100 to 100
         */
        bias_value: number | TemplateString;
    }[];
}
/**
 * Configuration for speech recognition
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "SpeechRecognitionConfig".
 */
export interface SpeechRecognitionConfig {
    /**
     * Language code for speech recognition, e.g., en, en-US, es-MX
     */
    language_code?: string;
}
/**
 * Configuration for streaming speech recognition
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "StreamSpeechRecognitionConfig".
 */
export interface StreamSpeechRecognitionConfig {
    speech_config?: SpeechRecognitionConfig1;
    /**
     * Threshold for silence in milliseconds
     */
    silence_threshold_ms?: number | TemplateString;
}
/**
 * Configuration for speech recognition
 */
export interface SpeechRecognitionConfig1 {
    /**
     * Language code for speech recognition, e.g., en, en-US, es-MX
     */
    language_code?: string;
}
/**
 * Configuration for acoustic echo cancellation, currently empty
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "AcousticEchoCancellationConfig".
 */
export interface AcousticEchoCancellationConfig {
}
/**
 * Configuration for voice activity detection
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "VoiceActivityDetectionConfig".
 */
export interface VoiceActivityDetectionConfig {
    /**
     * Sensitivity threshold for detecting speech
     */
    speech_threshold?: number | TemplateString;
}
/**
 * Configuration for parsing documents into chunks
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "ParsingConfig".
 */
export interface ParsingConfig {
    /**
     * Maximum number of characters per chunk
     */
    max_chars_per_chunk: number | TemplateString;
    /**
     * Maximum number of chunks per document
     */
    max_chunks_per_document: number | TemplateString;
}
/**
 * Configuration for compiling knowledge
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "KnowledgeCompileConfig".
 */
export interface KnowledgeCompileConfig {
    parsing_config: ParsingConfig1;
}
/**
 * Configuration for parsing documents
 */
export interface ParsingConfig1 {
    /**
     * Maximum number of characters per chunk
     */
    max_chars_per_chunk: number | TemplateString;
    /**
     * Maximum number of chunks per document
     */
    max_chunks_per_document: number | TemplateString;
}
/**
 * Rule for named entity recognition
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "DictionaryRule".
 */
export interface DictionaryRule {
    /**
     * Unique identifier of the rule
     */
    name: string;
    /**
     * Human-readable name of the rule
     */
    display_name: string;
    /**
     * List of synonyms for the rule
     */
    synonyms?: string[];
}
/**
 * Entity definition for named entity recognition
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Entity".
 */
export interface Entity {
    /**
     * Unique identifier of the entity
     */
    name: string;
    /**
     * List of rules for the entity
     */
    rules: DictionaryRule[];
}
/**
 * Configuration for embedding-based intent matching
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "EmbeddingMatcherConfig".
 */
export interface EmbeddingMatcherConfig {
    /**
     * Threshold for similarity matching
     */
    similarity_threshold: number | TemplateString;
}
/**
 * Configuration for LLM-based intent matching
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LlmMatcherConfig".
 */
export interface LlmMatcherConfig {
    generation_config: TextGenerationConfig1;
    /**
     * Template for generating prompts
     */
    prompt_template: string;
    /**
     * Minimum similarity threshold for phrases to include in LLM prompt
     */
    embedding_similarity_threshold?: number | TemplateString;
    /**
     * Maximum number of embedding matches to include in LLM prompt
     */
    max_embedding_matches_for_llm?: number | TemplateString;
}
/**
 * Configuration for LLM generation
 */
export interface TextGenerationConfig1 {
    /**
     * Maximum number of tokens to generate
     */
    max_new_tokens?: number | TemplateString;
    /**
     * Maximum length of the prompt in tokens
     */
    max_prompt_length?: number | TemplateString;
    /**
     * Controls randomness of generated text
     */
    temperature?: number | TemplateString;
    /**
     * Probability for most probable tokens sampling
     */
    top_p?: number | TemplateString;
    /**
     * Repetition penalty
     */
    repetition_penalty?: number | TemplateString;
    /**
     * Frequency penalty
     */
    frequency_penalty?: number | TemplateString;
    /**
     * Presence penalty
     */
    presence_penalty?: number | TemplateString;
    /**
     * List of sequences to stop generation
     */
    stop_sequences?: string[];
    /**
     * Random seed for controlling the randomness of text generation
     */
    seed?: number | TemplateString;
    /**
     * Logit bias to modify token likelihood
     */
    logit_bias?: {
        /**
         * ID of the token
         */
        token_id: string;
        /**
         * Bias value from -100 to 100
         */
        bias_value: number | TemplateString;
    }[];
}
/**
 * Configuration for intent matching
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "IntentMatcherConfig".
 */
export interface IntentMatcherConfig {
    embedding?: EmbeddingMatcherConfig1;
    llm?: LlmMatcherConfig1;
    /**
     * Number of top-scoring intents to return
     */
    top_n_intents?: number | TemplateString;
}
/**
 * Configuration for embedding-based matching
 */
export interface EmbeddingMatcherConfig1 {
    /**
     * Threshold for similarity matching
     */
    similarity_threshold: number | TemplateString;
}
/**
 * Configuration for LLM-based matching
 */
export interface LlmMatcherConfig1 {
    generation_config: TextGenerationConfig1;
    /**
     * Template for generating prompts
     */
    prompt_template: string;
    /**
     * Minimum similarity threshold for phrases to include in LLM prompt
     */
    embedding_similarity_threshold?: number | TemplateString;
    /**
     * Maximum number of embedding matches to include in LLM prompt
     */
    max_embedding_matches_for_llm?: number | TemplateString;
}
/**
 * Configuration for local text embedder
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LocalTextEmbedderConfig".
 */
export interface LocalTextEmbedderConfig {
    /**
     * Path to the model weights file
     */
    model_path: string;
    device: Device1;
}
/**
 * Device for model placement
 */
export interface Device1 {
    /**
     * Type of the device
     */
    type?: 'CPU' | 'CUDA' | 'Metal' | 'ROCm';
    [k: string]: unknown;
}
/**
 * Configuration for remote text embedder
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RemoteTextEmbedderConfig".
 */
export interface RemoteTextEmbedderConfig {
    /**
     * Provider of the remote embedder
     */
    provider: string;
    /**
     * Name of the model to use
     */
    model_name: TemplateString;
    /**
     * API key for authentication
     */
    api_key: TemplateString;
}
/**
 * Configuration for local LLM
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LocalLLMConfig".
 */
export interface LocalLLMConfig {
    /**
     * Path to the model weights file
     */
    model_path: string;
    device: Device2;
    default_config: TextGenerationConfig2;
}
/**
 * Device for model placement
 */
export interface Device2 {
    /**
     * Type of the device
     */
    type?: 'CPU' | 'CUDA' | 'Metal' | 'ROCm';
    [k: string]: unknown;
}
/**
 * Default text generation configuration
 */
export interface TextGenerationConfig2 {
    /**
     * Maximum number of tokens to generate
     */
    max_new_tokens?: number | TemplateString;
    /**
     * Maximum length of the prompt in tokens
     */
    max_prompt_length?: number | TemplateString;
    /**
     * Controls randomness of generated text
     */
    temperature?: number | TemplateString;
    /**
     * Probability for most probable tokens sampling
     */
    top_p?: number | TemplateString;
    /**
     * Repetition penalty
     */
    repetition_penalty?: number | TemplateString;
    /**
     * Frequency penalty
     */
    frequency_penalty?: number | TemplateString;
    /**
     * Presence penalty
     */
    presence_penalty?: number | TemplateString;
    /**
     * List of sequences to stop generation
     */
    stop_sequences?: string[];
    /**
     * Random seed for controlling the randomness of text generation
     */
    seed?: number | TemplateString;
    /**
     * Logit bias to modify token likelihood
     */
    logit_bias?: {
        /**
         * ID of the token
         */
        token_id: string;
        /**
         * Bias value from -100 to 100
         */
        bias_value: number | TemplateString;
    }[];
}
/**
 * Configuration for remote LLM
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RemoteLLMConfig".
 */
export interface RemoteLLMConfig {
    /**
     * Provider of the remote LLM
     */
    provider: string;
    /**
     * Name of the model to use
     */
    model_name: TemplateString;
    /**
     * API key for authentication
     */
    api_key: TemplateString;
    default_config: TextGenerationConfig3;
}
/**
 * Default text generation configuration
 */
export interface TextGenerationConfig3 {
    /**
     * Maximum number of tokens to generate
     */
    max_new_tokens?: number | TemplateString;
    /**
     * Maximum length of the prompt in tokens
     */
    max_prompt_length?: number | TemplateString;
    /**
     * Controls randomness of generated text
     */
    temperature?: number | TemplateString;
    /**
     * Probability for most probable tokens sampling
     */
    top_p?: number | TemplateString;
    /**
     * Repetition penalty
     */
    repetition_penalty?: number | TemplateString;
    /**
     * Frequency penalty
     */
    frequency_penalty?: number | TemplateString;
    /**
     * Presence penalty
     */
    presence_penalty?: number | TemplateString;
    /**
     * List of sequences to stop generation
     */
    stop_sequences?: string[];
    /**
     * Random seed for controlling the randomness of text generation
     */
    seed?: number | TemplateString;
    /**
     * Logit bias to modify token likelihood
     */
    logit_bias?: {
        /**
         * ID of the token
         */
        token_id: string;
        /**
         * Bias value from -100 to 100
         */
        bias_value: number | TemplateString;
    }[];
}
/**
 * Configuration for individual LLM routing entry
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LLMRoutingConfig".
 */
export interface LLMRoutingConfig {
    /**
     * ID of the LLM component to retrieve from ComponentRegistry
     */
    llm_component_id: TemplateString;
    /**
     * Priority level for this LLM instance. Higher values indicate higher priority
     */
    priority: number | TemplateString;
    /**
     * Duration in seconds to wait before retrying an LLM that has experienced errors
     */
    error_cooldown_seconds: number | TemplateString;
    /**
     * Minimum number of consecutive errors required before an LLM is temporarily excluded
     */
    min_errors: number | TemplateString;
}
/**
 * Configuration for creating LLM routing system with multiple LLM instances
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LLMRoutingCreationConfig".
 */
export interface LLMRoutingCreationConfig {
    /**
     * List of LLM routing configurations
     *
     * @minItems 1
     */
    routing_configs: [LLMRoutingConfig, ...LLMRoutingConfig[]];
}
/**
 * Configuration for local AEC filter
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LocalAECFilterConfig".
 */
export interface LocalAECFilterConfig {
    device: Device3;
    default_config: AcousticEchoCancellationConfig1;
}
/**
 * Device for filter placement
 */
export interface Device3 {
    /**
     * Type of the device
     */
    type?: 'CPU' | 'CUDA' | 'Metal' | 'ROCm';
    [k: string]: unknown;
}
/**
 * Default AEC configuration
 */
export interface AcousticEchoCancellationConfig1 {
}
/**
 * Configuration for local streaming STT
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LocalStreamingSTTConfig".
 */
export interface LocalStreamingSTTConfig {
    /**
     * Path to the STT model weights file
     */
    stt_model_path: string;
    /**
     * Path to the VAD model weights file
     */
    vad_model_path: string;
    stt_device: Device4;
    vad_device: Device5;
    default_config: StreamSpeechRecognitionConfig1;
}
/**
 * Device for STT model placement
 */
export interface Device4 {
    /**
     * Type of the device
     */
    type?: 'CPU' | 'CUDA' | 'Metal' | 'ROCm';
    [k: string]: unknown;
}
/**
 * Device for VAD model placement
 */
export interface Device5 {
    /**
     * Type of the device
     */
    type?: 'CPU' | 'CUDA' | 'Metal' | 'ROCm';
    [k: string]: unknown;
}
/**
 * Default streaming STT configuration
 */
export interface StreamSpeechRecognitionConfig1 {
    speech_config?: SpeechRecognitionConfig1;
    /**
     * Threshold for silence in milliseconds
     */
    silence_threshold_ms?: number | TemplateString;
}
/**
 * Configuration for remote streaming STT
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RemoteStreamingSTTConfig".
 */
export interface RemoteStreamingSTTConfig {
    /**
     * API key for authentication
     */
    api_key: string;
    default_config: StreamSpeechRecognitionConfig2;
}
/**
 * Default streaming STT configuration
 */
export interface StreamSpeechRecognitionConfig2 {
    speech_config?: SpeechRecognitionConfig1;
    /**
     * Threshold for silence in milliseconds
     */
    silence_threshold_ms?: number | TemplateString;
}
/**
 * Configuration for local STT
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LocalSTTConfig".
 */
export interface LocalSTTConfig {
    /**
     * Path to the model weights file
     */
    model_path: string;
    device: Device6;
    default_config: SpeechRecognitionConfig2;
}
/**
 * Device for model placement
 */
export interface Device6 {
    /**
     * Type of the device
     */
    type?: 'CPU' | 'CUDA' | 'Metal' | 'ROCm';
    [k: string]: unknown;
}
/**
 * Default STT configuration
 */
export interface SpeechRecognitionConfig2 {
    /**
     * Language code for speech recognition, e.g., en, en-US, es-MX
     */
    language_code?: string;
}
/**
 * Configuration for remote STT
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RemoteSTTConfig".
 */
export interface RemoteSTTConfig {
    /**
     * API key for authentication
     */
    api_key: string;
    default_config: SpeechRecognitionConfig3;
}
/**
 * Default STT configuration
 */
export interface SpeechRecognitionConfig3 {
    /**
     * Language code for speech recognition, e.g., en, en-US, es-MX
     */
    language_code?: string;
}
/**
 * Configuration for remote TTS
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RemoteTTSConfig".
 */
export interface RemoteTTSConfig {
    /**
     * API key for authentication
     */
    api_key: string;
    synthesis_config: SpeechSynthesisConfig;
}
/**
 * Configuration for local VAD
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LocalVADConfig".
 */
export interface LocalVADConfig {
    /**
     * Path to the model weights file
     */
    model_path: string;
    device: Device7;
    default_config: VoiceActivityDetectionConfig1;
}
/**
 * Device for model placement
 */
export interface Device7 {
    /**
     * Type of the device
     */
    type?: 'CPU' | 'CUDA' | 'Metal' | 'ROCm';
    [k: string]: unknown;
}
/**
 * Default VAD configuration
 */
export interface VoiceActivityDetectionConfig1 {
    /**
     * Sensitivity threshold for detecting speech
     */
    speech_threshold?: number | TemplateString;
}
/**
 * Intent definition for intent matching
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Intent".
 */
export interface Intent {
    /**
     * Unique identifier of the intent
     */
    name: string;
    /**
     * List of training phrases for the intent
     */
    phrases: string[];
}
/**
 * Configuration for local knowledge
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LocalKnowledgeConfig".
 */
export interface LocalKnowledgeConfig {
    knowledge_compile_config: KnowledgeCompileConfig1;
    /**
     * ID of the embedder component to use
     */
    embedder_component_id: TemplateString;
}
/**
 * Configuration for knowledge compilation
 */
export interface KnowledgeCompileConfig1 {
    parsing_config: ParsingConfig1;
}
/**
 * Configuration for remote knowledge
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RemoteKnowledgeConfig".
 */
export interface RemoteKnowledgeConfig {
    knowledge_compile_config: KnowledgeCompileConfig2;
    /**
     * API key for authentication
     */
    api_key: string;
    /**
     * Language code, e.g., en, en-US, es-MX
     */
    language_code?: string;
}
/**
 * Configuration for knowledge compilation
 */
export interface KnowledgeCompileConfig2 {
    parsing_config: ParsingConfig1;
}
/**
 * Configuration for creating NER
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "NERCreationConfig".
 */
export interface NERCreationConfig {
    /**
     * List of entities to recognize
     */
    entities: Entity[];
}
/**
 * Configuration for creating text classifier
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "TextClassifierCreationConfig".
 */
export interface TextClassifierCreationConfig {
    /**
     * Path to the model weights file
     */
    model_weights_path: string;
    /**
     * List of supported classification classes
     */
    supported_classes: string[];
}
/**
 * Configuration for creating MCP client
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MCPClientCreationConfig".
 */
export interface MCPClientCreationConfig {
    session_config: MCPSessionCreationConfig;
}
/**
 * Configuration for MCP session
 */
export interface MCPSessionCreationConfig {
    /**
     * Transport protocol for MCP session
     */
    transport: string;
    /**
     * Endpoint for MCP session
     */
    endpoint: string;
    auth_config: MCPAuthConfig;
}
/**
 * Configuration for creating MCP session
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MCPSessionCreationConfig".
 */
export interface MCPSessionCreationConfig1 {
    /**
     * Transport protocol for MCP session
     */
    transport: string;
    /**
     * Endpoint for MCP session
     */
    endpoint: string;
    auth_config: MCPAuthConfig;
}
/**
 * HTTP authentication configuration for MCP
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MCPHttpAuthConfig".
 */
export interface MCPHttpAuthConfig {
    /**
     * API key for HTTP authentication
     */
    api_key: TemplateString;
}
/**
 * Stdio authentication configuration for MCP
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MCPStdioAuthConfig".
 */
export interface MCPStdioAuthConfig {
    /**
     * Environment variables for stdio authentication
     */
    env: {
        [k: string]: TemplateString;
    };
}
/**
 * Defines conditions that trigger a goal activation or completion
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Condition".
 */
export interface Condition {
    /**
     * List of intent identifiers that can trigger activation or completion
     */
    intents: string[];
    /**
     * Text description of the condition that must be met
     */
    detect?: string;
    /**
     * List of goals that must be completed before this goal can be activated
     */
    required_goals: string[];
}
/**
 * Goal definition for goal advancement
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Goal".
 */
export interface Goal {
    /**
     * Unique identifier of the goal
     */
    name: string;
    /**
     * Motivation or purpose of the goal
     */
    motivation?: string;
    /**
     * Whether the goal can be repeated
     */
    repeatable?: boolean | TemplateString;
    activation_condition?: Condition1;
    completion_condition?: Condition2;
}
/**
 * Conditions required to trigger this goal
 */
export interface Condition1 {
    /**
     * List of intent identifiers that can trigger activation or completion
     */
    intents: string[];
    /**
     * Text description of the condition that must be met
     */
    detect?: string;
    /**
     * List of goals that must be completed before this goal can be activated
     */
    required_goals: string[];
}
/**
 * Conditions required to complete this goal
 */
export interface Condition2 {
    /**
     * List of intent identifiers that can trigger activation or completion
     */
    intents: string[];
    /**
     * Text description of the condition that must be met
     */
    detect?: string;
    /**
     * List of goals that must be completed before this goal can be activated
     */
    required_goals: string[];
}
/**
 * Keyword group definition for keyword matching
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "KeywordGroup".
 */
export interface KeywordGroup {
    /**
     * Unique identifier of the keyword group
     */
    name: string;
    /**
     * List of keywords in the group
     */
    keywords: string[];
}
/**
 * Configuration for knowledge retrieval
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RetrievalConfig".
 */
export interface RetrievalConfig {
    /**
     * Similarity threshold for retrieval
     */
    threshold?: number | TemplateString;
    /**
     * Number of top results to retrieve
     */
    top_k?: number | TemplateString;
}
/**
 * Template for generating prompts
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "PromptTemplate".
 */
export interface PromptTemplate {
    /**
     * Template string for generating prompts
     */
    prompt_template: string;
}
/**
 * Tool definition for LLM function calling
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Tool".
 */
export interface Tool {
    /**
     * Name of the tool
     */
    name: string;
    /**
     * Description of the tool's purpose
     */
    description: string;
    /**
     * JSON schema for tool parameters
     */
    properties?: {
        [k: string]: unknown;
    };
}
/**
 * Threshold configuration for classification classes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "ClassThreshold".
 */
export interface ClassThreshold {
    /**
     * Name of the classification class
     */
    label: string;
    /**
     * Confidence threshold for the class
     */
    threshold: number | TemplateString;
}
/**
 * Configuration for text classification
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "TextClassifierConfig".
 */
export interface TextClassifierConfig {
    /**
     * List of class threshold configurations
     */
    classes: ClassThreshold[];
}
/**
 * Voice configuration for TTS synthesis
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "Voice".
 */
export interface Voice {
    /**
     * Unique identifier for the speaker
     */
    speaker_id: string;
    /**
     * Optional language code for the voice
     */
    language_code?: string;
}
/**
 * Configuration for postprocessing the generated speech waveform
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "SpeechSynthesisPostprocessingConfig".
 */
export interface SpeechSynthesisPostprocessingConfig {
    /**
     * Sample rate for the output waveform
     */
    sample_rate?: number | TemplateString;
}
/**
 * Configuration for model inference parameters in TTS
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "SpeechSynthesisInferenceConfig".
 */
export interface SpeechSynthesisInferenceConfig {
    /**
     * The temperature of the model. Range (0, 2]. Higher temperature means more creative output.
     */
    temperature?: number | TemplateString;
    /**
     * Modifies the pitch of the synthesized voice. Range [-5.0, 5.0]. 0.0 corresponds to the original pitch.
     */
    pitch?: number | TemplateString;
    /**
     * Speaking rate/speed, in the range [0.5, 1.5]. 1.0 is the normal native speed.
     */
    speaking_rate?: number | TemplateString;
}
/**
 * Configuration for Inworld speech synthesis
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "InworldSpeechSynthesisConfig".
 */
export interface InworldSpeechSynthesisConfig {
    /**
     * Model ID (v2 or v3) to choose model version
     */
    model_id?: string;
    postprocessing?: SpeechSynthesisPostprocessingConfig1;
    inference?: SpeechSynthesisInferenceConfig1;
}
/**
 * Postprocessing configuration
 */
export interface SpeechSynthesisPostprocessingConfig1 {
    /**
     * Sample rate for the output waveform
     */
    sample_rate?: number | TemplateString;
}
/**
 * Inference configuration
 */
export interface SpeechSynthesisInferenceConfig1 {
    /**
     * The temperature of the model. Range (0, 2]. Higher temperature means more creative output.
     */
    temperature?: number | TemplateString;
    /**
     * Modifies the pitch of the synthesized voice. Range [-5.0, 5.0]. 0.0 corresponds to the original pitch.
     */
    pitch?: number | TemplateString;
    /**
     * Speaking rate/speed, in the range [0.5, 1.5]. 1.0 is the normal native speed.
     */
    speaking_rate?: number | TemplateString;
}
/**
 * Configuration for ElevenLabs speech synthesis
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "ElevenLabsSpeechSynthesisConfig".
 */
export interface ElevenLabsSpeechSynthesisConfig {
    /**
     * Query parameters for ElevenLabs API
     */
    query_params?: {
        /**
         * Whether to enable logging
         */
        enable_logging?: boolean | TemplateString;
        /**
         * Output format for the audio
         */
        output_format?: 'MP3_22050_32' | 'MP3_44100_32' | 'MP3_44100_64' | 'MP3_44100_96' | 'MP3_44100_128' | 'MP3_44100_192';
    };
    /**
     * Request parameters for ElevenLabs API
     */
    request_params?: {
        /**
         * Model ID to use
         */
        model_id?: string;
        /**
         * Text normalization setting
         */
        apply_text_normalization?: 'AUTO' | 'ON' | 'OFF';
    };
}
/**
 * Configuration for node error handling behavior
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "NodeErrorConfig".
 */
export interface NodeErrorConfig {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Base configuration for node execution
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "BaseNodeExecutionConfig".
 */
export interface BaseNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig1;
    [k: string]: unknown;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig1 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for creating goal advancement nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "GoalAdvancementNodeCreationConfig".
 */
export interface GoalAdvancementNodeCreationConfig {
    /**
     * List of goals for the node
     */
    goals: Goal[];
}
/**
 * Configuration for executing goal advancement nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "GoalAdvancementNodeExecutionConfig".
 */
export interface GoalAdvancementNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig2;
    /**
     * ID of the LLM component to use
     */
    llm_component_id: TemplateString;
    text_generation_config?: TextGenerationConfig4;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig2 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for text generation
 */
export interface TextGenerationConfig4 {
    /**
     * Maximum number of tokens to generate
     */
    max_new_tokens?: number | TemplateString;
    /**
     * Maximum length of the prompt in tokens
     */
    max_prompt_length?: number | TemplateString;
    /**
     * Controls randomness of generated text
     */
    temperature?: number | TemplateString;
    /**
     * Probability for most probable tokens sampling
     */
    top_p?: number | TemplateString;
    /**
     * Repetition penalty
     */
    repetition_penalty?: number | TemplateString;
    /**
     * Frequency penalty
     */
    frequency_penalty?: number | TemplateString;
    /**
     * Presence penalty
     */
    presence_penalty?: number | TemplateString;
    /**
     * List of sequences to stop generation
     */
    stop_sequences?: string[];
    /**
     * Random seed for controlling the randomness of text generation
     */
    seed?: number | TemplateString;
    /**
     * Logit bias to modify token likelihood
     */
    logit_bias?: {
        /**
         * ID of the token
         */
        token_id: string;
        /**
         * Bias value from -100 to 100
         */
        bias_value: number | TemplateString;
    }[];
}
/**
 * Configuration for creating intent nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "IntentNodeCreationConfig".
 */
export interface IntentNodeCreationConfig {
    /**
     * List of intents for the node
     */
    intents: Intent[];
    /**
     * ID of the embedder component to use
     */
    embedder_component_id?: TemplateString;
    /**
     * ID of the LLM component to use
     */
    llm_component_id?: TemplateString;
}
/**
 * Configuration for executing intent nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "IntentNodeExecutionConfig".
 */
export interface IntentNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig3;
    matcher_config: IntentMatcherConfig1;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig3 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for intent matching
 */
export interface IntentMatcherConfig1 {
    embedding?: EmbeddingMatcherConfig1;
    llm?: LlmMatcherConfig1;
    /**
     * Number of top-scoring intents to return
     */
    top_n_intents?: number | TemplateString;
}
/**
 * Configuration for creating keyword matcher nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "KeywordMatcherNodeCreationConfig".
 */
export interface KeywordMatcherNodeCreationConfig {
    /**
     * List of keyword groups for the node
     */
    keyword_groups: KeywordGroup[];
}
/**
 * Configuration for creating knowledge nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "KnowledgeNodeCreationConfig".
 */
export interface KnowledgeNodeCreationConfig {
    /**
     * ID of the knowledge base
     */
    knowledge_id: string;
    knowledge_records: string[];
    /**
     * ID of the knowledge component to use
     */
    knowledge_component_id: string;
}
/**
 * Configuration for executing knowledge nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "KnowledgeNodeExecutionConfig".
 */
export interface KnowledgeNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig4;
    /**
     * List of knowledge base IDs to search
     */
    knowledge_ids: string[];
    retrieval_config: RetrievalConfig1;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig4 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for knowledge retrieval
 */
export interface RetrievalConfig1 {
    /**
     * Similarity threshold for retrieval
     */
    threshold?: number | TemplateString;
    /**
     * Number of top results to retrieve
     */
    top_k?: number | TemplateString;
}
/**
 * Configuration for executing LLM chat nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LLMChatNodeExecutionConfig".
 */
export interface LLMChatNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig5;
    /**
     * ID of the LLM component to use
     */
    llm_component_id: TemplateString;
    text_generation_config?: TextGenerationConfig5;
    /**
     * Whether to stream the response
     */
    stream?: boolean | TemplateString;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig5 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for text generation
 */
export interface TextGenerationConfig5 {
    /**
     * Maximum number of tokens to generate
     */
    max_new_tokens?: number | TemplateString;
    /**
     * Maximum length of the prompt in tokens
     */
    max_prompt_length?: number | TemplateString;
    /**
     * Controls randomness of generated text
     */
    temperature?: number | TemplateString;
    /**
     * Probability for most probable tokens sampling
     */
    top_p?: number | TemplateString;
    /**
     * Repetition penalty
     */
    repetition_penalty?: number | TemplateString;
    /**
     * Frequency penalty
     */
    frequency_penalty?: number | TemplateString;
    /**
     * Presence penalty
     */
    presence_penalty?: number | TemplateString;
    /**
     * List of sequences to stop generation
     */
    stop_sequences?: string[];
    /**
     * Random seed for controlling the randomness of text generation
     */
    seed?: number | TemplateString;
    /**
     * Logit bias to modify token likelihood
     */
    logit_bias?: {
        /**
         * ID of the token
         */
        token_id: string;
        /**
         * Bias value from -100 to 100
         */
        bias_value: number | TemplateString;
    }[];
}
/**
 * Configuration for executing LLM chat request builder nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LLMChatRequestBuilderNodeExecutionConfig".
 */
export interface LLMChatRequestBuilderNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig6;
    /**
     * List of message templates for the chat
     */
    messages?: MessageTemplate[];
    /**
     * List of tools available for function calling
     */
    tools?: Tool[];
    /**
     * Controls which tool is called by the model
     */
    tool_choice?: {
        type?: 'string';
        [k: string]: unknown;
    } | {
        type?: 'function';
        [k: string]: unknown;
    };
    /**
     * Format that the model must output. Defaults to text.
     */
    response_format?: 'text' | 'json' | 'json_schema';
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig6 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing LLM completion nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LLMCompletionNodeExecutionConfig".
 */
export interface LLMCompletionNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig7;
    /**
     * ID of the LLM component to use
     */
    llm_component_id: TemplateString;
    text_generation_config?: TextGenerationConfig6;
    /**
     * Whether to stream the response
     */
    stream?: boolean;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig7 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for text generation
 */
export interface TextGenerationConfig6 {
    /**
     * Maximum number of tokens to generate
     */
    max_new_tokens?: number | TemplateString;
    /**
     * Maximum length of the prompt in tokens
     */
    max_prompt_length?: number | TemplateString;
    /**
     * Controls randomness of generated text
     */
    temperature?: number | TemplateString;
    /**
     * Probability for most probable tokens sampling
     */
    top_p?: number | TemplateString;
    /**
     * Repetition penalty
     */
    repetition_penalty?: number | TemplateString;
    /**
     * Frequency penalty
     */
    frequency_penalty?: number | TemplateString;
    /**
     * Presence penalty
     */
    presence_penalty?: number | TemplateString;
    /**
     * List of sequences to stop generation
     */
    stop_sequences?: string[];
    /**
     * Random seed for controlling the randomness of text generation
     */
    seed?: number | TemplateString;
    /**
     * Logit bias to modify token likelihood
     */
    logit_bias?: {
        /**
         * ID of the token
         */
        token_id: string;
        /**
         * Bias value from -100 to 100
         */
        bias_value: number | TemplateString;
    }[];
}
/**
 * Configuration for executing LLM prompt builder nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "LLMPromptBuilderNodeExecutionConfig".
 */
export interface LLMPromptBuilderNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig8;
    /**
     * Template string for generating prompts
     */
    prompt_template: string;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig8 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing random canned text nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "RandomCannedTextNodeExecutionConfig".
 */
export interface RandomCannedTextNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig9;
    /**
     * List of canned phrases to randomly select from
     */
    canned_phrases: string[];
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig9 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing STT nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "STTNodeExecutionConfig".
 */
export interface STTNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig10;
    /**
     * ID of the STT component to use
     */
    stt_component_id: TemplateString;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig10 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for creating text classifier nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "TextClassifierNodeCreationConfig".
 */
export interface TextClassifierNodeCreationConfig {
    /**
     * ID of the embedder component to use
     */
    embedder_component_id: TemplateString;
    classifier_config: TextClassifierCreationConfig1;
}
/**
 * Configuration for creating text classifier
 */
export interface TextClassifierCreationConfig1 {
    /**
     * Path to the model weights file
     */
    model_weights_path: string;
    /**
     * List of supported classification classes
     */
    supported_classes: string[];
}
/**
 * Configuration for executing text classifier nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "TextClassifierNodeExecutionConfig".
 */
export interface TextClassifierNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig11;
    classifier_config?: TextClassifierConfig1;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig11 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for text classification
 */
export interface TextClassifierConfig1 {
    /**
     * List of class threshold configurations
     */
    classes: ClassThreshold[];
}
/**
 * Configuration for executing TTS nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "TTSNodeExecutionConfig".
 */
export interface TTSNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig12;
    /**
     * ID of the TTS component to use
     */
    tts_component_id: TemplateString;
    voice?: Voice1;
    synthesis_config?: SpeechSynthesisConfig2;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig12 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * The voice to use for the TTSNode
 */
export interface Voice1 {
    /**
     * Unique identifier for the speaker
     */
    speaker_id: string;
    /**
     * Optional language code for the voice
     */
    language_code?: string;
}
/**
 * Configuration for executing safety checker nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "SafetyCheckerNodeExecutionConfig".
 */
export interface SafetyCheckerNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig13;
    /**
     * Optional safety configuration parameters
     */
    safety_config?: {
        [k: string]: unknown;
    };
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig13 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing intent embedder match nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "IntentEmbedderMatchNodeExecutionConfig".
 */
export interface IntentEmbedderMatchNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig14;
    /**
     * Minimum similarity threshold for matches
     */
    similarity_threshold?: number | TemplateString;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig14 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing memory update nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MemoryUpdateNodeCreationConfig".
 */
export interface MemoryUpdateNodeCreationConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig15;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig15 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing MCP list tools nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MCPListToolsNodeExecutionConfig".
 */
export interface MCPListToolsNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig16;
    /**
     * ID of the MCP component to retrieve from ComponentRegistry
     */
    mcp_component_id: TemplateString;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig16 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing MCP call tool nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MCPCallToolNodeExecutionConfig".
 */
export interface MCPCallToolNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig17;
    /**
     * ID of the MCP component to retrieve from ComponentRegistry
     */
    mcp_component_id: TemplateString;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig17 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing intent LLM prompt variables builder nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "IntentLLMPromptVariablesBuilderNodeExecutionConfig".
 */
export interface IntentLLMPromptVariablesBuilderNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig18;
    /**
     * Maximum number of intents to include in prompt
     */
    max_intents_for_llm?: number | TemplateString;
    /**
     * Maximum number of phrases per intent to include
     */
    max_phrases_per_intent?: number | TemplateString;
    /**
     * Minimum similarity threshold for matched intents to be included in the LLM prompt
     */
    embedding_similarity_threshold?: number | TemplateString;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig18 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing intent top N filter nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "IntentTopNFilterNodeExecutionConfig".
 */
export interface IntentTopNFilterNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig19;
    /**
     * Number of top intents to keep after filtering
     */
    top_n_intents?: number | TemplateString;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig19 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for executing memory retrieve nodes
 *
 * This interface was referenced by `InworldBasicConfigurationSchema`'s JSON-Schema
 * via the `definition` "MemoryRetrieveNodeExecutionConfig".
 */
export interface MemoryRetrieveNodeExecutionConfig {
    /**
     * Whether to report node execution result to the client
     */
    report_to_client?: boolean | TemplateString;
    error_handling?: NodeErrorConfig20;
    retrieval_config: RetrievalConfig2;
    /**
     * Whether to include the rolling summary in the returned knowledge records
     */
    return_rolling_summary?: boolean | TemplateString;
}
/**
 * Optional error handling configuration for the node
 */
export interface NodeErrorConfig20 {
    /**
     * The maximum number of retry attempts for failed operations
     */
    max_retries?: number | TemplateString;
    /**
     * List of status codes that should trigger retry behavior
     */
    error_codes?: ('OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS' | 'UNAUTHENTICATED')[];
    /**
     * Default result to return if all retries are exhausted
     */
    fallback_result?: {
        [k: string]: unknown;
    };
}
/**
 * Configuration for memory retrieval
 */
export interface RetrievalConfig2 {
    /**
     * Similarity threshold for retrieval
     */
    threshold?: number | TemplateString;
    /**
     * Number of top results to retrieve
     */
    top_k?: number | TemplateString;
}
