"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequentialGraphBuilder = void 0;
const common_1 = require("../../common");
const graph_builder_1 = require("./graph_builder");
/**
 * A graph builder that constructs a sequential graph from a list of nodes.
 * Automatically links nodes with one-directional edges from the first to the last
 * and sets the start and end nodes accordingly.
 * @extends {GraphBuilder}
 */
class SequentialGraphBuilder extends graph_builder_1.GraphBuilder {
    /**
     * Creates a new instance of `SequentialGraphBuilder` and builds the sequential graph.
     * @param {SequentialGraphBuilderProps} opts - The configuration options for the sequential graph builder.
     */
    constructor(opts) {
        super(opts);
        this.buildSequentialGraph(opts.nodes);
    }
    /**
     * Builds a sequential graph configuration from an array of nodes.
     * In addition to adding nodes, this method also creates simple one-directional
     * edges from the first to the last provided node and sets the start/end nodes.
     *
     * @param {Array<AbstractNode>} nodes - Array of nodes to add to the graph
     * @returns {SequentialGraphBuilder} This builder instance.
     * @throws {InworldError} If no nodes are provided.
     */
    buildSequentialGraph(nodes) {
        if (nodes.length < 1) {
            throw new common_1.InworldError('Graph must have at least one node');
        }
        for (let i = 0; i < nodes.length; i++) {
            this.addNode(nodes[i]);
            if (i === 0) {
                continue;
            }
            this.addEdge(nodes[i - 1], nodes[i]);
        }
        this.setStartNode(nodes[0]);
        this.setEndNode(nodes[nodes.length - 1]);
        return this;
    }
    /**
     * Adds a node to the graph, links it from the previous end node (if any),
     * and sets the passed node as the new end node.
     *
     * @param {AbstractNode} node - The node to add to the graph.
     * @returns {SequentialGraphBuilder} The current builder instance.
     */
    addSequentialNode(node) {
        this.addNode(node);
        if (this.endNodes.length) {
            this.addEdge(this.endNodes[0], node);
        }
        this.setEndNode(node);
        return this;
    }
}
exports.SequentialGraphBuilder = SequentialGraphBuilder;
