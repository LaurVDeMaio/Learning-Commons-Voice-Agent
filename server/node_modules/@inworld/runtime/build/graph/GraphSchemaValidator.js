"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const graph_schema_v1_0_json_1 = __importDefault(require("./graph-schema-v1.0.json"));
const ajv = new ajv_1.default({
    allErrors: true,
    strict: false,
    validateFormats: true,
});
ajv.addSchema({
    $id: 'http://json-schema.org/draft/2020-12/schema#',
    $schema: 'http://json-schema.org/draft/2020-12/schema#',
    type: 'object',
    properties: {
        $schema: { type: 'string' },
        $id: { type: 'string' },
        $ref: { type: 'string' },
        $defs: { type: 'object' },
    },
    additionalProperties: true,
}, 'http://json-schema.org/draft/2020-12/schema#');
(0, ajv_formats_1.default)(ajv);
class GraphSchemaValidator {
    static validate(input) {
        const validate = ajv.compile(graph_schema_v1_0_json_1.default);
        let parsed;
        if (typeof input === 'string') {
            try {
                parsed = JSON.parse(input);
            }
            catch (error) {
                throw new Error(`Invalid JSON: ${error.message}`);
            }
        }
        else {
            parsed = input;
        }
        const valid = validate(parsed);
        if (valid) {
            // eslint-disable-next-line no-console
            console.info(' ✅ Graph configuration validation passed.');
        }
        else {
            const errors = validate.errors;
            // eslint-disable-next-line no-console
            console.error(' ❌ Graph configuration validation not passed!');
            // eslint-disable-next-line no-console
            console.error('Schema validation errors:', errors);
            throw new Error(`Schema validation failed: ${JSON.stringify(errors, null, 2)}`);
        }
    }
}
exports.default = GraphSchemaValidator;
