"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../common/helpers");
const expose_binary_1 = require("../expose_binary");
const tts_1 = require("../primitives/tts");
class ComponentRegistry {
    /**
     * Registers a remote LLM component in the component registry.
     *
     * @param componentId - Unique identifier for the LLM component
     * @param llmConfig - Configuration for the remote LLM
     * @returns Promise resolving to the component registry instance
     */
    static async registerRemoteLLMComponent(componentId, llmConfig) {
        const remoteLLMConfig = expose_binary_1.RemoteLLMConfigFunctions.new();
        expose_binary_1.RemoteLLMConfigFunctions.setProvider(remoteLLMConfig, llmConfig.provider);
        expose_binary_1.RemoteLLMConfigFunctions.setModelName(remoteLLMConfig, llmConfig.modelName);
        expose_binary_1.RemoteLLMConfigFunctions.setAPIKey(remoteLLMConfig, llmConfig.apiKey);
        const componentRegistry = expose_binary_1.ComponentRegistryFunctions.getInstance();
        const createLLMStatus = expose_binary_1.ComponentRegistryFunctions.createComponentLLMInterfaceRemote(componentRegistry, componentId, remoteLLMConfig);
        if ((0, helpers_1.getStatus)(createLLMStatus) !== 'OK') {
            throw new Error(`Cannot create remote LLM component for ${componentId} using: ${llmConfig}`);
        }
        expose_binary_1.RemoteLLMConfigFunctions.delete(remoteLLMConfig);
        return componentRegistry;
    }
    /**
     * Registers a local LLM component in the component registry.
     *
     * @param componentId - Unique identifier for the LLM component
     * @param llmConfig - Configuration for the local LLM
     * @returns Promise resolving to the component registry instance
     */
    static async registerLocalLLMComponent(componentId, llmConfig) {
        const localLLMConfig = expose_binary_1.LocalLLMConfigFunctions.new();
        expose_binary_1.LocalLLMConfigFunctions.setModelPath(localLLMConfig, llmConfig.modelPath);
        if (llmConfig.device) {
            expose_binary_1.LocalLLMConfigFunctions.setDevice(localLLMConfig, llmConfig.device);
        }
        if (llmConfig.defaultConfig) {
            expose_binary_1.LocalLLMConfigFunctions.setDefaultConfig(localLLMConfig, llmConfig.defaultConfig);
        }
        const componentRegistry = expose_binary_1.ComponentRegistryFunctions.getInstance();
        const createLLMStatus = expose_binary_1.ComponentRegistryFunctions.createComponentLLMInterfaceLocal(componentRegistry, componentId, localLLMConfig);
        if ((0, helpers_1.getStatus)(createLLMStatus) !== 'OK') {
            throw new Error(`Cannot create local LLM component for ${componentId} using: ${llmConfig}`);
        }
        expose_binary_1.LocalLLMConfigFunctions.delete(localLLMConfig);
        return componentRegistry;
    }
    /**
     * Registers a remote STT component in the component registry.
     *
     * @param componentId - Unique identifier for the STT component
     * @param sttConfig - Configuration for the remote STT
     * @returns Promise resolving to the component registry instance
     */
    static async registerRemoteSTTComponent(componentId, sttConfig) {
        const remoteSTTConfig = expose_binary_1.RemoteSTTConfigFunctions.new();
        expose_binary_1.RemoteSTTConfigFunctions.setApiKey(remoteSTTConfig, sttConfig.apiKey);
        const componentRegistry = expose_binary_1.ComponentRegistryFunctions.getInstance();
        const createSTTStatus = expose_binary_1.ComponentRegistryFunctions.createComponentSTTInterfaceRemote(componentRegistry, componentId, remoteSTTConfig);
        if ((0, helpers_1.getStatus)(createSTTStatus) !== 'OK') {
            throw new Error(`Cannot create remote STT component for ${componentId} using: ${sttConfig}`);
        }
        expose_binary_1.RemoteSTTConfigFunctions.delete(remoteSTTConfig);
        return componentRegistry;
    }
    /**
     * Registers a local STT component in the component registry.
     *
     * @param componentId - Unique identifier for the STT component
     * @param sttConfig - Configuration for the local STT
     * @returns Promise resolving to the component registry instance
     */
    static async registerLocalSTTComponent(componentId, sttConfig) {
        const localSTTConfig = expose_binary_1.LocalSTTConfigFunctions.new();
        expose_binary_1.LocalSTTConfigFunctions.setModelPath(localSTTConfig, sttConfig.modelPath);
        if (sttConfig.device) {
            expose_binary_1.LocalSTTConfigFunctions.setDevice(localSTTConfig, sttConfig.device);
        }
        const componentRegistry = expose_binary_1.ComponentRegistryFunctions.getInstance();
        const createSTTStatus = expose_binary_1.ComponentRegistryFunctions.createComponentSTTInterfaceLocal(componentRegistry, componentId, localSTTConfig);
        if ((0, helpers_1.getStatus)(createSTTStatus) !== 'OK') {
            throw new Error(`Cannot create local STT component for ${componentId} using: ${sttConfig}`);
        }
        expose_binary_1.LocalSTTConfigFunctions.delete(localSTTConfig);
        return componentRegistry;
    }
    /**
     * Registers a remote TTS component in the component registry.
     *
     * @param componentId - Unique identifier for the TTS component
     * @param ttsConfig - Configuration for the remote TTS
     * @returns Promise resolving to the component registry instance
     */
    static async registerRemoteTTSComponent(componentId, ttsConfig) {
        const remoteTTSConfig = expose_binary_1.RemoteTTSConfigFunctions.new();
        expose_binary_1.RemoteTTSConfigFunctions.setApiKey(remoteTTSConfig, ttsConfig.apiKey);
        const synthesisConfig = new tts_1.SpeechSynthesisConfig(ttsConfig.synthesisConfig);
        expose_binary_1.RemoteTTSConfigFunctions.setSynthesisConfig(remoteTTSConfig, synthesisConfig.getExternal());
        const componentRegistry = expose_binary_1.ComponentRegistryFunctions.getInstance();
        const createTTSStatus = expose_binary_1.ComponentRegistryFunctions.createComponentTTSInterfaceRemote(componentRegistry, componentId, remoteTTSConfig);
        if ((0, helpers_1.getStatus)(createTTSStatus) !== 'OK') {
            throw new Error(`Cannot create remote TTS component for ${componentId} using: ${ttsConfig}`);
        }
        expose_binary_1.RemoteTTSConfigFunctions.delete(remoteTTSConfig);
        synthesisConfig.destroy();
        return componentRegistry;
    }
    static initializeRegistries() {
        expose_binary_1.ComponentRegistryFunctions.initializeRegistries();
    }
    static getComponentRegistry() {
        return expose_binary_1.ComponentRegistryFunctions.getInstance();
    }
    static destroy() {
        return expose_binary_1.ComponentRegistryFunctions.clear(expose_binary_1.ComponentRegistryFunctions.getInstance());
    }
}
exports.default = ComponentRegistry;
