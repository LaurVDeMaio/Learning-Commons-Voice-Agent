import { ExternalReference } from '../../../common/types';
import { LLM, TextGenerationConfigInterface } from '../../../primitives/llm';
import { Node, NodePropsInterface } from '../node';
import { NextTextFunction } from '../types';
/**
 * Interface for LLM Node creation properties.
 */
export interface LLMNodePropsInterface extends NodePropsInterface {
    /** LLM instance for text generation */
    llm: LLM;
    /** Configuration for text generation behavior */
    textGenerationConfig: TextGenerationConfigInterface;
    /** Whether to stream the generated text */
    stream: boolean;
}
/**
 * Node for language model text generation in the graph.
 * Processes input through a language model to generate text responses.
 */
export declare class LLMNode extends Node {
    private llm;
    private stream;
    /**
     * Creates a new LLMNode instance.
     *
     * @param props - LLM node creation properties
     * @internal
     */
    constructor(props: LLMNodePropsInterface);
    /**
     * Creates a response handler for processing graph execution results.
     * Handles both streaming and non-streaming modes.
     *
     * @param graphExecutor - Reference to the graph executor
     * @param index - Index of the execution
     * @returns Object with the next function for handling stream data
     */
    handleResponse(graphExecutor: ExternalReference, index: number): Promise<NextTextFunction>;
    /**
     * Cleans up resources associated with this LLM node.
     */
    destroy(): void;
    /**
     * Processes the next chunk of data in non-streaming mode.
     *
     * @param index - Index of the execution
     * @param graphExecutor - Reference to the graph executor
     * @returns Promise resolving to the next result with text or done flag
     */
    protected next(index: number, graphExecutor: ExternalReference): Promise<{
        text: string;
        done: boolean;
    } | {
        done: boolean;
        text?: undefined;
    }>;
    /**
     * Processes the next chunk of data in streaming mode.
     *
     * @param next - Reference to the next data chunk
     * @returns Promise resolving to the streamed text data
     */
    private nextStreaming;
}
