"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentNode = void 0;
const expose_binary_1 = require("../../../expose_binary");
const node_1 = require("../node");
const NodeExecutionConfig_1 = require("../NodeExecutionConfig");
/**
 * Node for intent recognition and classification in the graph.
 * Processes text input through an intent matcher to identify user intents.
 * @input {TextData} {@link TextData} - The data type that IntentNode accepts as input
 * @output {MatchedIntents} {@link MatchedIntents} - The data type that IntentNode accepts as output
 */
class IntentNode extends node_1.Node {
    /**
     * Creates a new IntentNode instance.
     *
     * @param props - Intent node creation properties
     * @internal
     */
    constructor(props) {
        let executionConfig = null;
        try {
            executionConfig = new NodeExecutionConfig_1.IntentNodeExecutionConfig(props.executionConfig);
            super(props.id, expose_binary_1.NodeCreateFunctions.createIntentNode(props.id, props.intentMatcher.getExternal(), executionConfig.getExternal()));
            this.intentMatcher = props.intentMatcher;
            this.executionConfig = executionConfig;
        }
        catch (e) {
            executionConfig === null || executionConfig === void 0 ? void 0 : executionConfig.destroy();
            throw e;
        }
    }
    /**
     * Cleans up resources associated with this intent node.
     */
    destroy() {
        var _a, _b;
        (_a = this.intentMatcher) === null || _a === void 0 ? void 0 : _a.destroy();
        this.intentMatcher = null;
        (_b = this.executionConfig) === null || _b === void 0 ? void 0 : _b.destroy();
        this.executionConfig = null;
        if (this.external) {
            // Legacy way
            // NodeHelperFunctions.deleteIntentNode(this.external);
            this.external = null;
        }
        super.destroy();
    }
}
exports.IntentNode = IntentNode;
