"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextAggregatorNode = void 0;
const expose_binary_1 = require("../../../expose_binary");
const node_1 = require("../node");
/**
 * TextAggregatorNode is a node that aggregates text from an incoming stream.
 * It processes text chunks and combines them into a single text string.
 * @input {TextData | TextStreamData | LLMChatResponse} {@link TextData} | {@link TextStreamData} | {@link LLMChatResponse} - The data type that TextAggregatorNode accepts as input
 * @output {TextData} {@link TextData} - The data type that TextAggregatorNode accepts as output
 */
class TextAggregatorNode extends node_1.Node {
    /**
     * Creates a new TextAggregatorNode.
     *
     * @param props - Configuration parameters for the text aggregator node
     * @internal
     */
    constructor(props) {
        let external;
        let executionConfig;
        try {
            if (props.executionConfig) {
                executionConfig = props.executionConfig;
                const statusOrNode = expose_binary_1.NodeCreateFunctions.createTextAggregatorNode(props.id, executionConfig.getExternal());
                if (!expose_binary_1.StatusOrSharedPtrTextAggregatorNodeFunctions.isOK(statusOrNode)) {
                    throw new Error('Failed to create text aggregator node');
                }
                external =
                    expose_binary_1.StatusOrSharedPtrTextAggregatorNodeFunctions.getValue(statusOrNode);
            }
            else {
                external = expose_binary_1.NodeCreateFunctions.createTextAggregatorNode(props.id, null);
            }
            super(props.id, external);
            this.executionConfig = executionConfig;
        }
        catch (e) {
            executionConfig === null || executionConfig === void 0 ? void 0 : executionConfig.destroy();
            throw e;
        }
    }
    /**
     * Cleans up resources associated with the text aggregator node.
     */
    destroy() {
        var _a;
        (_a = this.executionConfig) === null || _a === void 0 ? void 0 : _a.destroy();
        this.executionConfig = null;
        if (this.external) {
            expose_binary_1.StatusOrSharedPtrTextAggregatorNodeFunctions.delete(this.external);
        }
        super.destroy();
    }
}
exports.TextAggregatorNode = TextAggregatorNode;
