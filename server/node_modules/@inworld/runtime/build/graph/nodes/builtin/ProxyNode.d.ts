import { Node, NodePropsInterface } from '../node';
import { NodeExecutionConfig } from '../NodeExecutionConfig';
/**
 * Interface for Proxy Node creation properties.
 */
export interface ProxyNodePropsInterface extends NodePropsInterface {
    /** Optional execution configuration for the proxy node */
    executionConfig?: NodeExecutionConfig;
}
/**
 * @internal
 * @warning This programmatic variant of ProxyNode is not tested and not exported on top level of package.
 * The main purpose of this node, as of now, is just to support documentation generation. Later, we will either rework it or support it only in the DSL.
 */
/**
 * TODO: union type for all input and output types
 */
/**
 * Node for proxying data in the graph.
 * Passes through any input data without modification.
 * @input {any} any - The data type that ProxyNode accepts as input
 * @output {any} any - The data type that ProxyNode accepts as output
 */
export declare class ProxyNode extends Node {
    private executionConfig?;
    /**
     * Creates a new ProxyNode instance.
     *
     * @param props - Proxy node creation properties
     * @internal
     */
    constructor(props: ProxyNodePropsInterface);
    /**
     * Cleans up resources associated with this proxy node.
     */
    destroy(): void;
}
