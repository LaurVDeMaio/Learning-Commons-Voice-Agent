import { ExternalReference } from '../../../common/data_types/common';
import { IntentMatcherCreationConfigInterface } from '../../../primitives/intent';
import { TextGenerationConfigInterface } from '../../../primitives/llm';
import { SpeechRecognitionConfigInterface } from '../../../primitives/stt';
import { SpeechSynthesisConfigInterface } from '../../../primitives/tts';
/**
 * Represents the properties for the execution config.
 */
export interface ExecutionConfigPropsInterface {
    /**
     * Whether to report to the client.
     */
    reportToClient?: boolean;
}
/**
 * Represents the properties for the STT node execution config.
 */
export interface STTNodeExecutionConfigPropsInterface extends ExecutionConfigPropsInterface {
    /**
     * The speech recognition config.
     */
    speechRecognitionConfig?: SpeechRecognitionConfigInterface;
    /** STT component ID that was registered in the component registry */
    stt_component_id: string;
}
/**
 * Represents the properties for the TTS node execution config.
 */
export interface TTSNodeExecutionConfigPropsInterface extends ExecutionConfigPropsInterface {
    /**
     * The speaker ID.
     */
    speakerId: string;
    /**
     * The speech synthesis config.
     */
    synthesisConfig: SpeechSynthesisConfigInterface;
    /** TTS component ID that was registered in the component registry */
    tts_component_id: string;
}
/**
 * Represents the properties for the intent node execution config.
 */
export interface IntentNodeExecutionConfigPropsInterface extends ExecutionConfigPropsInterface {
    /**
     * The matcher config.
     */
    matcherConfig: IntentMatcherCreationConfigInterface;
}
/**
 * Represents the properties for the LLM node execution config.
 */
export interface LLMChatNodeExecutionConfigPropsInterface extends ExecutionConfigPropsInterface {
    /**
     * The text generation config.
     */
    textGenerationConfig: TextGenerationConfigInterface;
    /** LLM component ID that was registered in the component registry */
    llm_component_id: string;
    stream: boolean;
}
/**
 * Represents the properties for the text aggregator node execution config.
 */
export interface TextAggregatorNodeExecutionConfigPropsInterface extends ExecutionConfigPropsInterface {
}
/**
 * Represents the properties for the text chunking node execution config.
 */
export interface TextChunkingNodeExecutionConfigPropsInterface extends ExecutionConfigPropsInterface {
}
/**
 * Represents the execution config.
 * @internal
 */
export declare class ExecutionConfig {
    protected external: any;
    reportToClient: boolean;
    /**
     * Constructs a new execution config.
     *
     * @param external - The external reference.
     * @param props - The properties.
     */
    constructor(external: ExternalReference, props: ExecutionConfigPropsInterface);
    /**
     * Constructs a new execution config.
     *
     * @param external - The external reference.
     */
    constructor(external: ExternalReference);
    /**
     * Gets the external reference.
     *
     * @returns The external reference.
     */
    getExternal(): any;
    /**
     * Destroys the execution config.
     */
    destroy(): void;
}
/**
 * Represents the STT node execution config.
 * @internal
 */
export declare class STTNodeExecutionConfig extends ExecutionConfig {
    private speechRecognitionConfig;
    private stt_component_id;
    /**
     * Constructs a new STT node execution config.
     *
     * @param props - The properties.
     */
    constructor(props: STTNodeExecutionConfigPropsInterface);
    /**
     * Destroys the STT node execution config.
     */
    destroy(): void;
}
/**
 * Represents the TTS node execution config.
 * @internal
 */
export declare class TTSNodeExecutionConfig extends ExecutionConfig {
    private speechSynthesisConfig;
    private voice;
    private tts_component_id;
    constructor(props: TTSNodeExecutionConfigPropsInterface);
    /**
     * Destroys the TTS node execution config.
     */
    destroy(): void;
}
/**
 * Represents the intent node execution config.
 * @internal
 */
export declare class IntentNodeExecutionConfig extends ExecutionConfig {
    private matcherConfig;
    /**
     * Constructs a new intent node execution config.
     *
     * @param props - The properties.
     */
    constructor(props: IntentNodeExecutionConfigPropsInterface);
    /**
     * Destroys the intent node execution config.
     */
    destroy(): void;
}
/**
 * Represents the LLM node execution config.
 * @internal
 */
export declare class LLMChatNodeExecutionConfig extends ExecutionConfig {
    private textGenerationConfig;
    private llm_component_id;
    private stream;
    /**
     * Constructs a new LLM node execution config.
     *
     * @param props - The properties.
     */
    constructor(props: LLMChatNodeExecutionConfigPropsInterface);
    /**
     * Destroys the LLM node execution config.
     */
    destroy(): void;
}
/**
 * Represents the text aggregator node execution config.
 * @internal
 */
export declare class TextAggregatorNodeExecutionConfig extends ExecutionConfig {
    /**
     * Constructs a new text aggregator node execution config.
     *
     * @param props - The properties.
     */
    constructor(props: TextAggregatorNodeExecutionConfigPropsInterface);
    /**
     * Destroys the text aggregator node execution config.
     */
    destroy(): void;
}
/**
 * Represents the text chunking node execution config.
 * @internal
 */
export declare class TextChunkingNodeExecutionConfig extends ExecutionConfig {
    /**
     * Constructs a new text chunking node execution config.
     *
     * @param props - The properties.
     */
    constructor(props: TextChunkingNodeExecutionConfigPropsInterface);
    /**
     * Destroys the text chunking node execution config.
     */
    destroy(): void;
}
