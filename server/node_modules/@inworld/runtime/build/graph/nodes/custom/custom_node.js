"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomNode = void 0;
const common_1 = require("../../../common");
const data_types_1 = require("../../../common/data-types");
const custom_node_wrapper_1 = require("./custom_node_wrapper");
/**
 * Base class for creating custom graph processing nodes.
 * Provides a runtime for implementing custom data transformation logic.
 *
 * @template I - Input type. Can be CustomInputDataType, CustomInputDataType[], or any custom type
 * @template O - Output type. Can be CustomOutputDataType or any custom type
 */
class CustomNode {
    /**
     * Creates a new CustomNode instance.
     *
     * @param id - Unique identifier for the node
     */
    constructor(id) {
        this.id = id;
    }
    /**
     * Processes the input data.
     * This method must be implemented by subclasses.
     *
     * @param _context - Optional execution context providing additional information
     * @param _inputs - Array of input data
     * @throws InworldError if not implemented by subclass
     */
    process(_context, _inputs) {
        throw new common_1.InworldError('Process method must be implemented');
    }
    /**
     * Builds a CustomNodeWrapper for this node.
     *
     * @returns New CustomNodeWrapper instance that wraps this node
     */
    build() {
        // TODO: write new validation for all known types to check.
        /*
        if (!this.input || !this.output) {
          throw new InworldError('Input and output types must be set');
        }
    */
        const inputTypes = this.getInputTypes();
        const outputType = this.getOutputType();
        return new custom_node_wrapper_1.CustomNodeWrapper({
            id: this.id,
            process: (context, inputs) => {
                try {
                    return this.process(context, inputs);
                }
                catch (error) {
                    // eslint-disable-next-line no-console
                    console.error(`The Error occurred inside custom node: ${this.id}:process`, error);
                }
            },
            inputTypes,
            outputType,
            executionConfigPtr: this.executionConfigPtr,
        });
    }
    /**
     * Converts the generic input type to the format expected by CustomNodeWrapper.
     * Override this method if you need custom type conversion logic.
     */
    getInputTypes() {
        if (!this.input) {
            return [data_types_1.CustomInputDataType.CUSTOM];
        }
        if (Array.isArray(this.input)) {
            return this.input;
        }
        return [this.input];
    }
    /**
     * Converts the generic output type to the format expected by CustomNodeWrapper.
     * Override this method if you need custom type conversion logic.
     */
    getOutputType() {
        if (!this.output) {
            return data_types_1.CustomOutputDataType.CUSTOM;
        }
        return this.output;
    }
}
exports.CustomNode = CustomNode;
