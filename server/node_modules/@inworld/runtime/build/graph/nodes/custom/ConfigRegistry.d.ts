export declare class ConfigRegistry {
    private static instance;
    private external;
    private registeredCallbacks;
    private constructor();
    static getInstance(): ConfigRegistry;
    /**
     * Registers a custom config type with the registry.
     * @param type The config type name
     * @param deserializeExecutor Pointer to the deserialize executor
     * @param serializeExecutor Pointer to the serialize executor
     * @returns true if registration succeeded
     */
    registerCustomConfig(type: string, deserializeExecutor: any, serializeExecutor: any): boolean;
    /**
     * Creates a generic config executor pair for JSON-based configs
     * @param configType The config type name
     * @returns Object containing deserializeExecutor, serializeExecutor, and callback references
     */
    private createGenericConfigExecutors;
    /**
     * Registers the CustomNodeExecutionConfig type with the registry.
     * This is needed for deserializing custom node execution configurations.
     * @returns true if registration succeeded
     */
    registerCustomNodeExecutionConfig(configType: string): boolean;
    /**
     * Registers the LLMChatNodeExecutionConfig type with the registry.
     * @returns true if registration succeeded
     */
    registerLLMChatNodeExecutionConfig(): boolean;
    /**
     * Registers the TTSNodeExecutionConfig type with the registry.
     * @returns true if registration succeeded
     */
    registerTTSNodeExecutionConfig(): boolean;
    /**
     * Registers the NodeExecutionConfig type with the registry.
     * @returns true if registration succeeded
     */
    registerNodeExecutionConfig(): boolean;
    /**
     * Registers all config types needed for the custom TTS dynamic config example.
     * @returns true if all registrations succeeded
     */
    registerAllDefaultConfigs(): boolean;
    /**
     * Deserializes a custom config from JSON.
     * @param type The config type name
     * @param jsonData The JSON string
     * @returns Pointer to the deserialized config wrapper
     */
    deserializeCustomConfig(type: string, jsonData: string): any;
    /**
     * Serializes a custom config to JSON.
     * @param type The config type name
     * @param configPtr Pointer to the config wrapper
     * @returns JSON string
     */
    serializeCustomConfig(type: string, configPtr: any): string;
    /**
     * Cleans up resources associated with this config registry.
     * Unregisters all stored callbacks to prevent memory leaks.
     */
    destroy(): void;
}
