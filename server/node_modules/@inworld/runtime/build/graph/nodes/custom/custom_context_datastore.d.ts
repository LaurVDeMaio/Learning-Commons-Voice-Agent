/**
 * Stores data shared between nodes during an execution.
 * Provides typed accessors and resource-safe deletion.
 */
export declare class DataStore {
    private readonly store;
    /**
     * Adds data only if the key does not already exist.
     * Returns true if added, false if the key was already present.
     */
    add(key: string, data: any): boolean;
    /** Gets data for a key or undefined if not present. */
    get(key: string): any | undefined;
    /** Gets data or throws if it does not exist. */
    require(key: string): any;
    /**
     * Gets data and asserts it matches the requested constructor. Throws if the
     * key is missing or the stored value does not match the requested type.
     */
    getAs<T extends any>(key: string, ctor: new (...args: any[]) => T): T | undefined;
    /**
     * Gets data and asserts it matches the requested constructor. Throws if
     * missing or of different type.
     */
    requireAs<T extends any>(key: string, ctor: new (...args: any[]) => T): T;
    /** Returns the value or the provided default when absent. */
    getOrDefault(key: string, defaultValue: any): any;
    /**
     * Returns the typed value when present and of the expected type; otherwise the default.
     */
    getAsOrDefault<T extends any>(key: string, defaultValue: T, ctor: new (...args: any[]) => T): T;
    /** True if the store contains the key. */
    has(key: string): boolean;
    /** Returns all keys in insertion order. */
    keys(): string[];
    /** Number of entries. */
    size(): number;
    /** True if no entries are present. */
    isEmpty(): boolean;
    /**
     * Deletes an entry.
     * Returns true if the key existed.
     */
    delete(key: string): boolean;
    /**
     * Clears the store. By default destroys all stored values to release native resources.
     */
    clear(): void;
}
/**
 * Registry mapping execution IDs to their associated DataStore.
 */
export declare class CustomExecutionContextRegistry {
    private static instance;
    private readonly executionContextRegistry;
    private constructor();
    static getInstance(): CustomExecutionContextRegistry;
    /** Returns an existing store for the execution ID, or undefined. */
    get(executionId: string): DataStore | undefined;
    /** Returns the store for the execution ID, creating it if missing. */
    getOrCreate(executionId: string): DataStore;
    /** Initializes a fresh store for the execution ID, replacing any existing one. */
    init(executionId: string): DataStore;
    /**
     * Disposes and removes the store for an execution ID.
     * Returns true if a store existed.
     */
    dispose(executionId: string): boolean;
    /** Clears all stores. */
    clearAll(): void;
}
