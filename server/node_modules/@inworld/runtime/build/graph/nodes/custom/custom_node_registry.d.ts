import { CustomNodeInputTypes, CustomNodeOutputTypes } from '../../../common/data_types/type_mapping';
import { EdgeConditionCallback } from '../../EdgeConditionExecutor';
import { CustomEdgeConditionReference, CustomNodeTypeReference } from '../types';
import { ProcessContext } from './process_context_Impl';
export interface CustomNodeIOType {
    input: CustomNodeInputTypes[];
    output: CustomNodeOutputTypes;
}
export type RegisteredTypePayload = {
    executionConfig: Record<string, any>;
    ioType?: CustomNodeIOType;
};
type ProcessFunction = (context: ProcessContext, ...inputs: any[]) => any | Promise<any>;
/**
 * Registry for custom node types that can be used in graph configurations.
 * Allows registration of custom node types that can be referenced by name in JSON configurations.
 */
export declare class CustomNodeRegistry {
    private static instance;
    private registeredTypes;
    private registeredCallbacks;
    private registeredEdgeConditions;
    private constructor();
    /**
     * Gets the singleton instance of the CustomNodeRegistry.
     */
    static getInstance(): CustomNodeRegistry;
    /**
     * Registers a custom node type with the runtime.
     *
     * @param type - The type name to register (e.g., 'InputNode', 'MyCustomNode')
     * @param processFunction - Function that processes the node inputs
     * @throws InworldError if registration fails
     */
    registerType(type: string, processFunction: ProcessFunction): boolean;
    /**
     * Clears all registered custom node types and cleanup resources.
     */
    clear(): void;
    /**
     * Static method to cleanup the singleton instance.
     * Call this during application shutdown to prevent memory leaks.
     */
    static destroy(): void;
    /**
     * Processes inputs based on input type specifications.
     */
    private processInputs;
    /**
     * Processes the output based on output type specification.
     */
    private processOutput;
    private createNodeCallback;
    /**
     * @internal
     */
    private registerWithCpp;
}
/**
 * Registers a custom edge condition for conditional graph execution.
 */
export declare function registerCustomEdgeCondition(id: string, condition: EdgeConditionCallback): CustomEdgeConditionReference;
/**
 * Clears a custom edge condition by ID.
 */
export declare function clearCustomEdgeCondition(id: string): void;
/**
 * Clears a custom node type callback by ID.
 */
export declare function clearCustomNodeTypeCallback(id: string): void;
/**
 * Helper function to register a simple custom node type with improved type safety.
 */
export declare function registerCustomNodeType(type: string, processFunction: (context: ProcessContext, ...inputs: CustomNodeInputTypes[]) => CustomNodeOutputTypes | Promise<CustomNodeOutputTypes>): CustomNodeTypeReference;
export {};
