import { CustomInputDataType, CustomOutputDataType, InferInputTypes, InferOutputTypes } from '../../../common/data-types';
import { ExternalReference } from '../../../common/export';
import { CustomNodeWrapper, ProcessContext } from './custom_node_wrapper';
export interface CustomNodeInterface<I, O> {
    id: string;
    input: I;
    output: O;
    process(context: ProcessContext, inputs: InferInputTypes<I>): InferOutputTypes<O> | Promise<InferOutputTypes<O>>;
    build(): CustomNodeWrapper;
}
/**
 * Base class for creating custom graph processing nodes.
 * Provides a runtime for implementing custom data transformation logic.
 *
 * @template I - Input type. Can be CustomInputDataType, CustomInputDataType[], or any custom type
 * @template O - Output type. Can be CustomOutputDataType or any custom type
 */
export declare class CustomNode<I = CustomInputDataType | CustomInputDataType[], O = CustomOutputDataType> implements CustomNodeInterface<I, O> {
    /** Unique identifier for the node */
    readonly id: string;
    /** Input type for the node */
    readonly input: I;
    /** Output type for the node */
    readonly output: O;
    readonly executionConfigPtr: ExternalReference;
    /**
     * Creates a new CustomNode instance.
     *
     * @param id - Unique identifier for the node
     */
    constructor(id: string);
    /**
     * Processes the input data.
     * This method must be implemented by subclasses.
     *
     * @param _context - Optional execution context providing additional information
     * @param _inputs - Array of input data
     * @throws InworldError if not implemented by subclass
     */
    process(_context: ProcessContext, _inputs: InferInputTypes<I> | InferInputTypes<I>[]): InferOutputTypes<O> | Promise<InferOutputTypes<O>>;
    /**
     * Builds a CustomNodeWrapper for this node.
     *
     * @returns New CustomNodeWrapper instance that wraps this node
     */
    build(): CustomNodeWrapper<I, O>;
    /**
     * Converts the generic input type to the format expected by CustomNodeWrapper.
     * Override this method if you need custom type conversion logic.
     */
    protected getInputTypes(): CustomInputDataType[];
    /**
     * Converts the generic output type to the format expected by CustomNodeWrapper.
     * Override this method if you need custom type conversion logic.
     */
    protected getOutputType(): CustomOutputDataType;
}
