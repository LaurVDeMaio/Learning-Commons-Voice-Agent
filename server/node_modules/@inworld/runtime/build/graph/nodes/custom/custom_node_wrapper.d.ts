import { CustomNodeInputTypes, CustomNodeOutputTypes } from '../../../common/data_types/api';
import { ExternalReference } from '../../../common/data_types/common';
import { Node } from '../node';
export type ProcessContext = {
    executionConfig: {
        properties?: {
            [k: string]: string | number | boolean;
        };
    };
};
/**
 * Interface for CustomNodeWrapper creation properties.
 * @template I - Input type. Can be CustomInputDataType, CustomInputDataType[], or any custom type
 * @template O - Output type. Can be CustomOutputDataType or any custom type
 * @internal
 */
export interface CustomNodeWrapperProps<I = readonly CustomNodeInputTypes[], O = CustomNodeOutputTypes> {
    /** Unique identifier for the node */
    id: string;
    /** Function that processes input data */
    process: (context: ProcessContext, inputs: I) => Promise<O> | O;
    executionConfigPtr: ExternalReference;
}
/**
 * Type definition for a function that processes input data.
 * @template I - Input type
 * @template O - Output type
 * @internal
 */
export type CustomNodeProcess<I = any, O = any> = (context: ProcessContext, inputs: I[]) => Promise<O> | O;
/**
 * Wrapper class that integrates custom node logic with the graph runtime.
 * Bridges between JavaScript code and the native graph implementation.
 *
 * @template I - Input type. Can be CustomInputDataType, CustomInputDataType[], or any custom type
 * @template O - Output type. Can be CustomOutputDataType or any custom type
 */
export declare class CustomNodeWrapper<I = readonly CustomNodeInputTypes[], O = CustomNodeOutputTypes> extends Node {
    private externalProcess;
    readonly executionConfigPtr: ExternalReference;
    /**
     * Creates a new CustomNodeWrapper instance.
     *
     * @param props - Custom node wrapper creation properties
     * @throws InworldError if result type is not supported
     * @internal
     */
    constructor({ id, process, executionConfigPtr, }: CustomNodeWrapperProps<I, O>);
    /**
     * Cleans up resources associated with this custom node wrapper.
     */
    destroy(): void;
    private setResult;
}
