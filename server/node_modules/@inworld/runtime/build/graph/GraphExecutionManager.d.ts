type Graph = {
    getGraphId: () => string;
    stopExecutor: () => void;
    cleanupAllExecutions: () => void;
    destroy: () => void;
};
/**
 * Global registry for managing graph executions and registered graphs
 * This singleton class tracks execution counts per graph ID and registered graph instances
 */
export declare class GraphExecutionManager {
    private static instance;
    private executionCounts;
    private registeredGraphs;
    private constructor();
    static getInstance(): GraphExecutionManager;
    /**
     * Register a graph instance (separate from executions)
     */
    registerGraph(graphId: string, graph: Graph): void;
    /**
     * Unregister a graph instance
     */
    unregisterGraph(graphId: string): void;
    /**
     * Get all registered graphs
     */
    getAllRegisteredGraphs(): Graph[];
    /**
     * Register a new graph execution
     */
    registerExecution(graphId: string): void;
    /**
     * Unregister a graph execution
     */
    unregisterExecution(graphId: string): void;
    /**
     * Clear all registered graphs, executions, and counts (without cleanup)
     */
    clearAll(): void;
    /**
     * Global cleanup method that handles all registered graphs
     * Performs the complete cleanup sequence for each graph
     */
    cleanupAllGraphs(): void;
    static destroy(): void;
}
export {};
