import { ExternalReference } from '../common/data_types/common';
import type { ProcessContext } from '../graph/nodes/custom/process_context_Impl';
/**
 * Metric types for telemetry data collection
 * @description Defines the different types of metrics that can be recorded
 */
export declare enum MetricType {
    /**
     * Counter with unsigned integer values
     * @description Monotonically increasing counter for counting events
     */
    COUNTER_UINT = 0,
    /**
     * Counter with double values
     * @description Monotonically increasing counter with floating-point precision
     */
    COUNTER_DOUBLE = 1,
    /**
     * Gauge with integer values
     * @description Point-in-time measurement that can go up or down
     */
    GAUGE_INT = 2,
    /**
     * Gauge with double values
     * @description Point-in-time measurement with floating-point precision
     */
    GAUGE_DOUBLE = 3,
    /**
     * Histogram with unsigned integer values
     * @description Distribution of values over time for integer data
     */
    HISTOGRAM_UINT = 4,
    /**
     * Histogram with double values
     * @description Distribution of values over time for floating-point data
     */
    HISTOGRAM_DOUBLE = 5
}
/**
 * Configuration for a metric
 * @description Defines the properties required to configure a telemetry metric
 */
export interface MetricConfigInterface {
    /**
     * The type of metric to configure
     * @type {MetricType}
     */
    metricType: MetricType;
    /**
     * The unique name identifier for the metric
     * @type {string}
     * @description Used to identify and query the metric in telemetry systems
     */
    name: string;
    /**
     * Human-readable description of what the metric measures
     * @type {string}
     * @optional
     */
    description?: string;
    /**
     * Unit of measurement for the metric values
     * @type {string}
     * @optional
     * @example "bytes", "seconds", "requests", "percentage"
     */
    unit?: string;
}
/**
 * Configuration for telemetry logging
 * @description Controls logging behavior and verbosity levels
 */
export interface LoggerConfigInterface {
    /**
     * The minimum log level to capture
     * @type {LogLevel}
     * @default LogLevel.INFO
     * @description Only logs at or above this level will be recorded
     */
    level?: LogLevel;
    /**
     * Whether to capture absl (abseil) library logs
     * @type {boolean}
     * @default true
     * @description Controls integration with the absl logging library
     */
    sinkAbslLogs?: boolean;
}
/**
 * Configuration for distributed tracing
 * @description Controls sampling and behavior of trace collection
 */
export interface TracerConfigInterface {
    /**
     * Sampling rate for trace collection (0.0 to 1.0)
     * @type {number}
     * @default 1.0
     * @description Percentage of requests to trace (1.0 = 100% sampling)
     * @example 0.1 for 10% sampling, 1.0 for full tracing
     */
    samplingRate?: number;
}
/**
 * Main configuration for telemetry system initialization
 * @description Comprehensive configuration object for setting up telemetry
 */
export interface TelemetryConfigInterface {
    /**
     * Application name for service identification
     * @type {string}
     * @optional
     * @description Used as service.name and app.name in telemetry attributes
     * @default DEFAULT_TELEMETRY_APP_NAME
     */
    appName?: string;
    /**
     * Application version for tracking deployments
     * @type {string}
     * @optional
     * @description Used as service.version and app.version in telemetry attributes
     * @default DEFAULT_TELEMETRY_APP_VERSION
     */
    appVersion?: string;
    /**
     * Telemetry endpoint URL
     * @type {string}
     * @optional
     * @description Where telemetry data will be sent. If not provided, uses environment-based endpoint
     */
    endpoint?: string;
    /**
     * API key for telemetry service authentication
     * @type {string}
     * @required
     * @description Required for authenticating with the telemetry service
     */
    apiKey: string;
    /**
     * Logger configuration settings
     * @type {LoggerConfigInterface}
     * @optional
     * @description Controls logging behavior and verbosity
     */
    logger?: LoggerConfigInterface;
    /**
     * Tracer configuration settings
     * @type {TracerConfigInterface}
     * @optional
     * @description Controls distributed tracing behavior
     */
    tracer?: TracerConfigInterface;
    /**
     * Type of telemetry exporter to use
     * @type {ExporterType}
     * @optional
     * @default ExporterType.REMOTE
     * @description Determines where telemetry data is exported
     */
    exporterType?: ExporterType;
}
/**
 * Log levels for telemetry logging
 * @description Maps to VERBOSITY values in the underlying telemetry system
 */
export declare enum LogLevel {
    /**
     * Trace level - most verbose logging
     * @description Verbosity = 2, captures all possible log messages
     */
    TRACE = "TRACE",
    /**
     * Debug level - detailed debugging information
     * @description Verbosity = 1, useful for development and troubleshooting
     */
    DEBUG = "DEBUG",
    /**
     * Info level - general information messages
     * @description Verbosity = 0, standard operational information
     */
    INFO = "INFO",
    /**
     * Warning level - potential issues
     * @description Important messages about potential problems
     */
    WARN = "WARN",
    /**
     * Error level - error conditions
     * @description Error messages for actual problems
     */
    ERROR = "ERROR"
}
/**
 * Exporter types for telemetry data
 * @description Defines where telemetry data is sent
 */
export declare enum ExporterType {
    /**
     * Local exporter - data stays on the local machine
     * @description Useful for development, debugging, or local analysis
     */
    LOCAL = "LOCAL",
    /**
     * Remote exporter - data sent to remote telemetry service
     * @description Production-ready, sends data to configured endpoint
     */
    REMOTE = "REMOTE"
}
/**
 * Telemetry class for managing telemetry lifecycle
 * @description Internal class that handles telemetry initialization, configuration, and cleanup
 */
declare class Telemetry {
    private static instance;
    private initialized;
    /**
     * @internal
     */
    config: ExternalReference | undefined;
    /**
     * @internal
     */
    loggerConfig: ExternalReference | undefined;
    /**
     * @internal
     */
    tracerConfig: ExternalReference | undefined;
    /**
     * Creates a new Telemetry instance
     * @param {TelemetryConfigInterface} props - Configuration for telemetry initialization
     * @throws {InworldError} When apiKey is missing or initialization fails
     */
    constructor(props: TelemetryConfigInterface);
    /**
     * Initializes the telemetry system
     * @description Starts telemetry collection and makes the instance globally available
     */
    init(): void;
    /**
     * Shuts down the telemetry system
     * @description Stops telemetry collection and cleans up resources
     */
    shutdown(): void;
    /**
     * Gets the singleton telemetry instance
     * @returns {Telemetry | undefined} The current telemetry instance or undefined if not initialized
     */
    static getInstance(): Telemetry;
    /**
     * Cleans up telemetry resources
     * @description Destroys all configuration objects and frees memory
     * @private
     */
    private destroy;
    /**
     * Maps exporter type enum to internal numeric value
     * @param {ExporterType} exporterType - The exporter type to map
     * @returns {number} Internal numeric representation
     * @private
     */
    private mapExporterTypeToExternal;
    /**
     * Maps log level enum to internal numeric value
     * @param {LogLevel} logLevel - The log level to map
     * @returns {number} Internal numeric representation
     * @private
     */
    private mapLogLevelToExternal;
}
/**
 * Metric recording utilities
 * @description Provides functions to record different types of metrics with optional tags
 */
export declare const metric: {
    /**
     * Records an unsigned integer counter metric
     * @param {string} name - The name of the metric to record
     * @param {number} value - The counter value to record
     * @param {Record<string, string>} [tags] - Optional key-value tags for the metric
     * @example
     * ```typescript
     * metric.recordCounterUInt('requests_total', 1, { endpoint: '/api/users', method: 'GET' });
     * ```
     */
    recordCounterUInt(name: string, value: number, tags?: Record<string, string>): void;
    /**
     * Records a double precision counter metric
     * @param {string} name - The name of the metric to record
     * @param {number} value - The counter value to record
     * @param {Record<string, string>} [tags] - Optional key-value tags for the metric
     * @example
     * ```typescript
     * metric.recordCounterDouble('bytes_processed', 1024.5, { data_type: 'json' });
     * ```
     */
    recordCounterDouble(name: string, value: number, tags?: Record<string, string>): void;
    /**
     * Records an integer gauge metric
     * @param {string} name - The name of the metric to record
     * @param {number} value - The gauge value to record
     * @param {Record<string, string>} [tags] - Optional key-value tags for the metric
     * @example
     * ```typescript
     * metric.recordGaugeInt('active_connections', 42, { server: 'web-01' });
     * ```
     */
    recordGaugeInt(name: string, value: number, tags?: Record<string, string>): void;
    /**
     * Records a double precision gauge metric
     * @param {string} name - The name of the metric to record
     * @param {number} value - The gauge value to record
     * @param {Record<string, string>} [tags] - Optional key-value tags for the metric
     * @example
     * ```typescript
     * metric.recordGaugeDouble('cpu_usage_percent', 75.5, { core: '0' });
     * ```
     */
    recordGaugeDouble(name: string, value: number, tags?: Record<string, string>): void;
    /**
     * Records an unsigned integer histogram metric
     * @param {string} name - The name of the metric to record
     * @param {number} value - The value to record in the histogram
     * @param {Record<string, string>} [tags] - Optional key-value tags for the metric
     * @example
     * ```typescript
     * metric.recordHistogramUInt('request_duration_ms', 150, { endpoint: '/api/data' });
     * ```
     */
    recordHistogramUInt(name: string, value: number, tags?: Record<string, string>): void;
    /**
     * Records a double precision histogram metric
     * @param {string} name - The name of the metric to record
     * @param {number} value - The value to record in the histogram
     * @param {Record<string, string>} [tags] - Optional key-value tags for the metric
     * @example
     * ```typescript
     * metric.recordHistogramDouble('memory_usage_mb', 512.75, { process: 'worker-1' });
     * ```
     */
    recordHistogramDouble(name: string, value: number, tags?: Record<string, string>): void;
};
/**
 * Gets the current telemetry instance
 * @description Returns the singleton telemetry instance if initialized
 * @returns {Telemetry | undefined} The telemetry instance or undefined if not initialized
 * @example
 * ```typescript
 * const telemetry = getInstance();
 * if (telemetry) {
 *   // Telemetry is initialized and available
 * }
 * ```
 */
export declare const getInstance: () => Telemetry;
/**
 * Shuts down the telemetry system
 * @description Stops telemetry collection and cleans up all resources
 * @example
 * ```typescript
 * // Gracefully shutdown telemetry before application exit
 * shutdown();
 * ```
 */
export declare const shutdown: () => void;
/**
 * Initializes the telemetry system
 * @description Sets up telemetry collection with the provided configuration
 * @param {TelemetryConfigInterface} props - Configuration for telemetry initialization
 * @throws {InworldError} When apiKey is missing or initialization fails
 * @example
 * ```typescript
 * init({
 *   apiKey: 'your-api-key',
 *   appName: 'my-application',
 *   appVersion: '1.0.0',
 *   logger: { level: LogLevel.INFO },
 *   tracer: { samplingRate: 0.1 }
 * });
 * ```
 */
export declare const init: (props: TelemetryConfigInterface) => void;
/**
 * Configures a metric with the telemetry system
 * @description Registers a metric definition for later use in recording data
 * @param {MetricConfigInterface} config - Configuration for the metric to register
 * @throws {InworldError} When metric name is missing or configuration fails
 * @example
 * ```typescript
 * configureMetric({
 *   metricType: MetricType.COUNTER_UINT,
 *   name: 'requests_total',
 *   description: 'Total number of HTTP requests',
 *   unit: 'requests'
 * });
 * ```
 */
export declare const configureMetric: (config: MetricConfigInterface) => void;
/**
 * Span class for distributed tracing
 * @description Represents a span in distributed tracing, allowing you to track operations and add attributes
 */
export declare class Span {
    private span;
    private isEnded;
    /**
     * Creates a new Span instance
     * @param {ExternalReference} span - The native span reference
     * @internal
     */
    constructor(span: ExternalReference);
    /**
     * Sets a string attribute on the span
     * @param {string} key - The attribute key
     * @param {string} value - The attribute value
     * @example
     * ```typescript
     * span.setAttribute('user.id', '12345');
     * span.setAttribute('operation.type', 'database_query');
     * ```
     */
    setAttribute(key: string, value: string): void;
    /**
     * Sets an array of strings as an attribute on the span
     * @param {string} key - The attribute key
     * @param {string[]} values - The array of string values
     * @example
     * ```typescript
     * span.setAttributeArray('tags', ['production', 'critical']);
     * span.setAttributeArray('endpoints', ['/api/users', '/api/posts']);
     * ```
     */
    setAttributeArray(key: string, values: string[]): void;
    /**
     * Sets the span status to OK
     * @description Marks the span as successfully completed
     * @example
     * ```typescript
     * try {
     *   // ... operation ...
     *   span.setOK();
     * } catch (error) {
     *   span.setError(error.message);
     * }
     * ```
     */
    setOK(): void;
    /**
     * Sets the span status to Error with a description
     * @param {string} description - Description of the error
     * @description Marks the span as failed with an error description
     * @example
     * ```typescript
     * try {
     *   // ... operation ...
     *   span.setOK();
     * } catch (error) {
     *   span.setError(`Database query failed: ${error.message}`);
     * }
     * ```
     */
    setError(description: string): void;
    /**
     * Ends the span
     * @description Marks the span as completed and sends it to the telemetry system
     * @example
     * ```typescript
     * const span = startSpan('database_operation');
     * try {
     *   // ... operation ...
     *   span.setOK();
     * } finally {
     *   span.end();
     * }
     * ```
     */
    end(): void;
    /**
     * Gets the native span reference
     * @returns {ExternalReference} The native span reference
     * @internal
     */
    getNativeSpan(): ExternalReference;
    /**
     * Cleans up the span resources
     * @description Destroys the native span object and frees memory
     * @internal
     */
    destroy(): void;
}
/**
 * Starts a new span for distributed tracing
 * @param {string} name - The name of the span
 * @returns {Span} A new span instance
 * @example
 * ```typescript
 * const span = startSpan('user_authentication');
 * span.setAttribute('user.id', '12345');
 * // ... operation ...
 * span.setOK();
 * span.end();
 * ```
 */
export declare const startSpan: (name: string) => Span;
/**
 * Starts a new span with initial attributes
 * @param {string} name - The name of the span
 * @param {Record<string, string>} attributes - Initial attributes to set on the span
 * @returns {Span} A new span instance with the specified attributes
 * @example
 * ```typescript
 * const span = startSpanWithAttributes('api_request', {
 *   'http.method': 'GET',
 *   'http.url': '/api/users',
 *   'user.id': '12345'
 * });
 * ```
 */
export declare const startSpanWithAttributes: (name: string, attributes: Record<string, string>) => Span;
/**
 * Starts a new span with a parent span for distributed tracing
 * @param {string} name - The name of the span
 * @param {Record<string, string>} attributes - Initial attributes to set on the span
 * @param {Span[]} links - Array of spans to link to this span
 * @param {Span} parent - The parent span
 * @returns {Span} A new span instance with parent relationship
 * @example
 * ```typescript
 * const parentSpan = startSpan('parent_operation');
 * const childSpan = startSpanWithParent('child_operation', {
 *   'operation.type': 'sub_task'
 * }, [], parentSpan);
 * ```
 */
export declare const startSpanWithParent: (name: string, attributes: Record<string, string>, links: Span[], parent: Span) => Span;
/**
 * Logging utilities
 * @description Provides functions to log messages with different levels and optional context
 */
export declare const logger: {
    /**
     * Maps log level enum to internal numeric value
     * @param {LogLevel} logLevel - The log level to map
     * @returns {number} Internal numeric representation
     * @private
     */
    mapLogLevelToExternal(logLevel: LogLevel): number;
    /**
     * Logs a message with the specified log level
     * @param {LogLevel} level - The log level for the message
     * @param {string} message - The message to log
     * @param {Record<string, string>} [context] - Optional key-value context for the log message
     * @param {ProcessContext} [processContext] - Optional process context to add execution info
     * @example
     * ```typescript
     * logger.log(LogLevel.INFO, 'User logged in', { userId: '123', method: 'oauth' });
     * logger.log(LogLevel.ERROR, 'Database connection failed', {}, processContext);
     * logger.log(LogLevel.DEBUG, 'Processing node', { nodeId: 'abc' }, processContext);
     * ```
     */
    log(level: LogLevel, message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
    /**
     * Logs a trace level message
     * @param {string} message - The message to log
     * @param {Record<string, string>} [context] - Optional key-value context for the log message
     * @param {ProcessContext} [processContext] - Optional process context to add execution info
     * @example
     * ```typescript
     * logger.trace('Entering function processData', { functionName: 'processData', args: 'user123' });
     * logger.trace('Processing node', {}, processContext);
     * ```
     */
    trace(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
    /**
     * Logs a debug level message
     * @param {string} message - The message to log
     * @param {Record<string, string>} [context] - Optional key-value context for the log message
     * @param {ProcessContext} [processContext] - Optional process context to add execution info
     * @example
     * ```typescript
     * logger.debug('Processing user data', { userId: '123', operation: 'update' });
     * logger.debug('Node processing', {}, processContext);
     * ```
     */
    debug(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
    /**
     * Logs an info level message
     * @param {string} message - The message to log
     * @param {Record<string, string>} [context] - Optional key-value context for the log message
     * @param {ProcessContext} [processContext] - Optional process context to add execution info
     * @example
     * ```typescript
     * logger.info('User successfully authenticated', { userId: '123', provider: 'google' });
     * logger.info('Node execution completed', {}, processContext);
     * ```
     */
    info(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
    /**
     * Logs a warning level message
     * @param {string} message - The message to log
     * @param {Record<string, string>} [context] - Optional key-value context for the log message
     * @param {ProcessContext} [processContext] - Optional process context to add execution info
     * @example
     * ```typescript
     * logger.warn('API rate limit approaching', { currentUsage: '80%', endpoint: '/api/users' });
     * logger.warn('Node processing slow', {}, processContext);
     * ```
     */
    warn(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
    /**
     * Logs an error level message
     * @param {string} message - The message to log
     * @param {Record<string, string>} [context] - Optional key-value context for the log message
     * @param {ProcessContext} [processContext] - Optional process context to add execution info
     * @example
     * ```typescript
     * logger.error('Database connection failed', { error: 'ECONNREFUSED', host: 'db.example.com' });
     * logger.error('Node execution failed', { error: 'timeout' }, processContext);
     * ```
     */
    error(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
};
/**
 * Generates a unique execution ID
 * @returns {string} A unique execution identifier
 * @description Useful for correlating operations across different spans and services
 * @example
 * ```typescript
 * const executionId = generateExecutionId();
 * console.log(`Starting execution: ${executionId}`);
 * ```
 */
export declare const generateExecutionId: () => string;
export {};
