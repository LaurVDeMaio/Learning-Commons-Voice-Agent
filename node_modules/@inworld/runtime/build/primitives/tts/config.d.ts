/**
 * Interface representing the input for speech synthesis.
 */
export interface SpeechSynthesisInputInterface {
    /** The text to synthesize into speech */
    text: string;
    /** Optional instruction describing requirements for speech generation */
    /** @private **/
    instruction?: string;
}
/**
 * Interface for configuring postprocessing settings for speech synthesis.
 */
export interface SpeechSynthesisPostprocessingConfigInterface {
    /**
     * The sample rate for the speech synthesis.
     */
    sample_rate?: number;
    /**
     * Whether to trim silence.
     */
    trim_silence?: boolean;
}
/**
 * Interface for configuring inference settings for speech synthesis.
 */
export interface SpeechSynthesisInferenceConfigInterface {
    /**
     * The temperature for speech synthesis.
     * Controls the randomness of the generated speech.
     */
    temperature?: number;
    /**
     * The pitch for speech synthesis.
     * Controls the pitch of the generated speech.
     */
    pitch?: number;
    /**
     * The speaking rate for speech synthesis.
     * Controls the speed of the generated speech.
     */
    speaking_rate?: number;
}
/**
 * Interface for ElevenLabs output format configuration.
 */
export interface ElevenLabsOutputFormatInterface {
    /** Output format for ElevenLabs TTS */
    outputFormat?: 'MP3_22050_32' | 'MP3_44100_32' | 'MP3_44100_64' | 'MP3_44100_96' | 'MP3_44100_128' | 'MP3_44100_192';
}
/**
 * Interface for ElevenLabs text normalization configuration.
 */
export interface ElevenLabsTextNormalizationInterface {
    /** Text normalization setting for ElevenLabs TTS */
    applyTextNormalization?: 'AUTO' | 'ON' | 'OFF';
}
/**
 * Interface for ElevenLabs query parameters.
 */
export interface ElevenLabsQueryParamsInterface {
    /** Enable logging for ElevenLabs TTS */
    enableLogging?: boolean;
    /** Output format configuration */
    outputFormat?: ElevenLabsOutputFormatInterface;
}
/**
 * Interface for ElevenLabs request parameters.
 */
export interface ElevenLabsRequestParamsInterface {
    /** Model ID for ElevenLabs TTS */
    modelId?: string;
    /** Text normalization configuration */
    applyTextNormalization?: ElevenLabsTextNormalizationInterface;
}
/**
 * Interface for ElevenLabs speech synthesis configuration.
 */
export interface ElevenLabsSpeechSynthesisConfigInterface {
    /** Query parameters for ElevenLabs TTS */
    queryParams?: ElevenLabsQueryParamsInterface;
    /** Request parameters for ElevenLabs TTS */
    requestParams?: ElevenLabsRequestParamsInterface;
}
/**
 * Interface for configuring Inworld speech synthesis configuration.
 */
export interface InworldSpeechSynthesisConfigInterface {
    /**
     * The model ID (inworld-tts-1 or inworld-tts-1-max) for the speech synthesis.
     * If not set, the v2 model will be used by default.
     */
    model_id?: string;
    /**
     * The postprocessing configuration for the speech synthesis.
     */
    postprocessing?: SpeechSynthesisPostprocessingConfigInterface;
    /**
     * The inference configuration for the speech synthesis.
     */
    inference?: SpeechSynthesisInferenceConfigInterface;
}
/**
 * Interface for configuring speech synthesis configuration.
 */
export interface SpeechSynthesisConfigInterface {
    /**
     * The type of TTS configuration inworld
     */
    type?: 'inworld';
    /**
     * The Inworld speech synthesis configuration.
     */
    config?: InworldSpeechSynthesisConfigInterface;
}
/**
 * @internal
 */
export declare class SpeechSynthesisInferenceConfig {
    private external;
    constructor(config?: SpeechSynthesisInferenceConfigInterface);
    getExternal(): any;
    destroy(): void;
    static getDefault(): {
        temperature: number;
        pitch: number;
        speaking_rate: number;
    };
}
/**
 * @internal
 */
export declare class SpeechSynthesisPostprocessingConfig {
    private external;
    constructor(config?: SpeechSynthesisPostprocessingConfigInterface);
    getExternal(): any;
    destroy(): void;
    static getDefault(): {
        sample_rate: number;
    };
}
/**
 * Class for configuring speech synthesis settings.
 */
export declare class SpeechSynthesisConfig {
    private external;
    private postprocessingConfig;
    private inferenceConfig;
    /**
     * Creates a new SpeechSynthesisConfig instance.
     *
     * @param config - Configuration options for speech synthesis
     * @internal
     */
    constructor(config?: SpeechSynthesisConfigInterface);
    private getInworldConfig;
    /**
     * Returns the external reference to the speech synthesis configuration.
     * @returns External reference to the speech synthesis configuration
     * @internal
     */
    getExternal(): any;
    /**
     * Destroys the speech synthesis configuration.
     * @internal
     */
    destroy(): void;
    /**
     * Returns the default speech synthesis configuration.
     * @returns Default speech synthesis configuration
     */
    static getDefault(): SpeechSynthesisConfigInterface;
}
/**
 * Interface for configuring remote TTS (Text-to-Speech) instances.
 */
export interface RemoteTTSConfigInterface {
    /** The API key for the remote TTS service */
    apiKey: string;
    /** The configuration for the speech synthesis */
    synthesisConfig?: SpeechSynthesisConfigInterface;
}
/**
 * Union type for TTS configuration options.
 */
export type TTSConfigInterface = RemoteTTSConfigInterface;
/**
 * @internal
 */
export declare class RemoteTTSConfig {
    readonly apiKey: string;
    private external;
    private synthesisConfig;
    constructor(config: RemoteTTSConfigInterface);
    getExternal(): any;
    destroy(): void;
}
