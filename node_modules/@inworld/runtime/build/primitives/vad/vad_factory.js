"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VADFactory = void 0;
const inworld_1 = require("../../common/error/inworld");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const vad_1 = require("./vad");
/**
 * Factory class for creating VAD (Voice Activity Detection) instances.
 * Provides methods to create voice activity detection models.
 */
class VADFactory {
    /**
     * Creates a local VAD instance.
     *
     * @param config - Configuration for the local VAD
     * @returns Promise resolving to a new VAD instance
     */
    static async createLocal(config) {
        let vadConfig = null;
        let vad = null;
        try {
            vadConfig = new config_1.LocalVADConfig(config);
            vad = await this.create(vadConfig);
        }
        finally {
            vadConfig === null || vadConfig === void 0 ? void 0 : vadConfig.destroy();
        }
        return vad;
    }
    /**
     * Internal method to create a VAD instance from a config.
     *
     * @param config - VAD configuration
     * @returns Promise resolving to a new VAD instance
     * @throws InworldError if VAD creation fails
     * @private
     */
    static async create(config) {
        let status;
        let vad;
        let factory;
        try {
            factory = expose_binary_1.VADFactoryFunctions.new();
            status = await expose_binary_1.VADFactoryFunctions.createVAD(factory, config.getExternal());
            if (!expose_binary_1.StatusOrVADInterfaceFunctions.isOK(status)) {
                throw new inworld_1.InworldError('Failed to create VAD', (0, helpers_1.getStatus)(status));
            }
            vad = new vad_1.VAD(expose_binary_1.StatusOrVADInterfaceFunctions.getValue(status));
        }
        finally {
            if (status) {
                expose_binary_1.StatusOrVADInterfaceFunctions.delete(status);
            }
            if (factory) {
                expose_binary_1.VADFactoryFunctions.delete(factory);
            }
        }
        return vad;
    }
}
exports.VADFactory = VADFactory;
