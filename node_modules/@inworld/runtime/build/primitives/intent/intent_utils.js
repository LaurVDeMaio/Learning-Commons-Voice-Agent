"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentUtils = void 0;
const intent_compiler_factory_1 = require("./intent_compiler_factory");
const intent_matcher_config_1 = require("./intent_matcher_config");
const intent_matcher_factory_1 = require("./intent_matcher_factory");
/**
 * Utility class for intent operations.
 * Provides helper methods for creating intent compilers and matchers with default configurations.
 */
class IntentUtils {
    /**
     * Creates an intent compiler and compiles the provided intents.
     *
     * @param intents - Array of intents to compile
     * @param embedder - Optional text embedder for generating embeddings
     * @returns Promise resolving to compiled intents
     * @throws InworldError if compilation fails
     */
    static async compileIntents(intents, embedder) {
        const compiler = embedder
            ? await intent_compiler_factory_1.IntentCompilerFactory.create(embedder)
            : await intent_compiler_factory_1.IntentCompilerFactory.create();
        try {
            return await compiler.compileIntents(intents);
        }
        finally {
            compiler.destroy();
        }
    }
    /**
     * Creates an intent matcher with the specified embedder and compiled intents.
     * Uses default embedding configuration.
     *
     * @param embedder - Text embedder for embedding-based matching
     * @param compiledIntents - Compiled intents to match against
     * @param config - Optional custom configuration (uses default if not provided)
     * @returns Promise resolving to an intent matcher
     * @throws InworldError if creation fails
     */
    static async createIntentMatcherWithEmbedder(embedder, compiledIntents, config) {
        const matcherConfig = config || intent_matcher_config_1.IntentMatcherConfig.getDefaultEmbeddingConfig();
        return intent_matcher_factory_1.IntentMatcherFactory.create({
            config: Object.assign(Object.assign({}, matcherConfig), { compiledIntents }),
            textEmbedder: embedder,
        });
    }
    /**
     * Creates an intent matcher with the specified LLM and compiled intents.
     * Uses default LLM configuration.
     *
     * @param llm - LLM for LLM-based matching
     * @param compiledIntents - Compiled intents to match against
     * @param config - Optional custom configuration (uses default if not provided)
     * @returns Promise resolving to an intent matcher
     * @throws InworldError if creation fails
     */
    static async createIntentMatcherWithLLM(llm, compiledIntents, config) {
        const matcherConfig = config || intent_matcher_config_1.IntentMatcherConfig.getDefaultLLMConfig();
        return intent_matcher_factory_1.IntentMatcherFactory.create({
            config: Object.assign(Object.assign({}, matcherConfig), { compiledIntents }),
            llm,
        });
    }
    /**
     * Creates an intent matcher with both embedder and LLM for compound matching.
     * Uses default compound configuration.
     *
     * @param embedder - Text embedder for embedding-based matching
     * @param llm - LLM for LLM-based matching
     * @param compiledIntents - Compiled intents to match against
     * @param config - Optional custom configuration (uses default if not provided)
     * @returns Promise resolving to an intent matcher
     * @throws InworldError if creation fails
     */
    static async createIntentMatcherWithEmbedderAndLLM(embedder, llm, compiledIntents, config) {
        const matcherConfig = config || intent_matcher_config_1.IntentMatcherConfig.getDefaultCompoundConfig();
        return intent_matcher_factory_1.IntentMatcherFactory.create({
            config: Object.assign(Object.assign({}, matcherConfig), { compiledIntents }),
            textEmbedder: embedder,
            llm,
        });
    }
    /**
     * Creates a complete intent matching pipeline.
     * Compiles intents and creates a matcher in one operation.
     *
     * @param intents - Intents to compile and match against
     * @param embedder - Optional text embedder
     * @param llm - Optional LLM
     * @param config - Optional custom configuration
     * @returns Promise resolving to an intent matcher
     * @throws InworldError if creation fails
     */
    static async createIntentMatcherPipeline(intents, embedder, llm, config) {
        const compiledIntents = await this.compileIntents(intents, embedder);
        if (embedder && llm) {
            return this.createIntentMatcherWithEmbedderAndLLM(embedder, llm, compiledIntents, config);
        }
        else if (embedder) {
            return this.createIntentMatcherWithEmbedder(embedder, compiledIntents, config);
        }
        else if (llm) {
            return this.createIntentMatcherWithLLM(llm, compiledIntents, config);
        }
        else {
            throw new Error('At least one of embedder or LLM must be provided');
        }
    }
}
exports.IntentUtils = IntentUtils;
