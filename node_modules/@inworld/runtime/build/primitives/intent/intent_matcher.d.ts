import { IntentMatchInterface } from '../../common';
import { ExternalReference } from '../../common/data_types/common';
/**
 * Class for intent matching functionality.
 * Provides methods to detect intents in user input text using multiple strategies:
 * - Strict matching (exact phrase matching)
 * - Embedding-based semantic matching
 * - LLM-based classification
 */
export declare class IntentMatcher {
    private external;
    /**
     * Creates a new IntentMatcher instance.
     *
     * @param external - External reference to the native intent matcher implementation
     * @internal
     */
    constructor(external: ExternalReference);
    /**
     * Matches intents in the provided input text.
     * Returns matches sorted by confidence score (highest first).
     *
     * @param input - Text to analyze for intents
     * @returns Promise resolving to an array of intent matches
     * @throws InworldError if intent matching fails or matcher is not initialized
     */
    matchIntents(input: string): Promise<IntentMatchInterface[]>;
    /**
     * Returns the external reference to the native intent matcher implementation.
     *
     * @returns External reference object
     * @internal
     */
    getExternal(): ExternalReference;
    /**
     * Checks if the intent matcher is properly initialized and ready for use.
     *
     * @returns True if the matcher is initialized, false otherwise
     */
    isInitialized(): boolean;
    /**
     * Cleans up resources associated with this intent matcher.
     * Should be called when the matcher is no longer needed to prevent memory leaks.
     */
    destroy(): void;
}
