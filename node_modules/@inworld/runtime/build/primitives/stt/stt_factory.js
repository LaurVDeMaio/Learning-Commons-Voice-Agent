"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.STTFactory = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const stt_1 = require("./stt");
/**
 * Factory class for creating STT (Speech-to-Text) instances.
 * Provides methods to create both local and remote speech recognition models.
 */
class STTFactory {
    /**
     * Creates a local STT instance.
     *
     * @param config - Configuration for the local STT
     * @returns Promise resolving to a new STT instance
     */
    static async createLocal(config) {
        let sttConfig = null;
        let stt = null;
        try {
            sttConfig = new config_1.LocalSTTConfig(config);
            stt = await this.create(sttConfig);
        }
        finally {
            sttConfig === null || sttConfig === void 0 ? void 0 : sttConfig.destroy();
        }
        return stt;
    }
    /**
     * Creates a remote STT instance.
     *
     * @param config - Configuration for the remote STT
     * @returns Promise resolving to a new STT instance
     */
    static async createRemote(config) {
        let sttConfig = null;
        let stt = null;
        try {
            sttConfig = new config_1.RemoteSTTConfig(config);
            stt = await this.create(sttConfig);
        }
        finally {
            sttConfig === null || sttConfig === void 0 ? void 0 : sttConfig.destroy();
        }
        return stt;
    }
    /**
     * Internal method to create an STT instance from a config.
     *
     * @param config - STT configuration (local or remote)
     * @returns Promise resolving to a new STT instance
     * @throws InworldError if STT creation fails
     * @private
     */
    static async create(config) {
        let status;
        let stt;
        try {
            const factory = expose_binary_1.STTFactoryFunctions.new();
            const createFn = config instanceof config_1.RemoteSTTConfig
                ? expose_binary_1.STTInterfaceFunctions.createRemote
                : expose_binary_1.STTInterfaceFunctions.createLocal;
            status = await createFn(factory, config.getExternal());
            if (!expose_binary_1.STTInterfaceFunctions.isOK(status)) {
                throw new common_1.InworldError('Failed to create STT', (0, helpers_1.getStatus)(status));
            }
            stt = new stt_1.STT(expose_binary_1.STTInterfaceFunctions.get(status), factory);
        }
        finally {
            if (status) {
                expose_binary_1.STTInterfaceFunctions.delete(status);
            }
        }
        return stt;
    }
}
exports.STTFactory = STTFactory;
