"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeFactory = void 0;
const inworld_1 = require("../../common/error/inworld");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const ComponentStore_1 = require("../../graph/ComponentStore");
const knowledge_1 = require("./knowledge");
const local_knowledge_config_1 = require("./local_knowledge_config");
const remote_knowledge_config_1 = require("./remote_knowledge_config");
/**
 * Factory class for creating knowledge systems (both local and remote)
 * Handles the creation of knowledge systems based on provided configurations
 */
class KnowledgeFactory {
    /**
     * Creates a Knowledge instance based on the provided configuration
     * @param config Configuration for knowledge system creation
     * @returns A Knowledge instance
     * @throws InworldError If creation fails
     */
    static async create(config) {
        if (!['local', 'remote'].includes(config.type)) {
            throw new inworld_1.InworldError('Invalid knowledge configuration');
        }
        let status;
        let knowledge;
        try {
            const factory = expose_binary_1.KnowledgeFactoryFunctions.new();
            const knowledgeConfig = config.type === 'local'
                ? new local_knowledge_config_1.LocalKnowledgeConfig(config.config)
                : new remote_knowledge_config_1.RemoteKnowledgeConfig(config.config);
            const createFn = config.type === 'local'
                ? expose_binary_1.KnowledgeFactoryFunctions.createKnowledgeWithLocalConfig
                : expose_binary_1.KnowledgeFactoryFunctions.createKnowledgeWithRemoteConfig;
            const creationContext = expose_binary_1.CreationContextFunctions.new(ComponentStore_1.ComponentStore.getInstance().getComponentStore());
            status = await createFn(factory, creationContext, knowledgeConfig.getExternal());
            expose_binary_1.CreationContextFunctions.delete(creationContext);
            if (!expose_binary_1.KnowledgeStatusFunctions.isOK(status)) {
                throw new inworld_1.InworldError(`Failed to create ${config.type} knowledge`, (0, helpers_1.getStatus)(status));
            }
            knowledge = new knowledge_1.Knowledge(expose_binary_1.KnowledgeStatusFunctions.getValue(status), factory);
        }
        finally {
            if (status) {
                expose_binary_1.KnowledgeStatusFunctions.delete(status);
            }
        }
        return knowledge;
    }
}
exports.KnowledgeFactory = KnowledgeFactory;
