"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLMFactory = void 0;
const inworld_1 = require("../../common/error/inworld");
const helpers_1 = require("../../common/helpers");
const expose_binary_1 = require("../../expose_binary");
const config_1 = require("./config");
const llm_1 = require("./llm");
/**
 * Factory class for creating LLM instances.
 * Provides methods to create both local and remote language models.
 */
class LLMFactory {
    /**
     * Creates a local LLM instance.
     *
     * @param config - Configuration for the local LLM
     * @returns Promise resolving to a new LLM instance
     */
    static async createLocal(config) {
        let llmConfig = null;
        let llm = null;
        try {
            llmConfig = new config_1.LocalLLMConfig(config);
            llm = await this.create(llmConfig);
        }
        finally {
            llmConfig === null || llmConfig === void 0 ? void 0 : llmConfig.destroy();
        }
        return llm;
    }
    /**
     * Creates a remote LLM instance.
     *
     * @param config - Configuration for the remote LLM
     * @returns Promise resolving to a new LLM instance
     */
    static async createRemote(config) {
        let llmConfig = null;
        let llm = null;
        try {
            llmConfig = new config_1.RemoteLLMConfig(config);
            llm = await this.create(llmConfig);
        }
        finally {
            llmConfig === null || llmConfig === void 0 ? void 0 : llmConfig.destroy();
        }
        return llm;
    }
    /**
     * Internal method to create an LLM instance from a config.
     *
     * @param config - LLM configuration (local or remote)
     * @returns Promise resolving to a new LLM instance
     * @throws InworldError if LLM creation fails
     * @private
     */
    static async create(config) {
        let status;
        let llm;
        try {
            const factory = expose_binary_1.LLMFactoryFunctions.new();
            const createFn = config instanceof config_1.RemoteLLMConfig
                ? expose_binary_1.LLMInterfaceFunctions.createRemote
                : expose_binary_1.LLMInterfaceFunctions.createLocal;
            status = await createFn(factory, config.getExternal());
            if (!expose_binary_1.LLMInterfaceFunctions.isOK(status)) {
                throw new inworld_1.InworldError('Failed to create LLM', (0, helpers_1.getStatus)(status));
            }
            llm = new llm_1.LLM(expose_binary_1.LLMInterfaceFunctions.get(status), factory);
        }
        finally {
            if (status) {
                expose_binary_1.LLMInterfaceFunctions.delete(status);
            }
        }
        return llm;
    }
}
exports.LLMFactory = LLMFactory;
