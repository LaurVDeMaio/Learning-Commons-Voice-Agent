"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCallbackNode = exports.createAndGetCustomNode = void 0;
exports.createNodeCallbackWrapper = createNodeCallbackWrapper;
exports.createGeneratorWrapper = createGeneratorWrapper;
exports.createTransformStreamWrapper = createTransformStreamWrapper;
const path_1 = __importDefault(require("path"));
const common_1 = require("./common");
const helpers_1 = require("./common/helpers");
const platform_detection_1 = require("./common/platform_detection");
const expose_binary_1 = require("./expose_binary");
/**
 * Path to libinworld.node
 */
const inworldNodeAddonPath = process.env.INWORLD_NODE_ADDON_PATH ||
    (0, platform_detection_1.getBinaryPath)(path_1.default.join(__dirname, '..', 'bin'), true);
const inworldAddon = require(inworldNodeAddonPath);
// TODO: add types
function createNodeCallbackWrapper(callback) {
    return inworldAddon.createNodeCallbackWrapper(callback, true);
}
// TODO: add types
function createGeneratorWrapper(callback) {
    return inworldAddon.createGeneratorWrapper(callback);
}
function createTransformStreamWrapper(callback, returnTypeTag) {
    return inworldAddon.createTransformStreamWrapper(callback, returnTypeTag);
}
const createAndGetCustomNode = (nodeId, callback) => {
    const statusOrNodePtr = expose_binary_1.FFIFunctions.makeCustomNode(nodeId, callback);
    if ((0, helpers_1.getStatus)(statusOrNodePtr) !== 'OK') {
        throw new common_1.InworldError(`Failed to register custom node: ${nodeId}`);
    }
    return expose_binary_1.FFIFunctions.getCustomNodeValue(statusOrNodePtr);
};
exports.createAndGetCustomNode = createAndGetCustomNode;
// TODO: add types
const registerCallbackNode = (nodeId, callback) => {
    const componentRegistry = expose_binary_1.ComponentRegistryFunctions.getInstance();
    const status = expose_binary_1.FFIFunctions.registerCallbackNode(componentRegistry, nodeId, callback);
    if ((0, helpers_1.getStatus)(status) !== 'OK') {
        throw new common_1.InworldError(`Failed to register custom node: ${nodeId}`);
    }
};
exports.registerCallbackNode = registerCallbackNode;
