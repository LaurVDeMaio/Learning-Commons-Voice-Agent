/**
 * Main entry point for the Inworld Runtime Node.js SDK
 *
 * This file exports all the public interfaces, types and utilities of the Inworld
 * Runtime SDK, organized into namespaced modules for easier consumption.
 * It serves as the primary interface for developers to interact with the SDK.
 */
import { IntentMatchInterface, KeywordMatchInterface } from './common';
import { GoalAdvancementInterface, ListToolsResponseInterface, LLMChatRequestInterface, LLMChatResponseData, ToolCallResultInterface } from './common/data_types';
import { AudioChunkInterface, ExternalReference, RetrievalConfigInterface, TextStreamIterationResult, TTSOutputInterface, TTSOutputStreamIterationResult, TTSOutputStreamIterator } from './common/data_types/common';
import { InworldError } from './common/error/inworld';
import { RuntimeData, RuntimeDataType } from './common/RuntimeData';
import { ContentStreamIterator, SpeechChunkStreamIterationResult, SpeechChunkStreamIterator, TextStream, TextStreamIterator } from './common/stream';
import { ContentInterface, ToolCallInterface } from './common/vector/messages';
import { VoiceInterface } from './common/voice/voice';
import { ContentToStringStream } from './core/content_to_string_stream';
import { Device, DeviceRegistry, DeviceType } from './core/device';
import { AgentActionInterface, AgentSpeechInterface, History, HistoryItemInterface } from './core/history';
import { EmojiRemover } from './core/text_processing/emoji_remover';
import { SentenceStream } from './core/text_processing/sentence_stream';
import { SubstringRemover } from './core/text_processing/substring_remover';
import { TextInBracketsRemover } from './core/text_processing/text_in_brackets_remover';
import { ProcessContext } from './graph/nodes/custom/process_context_Impl';
import { AudioResponse, TextResponse } from './graph/nodes/types';
import { LocalTextEmbedderConfigInterface, RemoteTextEmbedderConfigInterface, TextEmbedder, TextEmbedderConfigInterface, TextEmbedderFactory } from './primitives/embedder';
import { EmbeddingMatcherConfig, IntentCompilerFactory, IntentMatcherFactory, LLMMatcherConfig } from './primitives/intent';
import { CreateKnowledgeCollectionInterface, FileType, Knowledge, KnowledgeCollectionFactory, KnowledgeCreationConfig, KnowledgeFactory, KnowledgeGetInput, LocalKnowledgeConfigInterface, ParsingConfig, RemoteKnowledgeConfigInterface } from './primitives/knowledge';
import { LLM, LLMConfigInterface, LLMFactory, LLMMessageInterface, LocalLLMConfigInterface, RemoteLLMConfigInterface, renderJinja, TextGenerationConfigInterface } from './primitives/llm';
import { Memory, MemoryFactory, MemorySnapshot } from './primitives/memory';
import { DictionaryRuleInterface, EntityInterface, EntityMatch, NER, NERFactory } from './primitives/ner';
import { STT, STTFactory } from './primitives/stt';
import { InworldSpeechSynthesisConfigInterface, SpeechSynthesisConfig, SpeechSynthesisConfigInterface, SpeechSynthesisInputInterface, TTS, TTSFactory } from './primitives/tts';
import { LocalVADConfigInterface, VAD, VADFactory } from './primitives/vad';
import { ExporterType as TelemetryExporterType, LoggerConfigInterface, LogLevel as TelemetryLogLevel, type MetricConfigInterface, MetricType, Span, TelemetryConfigInterface, TracerConfigInterface } from './telemetry';
export declare const device: {
    readonly Device: typeof Device;
    readonly DeviceRegistry: typeof DeviceRegistry;
    readonly DeviceType: typeof DeviceType;
};
export type { KnowledgeCreationConfig };
export declare const textProcessing: {
    readonly EmojiRemover: typeof EmojiRemover;
    readonly SubstringRemover: typeof SubstringRemover;
    readonly SentenceStream: typeof SentenceStream;
    readonly TextInBracketsRemover: typeof TextInBracketsRemover;
};
export declare const primitives: {
    readonly intent: {
        readonly IntentCompilerFactory: typeof IntentCompilerFactory;
        readonly IntentMatcherFactory: typeof IntentMatcherFactory;
        readonly EmbeddingMatcherConfig: typeof EmbeddingMatcherConfig;
        readonly LLMMatcherConfig: typeof LLMMatcherConfig;
    };
    readonly llm: {
        readonly LLMFactory: typeof LLMFactory;
        readonly LLM: typeof LLM;
        readonly renderJinja: typeof renderJinja;
    };
    readonly embedder: {
        readonly TextEmbedderFactory: typeof TextEmbedderFactory;
        readonly TextEmbedder: typeof TextEmbedder;
    };
    readonly knowledge: {
        readonly KnowledgeCollectionFactory: typeof KnowledgeCollectionFactory;
        readonly KnowledgeFactory: typeof KnowledgeFactory;
        readonly Knowledge: typeof Knowledge;
        readonly ParsingConfig: typeof ParsingConfig;
        readonly FileType: typeof FileType;
    };
    readonly vad: {
        readonly VADFactory: typeof VADFactory;
        readonly VAD: typeof VAD;
    };
    readonly ner: {
        readonly NERFactory: typeof NERFactory;
        readonly NER: typeof NER;
        readonly EntityMatch: typeof EntityMatch;
    };
    readonly textProcessing: {
        readonly EmojiRemover: typeof EmojiRemover;
        readonly SubstringRemover: typeof SubstringRemover;
        readonly SentenceStream: typeof SentenceStream;
        readonly TextInBracketsRemover: typeof TextInBracketsRemover;
    };
    readonly stt: {
        readonly STTFactory: typeof STTFactory;
        readonly STT: typeof STT;
    };
    readonly tts: {
        readonly TTSFactory: typeof TTSFactory;
        readonly TTS: typeof TTS;
        readonly SpeechSynthesisConfig: typeof SpeechSynthesisConfig;
    };
    readonly memory: {
        readonly MemoryFactory: typeof MemoryFactory;
        readonly Memory: typeof Memory;
        readonly MemorySnapshot: typeof MemorySnapshot;
    };
};
export declare const common: {
    InworldError: typeof InworldError;
};
export declare const core: {
    readonly device: {
        readonly Device: typeof Device;
        readonly DeviceRegistry: typeof DeviceRegistry;
        readonly DeviceType: typeof DeviceType;
    };
    readonly History: typeof History;
    readonly RuntimeData: typeof RuntimeData;
};
export declare const telemetry: {
    readonly init: (props: TelemetryConfigInterface) => void;
    readonly shutdown: () => void;
    readonly ExporterType: typeof TelemetryExporterType;
    readonly LogLevel: typeof TelemetryLogLevel;
    readonly logger: {
        mapLogLevelToExternal(logLevel: TelemetryLogLevel): number;
        log(level: TelemetryLogLevel, message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
        trace(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
        debug(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
        info(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
        warn(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
        error(message: string, context?: Record<string, string>, processContext?: ProcessContext): void;
    };
    readonly metric: {
        recordCounterUInt(name: string, value: number, tags?: Record<string, string>): void;
        recordCounterDouble(name: string, value: number, tags?: Record<string, string>): void;
        recordGaugeInt(name: string, value: number, tags?: Record<string, string>): void;
        recordGaugeDouble(name: string, value: number, tags?: Record<string, string>): void;
        recordHistogramUInt(name: string, value: number, tags?: Record<string, string>): void;
        recordHistogramDouble(name: string, value: number, tags?: Record<string, string>): void;
    };
    readonly configureMetric: (config: MetricConfigInterface) => void;
    readonly MetricType: typeof MetricType;
    readonly Span: typeof Span;
    readonly startSpan: (name: string) => Span;
    readonly startSpanWithAttributes: (name: string, attributes: Record<string, string>) => Span;
    readonly startSpanWithParent: (name: string, attributes: Record<string, string>, links: Span[], parent: Span) => Span;
    readonly generateExecutionId: () => string;
};
export { ContentToStringStream };
export type { AgentActionInterface, AgentSpeechInterface, AudioChunkInterface, AudioResponse, ContentInterface, ContentStreamIterator, CreateKnowledgeCollectionInterface, DictionaryRuleInterface, EntityInterface, ExternalReference, GoalAdvancementInterface, HistoryItemInterface, IntentMatchInterface, InworldSpeechSynthesisConfigInterface, KeywordMatchInterface, KnowledgeGetInput, ListToolsResponseInterface, LLMChatRequestInterface, LLMChatResponseData, LLMConfigInterface, LLMMessageInterface, LocalKnowledgeConfigInterface, LocalLLMConfigInterface, LocalTextEmbedderConfigInterface, LocalVADConfigInterface, LoggerConfigInterface, MetricConfigInterface, ProcessContext, RemoteKnowledgeConfigInterface, RemoteLLMConfigInterface, RemoteTextEmbedderConfigInterface, RetrievalConfigInterface, RuntimeDataType, SpeechChunkStreamIterationResult, SpeechChunkStreamIterator, SpeechSynthesisConfigInterface, SpeechSynthesisInputInterface, TelemetryConfigInterface, TextEmbedderConfigInterface, TextGenerationConfigInterface, TextResponse, TextStream, TextStreamIterationResult, TextStreamIterator, ToolCallInterface, ToolCallResultInterface, TracerConfigInterface, TTS, TTSOutputInterface, TTSOutputStreamIterationResult, TTSOutputStreamIterator, VoiceInterface, };
