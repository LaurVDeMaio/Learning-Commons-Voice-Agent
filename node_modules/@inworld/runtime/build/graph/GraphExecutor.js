"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphExecutor = void 0;
const expose_binary_1 = require("../expose_binary");
/**
 * Class for executing compiled computational graphs.
 * Handles the execution flow and data processing through the graph.
 * @internal
 */
class GraphExecutor {
    /**
     * Creates a new GraphExecutor instance.
     *
     * @param compiledGraph - External reference to a compiled graph
     * @param executorConfig - Optional external reference to a GraphExecutorConfig
     * @param graphId
     * @internal
     */
    constructor(compiledGraph, graphId, executorConfig) {
        this.external = null;
        if (!compiledGraph) {
            throw new Error('CompiledGraph is null or undefined');
        }
        if (executorConfig) {
            this.external = expose_binary_1.GraphExecutorFunctions.factoryHelperCreate(compiledGraph, executorConfig);
        }
        else {
            this.external = expose_binary_1.GraphExecutorFunctions.createExecutor(compiledGraph);
        }
        if (!this.external) {
            throw new Error('Failed to create GraphExecutor - external reference is null');
        }
        this.graphId = graphId;
    }
    /**
     * Starts the graph executor.
     * Must be called before executing the graph.
     */
    start() {
        expose_binary_1.GraphExecutorFunctions.start(this.external);
    }
    execute(data, executionId, userContext) {
        if (userContext) {
            return expose_binary_1.GraphExecutorFunctions.executeWithUserContext(this.external, data.getExternal(), executionId, userContext.getExternal());
        }
        else {
            return expose_binary_1.GraphExecutorFunctions.execute(this.external, data.getExternal(), executionId);
        }
    }
    /**
     * Checks if there are more results available.
     *
     * @param simplified - External reference to a simplified execution context
     * @returns Promise resolving to a boolean indicating if more results are available
     */
    async hasNext(simplified) {
        return expose_binary_1.GraphExecutorFunctions.hasMoreResults(this.external, simplified);
    }
    /**
     * Gets the next result from the execution.
     *
     * @param simplified - External reference to a simplified execution context
     * @returns Promise resolving to the next result
     */
    async next(simplified) {
        return expose_binary_1.GraphExecutorFunctions.next(this.external, simplified);
    }
    /**
     * Closes a specific execution.
     *
     * @param index - Index of the execution to close
     */
    closeExecution(index) {
        expose_binary_1.GraphExecutorFunctions.closeExecution(this.external, index);
    }
    /**
     * Cleans up all active executions.
     */
    cleanupAllExecutions() {
        expose_binary_1.GraphExecutorFunctions.cleanupAllExecutions(this.external);
    }
    /**
     * Stops the graph executor.
     */
    stop() {
        expose_binary_1.GraphExecutorFunctions.stop(this.external);
    }
    /**
     * Cleans up resources associated with this graph executor.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.GraphExecutorFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.GraphExecutor = GraphExecutor;
