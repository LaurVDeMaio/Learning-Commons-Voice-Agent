import { BaseData } from '../common/data_types';
import { ExternalReference } from '../common/data_types/common';
import { UserContext } from '../common/data_types/external/user_context';
import { BaseTransformationStream } from '../common/stream';
/**
 * Class for executing compiled computational graphs.
 * Handles the execution flow and data processing through the graph.
 * @internal
 */
export declare class GraphExecutor {
    private external;
    graphId: string;
    /**
     * Creates a new GraphExecutor instance.
     *
     * @param compiledGraph - External reference to a compiled graph
     * @param executorConfig - Optional external reference to a GraphExecutorConfig
     * @param graphId
     * @internal
     */
    constructor(compiledGraph: ExternalReference, graphId: string, executorConfig?: ExternalReference);
    /**
     * Starts the graph executor.
     * Must be called before executing the graph.
     */
    start(): void;
    /**
     * Executes the graph with the provided data.
     *
     * @param data - Input data for the graph execution
     * @param executionId - Unique identifier for this execution
     * @returns Promise resolving to the execution result
     */
    execute(data: BaseData | BaseTransformationStream<any, any>, executionId: string): number;
    /**
     * Executes the graph with the provided data and user context.
     *
     * @param data - Input data for the graph execution
     * @param executionId - Unique identifier for this execution
     * @param userContext - User context for this execution
     * @returns Promise resolving to the execution result
     */
    execute(data: BaseData | BaseTransformationStream<any, any>, executionId: string, userContext: UserContext): number;
    /**
     * Checks if there are more results available.
     *
     * @param simplified - External reference to a simplified execution context
     * @returns Promise resolving to a boolean indicating if more results are available
     */
    hasNext(simplified: ExternalReference): Promise<any>;
    /**
     * Gets the next result from the execution.
     *
     * @param simplified - External reference to a simplified execution context
     * @returns Promise resolving to the next result
     */
    next(simplified: ExternalReference): Promise<ExternalReference>;
    /**
     * Closes a specific execution.
     *
     * @param index - Index of the execution to close
     */
    closeExecution(index: number): void;
    /**
     * Cleans up all active executions.
     */
    cleanupAllExecutions(): void;
    /**
     * Stops the graph executor.
     */
    stop(): void;
    /**
     * Cleans up resources associated with this graph executor.
     */
    destroy(): void;
}
