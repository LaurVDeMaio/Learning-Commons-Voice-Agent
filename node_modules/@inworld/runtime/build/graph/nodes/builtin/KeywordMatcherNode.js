"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeywordMatcherNode = void 0;
const expose_binary_1 = require("../../../expose_binary");
const node_1 = require("../node");
/**
 * @internal
 * @warning This programmatic variant of KeywordMatcherNode is not tested and not exported on top level of package.
 * The main purpose of this node, as of now, is just to support documentation generation. Later, we will either rework it or support it only in the DSL.
 */
/**
 * Node for keyword matching in the graph.
 * Processes text input to identify and match keywords.
 * @input {TextData} {@link TextData} - The data type that KeywordMatcherNode accepts as input
 * @output {MatchedKeywords} {@link MatchedKeywords} - The data type that KeywordMatcherNode accepts as output
 */
class KeywordMatcherNode extends node_1.Node {
    /**
     * Creates a new KeywordMatcherNode instance.
     *
     * @param props - Keyword matcher node creation properties
     * @internal
     */
    constructor(props) {
        let external;
        let executionConfig;
        try {
            if (props.executionConfig) {
                executionConfig = props.executionConfig;
                const statusOrNode = expose_binary_1.NodeCreateFunctions.createKeywordMatcherNode(props.id, executionConfig.getExternal());
                if (!expose_binary_1.StatusOrSharedPtrKeywordMatcherNodeFunctions.isOK(statusOrNode)) {
                    throw new Error('Failed to create keyword matcher node');
                }
                external =
                    expose_binary_1.StatusOrSharedPtrKeywordMatcherNodeFunctions.getValue(statusOrNode);
            }
            else {
                external = expose_binary_1.NodeCreateFunctions.createKeywordMatcherNodeSimple(props.id);
            }
            super(props.id, external);
            this.executionConfig = executionConfig;
        }
        catch (e) {
            executionConfig === null || executionConfig === void 0 ? void 0 : executionConfig.destroy();
            throw e;
        }
    }
    /**
     * Cleans up resources associated with this keyword matcher node.
     */
    destroy() {
        var _a;
        (_a = this.executionConfig) === null || _a === void 0 ? void 0 : _a.destroy();
        this.executionConfig = null;
        if (this.getExternal()) {
            expose_binary_1.StatusOrSharedPtrKeywordMatcherNodeFunctions.delete(this.getExternal());
        }
        super.destroy();
    }
}
exports.KeywordMatcherNode = KeywordMatcherNode;
