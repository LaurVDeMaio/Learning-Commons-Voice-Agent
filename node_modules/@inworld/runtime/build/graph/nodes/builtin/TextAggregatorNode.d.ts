import { Node, NodePropsInterface } from '../node';
import { TextAggregatorNodeExecutionConfig } from '../NodeExecutionConfig';
export interface TextAggregatorNodePropsInterface extends NodePropsInterface {
    /** Optional execution configuration for the text aggregator node */
    executionConfig?: TextAggregatorNodeExecutionConfig;
}
/**
 * TextAggregatorNode is a node that aggregates text from an incoming stream.
 * It processes text chunks and combines them into a single text string.
 * @input {TextData | TextStreamData | LLMChatResponse} {@link TextData} | {@link TextStreamData} | {@link LLMChatResponse} - The data type that TextAggregatorNode accepts as input
 * @output {TextData} {@link TextData} - The data type that TextAggregatorNode accepts as output
 */
export declare class TextAggregatorNode extends Node {
    private executionConfig?;
    /**
     * Creates a new TextAggregatorNode.
     *
     * @param props - Configuration parameters for the text aggregator node
     * @internal
     */
    constructor(props: TextAggregatorNodePropsInterface);
    /**
     * Cleans up resources associated with the text aggregator node.
     */
    destroy(): void;
}
