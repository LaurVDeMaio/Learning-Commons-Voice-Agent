"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.STTNode = void 0;
const expose_binary_1 = require("../../../expose_binary");
const node_1 = require("../node");
const NodeExecutionConfig_1 = require("../NodeExecutionConfig");
/**
 * Node for speech-to-text conversion in the graph.
 * Processes audio input to convert speech to text.
 * @input {AudioData} {@link AudioData} - The data type that STTNode accepts as input
 * @output {TextData} {@link TextData} - The data type that STTNode accepts as output
 */
class STTNode extends node_1.Node {
    /**
     * Creates a new STTNode instance.
     *
     * @param props - STT node creation properties
     * @internal
     */
    constructor(props) {
        const executionConfig = new NodeExecutionConfig_1.STTNodeExecutionConfig(props.executionConfig);
        const statusOrSTTNode = expose_binary_1.NodeCreateFunctions.createSTTNode(props.id, executionConfig.getExternal());
        if (!expose_binary_1.StatusOrSharedPtrSTTNodeFunctions.isOK(statusOrSTTNode)) {
            throw new Error('Failed to create STT node');
        }
        const sttNode = expose_binary_1.StatusOrSharedPtrSTTNodeFunctions.getValue(statusOrSTTNode);
        try {
            super(props.id, sttNode);
            this.executionConfig = executionConfig;
        }
        catch (error) {
            executionConfig === null || executionConfig === void 0 ? void 0 : executionConfig.destroy();
            throw error;
        }
    }
    /**
     * Cleans up resources associated with this STT node.
     */
    destroy() {
        var _a;
        (_a = this.executionConfig) === null || _a === void 0 ? void 0 : _a.destroy();
        this.executionConfig = null;
        if (this.external) {
            expose_binary_1.StatusOrSharedPtrSTTNodeFunctions.delete(this.external);
            this.external = null;
        }
        super.destroy();
    }
}
exports.STTNode = STTNode;
