import { DataStore } from './custom_context_datastore';
/**
 * Registry for per-execution `DataStore` instances.
 *
 * - Each execution ID maps to a `DataStore`.
 * - Entries have a TTL and are prolonged on access.
 * - A background sweeper removes expired entries to prevent leaks.
 *
 * Usage:
 * - Call `CustomExecutionContextRegistry.getInstance().get(id)` to obtain a
 *   `DataStore` for the given execution ID. This will create it if missing and
 *   prolong its TTL on each call.
 * - Call `dispose(id)` to remove a specific store, or `clearAll()` to remove all.
 */
export declare class CustomExecutionContextRegistry {
    private static instance;
    private readonly contextStores;
    private contextStoreTtlMs;
    private sweepHandle;
    private constructor();
    /**
     * Returns the singleton instance of the registry.
     */
    static getInstance(): CustomExecutionContextRegistry;
    /**
     * Returns the `DataStore` for the given execution ID.
     * Creates a new store if it doesn't exist yet, and prolongs its TTL.
     */
    get(executionId: string): DataStore | undefined;
    /**
     * Disposes and removes the `DataStore` for the given execution ID.
     * Returns true when a store existed and was removed.
     */
    dispose(executionId: string): boolean;
    /**
     * Clears and disposes all `DataStore` entries.
     * Stops the background sweeper if running.
     */
    clearAll(): void;
    private bump;
    private ensureSweeper;
    private stopSweeper;
    private maybeStopSweeper;
    private sweep;
}
