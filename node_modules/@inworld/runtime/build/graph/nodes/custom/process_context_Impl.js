"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessContextImpl = void 0;
const NodeExecutionConfig_1 = require("../NodeExecutionConfig");
const custom_context_datastore_1 = require("./custom_context_datastore");
/**
 * Provides access to execution context information for custom nodes.
 */
class ProcessContextImpl {
    constructor(external) {
        this.external = external;
        this.datastore = custom_context_datastore_1.CustomExecutionContextRegistry.getInstance().getOrCreate(this.external.getExecutionId());
    }
    /**
     * Gets the datastore for the execution.
     * @returns The datastore
     */
    getDatastore() {
        return this.datastore;
    }
    /**
     * Gets the execution ID from the context.
     * @returns The execution ID
     */
    getExecutionId() {
        return this.external.getExecutionId();
    }
    /**
     * Gets the execution configuration from the context.
     * @returns The execution configuration
     */
    getExecutionConfig() {
        return new NodeExecutionConfig_1.ExecutionConfig(this.getConfig());
    }
    /**
     * Gets the variant string from the context.
     * @returns The variant string
     */
    getVariant() {
        return this.external.getVariant();
    }
    /**
     * Checks if the execution has been cancelled.
     * @returns True if cancelled, false otherwise
     */
    isCancelled() {
        return this.external.isCancelled();
    }
    /**
     * Gets the configuration helper from the context.
     * @returns The configuration object
     */
    getConfig() {
        return this.external.getConfig();
    }
    /**
     * Gets the external reference for C++ interop.
     * @returns The external reference
     */
    getExternal() {
        return this.external;
    }
}
exports.ProcessContextImpl = ProcessContextImpl;
