"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromExternalCustomInputDataType = fromExternalCustomInputDataType;
exports.toExternalCustomOutputDataType = toExternalCustomOutputDataType;
const data_types_1 = require("../../../common/data_types");
const api_1 = require("../../../common/data_types/api");
const external_1 = require("../../../common/error/external");
const export_1 = require("../../../common/export");
const expose_binary_1 = require("../../../expose_binary");
function fromExternalCustomInputDataType(input, type) {
    if (type === export_1.CustomInputDataType.TEXT) {
        return JSON.parse(data_types_1.TextData.fromExternal(input).getText()).text;
    }
    else if (type === export_1.CustomInputDataType.TEXT_STREAM) {
        return data_types_1.TextStreamData.fromExternal(input);
    }
    else if (type === export_1.CustomInputDataType.TTS_STREAM) {
        const stream = expose_binary_1.TTSOutputFunctions.toStream(input);
        const isValid = expose_binary_1.TTSOutputFunctions.isValid(stream);
        if (!isValid) {
            throw new external_1.ExternalProcessError('Invalid TTS stream: Stream validation failed', external_1.ExternalProcessStatusCode.InvalidArgument);
        }
        const streamData = stream ? expose_binary_1.TTSOutputFunctions.getStream(stream) : null;
        if (!streamData) {
            throw new external_1.ExternalProcessError('Invalid TTS stream: Unable to extract stream data', external_1.ExternalProcessStatusCode.InvalidArgument);
        }
        return api_1.TTSOutputStream.fromExternal(streamData);
    }
    else if (type === export_1.CustomInputDataType.KNOWLEDGE_RECORDS) {
        return data_types_1.KnowledgeRecordsData.fromExternal(input).getRecords();
    }
    else if (type === export_1.CustomInputDataType.MATCHED_INTENTS) {
        return data_types_1.MatchedIntentsData.fromExternal(input);
    }
    else if (type === export_1.CustomInputDataType.MATCHED_KEYWORDS) {
        return data_types_1.MatchedKeywordsData.fromExternal(input);
    }
    else if (type === export_1.CustomInputDataType.GOAL_ADVANCEMENT) {
        return data_types_1.GoalAdvancementData.fromExternal(input);
    }
    else if (type === export_1.CustomInputDataType.CLASSIFICATION_RESULT) {
        return data_types_1.ClassificationResultData.fromExternal(input);
    }
    else if (type === export_1.CustomInputDataType.MEMORY_STATE) {
        return data_types_1.MemoryStateData.fromExternal(input);
    }
    else if (type === export_1.CustomInputDataType.CUSTOM) {
        try {
            return data_types_1.JsonData.fromExternal(input).getData();
        }
        catch (error) {
            throw new external_1.ExternalProcessError(`Error parsing JSON: ${error}`, external_1.ExternalProcessStatusCode.InvalidArgument);
        }
    }
    else if (type === export_1.CustomInputDataType.CHAT_REQUEST) {
        return data_types_1.LLMChatRequestData.fromExternal(input).getLLMChatRequest();
    }
    else if (type === export_1.CustomInputDataType.CONTENT) {
        return data_types_1.LLMChatResponseData.fromExternal(input).getContent();
    }
    else if (type === export_1.CustomInputDataType.CONTENT_STREAM) {
        return data_types_1.LLMChatResponseData.fromExternal(input).getContentStream();
    }
    else if (type === export_1.CustomInputDataType.LIST_TOOLS) {
        return data_types_1.ListToolsData.fromExternal(input).getListTools();
    }
    else if (type === export_1.CustomInputDataType.TOOL_CALLS_RESULTS) {
        return data_types_1.ListToolCallsResults.fromExternal(input).getToolCallResults();
    }
    throw new external_1.ExternalProcessError(`Unsupported input type: ${type}`, external_1.ExternalProcessStatusCode.InvalidArgument);
}
function toExternalCustomOutputDataType(output, outputType) {
    if (outputType === data_types_1.CustomOutputDataType.TEXT) {
        return new data_types_1.TextData(output);
    }
    else if (outputType === data_types_1.CustomOutputDataType.CHAT_REQUEST) {
        return new data_types_1.LLMChatRequestData(output);
    }
    else if (outputType === data_types_1.CustomOutputDataType.TTS) {
        return new data_types_1.AudioData(output);
    }
    else if (outputType === data_types_1.CustomOutputDataType.TEXT_STREAM) {
        return (output === null || output === void 0 ? void 0 : output.getStream)
            ? new data_types_1.BaseData(expose_binary_1.StreamStringFunctions.new(output.getStream(), null))
            : output;
    }
    else if (outputType === data_types_1.CustomOutputDataType.SPEECH_CHUNK_STREAM) {
        return new data_types_1.BaseData(expose_binary_1.SpeechChunkFunctions.toBaseStream(output.getStream()));
    }
    else if (outputType === data_types_1.CustomOutputDataType.TTS_STREAM) {
        return (output === null || output === void 0 ? void 0 : output.getStream)
            ? new data_types_1.BaseData(expose_binary_1.TTSOutputFunctions.toStream(output.getStream()))
            : output;
    }
    else if (outputType === data_types_1.CustomOutputDataType.LIST_TOOLS) {
        return new data_types_1.ListToolsData(output);
    }
    else if (outputType === data_types_1.CustomOutputDataType.TOOL_CALLS_RESULTS) {
        return new data_types_1.ListToolCallsResults(output);
    }
    else if (outputType === data_types_1.CustomOutputDataType.TOOL_CALLS) {
        return new data_types_1.ListToolCallData(output);
    }
    else if (outputType === data_types_1.CustomOutputDataType.CUSTOM) {
        return new data_types_1.JsonData(output);
    }
    throw new external_1.ExternalProcessError(`Unsupported output type: ${outputType}`, external_1.ExternalProcessStatusCode.InvalidArgument);
}
