"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphManagerConfig = exports.GraphManagerConfigMode = void 0;
const expose_binary_1 = require("../expose_binary");
var GraphManagerConfigMode;
(function (GraphManagerConfigMode) {
    GraphManagerConfigMode[GraphManagerConfigMode["SINGLE"] = 0] = "SINGLE";
    GraphManagerConfigMode[GraphManagerConfigMode["MULTIUSER"] = 1] = "MULTIUSER";
})(GraphManagerConfigMode || (exports.GraphManagerConfigMode = GraphManagerConfigMode = {}));
class GraphManagerConfig {
    constructor() {
        this.external = expose_binary_1.GraphManagerConfigFunctions.new();
    }
    static Default() {
        const ref = expose_binary_1.GraphManagerConfigFunctions.Default();
        const obj = Object.create(GraphManagerConfig.prototype);
        obj.external = ref;
        return obj;
    }
    static WithDisabledRemoteConfig() {
        const ref = expose_binary_1.GraphManagerConfigFunctions.WithDisabledRemoteConfig();
        const obj = Object.create(GraphManagerConfig.prototype);
        obj.external = ref;
        return obj;
    }
    static WithRemoteConfig(address, arg2, arg3, arg4, mode) {
        let ref;
        if (mode !== undefined && arg4 !== undefined && arg3 !== undefined) {
            ref = expose_binary_1.GraphManagerConfigFunctions.WithRemoteConfig5(address, arg2, arg3, arg4, mode);
        }
        else if (arg4 !== undefined && arg3 !== undefined) {
            ref = expose_binary_1.GraphManagerConfigFunctions.WithRemoteConfig4(address, arg2, arg3, arg4);
        }
        else if (arg3 !== undefined) {
            ref = expose_binary_1.GraphManagerConfigFunctions.WithRemoteConfig3(address, arg2, arg3);
        }
        else {
            ref = expose_binary_1.GraphManagerConfigFunctions.WithRemoteConfig2(address, arg2);
        }
        const obj = Object.create(GraphManagerConfig.prototype);
        obj.external = ref;
        return obj;
    }
    set enableRemoteConfig(value) {
        expose_binary_1.GraphManagerConfigFunctions.setEnableRemoteConfig(this.external, value);
    }
    get enableRemoteConfig() {
        return expose_binary_1.GraphManagerConfigFunctions.getEnableRemoteConfig(this.external);
    }
    set pollIntervalSeconds(value) {
        expose_binary_1.GraphManagerConfigFunctions.setPollIntervalSeconds(this.external, value);
    }
    get pollIntervalSeconds() {
        return expose_binary_1.GraphManagerConfigFunctions.getPollIntervalSeconds(this.external);
    }
    set address(value) {
        expose_binary_1.GraphManagerConfigFunctions.setAddress(this.external, value);
    }
    get address() {
        return expose_binary_1.GraphManagerConfigFunctions.getAddress(this.external);
    }
    set targetingKey(value) {
        expose_binary_1.GraphManagerConfigFunctions.setTargetingKey(this.external, value);
    }
    get targetingKey() {
        return expose_binary_1.GraphManagerConfigFunctions.getTargetingKey(this.external);
    }
    set inworldApiKey(value) {
        expose_binary_1.GraphManagerConfigFunctions.setInworldApiKey(this.external, value);
    }
    get inworldApiKey() {
        return expose_binary_1.GraphManagerConfigFunctions.getInworldApiKey(this.external);
    }
    set mode(value) {
        expose_binary_1.GraphManagerConfigFunctions.setMode(this.external, value);
    }
    get mode() {
        return expose_binary_1.GraphManagerConfigFunctions.getMode(this.external);
    }
    set configEnvironmentVariables(value) {
        expose_binary_1.GraphManagerConfigFunctions.setConfigEnvironmentVariables(this.external, value);
    }
    get configEnvironmentVariables() {
        return expose_binary_1.GraphManagerConfigFunctions.getConfigEnvironmentVariables(this.external);
    }
    getExternal() {
        return this.external;
    }
    destroy() {
        if (this.external) {
            expose_binary_1.GraphManagerConfigFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.GraphManagerConfig = GraphManagerConfig;
