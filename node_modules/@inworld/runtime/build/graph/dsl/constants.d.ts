import { SpeechSynthesisConfigInterface } from '../../primitives/tts';
import { IntentMatcherConfig, RetrievalConfig, TextGenerationConfig, Voice } from './graph_config_schema';
type CamelCase<S extends string> = S extends `${infer P1}_${infer P2}${infer P3}` ? `${P1}${Uppercase<P2>}${CamelCase<P3>}` : S;
type CamelizeObject<T, S = false> = {
    [K in keyof T as Uncapitalize<CamelCase<string & K>>]: T[K] extends Date ? T[K] : T[K] extends RegExp ? T[K] : T[K] extends Array<infer U> ? U extends {} | undefined ? Array<CamelizeObject<U>> : T[K] : T[K] extends {} | undefined ? S extends true ? T[K] : CamelizeObject<T[K]> : T[K];
};
export type Camelize<T, S = false> = T extends Array<infer U> ? Array<CamelizeObject<U, S>> : CamelizeObject<T, S>;
/**
 * Default provider for LLM and embedding services.
 * Standard provider used for accessing AI services.
 *
 * @type {string}
 */
export declare const DEFAULT_PROVIDER = "inworld";
/**
 * Default text generation configuration for LLM nodes.
 * Provides standard settings for text generation with reasonable defaults.
 *
 * @property {number} max_new_tokens - Maximum number of tokens to generate (2500)
 * @property {number} max_prompt_length - Maximum prompt length (100)
 * @property {number} repetition_penalty - Penalty for repetition (1)
 * @property {number} top_p - Nucleus sampling parameter (1)
 * @property {number} temperature - Sampling temperature (1)
 * @property {number} frequency_penalty - Frequency penalty (0)
 * @property {number} presence_penalty - Presence penalty (0)
 * @property {Array<string>} stop_sequences - Sequences that stop generation ([])
 */
export declare const DEFAULT_TEXT_CONFIG: TextGenerationConfig;
/**
 * Default embedder model name for text embedding.
 * Standard model used for creating text embeddings and similarity matching.
 *
 * @type {string}
 */
export declare const DEFAULT_EMBEDDER_MODEL_NAME = "BAAI/bge-large-en-v1.5";
/**
 * Default configuration for intent subgraph.
 * Provides standard settings for intent recognition using embeddings and LLM.
 *
 * @type {Object}
 * @property {number} similarityThreshold - Threshold for intent matching (0.88)
 * @property {TextGenerationConfig} textGenerationConfig - LLM text generation settings
 * @property {number} maxIntentsForLLM - Maximum intents to send to LLM (5)
 * @property {number} maxPhrasesPerIntent - Maximum phrases per intent (3)
 * @property {number} embeddingSimilarityThreshold - Embedding similarity threshold (0.7)
 * @property {number} topNIntents - Number of top intents to return (1)
 */
export declare const DEFAULT_INTENT_SUBGRAPH_CONFIG: {
    similarityThreshold: number;
    textGenerationConfig: TextGenerationConfig;
    maxIntentsForLLM: number;
    maxPhrasesPerIntent: number;
    embeddingSimilarityThreshold: number;
    topNIntents: number;
};
/**
 * Default LLM model name for text generation.
 * Standard model used for LLM-based text generation tasks.
 *
 * @type {string}
 */
export declare const DEFAULT_LLM_MODEL_NAME = "meta-llama/Llama-3.1-70b-Instruct";
/**
 * Default retrieval configuration for knowledge nodes.
 * Provides standard settings for knowledge retrieval with reasonable thresholds.
 *
 * @property {number} threshold - Similarity threshold for retrieval (0.7)
 * @property {number} top_k - Number of top results to retrieve (5)
 */
export declare const DEFAULT_RETRIEVAL_CONFIG: RetrievalConfig;
/**
 * Default intent matcher configuration for intent recognition.
 * Provides standard settings for intent matching with embedding and LLM-based approaches.
 *
 * @property {Object} embedding - Embedding-based matching configuration
 * @property {number} embedding.similarity_threshold - Similarity threshold for embeddings (0.88)
 * @property {Object} llm - LLM-based matching configuration
 * @property {TextGenerationConfig} llm.generation_config - Text generation config for LLM matching
 * @property {string} llm.prompt_template - Prompt template for LLM matching (empty)
 * @property {number} llm.embedding_similarity_threshold - Embedding similarity threshold for LLM (0.7)
 * @property {number} llm.max_embedding_matches_for_llm - Maximum embedding matches for LLM (5)
 * @property {number} top_n_intents - Number of top intents to return (3)
 */
export declare const DEFAULT_INTENT_MATCHER_CONFIG: IntentMatcherConfig;
/**
 * Default speech recognition configuration for STT nodes.
 * Provides standard settings for speech recognition with reasonable defaults.
 *
 * @property {string} language_code - Language code (e.g., 'en-US')
 */
export declare const DEFAULT_SPEECH_RECOGNITION_CONFIG: {
    language_code: string;
};
/**
 * Default TTS model ID for TTS nodes.
 * Standard model used for TTS synthesis.
 *
 * @type {string}
 */
export declare const DEFAULT_TTS_MODEL_ID = "inworld-tts-1-max";
/**
 * Default speech synthesis configuration for TTS nodes.
 * Provides standard settings for speech synthesis with reasonable defaults.
 *
 * @property {string} type - Type of synthesis ('inworld')
 * @property {Object} config - Configuration for speech synthesis
 * @property {Object} config.inference - Inference configuration
 * @property {number} config.inference.pitch - Pitch (0)
 * @property {number} config.inference.speaking_rate - Speaking rate (1)
 * @property {number} config.inference.temperature - Sampling temperature (0.8)
 * @property {Object} config.postprocessing - Postprocessing configuration
 * @property {number} config.postprocessing.sample_rate - Sample rate (48000)
 */
export declare const DEFAULT_SPEECH_SYNTHESIS_CONFIG: SpeechSynthesisConfigInterface;
/**
 * Default TTS voice for TTS nodes.
 * Standard voice used for TTS synthesis.
 *
 * @type {Voice}
 */
export declare const DEFAULT_TTS_VOICE: Voice;
export {};
