import { GraphBuilder, GraphBuilderProps } from './graph_builder';
import { AbstractNode } from './nodes/builtin/abstract_node';
/**
 * Configuration properties for the `SequentialGraphBuilder`.
 * @interface
 */
interface SequentialGraphBuilderProps extends GraphBuilderProps {
    /** The list of nodes to be connected sequentially. */
    nodes: AbstractNode[];
}
/**
 * A graph builder that constructs a sequential graph from a list of nodes.
 * Automatically links nodes with one-directional edges from the first to the last
 * and sets the start and end nodes accordingly.
 * @extends {GraphBuilder}
 */
export declare class SequentialGraphBuilder extends GraphBuilder {
    /**
     * Creates a new instance of `SequentialGraphBuilder` and builds the sequential graph.
     * @param {SequentialGraphBuilderProps} opts - The configuration options for the sequential graph builder.
     */
    constructor(opts: SequentialGraphBuilderProps);
    /**
     * Builds a sequential graph configuration from an array of nodes.
     * In addition to adding nodes, this method also creates simple one-directional
     * edges from the first to the last provided node and sets the start/end nodes.
     *
     * @param {Array<AbstractNode>} nodes - Array of nodes to add to the graph
     * @returns {SequentialGraphBuilder} This builder instance.
     * @throws {InworldError} If no nodes are provided.
     */
    private buildSequentialGraph;
    /**
     * Adds a node to the graph, links it from the previous end node (if any),
     * and sets the passed node as the new end node.
     *
     * @param {AbstractNode} node - The node to add to the graph.
     * @returns {SequentialGraphBuilder} The current builder instance.
     */
    addSequentialNode(node: AbstractNode): this;
}
export {};
