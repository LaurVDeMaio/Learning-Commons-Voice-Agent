"use strict";
// Just moved the lib from https://github.com/kbrabrand/snakify-ts to minimize frictions
// LICENSE DETAILS https://github.com/kbrabrand/snakify-ts/blob/main/README.md
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = snakify;
const lodash_snakecase_1 = __importDefault(require("lodash.snakecase"));
function walk(obj, shallow = false) {
    if (!obj || typeof obj !== 'object')
        return obj;
    if (obj instanceof Date || obj instanceof RegExp)
        return obj;
    if (Array.isArray(obj))
        return obj.map((v) => {
            if (!shallow) {
                return walk(v);
            }
            if (typeof v === 'object')
                return walk(v, shallow);
            return v;
        });
    return Object.keys(obj).reduce((res, key) => {
        const camel = (0, lodash_snakecase_1.default)(key);
        res[camel] = shallow ? obj[key] : walk(obj[key]);
        return res;
    }, {});
}
function snakify(
/**
 * Value to be snakified
 */
obj, 
/**
 * If true, only the top level keys of the obj will be camel cased
 */
shallow) {
    // @ts-ignore
    return typeof obj === 'string' ? (0, lodash_snakecase_1.default)(obj) : walk(obj, shallow);
}
