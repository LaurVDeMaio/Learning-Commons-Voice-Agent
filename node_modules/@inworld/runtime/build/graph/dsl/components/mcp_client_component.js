"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MCPClientComponent = void 0;
const snakify_1 = __importDefault(require("../utils/snakify"));
const abstract_component_1 = require("./abstract_component");
/**
 * MCP client component for Model Context Protocol services.
 * This component provides access to MCP servers for tool calling and context management,
 * enabling integration with external tools and services through the MCP protocol.
 *
 * @remarks
 * This component does not require API key injection by the builder.
 *
 * @example
 * ```typescript
 * const mcpComponent = new MCPClientComponent({
 *   sessionConfig: {
 *     serverPath: '/path/to/mcp-server',
 *     serverArgs: ['--config', 'config.json'],
 *     timeout: 30000
 *   }
 * });
 * ```
 */
class MCPClientComponent extends abstract_component_1.AbstractComponent {
    /**
     * Creates a new `MCPClientComponent` instance.
     *
     * The provided camelCase `sessionConfig` is converted to snake_case when
     * generating the runtime configuration.
     *
     * @param {Object} props - Configuration for the MCP client component
     * @param {string} [props.id] - Optional explicit component identifier. Human-readable identifier would be generated if omitted.
     * @param {import('../graph_config_schema').MCPSessionCreationConfig} props.sessionConfig - MCP session config (camelCase allowed)
     */
    constructor(props) {
        super(props);
        this.sessionConfig = props.sessionConfig;
    }
    /**
     * Converts the MCP client component to a graph configuration component.
     *
     * @returns The configured MCP client component for graph execution
     */
    toGraphConfigComponent() {
        return {
            id: this.id,
            type: 'MCPClientInterface',
            creation_config: {
                type: 'MCPClientCreationConfig',
                properties: {
                    session_config: (0, snakify_1.default)(this.sessionConfig),
                },
            },
        };
    }
}
exports.MCPClientComponent = MCPClientComponent;
