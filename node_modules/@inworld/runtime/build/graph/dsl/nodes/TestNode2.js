"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestNodeTest = void 0;
class BaseInputType {
    constructor(name) {
        this.name = name;
    }
}
function CustomInputType(defaultInstance) {
    var _a;
    return _a = class extends BaseInputType {
            constructor(opts = defaultInstance) {
                super('');
                Object.assign(this, opts);
            }
        },
        _a._brand = 'CustomInputType' + Math.random(),
        _a;
}
const MyCustomInput = CustomInputType({ test1: 'default' });
class InputType extends BaseInputType {
    constructor(name) {
        super(name);
        this.name = name;
        this.test = 'test';
    }
}
InputType._brand = 'InputType';
class InputType2 extends BaseInputType {
    constructor(name) {
        super(name);
        this.name = name;
        this.test = 'test';
    }
}
InputType2._brand = 'InputType2';
class InputType3 extends BaseInputType {
    constructor(name) {
        super(name);
        this.name = name;
        this.test = 'test';
    }
}
InputType3._brand = 'InputType3';
const _InputTypesList = [
    InputType3,
    InputType2,
    String,
    MyCustomInput,
];
const _OutputTypeList = [String, InputType];
class TestNode {
}
class TestNodeTest extends TestNode {
    constructor() {
        super(...arguments);
        this.inputTypes = [InputType2, String, MyCustomInput];
        this.outputType = String;
    }
    process(input, input2, input3) {
        return input.test + input2 + input3.test1;
    }
}
exports.TestNodeTest = TestNodeTest;
