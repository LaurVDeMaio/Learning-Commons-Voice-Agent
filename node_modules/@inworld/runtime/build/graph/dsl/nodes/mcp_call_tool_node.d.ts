import { MCPClientComponent } from '../components/mcp_client_component';
import { Camelize } from '../constants';
import { MCPSessionCreationConfig, Node as GraphConfigNode } from '../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './abstract_node';
export interface MCPCallToolNodeProps extends AbstractNodeProps {
    /**
     * MCP session configuration for establishing the connection to the MCP server.
     */
    sessionConfig: Camelize<MCPSessionCreationConfig>;
}
/**
 * Configuration interface for `MCPCallToolNode` creation.
 *
 * @remarks
 * Use this variant when reusing an existing {@link MCPClientComponent}.
 */
interface MCPCallToolNodeWithComponentProps extends AbstractNodeProps {
    /** Existing MCP component to use. */
    mcpComponent: MCPClientComponent;
}
/**
 * MCP call tool node that calls multiple tools on an MCP server in parallel.
 * This node processes tool call requests and executes them against the configured
 * MCP server, returning the results of all tool executions.
 *
 * @input {GraphTypes.ToolCallRequest} {@link GraphTypes.ToolCallRequest} - The data type that MCPCallToolNode accepts as input
 * @output {GraphTypes.ToolCallResponse} {@link GraphTypes.ToolCallResponse} - The data type that MCPCallToolNode outputs
 *
 * @example
 * ```typescript
 * const mcpComponent = new MCPClientComponent({ sessionConfig: { ... } });
 * const mcpCallToolNode = new MCPCallToolNode({
 *   mcpComponent,
 *   reportToClient: true
 * });
 * ```
 */
export declare class MCPCallToolNode extends AbstractNode {
    /**
     * Creates a new MCPCallToolNode instance.
     *
     * @remarks
     * Provide `sessionConfig` to create a new internalcomponent, or pass
     * `mcpComponent` to reuse an existing one.
     *
     * @param props - Configuration for the MCP call tool node.
     */
    constructor(props: MCPCallToolNodeProps | MCPCallToolNodeWithComponentProps);
    /**
     * Converts the MCP call tool node to a graph configuration node.
     *
     * @returns The configured MCP call tool node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
