"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextChunkingNode = void 0;
const abstract_node_1 = require("./abstract_node");
/**
 * Text chunking node for breaking large text into smaller pieces (a stream of token chunks).
 * This node processes streaming text data and converts it into discrete text chunks.
 *
 * @input {GraphTypes.TextStream | GraphTypes.ContentStream} {@link GraphTypes.TextStream} | {@link GraphTypes.ContentStream} - The data type that TextChunkingNode accepts as input
 * @output {GraphTypes.TextStream} {@link GraphTypes.TextStream} - The data type that TextChunkingNode outputs
 *
 * @example
 * ```typescript
 * const chunkingNode = new TextChunkingNode({
 *   id: 'my-chunking-node',
 *   reportToClient: true
 * });
 * ```
 */
class TextChunkingNode extends abstract_node_1.AbstractNode {
    /**
     * Creates a new TextChunkingNode instance.
     *
     * @remarks
     * Accepts the common node options from {@link AbstractNodeProps}. If omitted,
     * sensible defaults are applied.
     *
     * @param props - Configuration for the text chunking node.
     */
    constructor(props = {}) {
        super(props);
    }
    /**
     * Converts the text chunking node to a graph configuration node.
     *
     * @returns The configured text chunking node for graph execution
     */
    toGraphConfigNode() {
        return {
            id: this.id,
            type: 'TextChunkingNode',
            execution_config: {
                type: 'NodeExecutionConfig',
                properties: {
                    report_to_client: this.reportToClient,
                },
            },
        };
    }
}
exports.TextChunkingNode = TextChunkingNode;
