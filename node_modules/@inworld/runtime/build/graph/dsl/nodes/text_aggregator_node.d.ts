import { Node as GraphConfigNode } from '../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './abstract_node';
/**
 * Text aggregator node for combining multiple text pieces into a single text output.
 * This node processes various text inputs and combines them into a unified text result.
 *
 * @input {String | GraphTypes.TextStream | GraphTypes.LLMChatResponse} {@link String} | {@link GraphTypes.TextStream} | {@link GraphTypes.Content} - The data type that TextAggregatorNode accepts as input
 * @output {String} {@link String} - The data type that TextAggregatorNode outputs
 *
 * @example
 * ```typescript
 * const aggregatorNode = new TextAggregatorNode({
 *   id: 'my-aggregator-node',
 *   reportToClient: true
 * });
 * ```
 */
export declare class TextAggregatorNode extends AbstractNode {
    /**
     * Creates a new TextAggregatorNode instance.
     *
     * @remarks
     * Accepts the common node options from {@link AbstractNodeProps}. If omitted,
     * sensible defaults are applied.
     *
     * @param props - Configuration for the text aggregator node.
     */
    constructor(props?: AbstractNodeProps);
    /**
     * Converts the text aggregator node to a graph configuration node.
     *
     * @returns The configured text aggregator node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
