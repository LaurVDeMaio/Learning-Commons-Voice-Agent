import { AbstractComponent } from '../components/abstract_component';
import { Node as GraphConfigNode } from '../graph_config_schema';
export declare const INTERNAL_COMPONENTS: unique symbol;
export declare const TO_GRAPH_CONFIG_NODE: unique symbol;
/**
 * Base configuration for any graph node.
 */
export interface AbstractNodeProps {
    /**
     * Optional explicit node identifier.
     *
     * @remarks
     * If omitted, a stable auto-generated ID based on the class name is assigned.
     */
    id?: string;
    /**
     * Whether this node should report its outputs to the client.
     *
     * If set to `true`, you will see the output of this node in the {@link GraphOutputStream}.
     */
    reportToClient?: boolean;
}
/**
 * Abstract base class for all graph nodes.
 *
 * Provides common functionality such as ID generation, tracking of internal
 * components, and conversion to a graph configuration node.
 */
export declare abstract class AbstractNode {
    private static nodesByTypeCounter;
    protected reportToClient: boolean;
    id: string;
    /**
     * @internal
     * @internalReference
     * We are using a symbol to ensure that this field is package-protected.
     */
    [INTERNAL_COMPONENTS]: AbstractComponent[];
    /**
     * Creates a new `AbstractNode`.
     *
     * @remarks
     * If no `id` is provided, one will be auto-generated based on the class name.
     * The `reportToClient` flag defaults to `false`.
     *
     * @param props - Node configuration including optional `id` and
     *                `reportToClient` flag.
     */
    constructor(props: AbstractNodeProps);
    private static getId;
    /**
     * @internal
     * Adds an internal component to this node.
     *
     * @param component - The component to attach to this node.
     * @returns This node instance.
     */
    protected addComponent(component: AbstractComponent): this;
    /**
     * @internal
     * Returns the first internal component attached to this node.
     *
     * @throws {InworldError} If no components were added to the node.
     */
    protected getFirstComponent(): AbstractComponent;
    /**
     * @internal
     * Converts this DSL node to a serializable graph configuration node.
     *
     * Note: This indirection through a symbol preserves encapsulation while
     * still allowing builder utilities to access the conversion.
     */
    [TO_GRAPH_CONFIG_NODE](): GraphConfigNode;
    /**
     * @internal
     * Implemented by subclasses to provide their graph configuration
     * representation.
     */
    protected abstract toGraphConfigNode(): GraphConfigNode;
}
