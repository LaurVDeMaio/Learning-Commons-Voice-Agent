import { RemoteLLMComponent } from '../components/remote_llm_component';
import { Camelize } from '../constants';
import { Node as GraphConfigNode, TextGenerationConfig } from '../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './abstract_node';
/**
 * Configuration for `RemoteLLMCompletionNode` using LLM provider settings.
 *
 * @remarks
 * This approach creates both the node and the underlying LLM component. If
 * `provider`/`modelName` are omitted, sensible defaults will be used.
 */
export interface RemoteLLMCompletionNodeProps extends AbstractNodeProps {
    /** Text generation configuration parameters */
    textGenerationConfig?: Camelize<TextGenerationConfig>;
    /** Whether to stream responses */
    stream?: boolean;
    /** LLM provider (e.g., 'openai', 'anthropic', 'inworld') */
    provider?: string;
    /** Model name specific to the provider (e.g., 'gpt-4', 'claude-3-5-sonnet-20241022') */
    modelName?: string;
}
/**
 * Configuration for `RemoteLLMCompletionNode` using an existing LLM component.
 *
 * @remarks
 * This approach references a pre-configured LLM component that can be reused
 * across multiple nodes.
 */
interface RemoteLLMCompletionNodeWithLLMComponentProps extends AbstractNodeProps {
    /** Existing LLM component to use */
    llmComponent: RemoteLLMComponent;
    /** Text generation configuration parameters */
    textGenerationConfig?: Camelize<TextGenerationConfig>;
    /** Whether to stream responses */
    stream?: boolean;
}
/**
 * Remote LLM completion node for text generation.
 * Use a pre-configured LLM component (reusable across nodes), or provide provider/model
 * details and the node will create the component for you.
 *
 * @input {String} {@link String} - The data type that LLMCompletionNode accepts as input
 * @output {String} {@link String} - The data type that LLMCompletionNode outputs
 *
 * @example
 * ```typescript
 * // Using LLM provider configuration
 * const completionNode = new RemoteLLMCompletionNode({
 *   id: 'my-completion-node',
 *   provider: 'openai',
 *   modelName: 'gpt-4o-mini',
 *   stream: true
 * });
 *
 * // Using existing LLM component
 * const completionNodeWithComponent = new RemoteLLMCompletionNode({
 *   id: 'my-completion-node',
 *   llmComponent: existingLLMComponent
 * });
 *
 * // Using default settings
 * const defaultCompletionNode = new RemoteLLMCompletionNode();
 * ```
 */
export declare class RemoteLLMCompletionNode extends AbstractNode {
    private executionConfig;
    /**
     * Creates a new RemoteLLMCompletionNode instance.
     *
     * @remarks
     * Provide LLM provider settings to create a new internal component, or pass
     * `llmComponent` to reuse an existing one. If omitted, defaults are applied.
     *
     * @param props - Optional configuration for the completion node.
     */
    constructor(props?: RemoteLLMCompletionNodeProps | RemoteLLMCompletionNodeWithLLMComponentProps);
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
