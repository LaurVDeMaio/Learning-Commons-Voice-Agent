"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractNode = exports.TO_GRAPH_CONFIG_NODE = exports.INTERNAL_COMPONENTS = void 0;
const common_1 = require("../../../common");
exports.INTERNAL_COMPONENTS = Symbol('internal_components');
exports.TO_GRAPH_CONFIG_NODE = Symbol('to_graph_config_node');
/**
 * Abstract base class for all graph nodes.
 *
 * Provides common functionality such as ID generation, tracking of internal
 * components, and conversion to a graph configuration node.
 */
class AbstractNode {
    /**
     * Creates a new `AbstractNode`.
     *
     * @remarks
     * If no `id` is provided, one will be auto-generated based on the class name.
     * The `reportToClient` flag defaults to `false`.
     *
     * @param props - Node configuration including optional `id` and
     *                `reportToClient` flag.
     */
    constructor(props) {
        var _b, _c;
        /**
         * @internal
         * @internalReference
         * We are using a symbol to ensure that this field is package-protected.
         */
        this[_a] = [];
        this.id = (_b = props.id) !== null && _b !== void 0 ? _b : AbstractNode.getId(this.constructor.name);
        this.reportToClient = (_c = props.reportToClient) !== null && _c !== void 0 ? _c : false;
    }
    static getId(type) {
        if (AbstractNode.nodesByTypeCounter[type] === undefined) {
            AbstractNode.nodesByTypeCounter[type] = 0;
            return type;
        }
        AbstractNode.nodesByTypeCounter[type]++;
        return `${type}-${AbstractNode.nodesByTypeCounter[type]}`;
    }
    /**
     * @internal
     * Adds an internal component to this node.
     *
     * @param component - The component to attach to this node.
     * @returns This node instance.
     */
    addComponent(component) {
        this[exports.INTERNAL_COMPONENTS].push(component);
        return this;
    }
    /**
     * @internal
     * Returns the first internal component attached to this node.
     *
     * @throws {InworldError} If no components were added to the node.
     */
    getFirstComponent() {
        if (this[exports.INTERNAL_COMPONENTS].length === 0) {
            throw new common_1.InworldError('No components added to the node');
        }
        return this[exports.INTERNAL_COMPONENTS][0];
    }
    /**
     * @internal
     * Converts this DSL node to a serializable graph configuration node.
     *
     * Note: This indirection through a symbol preserves encapsulation while
     * still allowing builder utilities to access the conversion.
     */
    [(_a = exports.INTERNAL_COMPONENTS, exports.TO_GRAPH_CONFIG_NODE)]() {
        return this.toGraphConfigNode();
    }
}
exports.AbstractNode = AbstractNode;
AbstractNode.nodesByTypeCounter = {};
