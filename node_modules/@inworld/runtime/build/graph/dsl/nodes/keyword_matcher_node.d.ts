import { Node as GraphConfigNode } from '../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './abstract_node';
/**
 * Configuration interface for `KeywordMatcherNode` creation.
 */
export interface KeywordMatcherNodeProps extends AbstractNodeProps {
    /**
     * List of keywords to match against input text.
     *
     * @remarks
     * Matching semantics are implementation-defined (e.g., case sensitivity,
     * tokenization). Refer to the node processing docs for details.
     */
    keywords: string[];
}
/**
 * Keyword matcher node that matches keywords in text input.
 * This node processes text input and identifies matching keywords from a predefined list.
 *
 * @input {String} {@link String} - The data type that KeywordMatcherNode accepts as input
 * @output {GraphTypes.MatchedKeywords} {@link GraphTypes.MatchedKeywords} - The data type that KeywordMatcherNode outputs
 *
 * @example
 * ```typescript
 * const keywordNode = new KeywordMatcherNode({
 *   keywords: ['urgent', 'important', 'priority', 'asap'],
 *   reportToClient: true
 * });
 * ```
 */
export declare class KeywordMatcherNode extends AbstractNode {
    private keywords;
    /**
     * Creates a new KeywordMatcherNode instance.
     *
     * @param props - Configuration for the keyword matcher node.
     */
    constructor(props: KeywordMatcherNodeProps);
    /**
     * Converts the keyword matcher node to a graph configuration node.
     *
     * @returns The configured keyword matcher node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
