"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractNode = exports.TO_GRAPH_CONFIG_NODE = exports.INTERNAL_COMPONENTS = void 0;
const common_1 = require("../../../../common");
exports.INTERNAL_COMPONENTS = Symbol('internal_components');
exports.TO_GRAPH_CONFIG_NODE = Symbol('to_graph_config_node');
class AbstractNode {
    constructor(props) {
        var _b, _c;
        // We are using a symbol to ensure that this field is package-protected.
        this[_a] = [];
        this.id = (_b = props.id) !== null && _b !== void 0 ? _b : AbstractNode.getId(this.constructor.name);
        this.reportToClient = (_c = props.reportToClient) !== null && _c !== void 0 ? _c : false;
    }
    static getId(type) {
        if (AbstractNode.nodesByTypeCounter[type] === undefined) {
            AbstractNode.nodesByTypeCounter[type] = 0;
            return type;
        }
        AbstractNode.nodesByTypeCounter[type]++;
        return `${type}-${AbstractNode.nodesByTypeCounter[type]}`;
    }
    addComponent(component) {
        this[exports.INTERNAL_COMPONENTS].push(component);
        return this;
    }
    getFirstComponent() {
        if (this[exports.INTERNAL_COMPONENTS].length === 0) {
            throw new common_1.InworldError('No components added to the node');
        }
        return this[exports.INTERNAL_COMPONENTS][0];
    }
    [(_a = exports.INTERNAL_COMPONENTS, exports.TO_GRAPH_CONFIG_NODE)]() {
        return this.toGraphConfigNode();
    }
}
exports.AbstractNode = AbstractNode;
AbstractNode.nodesByTypeCounter = {};
