import { Camelize } from '../../graph_config_dsl';
import { Intent, IntentMatcherConfig, Node as GraphConfigNode } from '../../graph_config_schema';
import { AbstractNode } from './AbstractNode';
/**
 * Configuration interface for IntentNode creation.
 */
interface IntentNodeProps {
    /** Unique identifier for the node */
    id?: string;
    /** List of intents to recognize */
    intents: Intent[];
    /** ID of the embedder component to use */
    embedderComponentId?: string;
    /** ID of the LLM component to use */
    llmComponentId?: string;
    /** Intent matching configuration */
    matcherConfig?: Camelize<IntentMatcherConfig>;
    /** Whether to report results to client */
    reportToClient?: boolean;
}
/**
 * Intent node that matches user input against predefined intents.
 * This node processes text input through an intent matcher to identify user intents.
 *
 * @input {TextData} {@link TextData} - The data type that IntentNode accepts as input
 * @output {MatchedIntents} {@link MatchedIntents} - The data type that IntentNode accepts as output
 *
 * @example
 * ```typescript
 * const intentNode = new IntentNode({
 *   id: 'my-intent-node',
 *   intents: [
 *     { name: 'greeting', examples: ['hello', 'hi', 'hey'] },
 *     { name: 'goodbye', examples: ['bye', 'see you', 'farewell'] }
 *   ],
 *   reportToClient: true
 * });
 * ```
 */
export declare class IntentNode extends AbstractNode {
    protected id: string;
    private intents;
    private embedderComponentId?;
    private llmComponentId?;
    private matcherConfig;
    private reportToClient;
    /**
     * Creates a new IntentNode instance.
     *
     * @param props - Configuration for the intent node
     */
    constructor(props: IntentNodeProps);
    /**
     * Converts the intent node to a graph configuration node.
     *
     * @returns The configured intent node for graph execution
     */
    toGraphConfigNode(): GraphConfigNode;
}
export {};
