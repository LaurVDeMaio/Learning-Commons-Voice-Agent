"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomNode = void 0;
const nodes_1 = require("../../../nodes");
const AbstractNode_1 = require("./AbstractNode");
/**
 * Base class for creating custom (user-defined) nodes.
 *
 * Subclasses must implement the `process` method. A unique node type is
 * automatically registered once per subclass, and used when producing the
 * graph configuration via `toGraphConfigNode`.
 */
class CustomNode extends AbstractNode_1.AbstractNode {
    /**
     * Creates a new `CustomNode`.
     *
     * @param props - Custom node options including optional execution configuration.
     */
    constructor(props = {}) {
        var _a;
        super(props);
        this.executionConfig = (_a = props === null || props === void 0 ? void 0 : props.executionConfig) !== null && _a !== void 0 ? _a : {};
        if (!CustomNode.typeReferences[this.constructor.name]) {
            CustomNode.typeReferences[this.constructor.name] = (0, nodes_1.registerCustomNodeType)(this.constructor.name + 'Type', this.process);
        }
    }
    /**
     * Converts this custom node to a graph configuration node, including the
     * registered type and the provided execution configuration.
     */
    toGraphConfigNode() {
        return {
            type: this.constructor.name + 'Type',
            id: this.id,
            execution_config: {
                type: 'NodeExecutionConfig',
                properties: Object.assign({ report_to_client: this.reportToClient }, this.executionConfig),
            },
        };
    }
}
exports.CustomNode = CustomNode;
CustomNode.typeReferences = {};
