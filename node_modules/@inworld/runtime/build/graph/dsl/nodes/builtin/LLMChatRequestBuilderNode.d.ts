import { RequestBuilderToolChoice } from '../../graph_builder';
import { MessageTemplate, Node as GraphConfigNode, Tool } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './AbstractNode';
/**
 * Configuration interface for LLMChatRequestBuilderNode creation.
 */
interface LLMChatRequestBuilderNodeProps extends AbstractNodeProps {
    /** List of message templates */
    messages?: MessageTemplate[];
    /** List of available tools for function calling */
    tools?: Tool[];
    /** Tool choice configuration */
    toolChoice?: RequestBuilderToolChoice;
    /** Response format specification ('text', 'json', 'json_schema') */
    responseFormat?: 'text' | 'json' | 'json_schema';
}
/**
 * LLM chat request builder node that processes JSON input into formatted chat requests
 * using prompt templates. This node transforms structured JSON data into properly
 * formatted chat requests with messages, tools, and configuration.
 *
 * @input {JsonData} {@link JsonData} - The data type that LLMChatRequestBuilderNode accepts as input
 * @output {LLMChatRequest} {@link LLMChatRequestData} - The data type that LLMChatRequestBuilderNode accepts as output
 *
 * @example
 * ```typescript
 * const requestBuilderNode = new LLMChatRequestBuilderNode({
 *   id: 'chat-request-builder',
 *   messages: [
 *     { role: 'system', content: 'You are a helpful assistant.' },
 *     { role: 'user', content: '{{user_input}}' }
 *   ],
 *   tools: [
 *     { name: 'search', description: 'Search for information' }
 *   ],
 *   responseFormat: 'json'
 * });
 * ```
 */
export declare class LLMChatRequestBuilderNode extends AbstractNode {
    private messages?;
    private tools?;
    private toolChoice?;
    private responseFormat?;
    /**
     * Creates a new LLMChatRequestBuilderNode instance.
     *
     * @param props - Configuration for the LLM chat request builder node
     */
    constructor(props?: LLMChatRequestBuilderNodeProps);
    /**
     * Converts the LLM chat request builder node to a graph configuration node.
     *
     * @returns The configured LLM chat request builder node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
