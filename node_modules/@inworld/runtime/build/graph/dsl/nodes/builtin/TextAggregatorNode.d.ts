import { Node as GraphConfigNode } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './AbstractNode';
/**
 * Text aggregator node for combining multiple text pieces into a single text output.
 * This node processes various text inputs and combines them into a unified text result.
 *
 * @input {TextData | TextStreamData | LLMChatResponse} {@link TextData} | {@link TextStreamData} | {@link LLMChatResponseData} - The data type that TextAggregatorNode accepts as input
 * @output {TextData} {@link TextData} - The data type that TextAggregatorNode accepts as output
 *
 * @example
 * ```typescript
 * const aggregatorNode = new TextAggregatorNode({
 *   id: 'my-aggregator-node',
 *   reportToClient: true
 * });
 * ```
 */
export declare class TextAggregatorNode extends AbstractNode {
    /**
     * Creates a new TextAggregatorNode instance.
     *
     * @param props - Configuration for the text aggregator node
     */
    constructor(props?: AbstractNodeProps);
    /**
     * Converts the text aggregator node to a graph configuration node.
     *
     * @returns The configured text aggregator node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
