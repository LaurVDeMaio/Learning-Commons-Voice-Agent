import { RemoteSTTComponent } from '../../components/remote_stt_component';
import { Camelize } from '../../constants';
import { Node as GraphConfigNode, SpeechRecognitionConfig3 } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './abstract_node';
/**
 * Configuration for RemoteSTTNode using STT provider settings.
 * This approach creates both the node and the underlying STT component.
 */
interface RemoteSTTNodeProps extends AbstractNodeProps {
    /** STT configuration object */
    sttConfig: Camelize<SpeechRecognitionConfig3>;
}
/**
 * Configuration for RemoteSTTNode using an existing STT component.
 * This approach references a pre-configured STT component that could be reused across multiple nodes.
 */
interface RemoteSTTNodeWithComponentProps extends AbstractNodeProps {
    /** Existing STT component to use */
    sttComponent: RemoteSTTComponent;
}
/**
 * Remote STT (Speech-to-Text) node for audio transcription.
 * You can either use a pre-configured STT component that could be reused across multiple nodes
 * or provide STT configuration, and the node will create a new component for you.
 *
 * @input {GraphTypes.Audio} {@link GraphTypes.Audio} - The data type that STTNode accepts as input
 * @output {String} {@link String} - The data type that STTNode outputs
 *
 * @example
 * ```typescript
 * // Using provider configuration
 * const sttNode = new RemoteSTTNode({
 *   id: 'my-stt-node',
 *   sttConfig: { language_code: 'en-US' }
 * });
 *
 * // Using existing STT component
 * const sttNodeWithComponent = new RemoteSTTNode({
 *   id: 'my-stt-node',
 *   sttComponent: existingSTTComponent
 * });
 * ```
 */
export declare class RemoteSTTNode extends AbstractNode {
    private executionConfig;
    /**
     * Creates a new RemoteSTTNode instance.
     *
     * @param props - Configuration for the STT node. Can specify either STT settings
     *                or reference an existing STT component.
     */
    constructor(props?: RemoteSTTNodeProps | RemoteSTTNodeWithComponentProps);
    /**
     * Converts the STT node to a graph configuration node.
     *
     * @returns The configured STT node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
