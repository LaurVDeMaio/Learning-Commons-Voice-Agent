"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MCPListToolsNode = void 0;
const MCPClientComponent_1 = require("../../components/MCPClientComponent");
const AbstractNode_1 = require("./AbstractNode");
/**
 * MCP list tools node that lists available tools from an MCP server.
 * This node connects to an MCP server and retrieves the list of available
 * tools. It takes no inputs and returns a ListToolsResponseData containing all
 * available tools.
 *
 * @input {any} any - The data type that MCPListToolsNode accepts as input
 * @output {ListToolsResponseData} {@link ListToolsResponseData} - The data type that MCPListToolsNode accepts as output
 *
 * @example
 * ```typescript
 * const mcpListToolsNode = new MCPListToolsNode({
 *   id: 'mcp-list-tools',
 *   mcpComponentId: 'my-mcp-component',
 *   reportToClient: true
 * });
 * ```
 */
class MCPListToolsNode extends AbstractNode_1.AbstractNode {
    /**
     * Creates a new MCPListToolsNode instance.
     *
     * @param props - Configuration for the MCP list tools node
     */
    constructor(props) {
        super(props);
        let mcpComponent;
        if ('mcpComponent' in props) {
            mcpComponent = props.mcpComponent;
        }
        else {
            mcpComponent = new MCPClientComponent_1.MCPClientComponent({
                id: `${this.id}_llm_component`,
                sessionConfig: props.sessionConfig,
            });
        }
        this.addComponent(mcpComponent);
    }
    /**
     * Converts the MCP list tools node to a graph configuration node.
     *
     * @returns The configured MCP list tools node for graph execution
     */
    toGraphConfigNode() {
        return {
            id: this.id,
            type: 'MCPListToolsNode',
            execution_config: {
                type: 'MCPListToolsNodeExecutionConfig',
                properties: {
                    mcp_component_id: this.getFirstComponent().id,
                    report_to_client: this.reportToClient,
                },
            },
        };
    }
}
exports.MCPListToolsNode = MCPListToolsNode;
