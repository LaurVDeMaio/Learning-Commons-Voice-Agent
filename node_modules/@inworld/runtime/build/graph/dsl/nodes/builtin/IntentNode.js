"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentNode = void 0;
const graph_config_dsl_1 = require("../../graph_config_dsl");
const snakify_1 = __importDefault(require("../../utils/snakify"));
const AbstractNode_1 = require("./AbstractNode");
/**
 * Intent node that matches user input against predefined intents.
 * This node processes text input through an intent matcher to identify user intents.
 *
 * @input {TextData} {@link TextData} - The data type that IntentNode accepts as input
 * @output {MatchedIntents} {@link MatchedIntents} - The data type that IntentNode accepts as output
 *
 * @example
 * ```typescript
 * const intentNode = new IntentNode({
 *   id: 'my-intent-node',
 *   intents: [
 *     { name: 'greeting', examples: ['hello', 'hi', 'hey'] },
 *     { name: 'goodbye', examples: ['bye', 'see you', 'farewell'] }
 *   ],
 *   reportToClient: true
 * });
 * ```
 */
class IntentNode extends AbstractNode_1.AbstractNode {
    /**
     * Creates a new IntentNode instance.
     *
     * @param props - Configuration for the intent node
     */
    constructor(props) {
        var _a, _b;
        super();
        this.id = (_a = props.id) !== null && _a !== void 0 ? _a : this.constructor.name;
        this.intents = props.intents;
        this.embedderComponentId = props.embedderComponentId;
        this.llmComponentId = props.llmComponentId;
        this.matcherConfig = props.matcherConfig || graph_config_dsl_1.DEFAULT_INTENT_MATCHER_CONFIG;
        this.reportToClient = (_b = props.reportToClient) !== null && _b !== void 0 ? _b : false;
    }
    /**
     * Converts the intent node to a graph configuration node.
     *
     * @returns The configured intent node for graph execution
     */
    toGraphConfigNode() {
        return {
            id: this.id,
            type: 'IntentNode',
            creation_config: {
                type: 'IntentNodeCreationConfig',
                properties: {
                    intents: this.intents,
                    embedder_component_id: this.embedderComponentId,
                    llm_component_id: this.llmComponentId,
                },
            },
            execution_config: {
                type: 'IntentNodeExecutionConfig',
                properties: {
                    matcher_config: (0, snakify_1.default)(this.matcherConfig),
                    report_to_client: this.reportToClient,
                },
            },
        };
    }
}
exports.IntentNode = IntentNode;
