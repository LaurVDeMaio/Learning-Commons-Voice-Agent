import { RequestBuilderToolChoice } from '../../graph_builder';
import { MessageTemplate, Node as GraphConfigNode, Tool } from '../../graph_config_schema';
import { AbstractNode, AbstractNodeProps } from './AbstractNode';
/**
 * Configuration interface for LLMPromptBuilderNode creation.
 */
interface LLMPromptBuilderNodeProps extends AbstractNodeProps {
    /** List of message templates */
    messages?: MessageTemplate[];
    /** List of available tools for function calling */
    tools?: Tool[];
    /** Tool choice configuration */
    toolChoice?: RequestBuilderToolChoice;
    /** Response format specification ('text', 'json', 'json_schema') */
    responseFormat?: 'text' | 'json' | 'json_schema';
}
/**
 * LLM prompt builder node that processes JSON input into formatted prompts.
 * This node transforms structured JSON data into text prompts that can be used
 * directly with LLM completion endpoints.
 *
 * @input {JsonData} {@link JsonData} - The data type that LLMPromptBuilderNode accepts as input
 * @output {TextData} {@link TextData} - The data type that LLMPromptBuilderNode accepts as output
 *
 * @example
 * ```typescript
 * const promptBuilderNode = new LLMPromptBuilderNode({
 *   id: 'prompt-builder',
 *   messages: [
 *     { role: 'system', content: 'You are a helpful assistant.' },
 *     { role: 'user', content: '{{user_question}}' }
 *   ],
 *   responseFormat: 'text'
 * });
 * ```
 */
export declare class LLMPromptBuilderNode extends AbstractNode {
    private messages?;
    private tools?;
    private toolChoice?;
    private responseFormat?;
    /**
     * Creates a new LLMPromptBuilderNode instance.
     *
     * @param props - Configuration for the LLM prompt builder node
     */
    constructor(props?: LLMPromptBuilderNodeProps);
    /**
     * Converts the LLM prompt builder node to a graph configuration node.
     *
     * @returns The configured LLM prompt builder node for graph execution
     */
    protected toGraphConfigNode(): GraphConfigNode;
}
export {};
