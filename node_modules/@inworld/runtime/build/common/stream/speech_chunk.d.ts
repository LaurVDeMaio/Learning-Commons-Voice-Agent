import { ExternalReference } from '../data_types/common';
import { BaseDataStream } from './base';
/**
 * Interface representing a phoneme with its timing information.
 */
export interface PhonemeTimestamp {
    /** The phoneme symbol */
    phoneme: string;
    /** Start time of the phoneme in seconds */
    startTimeSec: number;
}
/**
 * Interface representing an audio chunk with optional phoneme timing data.
 * @internal
 */
export interface AudioChunk {
    /** Raw audio data */
    audio: Float32Array;
    /** Optional phoneme timing information */
    phonemeTimestamps?: PhonemeTimestamp[];
}
/**
 * Interface representing the result of a SpeechChunkStream iteration.
 */
export interface SpeechChunkStreamIterationResult {
    /** Raw audio data */
    audio?: number[];
    /** Optional phoneme timing information */
    phonemeTimestamps?: PhonemeTimestamp[];
    /** Indicates if the stream is finished */
    done: boolean;
}
/** Type for the next method of the SpeechChunkStreamIterator. */
export interface SpeechChunkStreamIterator {
    /**
     * @returns External reference to the native stream implementation
     * @internal
     */
    getStream?: () => ExternalReference;
    /**
     * Asynchronously reads the next item from the stream.
     * @returns Promise resolving to a result object with text content or done flag
     */
    next: () => Promise<SpeechChunkStreamIterationResult>;
}
/**
 * Class for handling string-based streams.
 * Provides functionality to read text data from native stream implementations.
 * @internal
 */
export declare class SpeechChunkStream extends BaseDataStream<SpeechChunkStreamIterationResult> implements SpeechChunkStreamIterator {
    /**
     * Creates a new SpeechChunkStream instance.
     *
     * @param stream - External reference to the native stream implementation
     * @param onDestroy - Optional callback to execute when stream is consumed
     */
    constructor(stream: ExternalReference, onDestroy?: () => void);
    /**
     * Asynchronously reads the next item from the stream.
     *
     * @returns Promise resolving to a result object with text content or done flag
     * @throws InworldError if reading from the stream fails
     */
    next(): Promise<{
        done: boolean;
        audio: number[];
        phonemeTimestamps: PhonemeTimestamp[];
    } | {
        done: boolean;
        audio?: undefined;
        phonemeTimestamps?: undefined;
    }>;
    [Symbol.asyncIterator](): AsyncIterator<SpeechChunkStreamIterationResult>;
    /**
     * Extracts phoneme timestamps from a speech chunk.
     *
     * @param chunk - Speech chunk to extract phoneme timestamps from
     * @returns Array of phoneme timestamps or undefined if not available
     * @private
     */
    private getPhonemeTimestamps;
    /**
     * Creates a new SpeechChunkStream instance from an external reference.
     *
     * @param stream - External reference to the native stream implementation
     * @returns A new SpeechChunkStream instance
     * @internal
     */
    static fromExternal(stream: ExternalReference): SpeechChunkStream;
}
