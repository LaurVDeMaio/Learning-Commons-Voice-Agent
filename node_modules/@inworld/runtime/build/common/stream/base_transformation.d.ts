/**
 * Base transformation stream implementation using Node-API approach with createTransformStreamWrapper.
 * This replaces the previous deasync and koffi callback approach with native async support.
 */
import { ExternalReference } from '../data_types/common';
import { IBaseTransformationStream, TransformationStreamOptions } from './interfaces';
/**
 * Base class for transformation streams.
 * @internal
 */
export declare class BaseTransformationStream<IT, OT> implements IBaseTransformationStream<IT, OT> {
    private streamFunctions;
    private outputType;
    protected external: ExternalReference;
    constructor(options: TransformationStreamOptions<IT, OT>);
    /**
     * Returns the external reference to the native data implementation.
     *
     * @returns External reference object
     */
    getExternal(): ExternalReference;
    destroy(): void;
    private transformInputType;
    private static getStreamFunctions;
    private prepareOutput;
    private static getError;
    private createTransformCallback;
    private getReturnTypeTag;
}
