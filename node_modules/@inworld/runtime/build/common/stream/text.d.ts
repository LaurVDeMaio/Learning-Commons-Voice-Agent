import { ExternalReference, TextStreamIterationResult, TextStreamIterationToTextResponseInterface, TTSOutputInterface } from '../data_types/common';
import { BaseDataStream } from './base';
import { TransformationStreamTextToText, TransformationStreamTextToTTS } from './transformation_stream';
/**
 * Interface for transforming text in a TextStream to TTS output.
 */
export interface TextStreamIterationToTTSOutputResponseInterface {
    /** Transform function for text to TTS output */
    transform: (text: string) => Promise<TTSOutputInterface> | TTSOutputInterface;
    /** Filter function for text to TTS output */
    filter?: (text: string) => boolean;
}
/**
 * Streaming interface for text content from graph nodes.
 *
 * Provides asynchronous streaming for text data with transformation capabilities.
 */
export interface TextStreamIterator {
    /**
     * Returns external reference to the native stream implementation.
     * @returns External reference to the native stream implementation
     * @internal
     */
    getStream: () => ExternalReference;
    /**
     * Asynchronously reads the next text chunk from the stream.
     * @returns Promise resolving to a result object with text content or done flag
     */
    next: () => Promise<TextStreamIterationResult>;
    /**
     * Converts the stream to a text response with transformation capabilities.
     * @param props - Configuration for text transformation and filtering
     * @returns A TransformationStreamTextToText instance for further processing
     */
    toTextResponse: (props: TextStreamIterationToTextResponseInterface) => TransformationStreamTextToText;
    /**
     * Converts the stream to a TTS output response with transformation capabilities.
     * @param props - Configuration for TTS output transformation
     * @returns A TransformationStreamTextToTTS instance for audio processing
     */
    toTTSOutputResponse: (props: TextStreamIterationToTTSOutputResponseInterface) => TransformationStreamTextToTTS;
}
/**
 * Class for handling string-based streams.
 * Provides functionality to read text data from native stream implementations.
 * @internal
 */
export declare class TextStream extends BaseDataStream<TextStreamIterationResult> implements TextStreamIterator {
    /**
     * Creates a new TextStream instance.
     *
     * @param stream - External reference to the native stream implementation
     * @param onDestroy - Optional callback to execute when stream is consumed
     */
    constructor(stream: ExternalReference, onDestroy?: () => void);
    /**
     * Asynchronously reads the next item from the stream.
     *
     * @returns Promise resolving to a result object with text content or done flag
     * @throws InworldError if reading from the stream fails
     */
    next(): Promise<{
        text: any;
        done: boolean;
    } | {
        done: boolean;
        text?: undefined;
    }>;
    [Symbol.asyncIterator](): AsyncIterator<TextStreamIterationResult>;
    /**
     * Converts the stream to a text response with transformation capabilities.
     *
     * @param props - Transformation properties for text
     * @returns A TransformationStreamTextToText instance
     */
    toTextResponse(props: {
        transform: (text: string) => Promise<string> | string;
        filter?: (text: string) => boolean;
    }): TransformationStreamTextToText;
    /**
     * Converts the stream to a TTS output response with transformation capabilities.
     *
     * @param props - Transformation properties for TTS output
     * @returns A TransformationStreamTextToTTS instance
     */
    toTTSOutputResponse(props: {
        transform: (text: string) => Promise<TTSOutputInterface> | TTSOutputInterface;
        filter?: (text: string) => boolean;
    }): TransformationStreamTextToTTS;
    /**
     * Creates a new TextStream instance from an external reference.
     *
     * @param external - External reference to the native stream implementation
     * @returns A new TextStream instance
     * @internal
     */
    static fromExternal(external: ExternalReference): TextStream;
}
