/**
 * Schema-based type guard generator utility
 * Automatically generates type guards from interface schemas
 */
export type PropertySchema = {
    type: 'string' | 'number' | 'boolean' | 'object' | 'array' | 'enum' | 'union';
    required: boolean;
    arrayItemSchema?: PropertySchema;
    objectSchema?: InterfaceSchema;
    enumValues?: readonly string[];
    unionSchemas?: PropertySchema[];
    validator?: (value: any) => boolean;
};
export type InterfaceSchema = {
    [key: string]: PropertySchema;
};
/**
 * Generates a type guard function from an interface schema
 */
export declare function createTypeGuard<T>(schema: InterfaceSchema, customValidators?: {
    [key: string]: (value: any) => boolean;
}): (input: any) => input is T;
/**
 * Decorator factory for creating type guard methods
 */
export declare function TypeGuard<T>(schema: InterfaceSchema): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
/**
 * Class decorator for automatically generating type guards
 */
export declare function GenerateTypeGuards(schemas: {
    [methodName: string]: InterfaceSchema;
}): <T extends {
    new (...args: any[]): {};
}>(constructor: T) => {
    new (...args: any[]): {};
} & T;
