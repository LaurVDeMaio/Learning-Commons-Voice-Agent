"use strict";
/**
 * Schema definitions for LLM-related interfaces
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioChunkInterfaceSchema = exports.LLMChatRequestInterfaceSchema = exports.LLMMessageInterfaceSchema = exports.ToolInterfaceSchema = exports.ToolChoiceInterfaceSchema = exports.FunctionChoiceInterfaceSchema = exports.ToolCallInterfaceSchema = exports.ContentItemInterfaceSchema = exports.ImageUrlInterfaceSchema = void 0;
exports.ImageUrlInterfaceSchema = {
    url: { type: 'string', required: true },
    detail: { type: 'string', required: false }
};
exports.ContentItemInterfaceSchema = {
    type: { type: 'enum', required: true, enumValues: ['text', 'image'] },
    text: { type: 'string', required: false },
    image_url: { type: 'object', required: false, objectSchema: exports.ImageUrlInterfaceSchema }
};
exports.ToolCallInterfaceSchema = {
    id: { type: 'string', required: true },
    name: { type: 'string', required: true },
    args: { type: 'string', required: true }
};
exports.FunctionChoiceInterfaceSchema = {
    type: { type: 'string', required: false },
    name: { type: 'string', required: true }
};
exports.ToolChoiceInterfaceSchema = {
    choice: {
        type: 'union',
        required: true,
        unionSchemas: [
            { type: 'string', required: true },
            { type: 'object', required: true, objectSchema: exports.FunctionChoiceInterfaceSchema }
        ]
    }
};
exports.ToolInterfaceSchema = {
    name: { type: 'string', required: true },
    description: { type: 'string', required: true },
    properties: {
        type: 'object',
        required: true,
        validator: (value) => typeof value === 'object' && value !== null
    }
};
exports.LLMMessageInterfaceSchema = {
    role: { type: 'string', required: true },
    content: {
        type: 'union',
        required: true,
        unionSchemas: [
            { type: 'string', required: true },
            { type: 'array', required: true, arrayItemSchema: { type: 'object', required: true, objectSchema: exports.ContentItemInterfaceSchema } }
        ]
    },
    toolCalls: { type: 'array', required: false, arrayItemSchema: { type: 'object', required: true, objectSchema: exports.ToolCallInterfaceSchema } },
    toolCallId: { type: 'string', required: false }
};
exports.LLMChatRequestInterfaceSchema = {
    messages: { type: 'array', required: true, arrayItemSchema: { type: 'object', required: true, objectSchema: exports.LLMMessageInterfaceSchema } },
    tools: { type: 'array', required: false, arrayItemSchema: { type: 'object', required: true, objectSchema: exports.ToolInterfaceSchema } },
    toolChoice: { type: 'object', required: false, objectSchema: exports.ToolChoiceInterfaceSchema },
    responseFormat: {
        type: 'string',
        required: false,
        validator: (value) => typeof value === 'string' && ['text', 'json', 'json_schema'].includes(value)
    }
};
exports.AudioChunkInterfaceSchema = {
    data: { type: 'object', required: true }, // Could be more specific about ArrayBuffer/Buffer types
    sampleRate: { type: 'number', required: true }
};
