"use strict";
/**
 * Examples demonstrating the schema-based type guard system
 */
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.demonstrateTypeGuards = demonstrateTypeGuards;
const type_guard_generator_1 = require("./type-guard-generator");
const llm_schemas_1 = require("./llm-schemas");
// Example 1: Creating individual type guards
const isLLMMessage = (0, type_guard_generator_1.createTypeGuard)(llm_schemas_1.LLMMessageInterfaceSchema);
const isLLMChatRequest = (0, type_guard_generator_1.createTypeGuard)(llm_schemas_1.LLMChatRequestInterfaceSchema);
// Example 2: Using class decorator for automatic type guard generation
let MyValidator = (() => {
    let _classDecorators = [(0, type_guard_generator_1.GenerateTypeGuards)({
            isMessage: llm_schemas_1.LLMMessageInterfaceSchema,
            isChatRequest: llm_schemas_1.LLMChatRequestInterfaceSchema,
        })];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var MyValidator = _classThis = class {
        // Type guard methods are automatically generated:
        // isMessage(input: any): input is LLMMessageInterface
        // isChatRequest(input: any): input is LLMChatRequestInterface
        validateInput(input) {
            if (this.isMessage(input)) {
                console.log('Valid LLM message:', input.role, input.content);
                return true;
            }
            if (this.isChatRequest(input)) {
                console.log('Valid chat request with', input.messages.length, 'messages');
                return true;
            }
            return false;
        }
    };
    __setFunctionName(_classThis, "MyValidator");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        MyValidator = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return MyValidator = _classThis;
})();
const MyCustomInterfaceSchema = {
    name: { type: 'string', required: true },
    age: { type: 'number', required: false },
    tags: { type: 'array', required: true, arrayItemSchema: { type: 'string', required: true } },
    metadata: {
        type: 'object',
        required: true,
        objectSchema: {
            created: { type: 'string', required: true },
            updated: { type: 'string', required: false }
        }
    }
};
const isMyCustomInterface = (0, type_guard_generator_1.createTypeGuard)(MyCustomInterfaceSchema);
// Example usage and testing
function demonstrateTypeGuards() {
    console.log('=== Type Guard Examples ===\n');
    // Test valid LLM message
    const validMessage = {
        role: 'user',
        content: 'Hello, world!'
    };
    console.log('Valid message test:', isLLMMessage(validMessage)); // true
    // Test invalid LLM message (extra property)
    const invalidMessage = {
        role: 'user',
        content: 'Hello, world!',
        extraProperty: 'not allowed'
    };
    console.log('Invalid message test (extra prop):', isLLMMessage(invalidMessage)); // false
    // Test valid chat request
    const validChatRequest = {
        messages: [
            { role: 'user', content: 'Hello' },
            { role: 'assistant', content: 'Hi there!' }
        ]
    };
    console.log('Valid chat request test:', isLLMChatRequest(validChatRequest)); // true
    // Test invalid chat request (invalid message)
    const invalidChatRequest = {
        messages: [
            { role: 'user', content: 'Hello', invalid: 'property' }
        ]
    };
    console.log('Invalid chat request test:', isLLMChatRequest(invalidChatRequest)); // false
    // Test custom interface
    const validCustom = {
        name: 'John Doe',
        age: 30,
        tags: ['developer', 'typescript'],
        metadata: {
            created: '2024-01-01',
            updated: '2024-01-02'
        }
    };
    console.log('Valid custom interface test:', isMyCustomInterface(validCustom)); // true
    // Test custom interface with missing required property
    const invalidCustom = {
        name: 'John Doe',
        tags: ['developer'],
        // missing metadata
    };
    console.log('Invalid custom interface test:', isMyCustomInterface(invalidCustom)); // false
}
// Benefits of this approach:
console.log(`
=== Benefits of Schema-Based Type Guards ===

1. **DRY Principle**: No repetitive type guard code
2. **Maintainability**: Update schema once, type guard updates automatically
3. **Consistency**: All type guards follow the same validation logic
4. **Extensibility**: Easy to add new interfaces and validations
5. **Type Safety**: Full TypeScript support with proper type predicates
6. **Performance**: Generated once, reused many times
7. **Testability**: Easy to test schemas independently

=== Comparison ===

Before (Manual):
- 200+ lines of repetitive type guard code
- Easy to introduce bugs or inconsistencies
- Hard to maintain as interfaces evolve

After (Schema-based):
- ~20 lines of schema definitions
- Consistent validation logic
- Automatic updates when schemas change
- Easy to add new interfaces
`);
