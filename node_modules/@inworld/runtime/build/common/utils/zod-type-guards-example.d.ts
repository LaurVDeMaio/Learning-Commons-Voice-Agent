/**
 * Alternative approach using Zod for runtime type validation
 * This is just an example - you would need to install zod first: npm install zod
 */
export declare const zodApproachInfo = "\n=== Zod Approach Pros & Cons ===\n\nPROS:\n\u2705 Very mature and well-tested library\n\u2705 Excellent TypeScript integration\n\u2705 Built-in type inference from schemas\n\u2705 Detailed error messages with paths\n\u2705 Supports complex validations (regex, custom validators, etc.)\n\u2705 Can parse/transform data during validation\n\u2705 Large ecosystem and community\n\nCONS:\n\u274C Additional dependency (~2.8MB)\n\u274C Learning curve for Zod-specific syntax\n\u274C Schemas can become verbose for complex types\n\u274C Need to maintain both TS interfaces and Zod schemas\n\u274C Runtime overhead (though minimal)\n\n=== When to Choose Each Approach ===\n\nChoose CUSTOM SCHEMA GENERATOR when:\n- You want minimal dependencies\n- You have specific validation requirements\n- You prefer full control over the validation logic\n- Performance is critical\n\nChoose ZOD when:\n- You want battle-tested validation\n- You need complex validation rules\n- You want detailed error reporting\n- You're building a new project and can adopt it from the start\n\n=== Our Implementation Benefits ===\n\nOur custom schema-based approach provides:\n1. Zero external dependencies\n2. Tailored to your exact needs\n3. Minimal runtime overhead\n4. Easy to extend and customize\n5. Perfect integration with existing codebase\n";
