import { VoiceInterface } from '../../voice/voice';
import { TTSRequestData, TTSRequestInterface } from '../external/tts_request_data';
export { TTSRequestInterface };
export declare class TTSRequest {
    readonly request: TTSRequestInterface;
    constructor(request: TTSRequestInterface);
    /**
     * Creates a TTSRequest from a TTSRequestData instance.
     *
     * @param data - The TTSRequestData instance
     * @returns A new TTSRequest instance
     */
    static from(data: TTSRequestData): TTSRequest;
    /**
     * Creates a TTSRequest with text content.
     *
     * @param text - The text content to synthesize
     * @param voice - Optional voice configuration
     * @returns A new TTSRequest instance
     */
    static withText(text: string, voice?: VoiceInterface): TTSRequest;
    /**
     * Creates a TTSRequest with stream content.
     *
     * @param stream - The stream content to synthesize
     * @param voice - Optional voice configuration
     * @returns A new TTSRequest instance
     */
    static withStream(stream: any, voice?: VoiceInterface): TTSRequest;
    /**
     * Checks if the request has text content.
     *
     * @returns True if the request contains text content
     */
    hasTextContent(): boolean;
    /**
     * Checks if the request has stream content.
     *
     * @returns True if the request contains stream content
     */
    hasStreamContent(): boolean;
    /**
     * Gets the text content if available.
     *
     * @returns The text content or undefined
     */
    getText(): string | undefined;
    /**
     * Gets the voice configuration if available.
     *
     * @returns The voice configuration or undefined
     */
    getVoice(): VoiceInterface | undefined;
}
