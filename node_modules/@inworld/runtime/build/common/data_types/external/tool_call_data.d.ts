import { ToolCallInterface } from '../../vector/messages';
import { ExternalReference } from '../common';
import { BaseData } from './base_data';
/**
 * Result of an executed tool call.
 *
 * Contains the tool call ID and the result string returned by the executed function.
 * This interface represents the outcome of a tool execution, typically used when
 * the inworld processes tool calls and returns their results.
 */
export interface ToolCallResultInterface {
    /** The unique identifier of the tool call that was executed. */
    toolCallId: string;
    /** The result string returned by the executed tool/function. */
    result: string;
}
/**
 * Class for managing a ToolCallData, which wraps a ToolCall object.
 */
export declare class ToolCallData extends BaseData {
    constructor(external: ExternalReference);
    /**
     * Creates a new ToolCallData instance from a ToolCallInterface.
     *
     * @param {ToolCallInterface} toolCallInterface - The tool call interface to wrap
     */
    static fromToolCallInterface(toolCallInterface: ToolCallInterface): ToolCallData;
    /**
     * Destroys the ToolCallData instance and frees associated resources.
     * This method should be called when the object is no longer needed to prevent memory leaks.
     */
    destroy(): void;
}
/**
 * Class for managing a collection of ToolCallData objects.
 *
 * This class provides functionality to manage multiple tool call data objects
 * as a single unit.
 */
export declare class ToolCallRequestData extends BaseData {
    constructor(external: ExternalReference);
    /**
     * Creates a new ToolCallRequestData instance from an array of ToolCallInterface objects.
     *
     * @param {ToolCallInterface[]} toolCalls - Array of tool call interfaces to wrap
     */
    static fromToolCallInterfaces(toolCalls: ToolCallInterface[]): ToolCallRequestData;
    /**
     * Destroys the ToolCallRequestData instance and frees associated resources.
     * This method should be called when the object is no longer needed to prevent memory leaks.
     */
    destroy(): void;
}
/**
 * Class for managing a single tool call result.
 *
 * This class represents the result of executing a tool call, containing the tool call ID
 * and the result string. It extends BaseData to provide consistent lifecycle management
 * and external reference handling.
 *
 * @example
 * ```typescript
 * const toolCallResult = new ToolCallResult('call_123', '{"temperature": 72}');
 * const result = toolCallResult.getToolCallResult();
 * console.log(result.toolCallId); // 'call_123'
 * console.log(result.result); // '{"temperature": 72}'
 * toolCallResult.destroy(); // Clean up when done
 * ```
 */
export declare class ToolCallResult extends BaseData {
    constructor(external: ExternalReference);
    static fromToolCallResultInterface(toolCallResult: ToolCallResultInterface): ToolCallResult;
    /**
     * @internal
     * Creates a new ToolCallResult instance from an external reference.
     *
     * This method is used internally by the runtime to create ToolCallResult instances
     * from external data sources.
     *
     * @param {ExternalReference} external - External reference to the tool call result data
     * @returns {ToolCallResult} A new ToolCallResult instance
     */
    static fromExternal(external: ExternalReference): ToolCallResult;
    /**
     * Checks if the ToolCallResult instance is valid.
     *
     * @returns {boolean} True if the instance is valid, false otherwise
     */
    isValid(): any;
    /**
     * Gets the tool call result as a ToolCallResultInterface.
     *
     * @returns {ToolCallResultInterface} Object containing the tool call ID and result string
     */
    getToolCallResult(): ToolCallResultInterface;
    /**
     * Destroys the ToolCallResult instance and frees associated resources.
     * This method should be called when the object is no longer needed to prevent memory leaks.
     */
    onDestroy(): void;
}
/**
 * Class for managing a collection of tool call results.
 *
 * This class provides functionality to manage multiple tool call results as a single unit.
 * It can be constructed from either an array of ToolCallResultInterface objects or an
 * external reference. It extends BaseData to provide consistent lifecycle management
 * and external reference handling.
 *
 * @example
 * ```typescript
 * // Create from array of results
 * const results: ToolCallResultInterface[] = [
 *   { toolCallId: 'call_1', result: '{"weather": "sunny"}' },
 *   { toolCallId: 'call_2', result: '{"time": "14:30"}' }
 * ];
 * const listResults = new ToolCallResponseData(results);
 *
 * // Get all results
 * const allResults = listResults.getToolCallResponse();
 * console.log(allResults.length); // 2
 *
 * // Clean up
 * listResults.destroy();
 * ```
 */
export declare class ToolCallResponseData extends BaseData {
    /**
     * Creates a new ToolCallResponseData instance.
     *
     * @param {ExternalReference} external - External reference to the list tool calls results data
     */
    constructor(external: ExternalReference);
    static fromToolCallResultInterfaces(toolCallResults: ToolCallResultInterface[]): ToolCallResponseData;
    /**
     * @internal
     * Creates a new ToolCallResponseData instance from an external reference.
     *
     * This method is used internally by the runtime to create ToolCallResponseData instances
     * from external data sources. It validates the external reference before creating the instance.
     *
     * @param {ExternalReference} external - External reference to the list tool calls results data
     * @returns {ToolCallResponseData | null} A new ToolCallResponseData instance if valid, null otherwise
     */
    static fromExternal(external: ExternalReference): ToolCallResponseData;
    /**
     * Gets all tool call results as an array of ToolCallResultInterface objects.
     *
     * This method returns the tool call results either from the cached internal array
     * or by extracting them from the external reference if the cache is not available.
     *
     * @returns {ToolCallResultInterface[]} Array of tool call result interfaces
     */
    getToolCallResponse(): ToolCallResultInterface[];
    /**
     * Checks if the ToolCallResponseData instance is valid.
     *
     * @returns {boolean} True if the instance is valid, false otherwise
     */
    isValid(): any;
    /**
     * Destroys the ToolCallResponseData instance and frees associated resources.
     *
     * This method cleans up all internal ToolCallResult instances and then calls
     * the parent destroy method. It should be called when the object is no longer
     * needed to prevent memory leaks.
     */
    destroy(): void;
}
