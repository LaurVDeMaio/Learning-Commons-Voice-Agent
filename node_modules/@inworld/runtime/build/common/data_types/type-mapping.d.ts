import { SpeechChunkStream, TextStream, TransformationStreamTextToText, TTSOutputStream } from '../../common/stream';
import { ContentInterface, LLMMessageInterface, ToolCallInterface, ToolInterface } from '../../common/vector/messages';
import { ContentToStringStream } from '../../core/content_to_string_stream';
import { ContentStream } from '../stream/content';
import { AudioChunkInterface } from './common';
import { ClassificationResultData } from './external/classification_result_data';
import { GoalAdvancementData } from './external/goal_advancement_data';
import { ListToolsInterface } from './external/list_tools_data';
import { LLMChatRequestInterface } from './external/llm_chat_request_data';
import { MatchedIntentsData } from './external/matched_intents_data';
import { MatchedKeywordsData } from './external/matched_keywords_data';
import { MemoryStateData } from './external/memory_state_data';
import { ToolCallResultInterface } from './external/tool_call_data';
/**
 * Enum representing the types of data that can be processed in the graph.
 */
export declare enum CustomInputDataType {
    CUSTOM = "CUSTOM",// temporary until we rework it entirely
    CLASSIFICATION_RESULT = "CLASSIFICATION_RESULT",
    GOAL_ADVANCEMENT = "GOAL_ADVANCEMENT",
    KNOWLEDGE_RECORDS = "KNOWLEDGE_RECORDS",
    MEMORY_STATE = "MEMORY_STATE",
    MATCHED_INTENTS = "MATCHED_INTENTS",
    MATCHED_KEYWORDS = "MATCHED_KEYWORDS",
    TEXT = "TEXT",
    TEXT_STREAM = "TEXT_STREAM",
    TTS_STREAM = "TTS_STREAM",
    CHAT_REQUEST = "CHAT_REQUEST",
    CONTENT = "CONTENT",
    CONTENT_STREAM = "CONTENT_STREAM",
    LIST_TOOLS = "LIST_TOOLS",
    TOOL_CALLS_RESULTS = "TOOL_CALLS_RESULTS"
}
/**
 * Enum representing the types of data that can be output from the graph.
 */
export declare enum CustomOutputDataType {
    CUSTOM = "CUSTOM",// temporary until we rework it entirely
    TEXT = "TEXT",
    TTS = "TTS",
    CHAT_REQUEST = "CHAT_REQUEST",
    TEXT_STREAM = "TEXT_STREAM",
    SPEECH_CHUNK_STREAM = "SPEECH_CHUNK_STREAM",
    TTS_STREAM = "TTS_STREAM",
    LIST_TOOLS = "LIST_TOOLS",
    TOOL_CALLS_RESULTS = "TOOL_CALLS_RESULTS",
    TOOL_CALLS = "TOOL_CALLS"
}
/**
 * Maps CustomInputDataType enum values to their corresponding TypeScript types.
 * @internal
 */
export type InputTypeMapping = {
    [CustomInputDataType.TEXT]: string;
    [CustomInputDataType.CUSTOM]: any;
    [CustomInputDataType.TEXT_STREAM]: TextStream;
    [CustomInputDataType.TTS_STREAM]: TTSOutputStream;
    [CustomInputDataType.KNOWLEDGE_RECORDS]: string[];
    [CustomInputDataType.MATCHED_INTENTS]: MatchedIntentsData;
    [CustomInputDataType.MATCHED_KEYWORDS]: MatchedKeywordsData;
    [CustomInputDataType.GOAL_ADVANCEMENT]: GoalAdvancementData;
    [CustomInputDataType.CLASSIFICATION_RESULT]: ClassificationResultData;
    [CustomInputDataType.MEMORY_STATE]: MemoryStateData;
    [CustomInputDataType.CHAT_REQUEST]: LLMChatRequestInterface;
    [CustomInputDataType.CONTENT]: ContentInterface;
    [CustomInputDataType.CONTENT_STREAM]: ContentStream;
    [CustomInputDataType.LIST_TOOLS]: ListToolsInterface;
    [CustomInputDataType.TOOL_CALLS_RESULTS]: ToolCallResultInterface[];
};
/**
 * Maps CustomOutputDataType enum values to their corresponding TypeScript types.
 * @internal
 */
export type OutputTypeMapping = {
    [CustomOutputDataType.CUSTOM]: any;
    [CustomOutputDataType.TEXT]: string;
    [CustomOutputDataType.TTS]: AudioChunkInterface;
    [CustomOutputDataType.CHAT_REQUEST]: LLMMessageInterface[] | LLMChatRequestInterface;
    [CustomOutputDataType.TEXT_STREAM]: TextStream | ContentToStringStream | TransformationStreamTextToText;
    [CustomOutputDataType.SPEECH_CHUNK_STREAM]: SpeechChunkStream;
    [CustomOutputDataType.TTS_STREAM]: TTSOutputStream;
    [CustomOutputDataType.LIST_TOOLS]: ToolInterface[];
    [CustomOutputDataType.TOOL_CALLS_RESULTS]: ToolCallResultInterface;
    [CustomOutputDataType.TOOL_CALLS]: ToolCallInterface[];
};
/**
 * Extracts the TypeScript type from a CustomInputDataType enum value.
 */
export type InferInputType<T extends CustomInputDataType> = InputTypeMapping[T];
/**
 * Extracts the TypeScript type from a CustomOutputDataType enum value.
 */
export type InferOutputType<T extends CustomOutputDataType> = OutputTypeMapping[T];
/**
 * Maps a single CustomInputDataType or array of CustomInputDataType to their corresponding TypeScript types.
 */
export type InferInputTypes<T> = T extends readonly CustomInputDataType[] ? {
    readonly [K in keyof T]: T[K] extends CustomInputDataType ? InputTypeMapping[T[K]] : never;
} : T extends CustomInputDataType ? InputTypeMapping[T] : T;
/**
 * Maps a CustomOutputDataType to its corresponding TypeScript type.
 */
export type InferOutputTypes<T> = T extends CustomOutputDataType ? InferOutputType<T> : T;
/**
 * Type helper to extract the actual input type from a CustomNode configuration
 */
export type ExtractInputType<T> = T extends CustomInputDataType ? InferInputTypes<T> : T extends CustomInputDataType[] ? InferInputTypes<T> : T;
/**
 * Type helper to extract the actual output type from a CustomNode configuration
 */
export type ExtractOutputType<T> = T extends CustomOutputDataType ? InferOutputTypes<T> : T;
/**
 * Represents a custom input type with a specific TypeScript type.
 * @template T - The custom TypeScript type for this input
 */
export interface CustomInputDataTypeTyped<T = any> {
    readonly __type: CustomInputDataType.CUSTOM;
    readonly __customType: T;
}
/**
 * Represents a custom output type with a specific TypeScript type.
 * @template T - The custom TypeScript type for this output
 */
export interface CustomOutputDataTypeTyped<T = any> {
    readonly __type: CustomOutputDataType.CUSTOM;
    readonly __customType: T;
}
/**
 * Union type that represents either a standard CustomInputDataType or a custom typed input.
 */
export type InputTypeSpec = CustomInputDataType | CustomInputDataTypeTyped<any>;
/**
 * Union type that represents either a standard CustomOutputDataType or a custom typed output.
 */
export type OutputTypeSpec = CustomOutputDataType | CustomOutputDataTypeTyped<any>;
/**
 * Type helper to extract the TypeScript type from an InputTypeSpec.
 */
export type ExtractInputTypeFromSpec<T> = T extends CustomInputDataTypeTyped<infer U> ? U : T extends CustomInputDataType ? InferInputType<T> : never;
/**
 * Type helper to extract the TypeScript type from an OutputTypeSpec.
 */
export type ExtractOutputTypeFromSpec<T> = T extends CustomOutputDataTypeTyped<infer U> ? U : T extends CustomOutputDataType ? InferOutputType<T> : never;
/**
 * Maps an array of InputTypeSpec to their corresponding TypeScript types.
 */
export type InferInputTypesFromSpecs<T extends readonly InputTypeSpec[]> = {
    readonly [K in keyof T]: ExtractInputTypeFromSpec<T[K]>;
};
/**
 * Helper function to convert InputTypeSpec array to CustomInputDataType array for runtime use.
 */
export declare function convertInputSpecsToTypes(inputSpecs: readonly InputTypeSpec[]): readonly CustomInputDataType[];
/**
 * Helper function to convert OutputTypeSpec to CustomOutputDataType for runtime use.
 */
export declare function convertOutputSpecToType(outputSpec: OutputTypeSpec): CustomOutputDataType;
/**
 * Helper function to create a typed custom input specification.
 * @template T - The custom TypeScript type for this input
 * @returns A CustomInput specification with the given type
 */
export declare function CustomInputDataTypeTyped<T = any>(): CustomInputDataTypeTyped<T>;
/**
 * Helper function to create a typed custom output specification.
 * @template T - The custom TypeScript type for this output
 * @returns A CustomOutput specification with the given type
 */
export declare function CustomOutputDataTypeTyped<T = any>(): CustomOutputDataTypeTyped<T>;
