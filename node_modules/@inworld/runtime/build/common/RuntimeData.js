"use strict";
/**
 * @ignore
 */
/**
 * @internal
 * Factory for creating data objects with proper _inworldTag values.
 * This factory ensures type safety and consistency Inworld Runtime implementation.
 *
 * Based on inworld-framework-cpp/bindings/nodejs/js_mappers.cc
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createListToolsResponseData = exports.createToolData = exports.createToolCallData = exports.createJson = exports.createError = exports.createKnowledgeRecords = exports.createSafetyResult = exports.createMemoryState = exports.createGoalAdvancement = exports.createClassificationResult = exports.createMatchedKeywords = exports.createMatchedIntents = exports.createTTSOutput = exports.createLLMCompletionResponse = exports.createLLMChatResponse = exports.createLLMChatRequest = exports.createAudio = exports.createText = exports.RuntimeData = void 0;
/**
 * Factory class for creating data objects with proper _inworldTag values.
 * Provides type-safe constructors for all supported data types.
 */
class RuntimeData {
    /**
     * Creates a Text data object
     * @param {string} text - Text content
     */
    static createText(text) {
        return {
            _inworldTag: 'Text',
            text,
        };
    }
    /**
     * Creates an Audio data object
     * @param {Float32Array} waveform - Audio waveform data
     * @param {number} sampleRate - Audio sample rate
     */
    static createAudio(waveform, sampleRate) {
        return {
            _inworldTag: 'Audio',
            waveform,
            sampleRate,
        };
    }
    /**
     * Creates an LLM Chat Request data object
     * @param {LLMChatRequestData['messages']} messages - Chat messages
     * @param {LLMChatRequestData['tools']} tools - Optional tools
     * @param {LLMChatRequestData['toolChoice']} toolChoice - Optional tool choice
     */
    static createLLMChatRequest(messages, tools, toolChoice) {
        return Object.assign(Object.assign({ _inworldTag: 'LLMChatRequest', messages }, (tools && { tools })), (toolChoice && { toolChoice }));
    }
    /**
     * Creates an LLM Chat Response data object
     * @param {string} content - Response content
     * @param {LLMChatResponseData['toolCalls']} toolCalls - Optional tool calls
     */
    static createLLMChatResponse(content, toolCalls) {
        return Object.assign({ _inworldTag: 'LLMChatResponse', content }, (toolCalls && { toolCalls }));
    }
    /**
     * Creates an LLM Completion Response data object
     * @param {string} text - Completion text
     */
    static createLLMCompletionResponse(text) {
        return {
            _inworldTag: 'LLMCompletionResponse',
            text,
        };
    }
    /**
     * Creates a TTS Output data object
     * @param {Float32Array} audio - Audio data
     * @param {number} sampleRate - Audio sample rate
     */
    static createTTSOutput(audio, sampleRate) {
        return {
            _inworldTag: 'TTSOutput',
            audio,
            sampleRate,
        };
    }
    /**
     * Creates a Matched Intents data object
     * @param {MatchedIntentsData['intentMatches']} intentMatches - Intent matches
     */
    static createMatchedIntents(intentMatches) {
        return {
            _inworldTag: 'MatchedIntents',
            intentMatches,
        };
    }
    /**
     * Creates a Matched Keywords data object
     * @param {MatchedKeywordsData['matchedKeywords']} matchedKeywords - Matched keywords
     */
    static createMatchedKeywords(matchedKeywords) {
        return {
            _inworldTag: 'MatchedKeywords',
            matchedKeywords,
        };
    }
    /**
     * Creates a Classification Result data object
     * @param {string[]} classes - Classification classes
     */
    static createClassificationResult(classes) {
        return {
            _inworldTag: 'ClassificationResult',
            classes,
        };
    }
    /**
     * Creates a Goal Advancement data object
     * @param {string[]} activatedGoals - Activated goals
     * @param {string[]} completedGoals - Completed goals
     * @param {string[]} currentGoals - Current goals
     * @param {object | string} beliefState - Belief state
     */
    static createGoalAdvancement(activatedGoals, completedGoals, currentGoals, beliefState) {
        return {
            _inworldTag: 'GoalAdvancement',
            activatedGoals,
            completedGoals,
            currentGoals,
            beliefState: typeof beliefState === 'string'
                ? beliefState
                : JSON.stringify(beliefState),
        };
    }
    /**
     * Creates a Memory State data object
     * @param {Record<string, any>} data - Memory state data
     */
    static createMemoryState(data) {
        return Object.assign({ _inworldTag: 'MemoryState' }, data);
    }
    /**
     * Creates a Safety Result data object
     * @param {string} text - Text content
     * @param {boolean} isSafe - Safety status
     */
    static createSafetyResult(text, isSafe) {
        return {
            _inworldTag: 'SafetyResult',
            text,
            isSafe,
        };
    }
    /**
     * Creates a Knowledge Records data object
     * @param {string[]} records - Knowledge records
     */
    static createKnowledgeRecords(records) {
        return {
            _inworldTag: 'KnowledgeRecords',
            records,
        };
    }
    /**
     * Creates an Error data object
     * @param {string} message - Error message
     * @param {number} code - Error code
     */
    static createError(message, code) {
        return {
            _inworldTag: 'Error',
            message,
            code,
        };
    }
    /**
     * Creates a JSON data object
     * @param {object | string} value - JSON value
     */
    static createJson(value) {
        return {
            _inworldTag: 'Json',
            value: typeof value === 'string' ? value : JSON.stringify(value),
        };
    }
    /**
     * Creates a Tool Call Data object
     * @param {string} id - Tool call ID
     * @param {string} name - Tool name
     * @param {string} args - Tool arguments
     */
    static createToolCallData(id, name, args) {
        return {
            _inworldTag: 'ToolCallData',
            toolCall: { id, name, args },
        };
    }
    /**
     * Creates a Tool Data object
     * @param {string} name - Tool name
     * @param {string} description - Tool description
     * @param {object | string} properties - Tool properties
     */
    static createToolData(name, description, properties) {
        return {
            _inworldTag: 'ToolData',
            tool: {
                name,
                description,
                properties: typeof properties === 'string'
                    ? properties
                    : JSON.stringify(properties),
            },
        };
    }
    /**
     * Creates a List Tools Data object
     * @param {Array<{name: string, description: string, properties: object | string}>} tools - Array of tools
     */
    static createListToolsResponseData(tools) {
        return {
            _inworldTag: 'ListToolsResponseData',
            tools: tools.map((tool) => ({
                name: tool.name,
                description: tool.description,
                properties: typeof tool.properties === 'string'
                    ? tool.properties
                    : JSON.stringify(tool.properties),
            })),
        };
    }
    /**
     * Checks if an object is valid tagged data
     * @param {any} obj - Object to check
     */
    static isValidTaggedData(obj) {
        return obj && typeof obj === 'object' && '_inworldTag' in obj;
    }
    /**
     * Gets the tag from runtime data
     * @param {RuntimeDataType} data - Runtime data
     */
    static getTag(data) {
        return data._inworldTag;
    }
    /**
     * Checks if data is Text type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isText(data) {
        return data._inworldTag === 'Text';
    }
    /**
     * Checks if data is Audio type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isAudio(data) {
        return data._inworldTag === 'Audio';
    }
    /**
     * Checks if data is LLM Chat Request type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isLLMChatRequest(data) {
        return data._inworldTag === 'LLMChatRequest';
    }
    /**
     * Checks if data is LLM Chat Response type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isLLMChatResponse(data) {
        return data._inworldTag === 'LLMChatResponse';
    }
    /**
     * Checks if data is LLM Completion Response type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isLLMCompletionResponse(data) {
        return data._inworldTag === 'LLMCompletionResponse';
    }
    /**
     * Checks if data is TTS Output type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isTTSOutput(data) {
        return data._inworldTag === 'TTSOutput';
    }
    /**
     * Checks if data is Matched Intents type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isMatchedIntents(data) {
        return data._inworldTag === 'MatchedIntents';
    }
    /**
     * Checks if data is Matched Keywords type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isMatchedKeywords(data) {
        return data._inworldTag === 'MatchedKeywords';
    }
    /**
     * Checks if data is Classification Result type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isClassificationResult(data) {
        return data._inworldTag === 'ClassificationResult';
    }
    /**
     * Checks if data is Goal Advancement type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isGoalAdvancement(data) {
        return data._inworldTag === 'GoalAdvancement';
    }
    /**
     * Checks if data is Memory State type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isMemoryState(data) {
        return data._inworldTag === 'MemoryState';
    }
    /**
     * Checks if data is Safety Result type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isSafetyResult(data) {
        return data._inworldTag === 'SafetyResult';
    }
    /**
     * Checks if data is Knowledge Records type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isKnowledgeRecords(data) {
        return data._inworldTag === 'KnowledgeRecords';
    }
    /**
     * Checks if data is Error type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isError(data) {
        return data._inworldTag === 'Error';
    }
    /**
     * Checks if data is JSON type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isJson(data) {
        return data._inworldTag === 'Json';
    }
    /**
     * Checks if data is Tool Call Data type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isToolCallData(data) {
        return data._inworldTag === 'ToolCallData';
    }
    /**
     * Checks if data is Tool Data type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isToolData(data) {
        return data._inworldTag === 'ToolData';
    }
    /**
     * Checks if data is List Tools Data type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isListToolsResponseData(data) {
        return data._inworldTag === 'ListToolsResponseData';
    }
}
exports.RuntimeData = RuntimeData;
exports.createText = RuntimeData.createText;
exports.createAudio = RuntimeData.createAudio;
exports.createLLMChatRequest = RuntimeData.createLLMChatRequest;
exports.createLLMChatResponse = RuntimeData.createLLMChatResponse;
exports.createLLMCompletionResponse = RuntimeData.createLLMCompletionResponse;
exports.createTTSOutput = RuntimeData.createTTSOutput;
exports.createMatchedIntents = RuntimeData.createMatchedIntents;
exports.createMatchedKeywords = RuntimeData.createMatchedKeywords;
exports.createClassificationResult = RuntimeData.createClassificationResult;
exports.createGoalAdvancement = RuntimeData.createGoalAdvancement;
exports.createMemoryState = RuntimeData.createMemoryState;
exports.createSafetyResult = RuntimeData.createSafetyResult;
exports.createKnowledgeRecords = RuntimeData.createKnowledgeRecords;
exports.createError = RuntimeData.createError;
exports.createJson = RuntimeData.createJson;
exports.createToolCallData = RuntimeData.createToolCallData;
exports.createToolData = RuntimeData.createToolData;
exports.createListToolsResponseData = RuntimeData.createListToolsResponseData;
