"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonData = void 0;
const expose_binary_1 = require("../../expose_binary");
const inworld_1 = require("../error/inworld");
const helpers_1 = require("../helpers");
const BaseData_1 = require("./BaseData");
/**
 * JSON data for graph processing.
 *
 * Handles JSON objects and strings with validation and parsing capabilities.
 */
class JsonData extends BaseData_1.BaseData {
    /**
     * @internal
     * Creates a new JsonData instance.
     *
     * @param {any} [data={}] - JavaScript object or JSON string (defaults to empty object)
     */
    constructor(data = {}) {
        const jsonString = typeof data === 'string' ? data : JSON.stringify(data);
        const statusOrJson = expose_binary_1.JsonDataFunctions.fromString(jsonString);
        if (!expose_binary_1.StatusOrJsonFunctions.isOK(statusOrJson)) {
            const status = expose_binary_1.StatusOrJsonFunctions.getStatus(statusOrJson);
            const error = new inworld_1.InworldError(`Failed to create JsonData: ${(0, helpers_1.getStatus)(status)}`);
            expose_binary_1.StatusOrJsonFunctions.delete(statusOrJson);
            throw error;
        }
        const jsonValue = expose_binary_1.StatusOrJsonFunctions.getValue(statusOrJson);
        super(jsonValue);
        expose_binary_1.StatusOrJsonFunctions.delete(statusOrJson);
    }
    /**
     * Retrieves the JSON data as a JavaScript object.
     *
     * @returns {any} Parsed JavaScript object
     */
    getData() {
        try {
            const jsonString = expose_binary_1.JsonDataFunctions.toString(this.external);
            return JSON.parse(jsonString);
        }
        catch (error) {
            throw new inworld_1.InworldError(`Failed to parse JSON data: ${error}`);
        }
    }
    /**
     * Retrieves the JSON data as a string.
     *
     * @returns {string} JSON string
     */
    getJsonString() {
        return expose_binary_1.JsonDataFunctions.toString(this.external);
    }
    /**
     * Retrieves the value as a string (for primitive JSON values).
     *
     * @returns {string} String representation of the JSON value
     */
    getValueAsString() {
        return expose_binary_1.JsonDataFunctions.valueAsString(this.external);
    }
    /**
     * Checks if the JSON data is valid.
     *
     * @returns {boolean} True if valid, false otherwise
     */
    isValid() {
        return expose_binary_1.JsonDataFunctions.isValid(this.external);
    }
    /**
     * @internal
     * Creates a JsonData instance from an external reference.
     *
     * @param {ExternalReference} external - External reference to JSON data
     * @returns {JsonData} New JsonData instance wrapping the external reference
     */
    static fromExternal(external) {
        const jsonData = Object.create(this.prototype);
        jsonData.external = external;
        return jsonData;
    }
    /**
     * Cleans up resources associated with this JSON data.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.JsonDataFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.JsonData = JsonData;
