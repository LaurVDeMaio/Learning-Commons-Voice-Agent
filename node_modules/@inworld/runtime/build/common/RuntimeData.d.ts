/**
 * @ignore
 */
/**
 * @internal
 * Factory for creating data objects with proper _inworldTag values.
 * This factory ensures type safety and consistency Inworld Runtime implementation.
 *
 * Based on inworld-framework-cpp/bindings/nodejs/js_mappers.cc
 */
export interface TaggedData {
    _inworldTag: string;
    [key: string]: any;
}
export interface TextData extends TaggedData {
    _inworldTag: 'Text';
    text: string;
}
export interface AudioData extends TaggedData {
    _inworldTag: 'Audio';
    waveform: Float32Array;
    sampleRate: number;
}
export interface LLMChatRequestData extends TaggedData {
    _inworldTag: 'LLMChatRequest';
    messages: Array<{
        role: string;
        content: string | Array<{
            type: 'text' | 'image';
            text?: string;
            url?: string;
            detail?: string;
        }>;
        toolCalls?: Array<{
            id: string;
            name: string;
            args: string;
        }>;
        toolCallId?: string;
    }>;
    tools?: Array<{
        name: string;
        description: string;
        properties: string;
    }>;
    toolChoice?: {
        type: string;
        value?: string;
        function?: {
            type: string;
            name: string;
        };
    };
}
export interface LLMChatResponseData extends TaggedData {
    _inworldTag: 'LLMChatResponse';
    content: string;
    toolCalls?: Array<{
        id: string;
        name: string;
        args: string;
    }>;
}
export interface LLMCompletionResponseData extends TaggedData {
    _inworldTag: 'LLMCompletionResponse';
    text: string;
}
export interface TTSOutputData extends TaggedData {
    _inworldTag: 'TTSOutput';
    audio: Float32Array;
    sampleRate: number;
}
export interface MatchedIntentsData extends TaggedData {
    _inworldTag: 'MatchedIntents';
    intentMatches: Array<{
        intent_name: string;
        score: number;
    }>;
}
export interface MatchedKeywordsData extends TaggedData {
    _inworldTag: 'MatchedKeywords';
    matchedKeywords: Array<{
        keyword: string;
        group: string;
    }>;
}
export interface ClassificationResultData extends TaggedData {
    _inworldTag: 'ClassificationResult';
    classes: string[];
}
export interface GoalAdvancementData extends TaggedData {
    _inworldTag: 'GoalAdvancement';
    activatedGoals: string[];
    completedGoals: string[];
    currentGoals: string[];
    beliefState: string;
}
export interface MemoryStateData extends TaggedData {
    _inworldTag: 'MemoryState';
    [key: string]: any;
}
export interface SafetyResultData extends TaggedData {
    _inworldTag: 'SafetyResult';
    text: string;
    isSafe: boolean;
}
export interface KnowledgeRecordsData extends TaggedData {
    _inworldTag: 'KnowledgeRecords';
    records: string[];
}
export interface ErrorData extends TaggedData {
    _inworldTag: 'Error';
    message: string;
    code: number;
}
export interface JsonData extends TaggedData {
    _inworldTag: 'Json';
    value: string;
}
export interface ToolCallDataData extends TaggedData {
    _inworldTag: 'ToolCallData';
    toolCall: {
        id: string;
        name: string;
        args: string;
    };
}
export interface ToolDataData extends TaggedData {
    _inworldTag: 'ToolData';
    tool: {
        name: string;
        description: string;
        properties: string;
    };
}
export interface ListToolsResponseData extends TaggedData {
    _inworldTag: 'ListToolsResponseData';
    tools: Array<{
        name: string;
        description: string;
        properties: string;
    }>;
}
export type RuntimeDataType = TextData | AudioData | LLMChatRequestData | LLMChatResponseData | LLMCompletionResponseData | TTSOutputData | MatchedIntentsData | MatchedKeywordsData | ClassificationResultData | GoalAdvancementData | MemoryStateData | SafetyResultData | KnowledgeRecordsData | ErrorData | JsonData | ToolCallDataData | ToolDataData | ListToolsResponseData;
/**
 * Factory class for creating data objects with proper _inworldTag values.
 * Provides type-safe constructors for all supported data types.
 */
export declare class RuntimeData {
    /**
     * Creates a Text data object
     * @param {string} text - Text content
     */
    static createText(text: string): TextData;
    /**
     * Creates an Audio data object
     * @param {Float32Array} waveform - Audio waveform data
     * @param {number} sampleRate - Audio sample rate
     */
    static createAudio(waveform: Float32Array, sampleRate: number): AudioData;
    /**
     * Creates an LLM Chat Request data object
     * @param {LLMChatRequestData['messages']} messages - Chat messages
     * @param {LLMChatRequestData['tools']} tools - Optional tools
     * @param {LLMChatRequestData['toolChoice']} toolChoice - Optional tool choice
     */
    static createLLMChatRequest(messages: LLMChatRequestData['messages'], tools?: LLMChatRequestData['tools'], toolChoice?: LLMChatRequestData['toolChoice']): LLMChatRequestData;
    /**
     * Creates an LLM Chat Response data object
     * @param {string} content - Response content
     * @param {LLMChatResponseData['toolCalls']} toolCalls - Optional tool calls
     */
    static createLLMChatResponse(content: string, toolCalls?: LLMChatResponseData['toolCalls']): LLMChatResponseData;
    /**
     * Creates an LLM Completion Response data object
     * @param {string} text - Completion text
     */
    static createLLMCompletionResponse(text: string): LLMCompletionResponseData;
    /**
     * Creates a TTS Output data object
     * @param {Float32Array} audio - Audio data
     * @param {number} sampleRate - Audio sample rate
     */
    static createTTSOutput(audio: Float32Array, sampleRate: number): TTSOutputData;
    /**
     * Creates a Matched Intents data object
     * @param {MatchedIntentsData['intentMatches']} intentMatches - Intent matches
     */
    static createMatchedIntents(intentMatches: MatchedIntentsData['intentMatches']): MatchedIntentsData;
    /**
     * Creates a Matched Keywords data object
     * @param {MatchedKeywordsData['matchedKeywords']} matchedKeywords - Matched keywords
     */
    static createMatchedKeywords(matchedKeywords: MatchedKeywordsData['matchedKeywords']): MatchedKeywordsData;
    /**
     * Creates a Classification Result data object
     * @param {string[]} classes - Classification classes
     */
    static createClassificationResult(classes: string[]): ClassificationResultData;
    /**
     * Creates a Goal Advancement data object
     * @param {string[]} activatedGoals - Activated goals
     * @param {string[]} completedGoals - Completed goals
     * @param {string[]} currentGoals - Current goals
     * @param {object | string} beliefState - Belief state
     */
    static createGoalAdvancement(activatedGoals: string[], completedGoals: string[], currentGoals: string[], beliefState: object | string): GoalAdvancementData;
    /**
     * Creates a Memory State data object
     * @param {Record<string, any>} data - Memory state data
     */
    static createMemoryState(data: Record<string, any>): MemoryStateData;
    /**
     * Creates a Safety Result data object
     * @param {string} text - Text content
     * @param {boolean} isSafe - Safety status
     */
    static createSafetyResult(text: string, isSafe: boolean): SafetyResultData;
    /**
     * Creates a Knowledge Records data object
     * @param {string[]} records - Knowledge records
     */
    static createKnowledgeRecords(records: string[]): KnowledgeRecordsData;
    /**
     * Creates an Error data object
     * @param {string} message - Error message
     * @param {number} code - Error code
     */
    static createError(message: string, code: number): ErrorData;
    /**
     * Creates a JSON data object
     * @param {object | string} value - JSON value
     */
    static createJson(value: object | string): JsonData;
    /**
     * Creates a Tool Call Data object
     * @param {string} id - Tool call ID
     * @param {string} name - Tool name
     * @param {string} args - Tool arguments
     */
    static createToolCallData(id: string, name: string, args: string): ToolCallDataData;
    /**
     * Creates a Tool Data object
     * @param {string} name - Tool name
     * @param {string} description - Tool description
     * @param {object | string} properties - Tool properties
     */
    static createToolData(name: string, description: string, properties: object | string): ToolDataData;
    /**
     * Creates a List Tools Data object
     * @param {Array<{name: string, description: string, properties: object | string}>} tools - Array of tools
     */
    static createListToolsResponseData(tools: Array<{
        name: string;
        description: string;
        properties: object | string;
    }>): ListToolsResponseData;
    /**
     * Checks if an object is valid tagged data
     * @param {any} obj - Object to check
     */
    static isValidTaggedData(obj: any): obj is RuntimeDataType;
    /**
     * Gets the tag from runtime data
     * @param {RuntimeDataType} data - Runtime data
     */
    static getTag(data: RuntimeDataType): string;
    /**
     * Checks if data is Text type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isText(data: RuntimeDataType): data is TextData;
    /**
     * Checks if data is Audio type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isAudio(data: RuntimeDataType): data is AudioData;
    /**
     * Checks if data is LLM Chat Request type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isLLMChatRequest(data: RuntimeDataType): data is LLMChatRequestData;
    /**
     * Checks if data is LLM Chat Response type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isLLMChatResponse(data: RuntimeDataType): data is LLMChatResponseData;
    /**
     * Checks if data is LLM Completion Response type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isLLMCompletionResponse(data: RuntimeDataType): data is LLMCompletionResponseData;
    /**
     * Checks if data is TTS Output type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isTTSOutput(data: RuntimeDataType): data is TTSOutputData;
    /**
     * Checks if data is Matched Intents type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isMatchedIntents(data: RuntimeDataType): data is MatchedIntentsData;
    /**
     * Checks if data is Matched Keywords type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isMatchedKeywords(data: RuntimeDataType): data is MatchedKeywordsData;
    /**
     * Checks if data is Classification Result type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isClassificationResult(data: RuntimeDataType): data is ClassificationResultData;
    /**
     * Checks if data is Goal Advancement type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isGoalAdvancement(data: RuntimeDataType): data is GoalAdvancementData;
    /**
     * Checks if data is Memory State type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isMemoryState(data: RuntimeDataType): data is MemoryStateData;
    /**
     * Checks if data is Safety Result type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isSafetyResult(data: RuntimeDataType): data is SafetyResultData;
    /**
     * Checks if data is Knowledge Records type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isKnowledgeRecords(data: RuntimeDataType): data is KnowledgeRecordsData;
    /**
     * Checks if data is Error type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isError(data: RuntimeDataType): data is ErrorData;
    /**
     * Checks if data is JSON type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isJson(data: RuntimeDataType): data is JsonData;
    /**
     * Checks if data is Tool Call Data type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isToolCallData(data: RuntimeDataType): data is ToolCallDataData;
    /**
     * Checks if data is Tool Data type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isToolData(data: RuntimeDataType): data is ToolDataData;
    /**
     * Checks if data is List Tools Data type
     * @param {RuntimeDataType} data - Runtime data
     */
    static isListToolsResponseData(data: RuntimeDataType): data is ListToolsResponseData;
}
export declare const createText: typeof RuntimeData.createText;
export declare const createAudio: typeof RuntimeData.createAudio;
export declare const createLLMChatRequest: typeof RuntimeData.createLLMChatRequest;
export declare const createLLMChatResponse: typeof RuntimeData.createLLMChatResponse;
export declare const createLLMCompletionResponse: typeof RuntimeData.createLLMCompletionResponse;
export declare const createTTSOutput: typeof RuntimeData.createTTSOutput;
export declare const createMatchedIntents: typeof RuntimeData.createMatchedIntents;
export declare const createMatchedKeywords: typeof RuntimeData.createMatchedKeywords;
export declare const createClassificationResult: typeof RuntimeData.createClassificationResult;
export declare const createGoalAdvancement: typeof RuntimeData.createGoalAdvancement;
export declare const createMemoryState: typeof RuntimeData.createMemoryState;
export declare const createSafetyResult: typeof RuntimeData.createSafetyResult;
export declare const createKnowledgeRecords: typeof RuntimeData.createKnowledgeRecords;
export declare const createError: typeof RuntimeData.createError;
export declare const createJson: typeof RuntimeData.createJson;
export declare const createToolCallData: typeof RuntimeData.createToolCallData;
export declare const createToolData: typeof RuntimeData.createToolData;
export declare const createListToolsResponseData: typeof RuntimeData.createListToolsResponseData;
