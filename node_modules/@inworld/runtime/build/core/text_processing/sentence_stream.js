"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SentenceStream = void 0;
const common_1 = require("../../common");
const helpers_1 = require("../../common/helpers");
const stream_1 = require("../../common/stream");
const expose_binary_1 = require("../../expose_binary");
/**
 * Class for processing text stream into sentences.
 * Provides functionality to stream text data sentence by sentence.
 */
class SentenceStream {
    /**
     * Creates a new SentenceStream instance.
     *
     * @param {ExternalReference} sentenceStream - External reference to the native sentence stream implementation
     */
    constructor(sentenceStream) {
        this.external = sentenceStream;
    }
    /**
     * Creates a new SentenceStream from an input stream.
     *
     * @param {ExternalReference} inputStream - External reference to the input stream
     * @returns {Promise<SentenceStream>} Promise resolving to a new SentenceStream instance
     * @throws InworldError if sentence stream creation fails
     */
    static async create(inputStream) {
        let sentenceStreamInstance;
        let statusOrSentenceStream;
        try {
            statusOrSentenceStream =
                await expose_binary_1.SentenceStreamFunctions.create(inputStream);
            if (!expose_binary_1.StatusOrSentenceStreamFunctions.isOK(statusOrSentenceStream)) {
                throw new common_1.InworldError('Failed to create sentence stream', (0, helpers_1.getStatus)(statusOrSentenceStream));
            }
            const sentenceStream = expose_binary_1.StatusOrSentenceStreamFunctions.getValue(statusOrSentenceStream);
            sentenceStreamInstance = new SentenceStream(sentenceStream);
        }
        finally {
            expose_binary_1.StatusOrSentenceStreamFunctions.delete(statusOrSentenceStream);
        }
        return sentenceStreamInstance;
    }
    /**
     * Returns the external reference to the native sentence stream implementation.
     *
     * @returns External reference object
     */
    get() {
        const stringStream = new stream_1.TextStream(this.external);
        return stringStream.getStream();
    }
    /**
     * Asynchronously reads the next sentence from the stream.
     *
     * @returns Promise resolving to a result object with text content or done flag
     * @throws InworldError if reading from the stream fails
     */
    async next() {
        const stringStream = new stream_1.TextStream(this.external);
        return stringStream.next();
    }
    /**
     * Cleans up resources associated with this sentence stream.
     */
    destroy() {
        if (this.external) {
            expose_binary_1.SentenceStreamFunctions.delete(this.external);
            this.external = null;
        }
    }
}
exports.SentenceStream = SentenceStream;
