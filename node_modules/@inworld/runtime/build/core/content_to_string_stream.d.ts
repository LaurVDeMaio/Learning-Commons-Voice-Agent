import { ExternalReference } from '../common/data_types/common';
/**
 * Class for handling string-based streams.
 * Provides functionality to read text data and tool calls from native stream implementations.
 * @internal
 */
export declare class ContentToStringStream {
    private stream;
    private onDestroy?;
    /**
     * Creates a new ContentStream instance.
     *
     * @param {ExternalReference} stream - External reference to the native stream implementation
     * @param {Function} onDestroy - Optional callback to execute when stream is consumed
     */
    constructor(stream: ExternalReference, onDestroy?: () => void);
    /**
     * Returns the external reference to the native stream implementation.
     *
     * @returns External reference object
     */
    getStream(): any;
    /**
     * Asynchronously reads the next item from the stream.
     *
     * @returns Promise resolving to a result object with text content and tool calls or done flag
     * @throws InworldError if reading from the stream fails
     */
    next(): Promise<any>;
    /**
     * Creates a new ContentStream instance from an external reference.
     *
     * @param {ExternalReference} external - External reference to the native stream implementation
     * @returns {ContentToStringStream} A new ContentStream instance
     * @internal
     */
    static fromExternal(external: ExternalReference): ContentToStringStream;
}
