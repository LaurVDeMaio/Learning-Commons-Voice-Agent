"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorTopicThresholdFunctions = exports.VectorKnowledgeRecordFunctions = exports.KnowledgeRecordFunctions = exports.RemoteTTSConfigFunctions = exports.TTSInterfaceStatusFunctions = exports.TTSFactoryFunctions = exports.SpeechChunkInputStreamFunctions = exports.SpeechChunkStatusFunctions = exports.PhonemeTimestampVectorFunctions = exports.PhonemeTimestampFunctions = exports.SpeechChunkFunctions = exports.TextFunctions = exports.MemoryStateFunctions = exports.GoalAdvancementFunctions = exports.ClassificationResultFunctions = exports.MatchedKeywordsFunctions = exports.MatchedIntentsFunctions = exports.OptionalVoiceFunctions = exports.VoiceFunctions = exports.SpeechSynthesisConfigFunctions = exports.InworldSpeechSynthesisConfigFunctions = exports.SpeechSynthesisPostprocessingConfigFunctions = exports.SpeechSynthesisInferenceConfigFunctions = exports.TTSRequestFunctions = exports.TTSInterfaceFunctions = exports.BatchEmbeddingsStatusFunctions = exports.EmbeddingsStatusFunctions = exports.VectorVectorFloatFunctions = exports.VectorFloatFunctions = exports.VectorStringFunctions = exports.OptionalTextEmbedderInterfaceFunctions = exports.TextEmbedderInterfaceFunctions = exports.TextEmbedderCreationConfigFunctions = exports.RemoteTextEmbedderConfigFunctions = exports.LocalTextEmbedderConfigFunctions = exports.TextEmbedderFactoryFunctions = exports.StatusFunctions = exports.InworldStringFunctions = exports.ContentStreamFunctions = exports.InputStreamFunctions = exports.MapStringStringFunctions = exports.VectorMapStringStringFunctions = exports.LLMJinjaInterfaceFunctions = exports.LLMInterfaceFunctions = exports.TextConfigFunctions = exports.DeviceFunctions = exports.LocalLLMConfigFunctions = exports.RemoteLLMConfigFunctions = exports.LLMFactoryFunctions = exports.ConfigParserFunctions = void 0;
exports.IntentMatcherCreationConfigFunctions = exports.IntentMatcherConfigFunctions = exports.CompiledIntentFunctions = exports.VectorCompiledIntentFunctions = exports.StatusOrVectorCompiledIntentFunctions = exports.IntentFunctions = exports.VectorIntentFunctions = exports.StatusOrIntentCompilerInterfaceFunctions = exports.IntentCompilerFactoryFunctions = exports.IntentCompilerInterfaceFunctions = exports.StatusOrSentenceStreamFunctions = exports.SentenceStreamFunctions = exports.StatusOrTextInBracketsRemoverFunctions = exports.TextInBracketsRemoverFunctions = exports.StatusOrSubstringRemoverFunctions = exports.SubstringRemoverFunctions = exports.StatusOrEmojiRemoverFunctions = exports.EmojiRemoverFunctions = exports.VADInterfaceFunctions = exports.StatusOrVADInterfaceFunctions = exports.VADFactoryFunctions = exports.LocalVADConfigFunctions = exports.VoiceActivityDetectionConfigFunctions = exports.STTInterfaceFunctions = exports.AudioChunkFunctions = exports.LocalSTTConfigFunctions = exports.RemoteSTTConfigFunctions = exports.SpeechRecognitionConfigFunctions = exports.STTFactoryFunctions = exports.LongTermMemoryConfigFunctions = exports.FlashMemoryConfigFunctions = exports.RollingSummaryConfigFunctions = exports.LongTermMemoryFunctions = exports.FlashMemoryFunctions = exports.RollingSummaryFunctions = exports.MemorySnapshotFunctions = exports.StatusOrMemorySnapshotFunctions = exports.MemoryInterfaceFunctions = exports.StatusOrMemoryInterfaceFunctions = exports.VectorEventFunctions = exports.EventFunctions = exports.StatusOrVectorStringFunctions = exports.StatusOrKnowledgeRetrieverInterfaceFunctions = exports.KnowledgeRetrieverFactoryFunctions = exports.KnowledgeRetrieverInterfaceFunctions = exports.RetrievalConfigFunctions = exports.KnowledgeCollectionFactoryFunctions = exports.VectorKnowledgeCollectionFunctions = exports.KnowledgeCollectionFunctions = exports.SafetyConfigFunctions = void 0;
exports.TextDataFunctions = exports.UserContextFunctions = exports.BTreeMapStringToStringFunctions = exports.GraphExecutorFunctions = exports.VectorNodeFunctions = exports.EdgeConditionExecutorFunctions = exports.EdgeWrapperFunctions = exports.GraphFunctions = exports.StatusOrSharedPtrMCPCallToolNodeFunctions = exports.StatusOrSharedPtrMCPListToolsNodeFunctions = exports.StatusOrSharedPtrTTSNodeFunctions = exports.StatusOrSharedPtrTextChunkingNodeFunctions = exports.StatusOrSharedPtrTextAggregatorNodeFunctions = exports.StatusOrSharedPtrSTTNodeFunctions = exports.StatusOrSharedPtrKeywordMatcherNodeFunctions = exports.StatusOrSharedPtrSafetyCheckerNodeFunctions = exports.StatusOrSharedPtrRandomCannedTextNodeFunctions = exports.StatusOrSharedPtrMemoryRetrieveNodeFunctions = exports.StatusOrSharedPtrMemoryUpdateNodeFunctions = exports.StatusOrSharedPtrKnowledgeNodeFunctions = exports.StatusOrSharedPtrIntentNodeFunctions = exports.StatusOrSharedPtrGoalAdvancementNodeFunctions = exports.StatusOrSharedPtrLLMPromptBuilderNodeFunctions = exports.StatusOrSharedPtrLLMChatRequestBuilderNodeFunctions = exports.StatusOrSharedPtrLLMCompletionNodeFunctions = exports.StatusOrSharedPtrLLMChatNodeFunctions = exports.StatusOrJsonFunctions = exports.StatusOrIntFunctions = exports.OptionalFloatFunctions = exports.LlmMatcherConfigFunctions = exports.OptionalLlmMatcherConfigFunctions = exports.EmbeddingMatcherConfigFunctions = exports.OptionalEmbeddingMatcherConfigFunctions = exports.VectorToolCallDataFunctions = exports.ToolCallDataFunctions = exports.ListToolCallDataFunctions = exports.VectorToolCallResultFunctions = exports.ToolCallResultFunctions = exports.ListToolCallsResultsFunctions = exports.VectorToolDataFunctions = exports.ToolDataFunctions = exports.ListToolsDataFunctions = exports.KeywordMatchFunctions = exports.VectorKeywordMatchFunctions = exports.IntentMatchFunctions = exports.VectorIntentMatchFunctions = exports.StatusOrVectorIntentMatchFunctions = exports.StatusOrIntentMatcherInterfaceFunctions = exports.IntentMatcherFactoryFunctions = exports.IntentMatcherInterfaceFunctions = void 0;
exports.FileContentFunctions = exports.FileFunctions = exports.KnowledgeInterfaceFunctions = exports.KnowledgeCompileConfigFunctions = exports.ParsingConfigFunctions = exports.RemoteKnowledgeConfigFunctions = exports.LocalKnowledgeConfigFunctions = exports.KnowledgeFactoryFunctions = exports.ProcessContextFunctions = exports.CustomNodeThreadedProcessExecutorFunctions = exports.CustomNodeWrapperFunctions = exports.StreamStringFunctions = exports.VectorDictionaryRuleFunctions = exports.DictionaryRuleFunctions = exports.VectorEntityFunctions = exports.EntityFunctions = exports.StatusOrVectorEntityMatchFunctions = exports.VectorEntityMatchFunctions = exports.EntityMatchFunctions = exports.StatusOrNERInterfaceFunctions = exports.NERFactoryFunctions = exports.NERCreationConfigFunctions = exports.NERInterfaceFunctions = exports.TelemetryFunctions = exports.SafetyCheckerInterfaceFunctions = exports.StatusOrSafetyCheckerInterfaceFunctions = exports.StatusOrCheckSafetyResponseFunctions = exports.CheckSafetyResponseFunctions = exports.VectorDetectedTopicFunctions = exports.DetectedTopicFunctions = exports.TopicThresholdFunctions = exports.SafetyCheckerCreationConfigFunctions = exports.SafetyCheckerFactoryFunctions = exports.TTSOutputFunctions = exports.StatusOrBaseDataFunctions = exports.VectorBaseDataFunctions = exports.BaseDataFunctions = exports.LLMCompletionResponseFunctions = exports.LLMChatResponseFunctions = exports.OptionalToolChoiceFunctions = exports.ToolChoiceFunctions = exports.FunctionChoiceFunctions = exports.ContentItemsVectorFunctions = exports.ContentItemFunctions = exports.ImageUrlFunctions = exports.MessageFunctions = exports.MessagesFunctions = exports.LLMChatRequestFunctions = exports.JsonDataFunctions = exports.AudioDataFunctions = void 0;
exports.LinearGraphFunctions = exports.CancellationContextFunctions = exports.LLMRoutingHelperFunctions = exports.ComponentStoreFunctions = exports.StatusOrCreationContextFunctions = exports.CreationContextFunctions = exports.FFIFunctions = exports.HashMapStringToStringFunctions = exports.GraphExecutorConfigFunctions = exports.GraphManagerConfigFunctions = exports.ConfigRegistryFunctions = exports.CustomConfigThreadedSerializeExecutorFunctions = exports.CustomConfigThreadedDeserializeExecutorFunctions = exports.StatusOrCustomConfigWrapperFunctions = exports.CustomConfigWrapperFunctions = exports.ConfigWrapperDestructorFunctions = exports.CustomNodeThreadedCreateExecutorFunctions = exports.ComponentRegistryFunctions = exports.ExecutionConfigFunctions = exports.NodeCreateFunctions = exports.MessagesVectorFunctions = exports.MemoryFactoryFunctions = exports.ToolCallsVectorFunctions = exports.ToolsVectorFunctions = exports.ToolCallFunctions = exports.ToolFunctions = exports.ContentFunctions = exports.TransformationStreamStrToTTSOutputFunctions = exports.TransformationStreamDestructorFunctions = exports.TransformationStreamStringToStringFunctions = exports.ContentToStringStreamFunctions = exports.TransformationStreamContentToTextFunctions = exports.TransformationStreamFunctions = exports.KnowledgeNodeHelperFunctions = exports.VectorCharFunctions = exports.KnowledgeVectorStatusFunctions = exports.KnowledgeStatusFunctions = void 0;
const koffi = __importStar(require("koffi"));
const path = __importStar(require("path"));
const util = __importStar(require("util"));
const platform_detection_1 = require("./common/platform_detection");
const libPath = process.env.INWORLD_RUNTIME_BINARY_PATH ||
    (0, platform_detection_1.getBinaryPath)(path.join(__dirname, '..', 'bin'));
const inworld = koffi.load(libPath);
exports.ConfigParserFunctions = {
    new: inworld.func('inworld_ConfigParser_CreateConfigParser', 'void*', []),
    parseWithSubstitutions: inworld.func('inworld_ConfigParser_ParseGraphFromJsonStringWithSubstitutions', 'void*', ['void*', 'str', 'void*']),
    parse: inworld.func('inworld_ConfigParser_ParseGraphFromJsonString', 'void*', ['void*', 'str']),
    delete: inworld.func('inworld_ConfigParser_delete', 'void', ['void*']),
    // Add helper functions for StatusOr wrapper
    statusOrOk: inworld.func('inworld_StatusOr_ConfigParserPtr_ok', 'bool', [
        'void*',
    ]),
    statusOrValue: inworld.func('inworld_StatusOr_ConfigParserPtr_value', 'void*', ['void*']),
    statusOrStatus: inworld.func('inworld_StatusOr_ConfigParserPtr_status', 'void*', ['void*']),
    statusOrDelete: inworld.func('inworld_StatusOr_ConfigParserPtr_delete', 'void', ['void*']),
    // For CompiledGraphInterface StatusOr
    statusOrCompiledGraphOk: inworld.func('inworld_StatusOr_CompiledGraphInterfacePtr_ok', 'bool', ['void*']),
    statusOrCompiledGraphValue: inworld.func('inworld_StatusOr_CompiledGraphInterfacePtr_value', 'void*', ['void*']),
    statusOrCompiledGraphStatus: inworld.func('inworld_StatusOr_CompiledGraphInterfacePtr_status', 'void*', ['void*']),
    statusOrCompiledGraphDelete: inworld.func('inworld_StatusOr_CompiledGraphInterfacePtr_delete', 'void', ['void*']),
};
// LLM Factory related functions
exports.LLMFactoryFunctions = {
    new: inworld.func('inworld_LLMFactory_new', 'void *', []),
    delete: inworld.func('inworld_LLMFactory_delete', 'void', ['void *']),
};
// Remote Config related functions
exports.RemoteLLMConfigFunctions = {
    new: inworld.func('inworld_RemoteLLMConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteLLMConfig_delete', 'void', ['void *']),
    setProvider: inworld.func('inworld_RemoteLLMConfig_provider_set', 'void', [
        'void *',
        'str',
    ]),
    setModelName: inworld.func('inworld_RemoteLLMConfig_model_name_set', 'void', [
        'void *',
        'str',
    ]),
    setAPIKey: inworld.func('inworld_RemoteLLMConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
};
// Local Config related functions
exports.LocalLLMConfigFunctions = {
    new: inworld.func('inworld_LocalLLMConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalLLMConfig_delete', 'void', ['void *']),
    setModelPath: inworld.func('inworld_LocalLLMConfig_model_path_set', 'void', [
        'void *',
        'str',
    ]),
    setDevice: inworld.func('inworld_LocalLLMConfig_device_set', 'void', [
        'void *',
        'void *',
    ]),
    setDefaultConfig: inworld.func('inworld_LocalLLMConfig_default_config_set', 'void', ['void *', 'void *']),
};
// Device related functions
exports.DeviceFunctions = {
    getDeviceRegistryInstance: inworld.func('inworld_DeviceRegistry_GetInstance', 'void *', []),
    getAvailableDevices: inworld.func('inworld_DeviceRegistry_GetAvailableDevices', 'void *', ['void *']),
    getDevicesSize: inworld.func('inworld_vector_Device_size', 'int', ['void *']),
    deleteDevice: inworld.func('inworld_Device_delete', 'void', ['void *']),
    getDevice: inworld.func('inworld_vector_Device_get', 'void *', [
        'void *',
        'int',
    ]),
    getDeviceType: inworld.func('inworld_Device_type', 'int', ['void *']),
    getDeviceIndex: inworld.func('inworld_Device_index', 'int', ['void *']),
    getDeviceInfo: inworld.func('inworld_Device_info', 'void *', ['void *']),
    getDeviceInfoName: inworld.func('inworld_DeviceInfo_name_get', 'str', [
        'void *',
    ]),
    getDeviceInfoFreeMemoryBytes: inworld.func('inworld_DeviceInfo_free_memory_bytes_get', 'uint64', ['void *']),
    getDeviceInfoTotalMemoryBytes: inworld.func('inworld_DeviceInfo_total_memory_bytes_get', 'uint64', ['void *']),
};
// Text Generation Config related functions
exports.TextConfigFunctions = {
    new: inworld.func('inworld_TextGenerationConfig_new', 'void *', []),
    delete: inworld.func('inworld_TextGenerationConfig_delete', 'void', [
        'void *',
    ]),
    setMaxTokens: inworld.func('inworld_TextGenerationConfig_max_new_tokens_set', 'void', ['void *', 'int']),
    setRepetitionPenalty: inworld.func('inworld_TextGenerationConfig_repetition_penalty_set', 'void', ['void *', 'float']),
    setTopP: inworld.func('inworld_TextGenerationConfig_top_p_set', 'void', [
        'void *',
        'float',
    ]),
    setMaxPrompt: inworld.func('inworld_TextGenerationConfig_max_prompt_length_set', 'void', ['void *', 'int']),
    setTemperature: inworld.func('inworld_TextGenerationConfig_temperature_set', 'void', ['void *', 'float']),
    setFrequencyPenalty: inworld.func('inworld_TextGenerationConfig_frequency_penalty_set', 'void', ['void *', 'float']),
    setPresencePenalty: inworld.func('inworld_TextGenerationConfig_presence_penalty_set', 'void', ['void *', 'float']),
    setStopSequences: inworld.func('inworld_TextGenerationConfig_stop_sequences_set', 'void', ['void *', 'void *']),
};
// LLM Interface related functions
exports.LLMInterfaceFunctions = {
    createRemote: util.promisify(inworld.func('inworld_LLMFactory_CreateLLM_rcinworld_RemoteLLMConfig', 'void*', ['void *', 'void *']).async),
    createLocal: util.promisify(inworld.func('inworld_LLMFactory_CreateLLM_rcinworld_LocalLLMConfig', 'void*', ['void *', 'void *']).async),
    delete: inworld.func('inworld_StatusOr_LLMInterface_delete', 'void', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_LLMInterface_ok', 'bool', ['void *']),
    get: inworld.func('inworld_StatusOr_LLMInterface_value', 'void *', [
        'void *',
    ]),
    generateContentFromPrompt: util.promisify(inworld.func('inworld_LLMInterface_GenerateContent_rcstd_string_rcinworld_TextGenerationConfig', 'void *', ['void *', 'str', 'void *']).async),
    generateContentFromMessages: util.promisify(inworld.func('inworld_LLMInterface_GenerateContent_rcstd_vector_Sl_inworld_Message_Sg__rcinworld_TextGenerationConfig', 'void *', ['void *', 'void *', 'void *']).async),
    generateContentFromMessagesWithTools: util.promisify(inworld.func('inworld_LLMInterface_GenerateContent_rcstd_vector_Sl_inworld_Message_Sg__rcinworld_TextGenerationConfig_rcstd_vector_Sl_inworld_Tool_Sg_', 'void *', ['void *', 'void *', 'void *', 'void *']).async),
};
// LLM Jinja Interface related functions
exports.LLMJinjaInterfaceFunctions = {
    renderJinja: util.promisify(inworld.func('inworld_RenderJinja', 'void *', ['str', 'str']).async),
};
exports.VectorMapStringStringFunctions = {
    newVector: inworld.func('inworld_vector_map_string_string_new', 'void *', []),
    deleteVector: inworld.func('inworld_vector_map_string_string_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_map_string_string_size', 'size_t', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_map_string_string_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_map_string_string_get', 'void *', [
        'void *',
        'size_t',
    ]),
};
exports.MapStringStringFunctions = {
    new: inworld.func('inworld_map_string_string_new', 'void *', []),
    delete: inworld.func('inworld_map_string_string_delete', 'void', ['void *']),
    set: inworld.func('inworld_map_string_string_set', 'void', [
        'void *',
        'str',
        'str',
    ]),
};
// Input Stream related functions
exports.InputStreamFunctions = {
    isOK: inworld.func('inworld_StatusOr_InputStream_string_ok', 'bool', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_InputStream_string_delete', 'void', [
        'void *',
    ]),
    get: inworld.func('inworld_StatusOr_InputStream_string_value', 'void *', [
        'void *',
    ]),
    hasNext: util.promisify(inworld.func('inworld_InputStream_string_HasNext', 'bool', ['void *'])
        .async),
    read: util.promisify(inworld.func('inworld_InputStream_string_Read', 'void *', ['void *']).async),
    deleteStream: inworld.func('inworld_InputStream_string_delete', 'void', [
        'void *',
    ]),
};
exports.ContentStreamFunctions = {
    isOK: inworld.func('inworld_StatusOr_Content_ok', 'bool', ['void *']),
    delete: inworld.func('inworld_StatusOr_Content_delete', 'void', ['void *']),
    getContent: inworld.func('inworld_StatusOr_Content_value', 'void *', [
        'void *',
    ]),
    getText: inworld.func('inworld_Content_content_get', 'str', ['void *']),
    getToolCalls: inworld.func('inworld_Content_tool_calls_get', 'void *', [
        'void *',
    ]),
    hasNext: util.promisify(inworld.func('inworld_InputStream_Content_HasNext', 'bool', ['void *'])
        .async),
    read: util.promisify(inworld.func('inworld_InputStream_Content_Read', 'void *', ['void *'])
        .async),
    deleteStream: inworld.func('inworld_InputStream_Content_delete', 'void', [
        'void *',
    ]),
};
// Inworld String related functions
exports.InworldStringFunctions = {
    get: inworld.func('inworld_StatusOr_string_value', 'str', ['void *']),
    isOK: inworld.func('inworld_StatusOr_string_ok', 'bool', ['void *']),
};
// Status related functions
exports.StatusFunctions = {
    toString: inworld.func('inworld_Status_ToString', 'str', ['void *']),
    isOK: inworld.func('inworld_Status_ok', 'bool', ['void *']),
    createStatus: inworld.func('inworld_Status_createStatus', 'void *', [
        'int',
        'str',
    ]),
};
// Text Embedder Factory related functions
exports.TextEmbedderFactoryFunctions = {
    new: inworld.func('inworld_TextEmbedderFactory_new', 'void *', []),
    delete: inworld.func('inworld_TextEmbedderFactory_delete', 'void', [
        'void *',
    ]),
};
// Local Text Embedder Config related functions
exports.LocalTextEmbedderConfigFunctions = {
    new: inworld.func('inworld_LocalTextEmbedderConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalTextEmbedderConfig_delete', 'void', [
        'void *',
    ]),
    setModelPath: inworld.func('inworld_LocalTextEmbedderConfig_model_path_set', 'void', ['void *', 'str']),
    setDevice: inworld.func('inworld_LocalTextEmbedderConfig_device_set', 'void', ['void *', 'void *']),
};
// Remote Text Embedder Config related functions
exports.RemoteTextEmbedderConfigFunctions = {
    new: inworld.func('inworld_RemoteTextEmbedderConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteTextEmbedderConfig_delete', 'void', [
        'void *',
    ]),
    setAPIKey: inworld.func('inworld_RemoteTextEmbedderConfig_api_key_set', 'void', ['void *', 'str']),
    setModelName: inworld.func('inworld_RemoteTextEmbedderConfig_model_name_set', 'void', ['void *', 'str']),
    setProvider: inworld.func('inworld_RemoteTextEmbedderConfig_provider_set', 'void', ['void *', 'str']),
};
// Text Embedder Creation Config related functions
exports.TextEmbedderCreationConfigFunctions = {
    new: inworld.func('inworld_TextEmbedderCreationConfig_new', 'void *', []),
    delete: inworld.func('inworld_TextEmbedderCreationConfig_delete', 'void', [
        'void *',
    ]),
    setLocalConfig: inworld.func('inworld_TextEmbedderCreationConfig_set_local_config', 'void', ['void *', 'void *']),
    setRemoteConfig: inworld.func('inworld_TextEmbedderCreationConfig_set_remote_config', 'void', ['void *', 'void *']),
    hasLocalConfig: inworld.func('inworld_TextEmbedderCreationConfig_has_local_config', 'bool', ['void *']),
    hasRemoteConfig: inworld.func('inworld_TextEmbedderCreationConfig_has_remote_config', 'bool', ['void *']),
    getLocalConfig: inworld.func('inworld_TextEmbedderCreationConfig_get_local_config', 'void *', ['void *']),
    getRemoteConfig: inworld.func('inworld_TextEmbedderCreationConfig_get_remote_config', 'void *', ['void *']),
};
// Text Embedder Interface related functions
exports.TextEmbedderInterfaceFunctions = {
    // createWithLocalConfig: util.promisify(
    //   inworld.func(
    //     'inworld_TextEmbedderFactory_CreateTextEmbedder_rcinworld_LocalTextEmbedderConfig',
    //     'void*',
    //     ['void *', 'void *'],
    //   ).async,
    // ),
    // createWithRemoteConfig: util.promisify(
    //   inworld.func(
    //     'inworld_TextEmbedderFactory_CreateTextEmbedder_rcinworld_RemoteTextEmbedderConfig',
    //     'void*',
    //     ['void *', 'void *'],
    //   ).async,
    // ),
    create: util.promisify(inworld.func('inworld_TextEmbedderFactory_CreateTextEmbedder', 'void*', [
        'void *',
        'void *',
    ]).async),
    deleteStatusOrInterface: inworld.func('inworld_StatusOr_TextEmbedderInterface_delete', 'void', ['void *']),
    delete: inworld.func('inworld_TextEmbedderInterface_delete', 'void', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_TextEmbedderInterface_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_TextEmbedderInterface_status', 'void *', ['void *']),
    get: inworld.func('inworld_StatusOr_TextEmbedderInterface_value', 'void *', [
        'void *',
    ]),
    embed: util.promisify(inworld.func('inworld_TextEmbedderInterface_Embed', 'void *', [
        'void *',
        'str',
    ]).async),
    embedBatch: util.promisify(inworld.func('inworld_TextEmbedderInterface_EmbedBatch', 'void *', [
        'void *',
        'void *',
    ]).async),
};
// Add OptionalTextEmbedderInterfaceFunctions for handling optional text embedders
exports.OptionalTextEmbedderInterfaceFunctions = {
    new: inworld.func('inworld_optional_TextEmbedderInterface_new', 'void *', []),
    delete: inworld.func('inworld_optional_TextEmbedderInterface_delete', 'void', ['void *']),
    copy: inworld.func('inworld_optional_TextEmbedderInterface_copy', 'void *', [
        'void *',
    ]),
    hasValue: inworld.func('inworld_optional_TextEmbedderInterface_has_value', 'bool', ['void *']),
    getValue: inworld.func('inworld_optional_TextEmbedderInterface_value', 'void *', ['void *']),
    reset: inworld.func('inworld_optional_TextEmbedderInterface_reset', 'void', [
        'void *',
    ]),
};
// Vector String related functions
exports.VectorStringFunctions = {
    new: inworld.func('inworld_vector_string_new', 'void *', []),
    delete: inworld.func('inworld_vector_string_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_string_push_back', 'void', [
        'void *',
        'str',
    ]),
    size: inworld.func('inworld_vector_string_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_string_get', 'str', ['void *', 'int']),
};
// Vector Float related functions
exports.VectorFloatFunctions = {
    new: inworld.func('inworld_vector_float_new', 'void *', []),
    delete: inworld.func('inworld_vector_float_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_float_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_float_get', 'float', ['void *', 'int']),
    pushBack: inworld.func('inworld_vector_float_push_back', 'void', [
        'void *',
        'float',
    ]),
};
// Vector Vector Float related functions
exports.VectorVectorFloatFunctions = {
    new: inworld.func('inworld_vector_vector_float_new', 'void *', []),
    delete: inworld.func('inworld_vector_vector_float_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_vector_float_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_vector_float_get', 'void *', [
        'void *',
        'int',
    ]),
    clear: inworld.func('inworld_vector_float_clear', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_vector_float_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
// Embeddings Status functions
exports.EmbeddingsStatusFunctions = {
    isOK: inworld.func('inworld_StatusOr_vector_float_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_float_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_vector_float_delete', 'void', [
        'void *',
    ]),
};
// Batch Embeddings Status functions
exports.BatchEmbeddingsStatusFunctions = {
    isOK: inworld.func('inworld_StatusOr_vector_vector_float_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_vector_vector_float_value', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_vector_vector_float_delete', 'void', [
        'void *',
    ]),
};
// TTSInterface Functions
exports.TTSInterfaceFunctions = {
    delete: inworld.func('inworld_TTSInterface_delete', 'void', ['void *']),
    synthesizeSpeech: util.promisify(inworld.func('inworld_TTSInterface_SynthesizeSpeech_rcinworld_Voice_rcstd_string', 'void *', ['void *', 'void *', 'str']).async),
    synthesizeSpeechWithInstruction: util.promisify(inworld.func('inworld_TTSInterface_SynthesizeSpeech_rcinworld_Voice_rcstd_string_rcstd_string', 'void *', ['void *', 'void *', 'str', 'str']).async),
};
// TTSRequest Functions
exports.TTSRequestFunctions = {
    // Constructor with Text object and optional Voice
    newWithText: inworld.func('inworld_TTSRequest_new_std_shared_ptr_Sl_inworld_graphs_Text_Sg__std_optional_Sl_inworld_Voice_Sg_', 'void *', ['void *', 'void *']),
    // Constructor with string and optional Voice
    newWithString: inworld.func('inworld_TTSRequest_new_rcstd_string_std_optional_Sl_inworld_Voice_Sg_', 'void *', ['str', 'void *']),
    // Constructor with DataStream and optional Voice
    newWithDataStream: inworld.func('inworld_TTSRequest_new_std_shared_ptr_Sl_inworld_graphs_DataStream_Sl_std_string_Sg__Sg__std_optional_Sl_inworld_Voice_Sg_', 'void *', ['void *', 'void *']),
    // Utility functions
    delete: inworld.func('inworld_TTSRequest_delete', 'void', ['void *']),
    isValid: inworld.func('inworld_TTSRequest_is_valid', 'bool', ['void *']),
    hasTextContent: inworld.func('inworld_TTSRequest_has_text_content', 'bool', [
        'void *',
    ]),
    hasStreamContent: inworld.func('inworld_TTSRequest_has_stream_content', 'bool', ['void *']),
    toBaseData: inworld.func('inworld_BaseDataAs_TTSRequest', 'void *', [
        'void *',
    ]),
    getVoice: inworld.func('inworld_TTSRequest_voice', 'void *', ['void *']),
};
// SpeechSynthesisInferenceConfig Functions
exports.SpeechSynthesisInferenceConfigFunctions = {
    new: inworld.func('inworld_SpeechSynthesisInferenceConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechSynthesisInferenceConfig_delete', 'void', ['void *']),
    setTemperature: inworld.func('inworld_SpeechSynthesisInferenceConfig_temperature_set', 'void', ['void *', 'float']),
    getTemperature: inworld.func('inworld_SpeechSynthesisInferenceConfig_temperature_get', 'float', ['void *']),
    setPitch: inworld.func('inworld_SpeechSynthesisInferenceConfig_pitch_set', 'void', ['void *', 'float']),
    getPitch: inworld.func('inworld_SpeechSynthesisInferenceConfig_pitch_get', 'float', ['void *']),
    setSpeakingRate: inworld.func('inworld_SpeechSynthesisInferenceConfig_speaking_rate_set', 'void', ['void *', 'float']),
    getSpeakingRate: inworld.func('inworld_SpeechSynthesisInferenceConfig_speaking_rate_get', 'float', ['void *']),
};
// SpeechSynthesisPostprocessingConfig Functions
exports.SpeechSynthesisPostprocessingConfigFunctions = {
    new: inworld.func('inworld_SpeechSynthesisPostprocessingConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechSynthesisPostprocessingConfig_delete', 'void', ['void *']),
    setSampleRate: inworld.func('inworld_SpeechSynthesisPostprocessingConfig_sample_rate_set', 'void', ['void *', 'int']),
    getSampleRate: inworld.func('inworld_SpeechSynthesisPostprocessingConfig_sample_rate_get', 'int', ['void *']),
};
// InworldSpeechSynthesisConfig Functions
exports.InworldSpeechSynthesisConfigFunctions = {
    new: inworld.func('inworld_InworldSpeechSynthesisConfig_new', 'void *', []),
    delete: inworld.func('inworld_InworldSpeechSynthesisConfig_delete', 'void', [
        'void *',
    ]),
    setModelId: inworld.func('inworld_InworldSpeechSynthesisConfig_model_id_set', 'void', ['void *', 'str']),
    getModelId: inworld.func('inworld_InworldSpeechSynthesisConfig_model_id_get', 'str', ['void *']),
    setPostprocessing: inworld.func('inworld_InworldSpeechSynthesisConfig_postprocessing_set', 'void', ['void *', 'void *']),
    getPostprocessing: inworld.func('inworld_InworldSpeechSynthesisConfig_postprocessing_get', 'void *', ['void *']),
    setInference: inworld.func('inworld_InworldSpeechSynthesisConfig_inference_set', 'void', ['void *', 'void *']),
    getInference: inworld.func('inworld_InworldSpeechSynthesisConfig_inference_get', 'void *', ['void *']),
};
// SpeechSynthesisConfig Functions
exports.SpeechSynthesisConfigFunctions = {
    new: inworld.func('inworld_SpeechSynthesisConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechSynthesisConfig_delete', 'void', [
        'void *',
    ]),
    getInworldConfig: inworld.func('inworld_SpeechSynthesisConfig_inworld_config', 'void *', // Returns InworldSpeechSynthesisConfig*
    ['void *']),
};
// Voice Functions
exports.VoiceFunctions = {
    new: inworld.func('inworld_Voice_new', 'void *', []),
    delete: inworld.func('inworld_Voice_delete', 'void', ['void *']),
    setSpeakerId: inworld.func('inworld_Voice_speaker_id_set', 'void', [
        'void *',
        'str',
    ]),
};
// Optional Voice Functions
exports.OptionalVoiceFunctions = {
    new: inworld.func('inworld_optional_Voice_new', 'void *', []),
    newWithValue: inworld.func('inworld_optional_Voice_new_rcinworld_Voice', 'void *', ['void *']),
    delete: inworld.func('inworld_optional_Voice_delete', 'void', ['void *']),
    hasValue: inworld.func('inworld_optional_Voice_has_value', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_optional_Voice_value', 'void *', ['void *']),
};
exports.MatchedIntentsFunctions = {
    toMatchedIntents: inworld.func('inworld_BaseDataAs_MatchedIntents', 'void *', ['void *']),
    getMatches: inworld.func('inworld_MatchedIntents_intent_matches', 'void *', [
        'void *',
    ]),
    isValid: inworld.func('inworld_MatchedIntents_is_valid', 'bool', ['void *']),
};
exports.MatchedKeywordsFunctions = {
    toMatchedKeywords: inworld.func('inworld_BaseDataAs_MatchedKeywords', 'void *', ['void *']),
    getMatches: inworld.func('inworld_MatchedKeywords_matches', 'void *', [
        'void *',
    ]),
    isValid: inworld.func('inworld_MatchedKeywords_is_valid', 'bool', ['void *']),
};
exports.ClassificationResultFunctions = {
    toClassificationResult: inworld.func('inworld_BaseDataAs_ClassificationResult', 'void *', ['void *']),
    getClasses: inworld.func('inworld_ClassificationResult_classes', 'void *', [
        'void *',
    ]),
    isValid: inworld.func('inworld_ClassificationResult_is_valid', 'bool', [
        'void *',
    ]),
};
exports.GoalAdvancementFunctions = {
    toGoalAdvancement: inworld.func('inworld_BaseDataAs_GoalAdvancement', 'void *', ['void *']),
    getActivatedGoals: inworld.func('inworld_GoalAdvancement_activated_goals', 'void *', ['void *']),
    getCompletedGoals: inworld.func('inworld_GoalAdvancement_completed_goals', 'void *', ['void *']),
    getCurrentGoals: inworld.func('inworld_GoalAdvancement_current_goals', 'void *', ['void *']),
    isValid: inworld.func('inworld_GoalAdvancement_is_valid', 'bool', ['void *']),
};
exports.MemoryStateFunctions = {
    toMemoryState: inworld.func('inworld_BaseDataAs_MemoryState', 'void *', [
        'void *',
    ]),
    toString: inworld.func('inworld_MemoryState_ToString', 'str', ['void *']),
    isValid: inworld.func('inworld_MemoryState_is_valid', 'bool', ['void *']),
};
exports.TextFunctions = {
    asText: inworld.func('inworld_BaseDataAs_Text', 'void *', ['void *']),
    isValid: inworld.func('inworld_Text_is_valid', 'bool', ['void *']),
};
// SpeechChunk Functions
exports.SpeechChunkFunctions = {
    new: inworld.func('inworld_SpeechChunk_new', 'void *', []),
    delete: inworld.func('inworld_SpeechChunk_delete', 'void', ['void *']),
    getWaveform: inworld.func('inworld_SpeechChunk_waveform_get', 'void *', [
        'void *',
    ]),
    getSampleRate: inworld.func('inworld_SpeechChunk_sample_rate_get', 'int', [
        'void *',
    ]),
    getPhonemeTimestamps: inworld.func('inworld_SpeechChunk_phoneme_timestamps_get', 'void *', ['void *']),
    toBaseStream: inworld.func('inworld_DataStream_SpeechChunk_new_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_', 'void *', [
        'void *',
        'void *', // CancellationContext*
    ]),
    fromBaseData: inworld.func('inworld_BaseDataAs_DataStream_SpeechChunk', 'void *', ['void *']),
    toStream: inworld.func('inworld_DataStream_SpeechChunk_stream', 'void *', [
        'void *',
    ]),
    isValid: inworld.func('inworld_DataStream_SpeechChunk_is_valid', 'bool', [
        'void *',
    ]),
};
// PhonemeTimestamp Functions
exports.PhonemeTimestampFunctions = {
    new: inworld.func('inworld_PhonemeTimestamp_new', 'void *', []),
    delete: inworld.func('inworld_PhonemeTimestamp_delete', 'void', ['void *']),
    getPhoneme: inworld.func('inworld_PhonemeTimestamp_phoneme_get', 'str', [
        'void *',
    ]),
    getStartTimeSec: inworld.func('inworld_PhonemeTimestamp_start_time_sec_get', 'float', ['void *']),
};
// PhonemeTimestampVector Functions
exports.PhonemeTimestampVectorFunctions = {
    new: inworld.func('inworld_vector_SynthesizedSpeech_PhonemeTimestamp_new', 'void *', []),
    delete: inworld.func('inworld_vector_SynthesizedSpeech_PhonemeTimestamp_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_SynthesizedSpeech_PhonemeTimestamp_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_SynthesizedSpeech_PhonemeTimestamp_get', 'void *', ['void *', 'int']),
};
// StatusOr_SpeechChunk Functions
exports.SpeechChunkStatusFunctions = {
    new: inworld.func('inworld_StatusOr_SpeechChunk_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SpeechChunk_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SpeechChunk_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_SpeechChunk_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_SpeechChunk_delete', 'void', [
        'void *',
    ]),
};
// InputStream_SpeechChunk Functions
exports.SpeechChunkInputStreamFunctions = {
    isOK: inworld.func('inworld_StatusOr_InputStream_SpeechChunk_ok', 'bool', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_InputStream_SpeechChunk_delete', 'void', ['void *']),
    getStream: inworld.func('inworld_StatusOr_InputStream_SpeechChunk_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_InputStream_SpeechChunk_status', 'void *', ['void *']),
    // Stream functions
    deleteStream: inworld.func('inworld_InputStream_SpeechChunk_delete', 'void', [
        'void *',
    ]),
    hasNext: util.promisify(inworld.func('inworld_InputStream_SpeechChunk_HasNext', 'bool', ['void *'])
        .async),
    read: util.promisify(inworld.func('inworld_InputStream_SpeechChunk_Read', 'void *', ['void *'])
        .async),
};
// TTSFactory Functions
exports.TTSFactoryFunctions = {
    new: inworld.func('inworld_TTSFactory_new', 'void *', []),
    delete: inworld.func('inworld_TTSFactory_delete', 'void', ['void *']),
    createTTS: util.promisify(inworld.func('inworld_TTSFactory_CreateTTS', 'void *', ['void *', 'void *'])
        .async),
};
// StatusOr_TTSInterface Functions
exports.TTSInterfaceStatusFunctions = {
    new: inworld.func('inworld_StatusOr_TTSInterface_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_TTSInterface_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_TTSInterface_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_TTSInterface_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_TTSInterface_delete', 'void', [
        'void *',
    ]),
};
// RemoteTTSConfig Functions
exports.RemoteTTSConfigFunctions = {
    new: inworld.func('inworld_RemoteTTSConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteTTSConfig_delete', 'void', ['void *']),
    setSynthesisConfig: inworld.func('inworld_RemoteTTSConfig_synthesis_config_set', 'void', ['void *', 'void *']),
    setApiKey: inworld.func('inworld_RemoteTTSConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
};
// Knowledge Record-related functions
exports.KnowledgeRecordFunctions = {
    new: inworld.func('inworld_KnowledgeRecord_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeRecord_delete', 'void', ['void *']),
    setText: inworld.func('inworld_KnowledgeRecord_text_set', 'void', [
        'void *',
        'str',
    ]),
    setEmbedding: inworld.func('inworld_KnowledgeRecord_embedding_set', 'void', [
        'void *',
        'void *',
    ]),
    setMetadata: inworld.func('inworld_KnowledgeRecord_metadata_set', 'void', [
        'void *',
        'void *',
    ]),
};
// Vector Knowledge Record related functions
exports.VectorKnowledgeRecordFunctions = {
    new: inworld.func('inworld_vector_KnowledgeRecord_new', 'void *', []),
    delete: inworld.func('inworld_vector_KnowledgeRecord_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_KnowledgeRecord_size', 'size_t', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_KnowledgeRecord_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
// Vector Topic Threshold related functions
exports.VectorTopicThresholdFunctions = {
    new: inworld.func('inworld_vector_TopicThreshold_new', 'void *', []),
    delete: inworld.func('inworld_vector_TopicThreshold_delete', 'void', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_TopicThreshold_push_back', 'void', [
        'void *', // vector pointer
        'void *', // TopicThreshold pointer
    ]),
};
// Safety Config related functions
exports.SafetyConfigFunctions = {
    new: inworld.func('inworld_SafetyConfig_new', 'void *', []),
    delete: inworld.func('inworld_SafetyConfig_delete', 'void', ['void *']),
    setForbiddenTopics: inworld.func('inworld_SafetyConfig_forbidden_topics_set', 'void', ['void *', 'void *']),
};
// Knowledge Collection related functions
exports.KnowledgeCollectionFunctions = {
    new: inworld.func('inworld_KnowledgeCollection_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeCollection_delete', 'void', [
        'void *',
    ]),
    setKnowledgeRecords: inworld.func('inworld_KnowledgeCollection_knowledge_records_set', 'void', ['void *', 'void *']),
};
// Vector Knowledge Collection related functions
exports.VectorKnowledgeCollectionFunctions = {
    new: inworld.func('inworld_vector_KnowledgeCollection_new', 'void *', []),
    delete: inworld.func('inworld_vector_KnowledgeCollection_delete', 'void', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_KnowledgeCollection_push_back', 'void', ['void *', 'void *']),
};
// Knowledge Collection Factory related functions
exports.KnowledgeCollectionFactoryFunctions = {
    new: inworld.func('inworld_KnowledgeCollectionFactory_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeCollectionFactory_delete', 'void', [
        'void *',
    ]),
    createKnowledgeCollection: inworld.func('inworld_KnowledgeCollectionFactory_CreateKnowledgeCollection', 'void *', ['void *', 'void *', 'void *']),
};
// Retrieval Config related functions
exports.RetrievalConfigFunctions = {
    new: inworld.func('inworld_RetrievalConfig_new', 'void *', []),
    delete: inworld.func('inworld_RetrievalConfig_delete', 'void', ['void *']),
    setThreshold: inworld.func('inworld_RetrievalConfig_threshold_set', 'void', [
        'void *',
        'float',
    ]),
    setTopK: inworld.func('inworld_RetrievalConfig_top_k_set', 'void', [
        'void *',
        'int',
    ]),
};
// Knowledge Retriever Interface related functions
exports.KnowledgeRetrieverInterfaceFunctions = {
    delete: inworld.func('inworld_KnowledgeRetrieverInterface_delete', 'void', [
        'void *',
    ]),
    retrieveKnowledge: util.promisify(inworld.func('inworld_KnowledgeRetrieverInterface_RetrieveKnowledge', 'void *', ['void *', 'void *', 'void *', 'void *']).async),
};
// Knowledge Retriever Factory related functions
exports.KnowledgeRetrieverFactoryFunctions = {
    new: inworld.func('inworld_KnowledgeRetrieverFactory_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeRetrieverFactory_delete', 'void', [
        'void *',
    ]),
    createKnowledgeRetriever: util.promisify(inworld.func('inworld_KnowledgeRetrieverFactory_CreateKnowledgeRetriever', 'void *', ['void *', 'void *']).async),
};
// StatusOr KnowledgeRetrieverInterface related functions
exports.StatusOrKnowledgeRetrieverInterfaceFunctions = {
    isOK: inworld.func('inworld_StatusOr_KnowledgeRetrieverInterface_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_KnowledgeRetrieverInterface_value', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_KnowledgeRetrieverInterface_delete', 'void', ['void *']),
};
// StatusOr Vector String related functions (for retrieved knowledge results)
exports.StatusOrVectorStringFunctions = {
    getValue: inworld.func('inworld_StatusOr_vector_string_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_vector_string_delete', 'void', [
        'void *',
    ]),
};
// Event related functions
exports.EventFunctions = {
    new: inworld.func('inworld_Event_new', 'void *', []),
    delete: inworld.func('inworld_Event_delete', 'void', ['void *']),
    getSpeech: inworld.func('inworld_Event_speech', 'void *', ['void *']),
    getAction: inworld.func('inworld_Event_action', 'void *', ['void *']),
    setAgentName: inworld.func('inworld_AgentSpeech_agent_name_set', 'void', [
        'void *',
        'str',
    ]),
    setUtterance: inworld.func('inworld_AgentSpeech_utterance_set', 'void', [
        'void *',
        'str',
    ]),
    setName: inworld.func('inworld_AgentAction_name_set', 'void', [
        'void *',
        'str',
    ]),
    setParameters: inworld.func('inworld_AgentAction_set_parameter', 'void', [
        'void *',
        'str',
        'str',
    ]),
};
// Event vector related functions (for conversation history)
exports.VectorEventFunctions = {
    new: inworld.func('inworld_vector_Event_new', 'void *', []),
    delete: inworld.func('inworld_vector_Event_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_Event_push_back', 'void', [
        'void *',
        'void *',
    ]),
    size: inworld.func('inworld_vector_Event_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_Event_get', 'void *', ['void *', 'int']),
};
exports.StatusOrMemoryInterfaceFunctions = {
    isOK: inworld.func('inworld_StatusOr_MemoryInterface_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_MemoryInterface_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_MemoryInterface_delete', 'void', [
        'void *',
    ]),
};
// Memory Interface related functions
exports.MemoryInterfaceFunctions = {
    delete: inworld.func('inworld_MemoryInterface_delete', 'void', ['void *']),
    isValid: inworld.func('inworld_MemoryInterface_is_valid', 'bool', ['void *']),
    getMemory: util.promisify(inworld.func('inworld_MemoryInterface_GetMemory_rcstd_vector_Sl_inworld_Event_Sg__rcinworld_MemorySnapshot_rcinworld_RetrievalConfig', 'void *', ['void *', 'void *', 'void *', 'void *']).async),
    getMemoryWithRollingSummary: util.promisify(inworld.func('inworld_MemoryInterface_GetMemory_rcstd_vector_Sl_inworld_Event_Sg__rcinworld_MemorySnapshot_rcinworld_RetrievalConfig_b', 'void *', ['void *', 'void *', 'void *', 'void *', 'bool']).async),
    updateMemory: util.promisify(inworld.func('inworld_MemoryInterface_UpdateMemory', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
};
exports.StatusOrMemorySnapshotFunctions = {
    isOK: inworld.func('inworld_StatusOr_MemorySnapshot_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_MemorySnapshot_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_MemorySnapshot_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_MemorySnapshot_delete', 'void', [
        'void *',
    ]),
};
// Memory Snapshot related functions
exports.MemorySnapshotFunctions = {
    new: inworld.func('inworld_MemorySnapshot_new', 'void *', []),
    delete: inworld.func('inworld_MemorySnapshot_delete', 'void', ['void *']),
    setRollingSummary: inworld.func('inworld_MemorySnapshot_rolling_summary_set', 'void', ['void *', 'void *']),
    setFlashMemory: inworld.func('inworld_MemorySnapshot_flash_memory_set', 'void', ['void *', 'void *']),
    setLongTermMemory: inworld.func('inworld_MemorySnapshot_long_term_memory_set', 'void', ['void *', 'void *']),
};
// Rolling Summary related functions
exports.RollingSummaryFunctions = {
    new: inworld.func('inworld_RollingSummary_new', 'void *', []),
    delete: inworld.func('inworld_RollingSummary_delete', 'void', ['void *']),
    setSummarizedText: inworld.func('inworld_RollingSummary_summarized_text_set', 'void', ['void *', 'str']),
    setTurnsSinceLastUpdate: inworld.func('inworld_RollingSummary_turns_since_last_update_set', 'void', ['void *', 'int']),
};
// Flash Memory related functions
exports.FlashMemoryFunctions = {
    new: inworld.func('inworld_FlashMemory_new', 'void *', []),
    delete: inworld.func('inworld_FlashMemory_delete', 'void', ['void *']),
    setKnowledgeCollection: inworld.func('inworld_FlashMemory_knowledge_collection_set', 'void', ['void *', 'void *']),
};
// Long Term Memory related functions
exports.LongTermMemoryFunctions = {
    new: inworld.func('inworld_LongTermMemory_new', 'void *', []),
    delete: inworld.func('inworld_LongTermMemory_delete', 'void', ['void *']),
    setKnowledgeCollection: inworld.func('inworld_LongTermMemory_knowledge_collection_set', 'void', ['void *', 'void *']),
};
// Rolling Summary Config related functions
exports.RollingSummaryConfigFunctions = {
    new: inworld.func('inworld_RollingSummaryConfig_new', 'void *', []),
    delete: inworld.func('inworld_RollingSummaryConfig_delete', 'void', [
        'void *',
    ]),
    setNumberOfTurnsBeforeSummary: inworld.func('inworld_RollingSummaryConfig_number_of_turns_before_summary_set', 'void', ['void *', 'int']),
    setStartWindowSize: inworld.func('inworld_RollingSummaryConfig_start_window_size_set', 'void', ['void *', 'int']),
    setMaxSummarySentences: inworld.func('inworld_RollingSummaryConfig_max_summary_sentences_set', 'void', ['void *', 'int']),
    setTextGenerationConfig: inworld.func('inworld_RollingSummaryConfig_text_generation_config_set', 'void', ['void *', 'void *']),
};
// Flash Memory Config related functions
exports.FlashMemoryConfigFunctions = {
    new: inworld.func('inworld_FlashMemoryConfig_new', 'void *', []),
    delete: inworld.func('inworld_FlashMemoryConfig_delete', 'void', ['void *']),
    setDialogueCutoffSize: inworld.func('inworld_FlashMemoryConfig_dialogue_cutoff_size_set', 'void', ['void *', 'int']),
    setNHistoryTurns: inworld.func('inworld_FlashMemoryConfig_n_history_turns_set', 'void', ['void *', 'int']),
    setMemoriesSimilarityThreshold: inworld.func('inworld_FlashMemoryConfig_memories_similarity_threshold_set', 'void', ['void *', 'float']),
    setMaxFlashMemory: inworld.func('inworld_FlashMemoryConfig_max_flash_memory_set', 'void', ['void *', 'int']),
    setMaxTopicsPerMemory: inworld.func('inworld_FlashMemoryConfig_max_topics_per_memory_set', 'void', ['void *', 'int']),
    setTextGenerationConfig: inworld.func('inworld_FlashMemoryConfig_text_generation_config_set', 'void', ['void *', 'void *']),
};
// Long Term Memory Config related functions
exports.LongTermMemoryConfigFunctions = {
    new: inworld.func('inworld_LongTermMemoryConfig_new', 'void *', []),
    delete: inworld.func('inworld_LongTermMemoryConfig_delete', 'void', [
        'void *',
    ]),
    setMaxTopicSummaryLenToAppend: inworld.func('inworld_LongTermMemoryConfig_max_topic_summary_len_to_append_set', 'void', ['void *', 'int']),
    setMaxNumberOfFlashMemory: inworld.func('inworld_LongTermMemoryConfig_max_number_of_flash_memory_set', 'void', ['void *', 'int']),
    setMaxNumberOfTopics: inworld.func('inworld_LongTermMemoryConfig_max_number_of_topics_set', 'void', ['void *', 'int']),
    setTextGenerationConfig: inworld.func('inworld_LongTermMemoryConfig_text_generation_config_set', 'void', ['void *', 'void *']),
};
// STT Factory related functions
exports.STTFactoryFunctions = {
    new: inworld.func('inworld_STTFactory_new', 'void *', []),
    delete: inworld.func('inworld_STTFactory_delete', 'void', ['void *']),
};
// SpeechRecognitionConfig related functions
exports.SpeechRecognitionConfigFunctions = {
    new: inworld.func('inworld_SpeechRecognitionConfig_new', 'void *', []),
    delete: inworld.func('inworld_SpeechRecognitionConfig_delete', 'void', [
        'void *',
    ]),
};
// Remote STT Config related functions
exports.RemoteSTTConfigFunctions = {
    new: inworld.func('inworld_RemoteSTTConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteSTTConfig_delete', 'void', ['void *']),
    setApiKey: inworld.func('inworld_RemoteSTTConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
};
// Local STT Config related functions
exports.LocalSTTConfigFunctions = {
    new: inworld.func('inworld_LocalSTTConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalSTTConfig_delete', 'void', ['void *']),
    setModelPath: inworld.func('inworld_LocalSTTConfig_model_path_set', 'void', [
        'void *',
        'str',
    ]),
    setDevice: inworld.func('inworld_LocalSTTConfig_device_set', 'void', [
        'void *',
        'void *',
    ]),
};
// AudioChunk related functions
exports.AudioChunkFunctions = {
    new: inworld.func('inworld_AudioChunk_new', 'void *', []),
    delete: inworld.func('inworld_AudioChunk_delete', 'void', ['void *']),
    setSampleRate: inworld.func('inworld_AudioChunk_sample_rate_set', 'void', [
        'void *',
        'int',
    ]),
    setData: inworld.func('inworld_AudioChunk_data_set', 'void', [
        'void *',
        'void *',
    ]),
};
// STT Interface related functions
exports.STTInterfaceFunctions = {
    createRemote: util.promisify(inworld.func('inworld_STTFactory_CreateSTT_rcinworld_RemoteSTTConfig', 'void*', ['void *', 'void *']).async),
    createLocal: util.promisify(inworld.func('inworld_STTFactory_CreateSTT_rcinworld_LocalSTTConfig', 'void*', ['void *', 'void *']).async),
    delete: inworld.func('inworld_StatusOr_STTInterface_delete', 'void', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_STTInterface_ok', 'bool', ['void *']),
    get: inworld.func('inworld_StatusOr_STTInterface_value', 'void *', [
        'void *',
    ]),
    recognizeSpeech: util.promisify(inworld.func('inworld_STTInterface_RecognizeSpeech', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
};
// Voice Activity Detection Config related functions
exports.VoiceActivityDetectionConfigFunctions = {
    new: inworld.func('inworld_VoiceActivityDetectionConfig_new', 'void *', []),
    delete: inworld.func('inworld_VoiceActivityDetectionConfig_delete', 'void', [
        'void *',
    ]),
    setSpeechThreshold: inworld.func('inworld_VoiceActivityDetectionConfig_speech_threshold_set', 'void', ['void *', 'float']),
    getSpeechThreshold: inworld.func('inworld_VoiceActivityDetectionConfig_speech_threshold_get', 'float', ['void *']),
};
// Local VAD Config related functions
exports.LocalVADConfigFunctions = {
    new: inworld.func('inworld_LocalVADConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalVADConfig_delete', 'void', ['void *']),
    setModelPath: inworld.func('inworld_LocalVADConfig_model_path_set', 'void', [
        'void *',
        'str',
    ]),
    setDevice: inworld.func('inworld_LocalVADConfig_device_set', 'void', [
        'void *',
        'void *',
    ]),
    setDefaultConfig: inworld.func('inworld_LocalVADConfig_default_config_set', 'void', ['void *', 'void *']),
};
// VAD Factory related functions
exports.VADFactoryFunctions = {
    new: inworld.func('inworld_VADFactory_new', 'void *', []),
    delete: inworld.func('inworld_VADFactory_delete', 'void', ['void *']),
    createVAD: util.promisify(inworld.func('inworld_VADFactory_CreateVAD', 'void *', ['void *', 'void *'])
        .async),
};
// StatusOr_VADInterface related functions
exports.StatusOrVADInterfaceFunctions = {
    new: inworld.func('inworld_StatusOr_VADInterface_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_VADInterface_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_VADInterface_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_VADInterface_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_VADInterface_delete', 'void', [
        'void *',
    ]),
};
// VAD Interface related functions
exports.VADInterfaceFunctions = {
    delete: inworld.func('inworld_VADInterface_delete', 'void', ['void *']),
    detectVoiceActivity: util.promisify(inworld.func('inworld_VADInterface_DetectVoiceActivity', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
};
// EmojiRemover related functions
exports.EmojiRemoverFunctions = {
    create: util.promisify(inworld.func('inworld_EmojiRemover_Create', 'void *', ['void *']).async),
    delete: inworld.func('inworld_EmojiRemover_delete', 'void', ['void *']),
};
// StatusOr EmojiRemover related functions
exports.StatusOrEmojiRemoverFunctions = {
    new: inworld.func('inworld_StatusOr_EmojiRemover_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_EmojiRemover_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_EmojiRemover_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_EmojiRemover_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_EmojiRemover_delete', 'void', [
        'void *',
    ]),
};
// SubstringRemover related functions
exports.SubstringRemoverFunctions = {
    create: util.promisify(inworld.func('inworld_SubstringRemover_Create', 'void *', [
        'void *',
        'void *',
    ]).async),
    delete: inworld.func('inworld_SubstringRemover_delete', 'void', ['void *']),
};
// StatusOr SubstringRemover related functions
exports.StatusOrSubstringRemoverFunctions = {
    new: inworld.func('inworld_StatusOr_SubstringRemover_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SubstringRemover_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SubstringRemover_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_SubstringRemover_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SubstringRemover_delete', 'void', [
        'void *',
    ]),
};
// TextInBracketsRemover related functions
exports.TextInBracketsRemoverFunctions = {
    create: util.promisify(inworld.func('inworld_TextInBracketsRemover_Create', 'void *', ['void *'])
        .async),
    delete: inworld.func('inworld_TextInBracketsRemover_delete', 'void', [
        'void *',
    ]),
};
// StatusOr TextInBracketsRemover related functions
exports.StatusOrTextInBracketsRemoverFunctions = {
    new: inworld.func('inworld_StatusOr_TextInBracketsRemover_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_TextInBracketsRemover_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_TextInBracketsRemover_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_TextInBracketsRemover_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_TextInBracketsRemover_delete', 'void', ['void *']),
};
// SentenceStream related functions
exports.SentenceStreamFunctions = {
    create: util.promisify(inworld.func('inworld_SentenceStream_Create', 'void *', ['void *']).async),
    delete: inworld.func('inworld_SentenceStream_delete', 'void', ['void *']),
};
// StatusOr SentenceStream related functions
exports.StatusOrSentenceStreamFunctions = {
    new: inworld.func('inworld_StatusOr_SentenceStream_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SentenceStream_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SentenceStream_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_SentenceStream_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_SentenceStream_delete', 'void', [
        'void *',
    ]),
};
// IntentCompiler Interface related functions
exports.IntentCompilerInterfaceFunctions = {
    delete: inworld.func('inworld_IntentCompilerInterface_delete', 'void', [
        'void *',
    ]),
    compileIntents: util.promisify(inworld.func('inworld_IntentCompilerInterface_CompileIntents', 'void *', [
        'void *',
        'void *',
    ]).async),
};
// IntentCompiler Factory related functions
exports.IntentCompilerFactoryFunctions = {
    new: inworld.func('inworld_IntentCompilerFactory_new', 'void *', []),
    delete: inworld.func('inworld_IntentCompilerFactory_delete', 'void', [
        'void *',
    ]),
    createWithTextEmbedder: util.promisify(inworld.func('inworld_IntentCompilerFactory_CreateIntentCompiler_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg_', 'void *', ['void *', 'void *']).async),
    create: util.promisify(inworld.func('inworld_IntentCompilerFactory_CreateIntentCompiler', 'void *', ['void *']).async),
};
// StatusOr IntentCompiler Interface related functions
exports.StatusOrIntentCompilerInterfaceFunctions = {
    new: inworld.func('inworld_StatusOr_IntentCompilerInterface_new', 'void *', []),
    delete: inworld.func('inworld_StatusOr_IntentCompilerInterface_delete', 'void', ['void *']),
    isOK: inworld.func('inworld_StatusOr_IntentCompilerInterface_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_IntentCompilerInterface_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_IntentCompilerInterface_value', 'void *', ['void *']),
};
// Vector Intent related functions
exports.VectorIntentFunctions = {
    new: inworld.func('inworld_vector_Intent_new', 'void *', []),
    delete: inworld.func('inworld_vector_Intent_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_Intent_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
// Intent related functions
exports.IntentFunctions = {
    new: inworld.func('inworld_Intent_new', 'void *', []),
    delete: inworld.func('inworld_Intent_delete', 'void', ['void *']),
    setName: inworld.func('inworld_Intent_name_set', 'void', ['void *', 'str']),
    getName: inworld.func('inworld_Intent_name_get', 'str', ['void *']),
    setPhrases: inworld.func('inworld_Intent_phrases_set', 'void', [
        'void *',
        'void *',
    ]),
    getPhrases: inworld.func('inworld_Intent_phrases_get', 'void *', ['void *']),
};
exports.StatusOrVectorCompiledIntentFunctions = {
    new: inworld.func('inworld_StatusOr_vector_CompiledIntent_new', 'void *', []),
    delete: inworld.func('inworld_StatusOr_vector_CompiledIntent_delete', 'void', ['void *']),
    isOK: inworld.func('inworld_StatusOr_vector_CompiledIntent_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_vector_CompiledIntent_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_CompiledIntent_value', 'void *', ['void *']),
};
// Vector CompiledIntent related functions
exports.VectorCompiledIntentFunctions = {
    new: inworld.func('inworld_vector_CompiledIntent_new', 'void *', []),
    delete: inworld.func('inworld_vector_CompiledIntent_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_CompiledIntent_size', 'size_t', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_CompiledIntent_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_CompiledIntent_get', 'void *', [
        'void *',
        'int',
    ]),
};
// CompiledIntent related functions
exports.CompiledIntentFunctions = {
    new: inworld.func('inworld_CompiledIntent_new', 'void *', []),
    delete: inworld.func('inworld_CompiledIntent_delete', 'void', ['void *']),
    setName: inworld.func('inworld_CompiledIntent_name_set', 'void', [
        'void *',
        'str',
    ]),
    getName: inworld.func('inworld_CompiledIntent_name_get', 'str', ['void *']),
    setNormalizedPhrases: inworld.func('inworld_CompiledIntent_normalized_phrases_set', 'void', ['void *', 'void *']),
    getNormalizedPhrases: inworld.func('inworld_CompiledIntent_normalized_phrases_get', 'void *', ['void *']),
    setPhraseEmbeddings: inworld.func('inworld_CompiledIntent_phrase_embeddings_set', 'void', ['void *', 'void *']),
    getPhraseEmbeddings: inworld.func('inworld_CompiledIntent_phrase_embeddings_get', 'void *', ['void *']),
};
// IntentMatcher Config related functions
exports.IntentMatcherConfigFunctions = {
    new: inworld.func('inworld_IntentMatcherConfig_new', 'void *', []),
    delete: inworld.func('inworld_IntentMatcherConfig_delete', 'void', [
        'void *',
    ]),
    setEmbedding: inworld.func('inworld_IntentMatcherConfig_embedding_set', 'void', ['void *', 'void *']),
    getEmbedding: inworld.func('inworld_IntentMatcherConfig_embedding_get', 'void *', ['void *']),
    setLlm: inworld.func('inworld_IntentMatcherConfig_llm_set', 'void', [
        'void *',
        'void *',
    ]),
    getLlm: inworld.func('inworld_IntentMatcherConfig_llm_get', 'void *', [
        'void *',
    ]),
    setTopNIntents: inworld.func('inworld_IntentMatcherConfig_top_n_intents_set', 'void', ['void *', 'int']),
    getTopNIntents: inworld.func('inworld_IntentMatcherConfig_top_n_intents_get', 'int', ['void *']),
};
// IntentMatcher Creation Config related functions
exports.IntentMatcherCreationConfigFunctions = {
    new: inworld.func('inworld_IntentMatcherCreationConfig_new', 'void *', []),
    delete: inworld.func('inworld_IntentMatcherCreationConfig_delete', 'void', [
        'void *',
    ]),
    setMatcherConfig: inworld.func('inworld_IntentMatcherCreationConfig_matcher_config_set', 'void', ['void *', 'void *']),
    getMatcherConfig: inworld.func('inworld_IntentMatcherCreationConfig_matcher_config_get', 'void *', ['void *']),
    setCompiledIntents: inworld.func('inworld_IntentMatcherCreationConfig_compiled_intents_set', 'void', ['void *', 'void *']),
    getCompiledIntents: inworld.func('inworld_IntentMatcherCreationConfig_compiled_intents_get', 'void *', ['void *']),
};
// IntentMatcher Interface related functions
exports.IntentMatcherInterfaceFunctions = {
    delete: inworld.func('inworld_IntentMatcherInterface_delete', 'void', [
        'void *',
    ]),
    matchIntents: util.promisify(inworld.func('inworld_IntentMatcherInterface_MatchIntents', 'void *', [
        'void *',
        'str',
    ]).async),
};
// IntentMatcher Factory related functions
exports.IntentMatcherFactoryFunctions = {
    new: inworld.func('inworld_IntentMatcherFactory_new', 'void *', []),
    delete: inworld.func('inworld_IntentMatcherFactory_delete', 'void', [
        'void *',
    ]),
    createWithTextEmbedderAndLLM: util.promisify(inworld.func('inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__std_shared_ptr_Sl_inworld_LLMInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig', 'void *', ['void *', 'void *', 'void *', 'void *']).async),
    createWithTextEmbedder: util.promisify(inworld.func('inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig', 'void *', ['void *', 'void *', 'void *']).async),
    createWithLLM: util.promisify(inworld.func('inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_LLMInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig', 'void *', ['void *', 'void *', 'void *']).async),
};
// StatusOr IntentMatcher Interface related functions
exports.StatusOrIntentMatcherInterfaceFunctions = {
    new: inworld.func('inworld_StatusOr_IntentMatcherInterface_new', 'void *', []),
    delete: inworld.func('inworld_StatusOr_IntentMatcherInterface_delete', 'void', ['void *']),
    isOK: inworld.func('inworld_StatusOr_IntentMatcherInterface_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_IntentMatcherInterface_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_IntentMatcherInterface_value', 'void *', ['void *']),
};
// StatusOr Vector IntentMatch related functions
exports.StatusOrVectorIntentMatchFunctions = {
    new: inworld.func('inworld_StatusOr_vector_IntentMatch_new', 'void *', []),
    delete: inworld.func('inworld_StatusOr_vector_IntentMatch_delete', 'void', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_vector_IntentMatch_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_vector_IntentMatch_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_IntentMatch_value', 'void *', ['void *']),
};
// Vector IntentMatch related functions
exports.VectorIntentMatchFunctions = {
    new: inworld.func('inworld_vector_IntentMatch_new', 'void *', []),
    delete: inworld.func('inworld_vector_IntentMatch_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_IntentMatch_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_vector_IntentMatch_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_IntentMatch_get', 'void *', [
        'void *',
        'int',
    ]),
};
// IntentMatch related functions
exports.IntentMatchFunctions = {
    new: inworld.func('inworld_IntentMatch_new', 'void *', []),
    delete: inworld.func('inworld_IntentMatch_delete', 'void', ['void *']),
    setIntentName: inworld.func('inworld_IntentMatch_intent_name_set', 'void', [
        'void *',
        'str',
    ]),
    getIntentName: inworld.func('inworld_IntentMatch_intent_name_get', 'str', [
        'void *',
    ]),
    setScore: inworld.func('inworld_IntentMatch_score_set', 'void', [
        'void *',
        'float',
    ]),
    getScore: inworld.func('inworld_IntentMatch_score_get', 'float', ['void *']),
};
// Vector KeywordMatch related functions
exports.VectorKeywordMatchFunctions = {
    new: inworld.func('inworld_vector_KeywordMatch_new', 'void *', []),
    delete: inworld.func('inworld_vector_KeywordMatch_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_KeywordMatch_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_vector_KeywordMatch_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_KeywordMatch_get', 'void *', [
        'void *',
        'int',
    ]),
};
// KeywordMatch related functions
exports.KeywordMatchFunctions = {
    new: inworld.func('inworld_KeywordMatch_new', 'void *', []),
    delete: inworld.func('inworld_KeywordMatch_delete', 'void', ['void *']),
    getGroupName: inworld.func('inworld_KeywordMatch_group_name_get', 'str', [
        'void *',
    ]),
    getKeyword: inworld.func('inworld_KeywordMatch_keyword_get', 'str', [
        'void *',
    ]),
};
// ListToolsData related functions
exports.ListToolsDataFunctions = {
    new: inworld.func('inworld_ListToolsData_new_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolData_Sg__Sg_', 'void *', ['void *']),
    delete: inworld.func('inworld_ListToolsData_delete', 'void', ['void *']),
    isValid: inworld.func('inworld_ListToolsData_is_valid', 'bool', ['void *']),
    toString: inworld.func('inworld_ListToolsData_ToString', 'str', ['void *']),
    getListToolsSwig: inworld.func('inworld_ListToolsData_list_tools_swig', 'void *', ['void *']),
    toListToolsData: inworld.func('inworld_BaseDataAs_ListToolsData', 'void *', [
        'void *',
    ]),
};
exports.ToolDataFunctions = {
    new: inworld.func('inworld_ToolData_new', 'void *', ['void *']),
    delete: inworld.func('inworld_ToolData_delete', 'void', ['void *']),
    isValid: inworld.func('inworld_ToolData_is_valid', 'bool', ['void *']),
    toString: inworld.func('inworld_ToolData_ToString', 'str', ['void *']),
    getTool: inworld.func('inworld_ToolData_tool', 'void *', ['void *']),
};
exports.VectorToolDataFunctions = {
    new: inworld.func('inworld_vector_ToolData_new', 'void *', []),
    delete: inworld.func('inworld_vector_ToolData_delete', 'void', ['void *']),
    size: inworld.func('inworld_vector_ToolData_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_vector_ToolData_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_ToolData_get', 'void *', ['void *', 'int']),
    isEmpty: inworld.func('inworld_vector_ToolData_empty', 'bool', ['void *']),
};
exports.ListToolCallsResultsFunctions = {
    new: inworld.func('inworld_ListToolCallsResults_new_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallResult_Sg__Sg_', 'void *', ['void *']),
    delete: inworld.func('inworld_ListToolCallsResults_delete', 'void', [
        'void *',
    ]),
    isValid: inworld.func('inworld_ListToolCallsResults_is_valid', 'bool', [
        'void *',
    ]),
    getToolCallResultsSwig: inworld.func('inworld_ListToolCallsResults_tool_call_results_swig', 'void *', ['void *']),
    toListToolCallsResults: inworld.func('inworld_BaseDataAs_ListToolCallsResults', 'void *', ['void *']),
};
exports.ToolCallResultFunctions = {
    new: inworld.func('inworld_ToolCallResult_new', 'void *', ['str', 'str']),
    delete: inworld.func('inworld_ToolCallResult_delete', 'void', ['void *']),
    isValid: inworld.func('inworld_ToolCallResult_is_valid', 'bool', ['void *']),
    toString: inworld.func('inworld_ToolCallResult_ToString', 'str', ['void *']),
    getToolCallId: inworld.func('inworld_ToolCallResult_tool_call_id', 'str', [
        'void *',
    ]),
    getResult: inworld.func('inworld_ToolCallResult_result', 'str', ['void *']),
    toToolCallResult: inworld.func('inworld_BaseDataAs_ToolCallResult', 'void *', ['void *']),
};
exports.VectorToolCallResultFunctions = {
    new: inworld.func('inworld_vector_ToolCallResult_new', 'void *', []),
    delete: inworld.func('inworld_vector_ToolCallResult_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_ToolCallResult_size', 'size_t', [
        'void *',
    ]),
    get: inworld.func('inworld_vector_ToolCallResult_get', 'void *', [
        'void *',
        'int',
    ]),
    pushBack: inworld.func('inworld_vector_ToolCallResult_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
exports.ListToolCallDataFunctions = {
    new: inworld.func('inworld_ListToolCallData_new_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallData_Sg__Sg_', 'void *', ['void *']),
    delete: inworld.func('inworld_ListToolCallData_delete', 'void', ['void *']),
    isValid: inworld.func('inworld_ListToolCallData_is_valid', 'bool', [
        'void *',
    ]),
    getToolCallsSwig: inworld.func('inworld_ListToolCallData_tool_calls_swig', 'void *', ['void *']),
    toListToolCallData: inworld.func('inworld_BaseDataAs_ListToolCallData', 'void *', ['void *']),
};
exports.ToolCallDataFunctions = {
    new: inworld.func('inworld_ToolCallData_new', 'void *', ['void *']),
    delete: inworld.func('inworld_ToolCallData_delete', 'void', ['void *']),
    isValid: inworld.func('inworld_ToolCallData_is_valid', 'bool', ['void *']),
    getToolCall: inworld.func('inworld_ToolCallData_tool_call', 'void *', [
        'void *',
    ]),
    toToolCallData: inworld.func('inworld_BaseDataAs_ToolCallData', 'void *', [
        'void *',
    ]),
};
exports.VectorToolCallDataFunctions = {
    new: inworld.func('inworld_vector_ToolCallData_new', 'void *', []),
    delete: inworld.func('inworld_vector_ToolCallData_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_ToolCallData_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_ToolCallData_get', 'void *', [
        'void *',
        'int',
    ]),
    pushBack: inworld.func('inworld_vector_ToolCallData_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
// Optional EmbeddingMatcherConfig related functions
exports.OptionalEmbeddingMatcherConfigFunctions = {
    newWithValue: inworld.func('inworld_optional_EmbeddingMatcherConfig_new_rcinworld_EmbeddingMatcherConfig', 'void *', ['void *']),
    delete: inworld.func('inworld_optional_EmbeddingMatcherConfig_delete', 'void', ['void *']),
    hasValue: inworld.func('inworld_optional_EmbeddingMatcherConfig_has_value', 'bool', ['void *']),
    valueConst: inworld.func('inworld_optional_EmbeddingMatcherConfig_valueConst', 'void *', ['void *']),
};
// EmbeddingMatcherConfig related functions
exports.EmbeddingMatcherConfigFunctions = {
    new: inworld.func('inworld_EmbeddingMatcherConfig_new', 'void *', []),
    delete: inworld.func('inworld_EmbeddingMatcherConfig_delete', 'void', [
        'void *',
    ]),
    setSimilarityThreshold: inworld.func('inworld_EmbeddingMatcherConfig_similarity_threshold_set', 'void', ['void *', 'float']),
    getSimilarityThreshold: inworld.func('inworld_EmbeddingMatcherConfig_similarity_threshold_get', 'float', ['void *']),
};
// Optional LlmMatcherConfig related functions
exports.OptionalLlmMatcherConfigFunctions = {
    newWithValue: inworld.func('inworld_optional_LlmMatcherConfig_new_rcinworld_LlmMatcherConfig', 'void *', ['void *']),
    delete: inworld.func('inworld_optional_LlmMatcherConfig_delete', 'void', [
        'void *',
    ]),
    valueConst: inworld.func('inworld_optional_LlmMatcherConfig_valueConst', 'void *', ['void *']),
};
// LlmMatcherConfig related functions
exports.LlmMatcherConfigFunctions = {
    new: inworld.func('inworld_LlmMatcherConfig_new', 'void *', []),
    delete: inworld.func('inworld_LlmMatcherConfig_delete', 'void', ['void *']),
    setGenerationConfig: inworld.func('inworld_LlmMatcherConfig_generation_config_set', 'void', ['void *', 'void *']),
    getGenerationConfig: inworld.func('inworld_LlmMatcherConfig_generation_config_get', 'void *', ['void *']),
    setPromptTemplate: inworld.func('inworld_LlmMatcherConfig_prompt_template_set', 'void', ['void *', 'str']),
    getPromptTemplate: inworld.func('inworld_LlmMatcherConfig_prompt_template_get', 'str', ['void *']),
    setEmbeddingSimilarityThreshold: inworld.func('inworld_LlmMatcherConfig_embedding_similarity_threshold_set', 'void', ['void *', 'void *']),
    getEmbeddingSimilarityThreshold: inworld.func('inworld_LlmMatcherConfig_embedding_similarity_threshold_get', 'void *', ['void *']),
    setMaxEmbeddingMatchesForLlm: inworld.func('inworld_LlmMatcherConfig_max_embedding_matches_for_llm_set', 'void', ['void *', 'void *']),
    getMaxEmbeddingMatchesForLlm: inworld.func('inworld_LlmMatcherConfig_max_embedding_matches_for_llm_get', 'void *', ['void *']),
};
// Optional Float related functions
exports.OptionalFloatFunctions = {
    newWithValue: inworld.func('inworld_optional_float_new_rcf', 'void *', [
        'float',
    ]),
    delete: inworld.func('inworld_optional_float_delete', 'void', ['void *']),
    hasValue: inworld.func('inworld_optional_float_has_value', 'bool', [
        'void *',
    ]),
    valueConst: inworld.func('inworld_optional_float_valueConst', 'float', [
        'void *',
    ]),
};
// StatusOr int related functions
exports.StatusOrIntFunctions = {
    new: inworld.func('inworld_StatusOr_int_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_int_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_int_value', 'int', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_int_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_int_delete', 'void', ['void *']),
};
// StatusOr Json related functions
exports.StatusOrJsonFunctions = {
    new: inworld.func('inworld_StatusOr_Json_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_Json_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_Json_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_Json_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_Json_delete', 'void', ['void *']),
};
// StatusOr_SharedPtr functions for various nodes
exports.StatusOrSharedPtrLLMChatNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_LLMChatNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_LLMChatNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_LLMChatNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_LLMChatNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_LLMChatNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrLLMCompletionNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_LLMCompletionNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_LLMCompletionNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_LLMCompletionNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_LLMCompletionNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_LLMCompletionNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrLLMChatRequestBuilderNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrLLMPromptBuilderNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrGoalAdvancementNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_GoalAdvancementNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_GoalAdvancementNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_GoalAdvancementNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_GoalAdvancementNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_GoalAdvancementNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrIntentNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_IntentNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_IntentNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_IntentNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_IntentNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_IntentNode_delete', 'void', [
        'void *',
    ]),
};
exports.StatusOrSharedPtrKnowledgeNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_KnowledgeNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_KnowledgeNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_KnowledgeNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_KnowledgeNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_KnowledgeNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrMemoryUpdateNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_MemoryUpdateNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_MemoryUpdateNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_MemoryUpdateNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_MemoryUpdateNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_MemoryUpdateNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrMemoryRetrieveNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_MemoryRetrieveNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_MemoryRetrieveNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_MemoryRetrieveNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_MemoryRetrieveNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_MemoryRetrieveNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrRandomCannedTextNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_RandomCannedTextNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_RandomCannedTextNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_RandomCannedTextNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_RandomCannedTextNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_RandomCannedTextNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrSafetyCheckerNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_SafetyCheckerNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_SafetyCheckerNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_SafetyCheckerNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_SafetyCheckerNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_SafetyCheckerNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrKeywordMatcherNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_KeywordMatcherNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_KeywordMatcherNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_KeywordMatcherNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_KeywordMatcherNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_KeywordMatcherNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrSTTNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_STTNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_STTNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_STTNode_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_STTNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_STTNode_delete', 'void', [
        'void *',
    ]),
};
exports.StatusOrSharedPtrTextAggregatorNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_TextAggregatorNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_TextAggregatorNode_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_TextAggregatorNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_TextAggregatorNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_TextAggregatorNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrTextChunkingNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_TextChunkingNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_TextChunkingNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_TextChunkingNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_TextChunkingNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_TextChunkingNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrTTSNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_TTSNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_TTSNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_TTSNode_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_TTSNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_TTSNode_delete', 'void', [
        'void *',
    ]),
};
exports.StatusOrSharedPtrMCPListToolsNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_MCPListToolsNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_MCPListToolsNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_MCPListToolsNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_MCPListToolsNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_MCPListToolsNode_delete', 'void', ['void *']),
};
exports.StatusOrSharedPtrMCPCallToolNodeFunctions = {
    new: inworld.func('inworld_StatusOr_SharedPtr_MCPCallToolNode_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_SharedPtr_MCPCallToolNode_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SharedPtr_MCPCallToolNode_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SharedPtr_MCPCallToolNode_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SharedPtr_MCPCallToolNode_delete', 'void', ['void *']),
};
exports.GraphFunctions = {
    new: inworld.func('inworld_Graph_new', 'void *', ['str']),
    delete: inworld.func('inworld_Graph_delete', 'void', ['void *']),
    addNode: inworld.func('inworld_Graph_AddNode', 'void', ['void *', 'void *']),
    createEdge: inworld.func('inworld_Graph_CreateEdge', 'void *', [
        'void *',
        'void *',
        'void *',
    ]),
    setAsStart: inworld.func('inworld_Graph_SetAsStart', 'void', [
        'void *',
        'void *',
    ]),
    setAsEnd: inworld.func('inworld_Graph_SetAsEnd', 'void', [
        'void *',
        'void *',
    ]),
    compiledGraphStatus: inworld.func('inworld_StatusOr_CompiledGraphInterfacePtr_status', 'void*', ['void*']),
    compiledGraphStatusDelete: inworld.func('inworld_StatusOr_CompiledGraphInterfacePtr_delete', 'void', ['void*']),
    compiledGraphStatusIsOK: inworld.func('inworld_StatusOr_CompiledGraphInterfacePtr_ok', 'bool', ['void*']),
    compiledGraphStatusValue: inworld.func('inworld_StatusOr_CompiledGraphInterfacePtr_value', 'void*', ['void*']),
    compiledGraphDelete: inworld.func('inworld_CompiledGraphInterface_delete', 'void', ['void*']),
    jsonFromString: inworld.func('inworld_Json_FromString', 'void*', ['str']),
    visualize: util.promisify(inworld.func('inworld_CompiledGraphInterface_Visualize', 'void*', [
        'void *',
        'str',
    ]).async),
    compileAndReturnRaw: inworld.func('inworld_Graph_CompileAndReturnRaw', 'void *', ['void *']),
    getCreationContextHelper: inworld.func('inworld_Graph_GetCreationContextHelper', 'void *', ['void *']),
};
// EdgeWrapper related functions
exports.EdgeWrapperFunctions = {
    copy: inworld.func('inworld_EdgeWrapper_copy', 'void *', ['void *']),
    setCondition: inworld.func('inworld_EdgeWrapper_SetCondition_rcinworld_swig_helpers_EdgeConditionThreadedExecutor', 'void', ['void *', 'void *']),
    setConditionCallback: inworld.func('inworld_EdgeWrapper_SetConditionCallback', 'void', ['void *', 'void *']),
    setToOptional: inworld.func('inworld_EdgeWrapper_SetToOptional', 'void', [
        'void *',
    ]),
    setToLoop: inworld.func('inworld_EdgeWrapper_SetToLoop', 'void', ['void *']),
    build: inworld.func('inworld_EdgeWrapper_Build', 'void', ['void *']),
    delete: inworld.func('inworld_EdgeWrapper_delete', 'void', ['void *']),
};
// EdgeConditionExecutor related functions
exports.EdgeConditionExecutorFunctions = {
    new: inworld.func('inworld_EdgeConditionThreadedExecutor_new', 'void *', [
        'void *',
        'void *',
    ]),
    getInput: inworld.func('inworld_EdgeConditionThreadedExecutor_GetInput', 'void *', ['int']),
    setOutput: inworld.func('inworld_EdgeConditionThreadedExecutor_SetOutput', 'void', ['int', 'bool']),
    delete: inworld.func('inworld_EdgeConditionThreadedExecutor_delete', 'void', [
        'void *',
    ]),
};
// VectorNode-related functions
exports.VectorNodeFunctions = {
    new: inworld.func('inworld_vector_Node_new', 'void *', []),
    delete: inworld.func('inworld_vector_Node_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_Node_push_back', 'void', [
        'void *',
        'void *',
    ]),
    size: inworld.func('inworld_vector_Node_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_Node_get', 'void *', ['void *', 'int']),
};
// Executor-related functions
exports.GraphExecutorFunctions = {
    factoryHelperCreate: inworld.func('inworld_GraphExecutorFactoryHelper_Create_pinworld_graphs_CompiledGraphInterface_rcinworld_graphs_GraphExecutorConfig', 'void *', ['void *', 'void *']),
    createExecutor: inworld.func('inworld_GraphExecutorFactoryHelper_Create_pinworld_graphs_CompiledGraphInterface', 'void *', ['void *']),
    factoryHelperDelete: inworld.func('inworld_GraphExecutorFactoryHelper_delete', 'void', ['void *']),
    delete: inworld.func('inworld_ExecutorInterface_delete', 'void', ['void *']),
    start: inworld.func('inworld_ExecutorInterface_Start', 'void', ['void *']),
    stop: inworld.func('inworld_ExecutorInterface_Stop', 'void', ['void *']),
    execute: inworld.func('inworld_ExecutorInterface_ExecuteSimplified', 'int', [
        'void *',
        'void *',
        'str',
    ]),
    executeWithUserContext: inworld.func('inworld_ExecutorInterface_ExecuteSimplifiedWithUserContext', 'int', ['void *', 'void *', 'str', 'void *']),
    hasMoreResults: util.promisify(inworld.func('inworld_ExecutorInterface_HasMoreResults', 'bool', [
        'void *',
        'int',
    ]).async),
    next: util.promisify(inworld.func('inworld_ExecutorInterface_GetNextResult', 'void *', [
        'void *',
        'int',
    ]).async),
    closeExecution: inworld.func('inworld_ExecutorInterface_CloseExecution', 'void', ['void *', 'int']),
    cleanupAllExecutions: inworld.func('inworld_ExecutorInterface_CleanupAllExecutions', 'void', ['void *']),
};
// BTreeMap_StringToString-related functions
exports.BTreeMapStringToStringFunctions = {
    new: inworld.func('inworld_BTreeMap_StringToString_new', 'void *', []),
    delete: inworld.func('inworld_BTreeMap_StringToString_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_BTreeMap_StringToString_size', 'size_t', [
        'void *',
    ]),
    empty: inworld.func('inworld_BTreeMap_StringToString_empty', 'bool', [
        'void *',
    ]),
    clear: inworld.func('inworld_BTreeMap_StringToString_clear', 'void', [
        'void *',
    ]),
    get: inworld.func('inworld_BTreeMap_StringToString___getitem__', 'str', [
        'void *',
        'str',
    ]),
    set: inworld.func('inworld_BTreeMap_StringToString___setitem__', 'void', [
        'void *',
        'str',
        'str',
    ]),
    contains: inworld.func('inworld_BTreeMap_StringToString___contains__', 'bool', ['void *', 'str']),
};
// UserContext-related functions
exports.UserContextFunctions = {
    new: inworld.func('inworld_UserContext_new', 'void *', []),
    delete: inworld.func('inworld_UserContext_delete', 'void', ['void *']),
    getAttributes: inworld.func('inworld_UserContext_attributes_get', 'void *', [
        'void *',
    ]),
    setAttributes: inworld.func('inworld_UserContext_attributes_set', 'void', [
        'void *',
        'void *',
    ]),
    getTargetingKey: inworld.func('inworld_UserContext_targeting_key_get', 'str', ['void *']),
    setTargetingKey: inworld.func('inworld_UserContext_targeting_key_set', 'void', ['void *', 'str']),
};
// TextData-related functions
exports.TextDataFunctions = {
    new: inworld.func('inworld_Text_new_std_string', 'void *', ['str']),
    toString: inworld.func('inworld_Text_ToString', 'str', ['void *']),
    delete: inworld.func('inworld_Text_delete', 'void', ['void *']),
};
exports.AudioDataFunctions = {
    new: inworld.func('inworld_Audio_new', 'void *', ['void *', 'int']),
    waveForm: inworld.func('inworld_Audio_waveform', 'void *', ['void *']),
    sampleRate: inworld.func('inworld_Audio_sample_rate', 'int', ['void *']),
};
exports.JsonDataFunctions = {
    fromString: inworld.func('inworld_Json_FromString', 'void *', ['str']),
    toString: inworld.func('inworld_Json_ToString', 'str', ['void *']),
    valueAsString: inworld.func('inworld_Json_value_as_string', 'str', [
        'void *',
    ]),
    isValid: inworld.func('inworld_Json_is_valid', 'bool', ['void *']),
    delete: inworld.func('inworld_Json_delete', 'void', ['void *']),
};
exports.LLMChatRequestFunctions = {
    new: inworld.func('inworld_LLMChatRequest_new_std_vector_Sl_inworld_Message_Sg_', 'void *', ['void *']),
    newFull: inworld.func('inworld_LLMChatRequest_new_std_vector_Sl_inworld_Message_Sg__std_vector_Sl_inworld_Tool_Sg__std_optional_Sl_inworld_ToolChoice_Sg__eResponseFormat', 'void *', ['void *', 'void *', 'void *', 'int']),
    toBaseData: inworld.func('inworld_BaseDataAs_LLMChatRequest', 'void *', [
        'void *',
    ]),
    isValid: inworld.func('inworld_LLMChatRequest_is_valid', 'bool', ['void *']),
    getMessages: inworld.func('inworld_LLMChatRequest_messages', 'void *', [
        'void *',
    ]),
    getTools: inworld.func('inworld_LLMChatRequest_tools', 'void *', ['void *']),
    getToolChoice: inworld.func('inworld_LLMChatRequest_tool_choice', 'void *', [
        'void *',
    ]),
    getResponseFormat: inworld.func('inworld_LLMChatRequest_response_format', 'int', ['void *']),
    toString: inworld.func('inworld_LLMChatRequest_ToString', 'str', ['void *']),
    delete: inworld.func('inworld_LLMChatRequest_delete', 'void', ['void *']),
};
exports.MessagesFunctions = {
    new: inworld.func('inworld_Messages_new', 'void *', []),
    delete: inworld.func('inworld_Messages_delete', 'void', ['void *']),
    size: inworld.func('inworld_Messages_size', 'size_t', ['void *']),
    capacity: inworld.func('inworld_Messages_capacity', 'size_t', ['void *']),
    reserve: inworld.func('inworld_Messages_reserve', 'void', [
        'void *',
        'size_t',
    ]),
    isEmpty: inworld.func('inworld_Messages_empty', 'bool', ['void *']),
    clear: inworld.func('inworld_Messages_clear', 'void', ['void *']),
    pushBack: inworld.func('inworld_Messages_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_Messages_get', 'void *', ['void *', 'int']),
    set: inworld.func('inworld_Messages_set', 'void', [
        'void *',
        'int',
        'void *',
    ]),
};
exports.MessageFunctions = {
    new: inworld.func('inworld_Message_new', 'void *', []),
    delete: inworld.func('inworld_Message_delete', 'void', ['void *']),
    setRole: inworld.func('inworld_Message_role_set', 'void', ['void *', 'str']),
    getRole: inworld.func('inworld_Message_role_get', 'str', ['void *']),
    setContent: inworld.func('inworld_Message_SetTextContent', 'void', [
        'void *',
        'str',
    ]),
    getContent: inworld.func('inworld_Message_GetTextContent', 'str', ['void *']),
    setToolCalls: inworld.func('inworld_Message_tool_calls_set', 'void', [
        'void *',
        'void *',
    ]),
    getToolCalls: inworld.func('inworld_Message_tool_calls_get', 'void *', [
        'void *',
    ]),
    setToolCallId: inworld.func('inworld_Message_tool_call_id_set', 'void', [
        'void *',
        'str',
    ]),
    getToolCallId: inworld.func('inworld_Message_tool_call_id_get', 'str', [
        'void *',
    ]),
    // Add multimodal content support
    isTextContent: inworld.func('inworld_Message_IsTextContent', 'bool', [
        'void *',
    ]),
    isMultimodalContent: inworld.func('inworld_Message_IsMultimodalContent', 'bool', ['void *']),
    getContentItems: inworld.func('inworld_Message_GetContentItems', 'void *', [
        'void *',
    ]),
    setContentItems: inworld.func('inworld_Message_SetContentItems', 'void', [
        'void *',
        'void *',
    ]),
};
exports.ImageUrlFunctions = {
    new: inworld.func('inworld_ImageUrl_new', 'void *', []),
    delete: inworld.func('inworld_ImageUrl_delete', 'void', ['void *']),
    setUrl: inworld.func('inworld_ImageUrl_url_set', 'void', ['void *', 'str']),
    getUrl: inworld.func('inworld_ImageUrl_url_get', 'str', ['void *']),
    setDetail: inworld.func('inworld_ImageUrl_detail_set', 'void', [
        'void *',
        'str',
    ]),
    getDetail: inworld.func('inworld_ImageUrl_detail_get', 'str', ['void *']),
};
exports.ContentItemFunctions = {
    new: inworld.func('inworld_ContentItem_new', 'void *', []),
    delete: inworld.func('inworld_ContentItem_delete', 'void', ['void *']),
    isText: inworld.func('inworld_ContentItem_IsText', 'bool', ['void *']),
    isImage: inworld.func('inworld_ContentItem_IsImage', 'bool', ['void *']),
    getText: inworld.func('inworld_ContentItem_GetText', 'str', ['void *']),
    getImageUrl: inworld.func('inworld_ContentItem_GetImageUrl', 'void *', [
        'void *',
    ]),
    setText: inworld.func('inworld_ContentItem_SetText', 'void', [
        'void *',
        'str',
    ]),
    setImageUrl: inworld.func('inworld_ContentItem_SetImageUrl', 'void', [
        'void *',
        'void *',
    ]),
};
exports.ContentItemsVectorFunctions = {
    new: inworld.func('inworld_ContentItems_new', 'void *', []),
    delete: inworld.func('inworld_ContentItems_delete', 'void', ['void *']),
    size: inworld.func('inworld_ContentItems_size', 'size_t', ['void *']),
    empty: inworld.func('inworld_ContentItems_empty', 'bool', ['void *']),
    pushBack: inworld.func('inworld_ContentItems_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_ContentItems_get', 'void *', ['void *', 'int']),
    set: inworld.func('inworld_ContentItems_set', 'void', [
        'void *',
        'int',
        'void *',
    ]),
    clear: inworld.func('inworld_ContentItems_clear', 'void', ['void *']),
};
exports.FunctionChoiceFunctions = {
    new: inworld.func('inworld_FunctionChoice_new', 'void *', []),
    delete: inworld.func('inworld_FunctionChoice_delete', 'void', ['void *']),
    setType: inworld.func('inworld_FunctionChoice_type_set', 'void', [
        'void *',
        'str',
    ]),
    getType: inworld.func('inworld_FunctionChoice_type_get', 'str', ['void *']),
    setName: inworld.func('inworld_FunctionChoice_name_set', 'void', [
        'void *',
        'str',
    ]),
    getName: inworld.func('inworld_FunctionChoice_name_get', 'str', ['void *']),
};
exports.ToolChoiceFunctions = {
    new: inworld.func('inworld_ToolChoice_new', 'void *', []),
    delete: inworld.func('inworld_ToolChoice_delete', 'void', ['void *']),
    isStringChoice: inworld.func('inworld_ToolChoice_IsStringChoice', 'bool', [
        'void *',
    ]),
    isFunctionChoice: inworld.func('inworld_ToolChoice_IsFunctionChoice', 'bool', ['void *']),
    getStringChoice: inworld.func('inworld_ToolChoice_GetStringChoice', 'str', [
        'void *',
    ]),
    getFunctionChoice: inworld.func('inworld_ToolChoice_GetFunctionChoice', 'void *', ['void *']),
    setStringChoice: inworld.func('inworld_ToolChoice_SetStringChoice', 'void', [
        'void *',
        'str',
    ]),
    setFunctionChoice: inworld.func('inworld_ToolChoice_SetFunctionChoice', 'void', ['void *', 'void *']),
};
// Add OptionalToolChoice functions
exports.OptionalToolChoiceFunctions = {
    new: inworld.func('inworld_OptionalToolChoice_new', 'void *', []),
    newWithValue: inworld.func('inworld_OptionalToolChoice_new_rcinworld_ToolChoice', 'void *', ['void *']),
    delete: inworld.func('inworld_OptionalToolChoice_delete', 'void', ['void *']),
    hasValue: inworld.func('inworld_OptionalToolChoice_has_value', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_OptionalToolChoice_value', 'void *', [
        'void *',
    ]),
    setValue: inworld.func('inworld_OptionalToolChoice_set_value', 'void', [
        'void *',
        'void *',
    ]),
    reset: inworld.func('inworld_OptionalToolChoice_reset', 'void', ['void *']),
};
exports.LLMChatResponseFunctions = {
    toBaseData: inworld.func('inworld_BaseDataAs_LLMChatResponse', 'void *', [
        'void *',
    ]),
    isValid: inworld.func('inworld_LLMChatResponse_is_valid', 'bool', ['void *']),
    isStreaming: inworld.func('inworld_LLMChatResponse_is_streaming', 'bool', [
        'void *',
    ]),
    getStream: inworld.func('inworld_LLMChatResponse_get_response_stream', 'void *', ['void *']),
    getContent: inworld.func('inworld_LLMChatResponse_get_response_content', 'void *', ['void *']),
    hasCompleteContent: inworld.func('inworld_LLMChatResponse_has_complete_content', 'bool', ['void *']),
    toString: inworld.func('inworld_LLMChatResponse_ToString', 'str', ['void *']),
};
exports.LLMCompletionResponseFunctions = {
    toBaseData: inworld.func('inworld_BaseDataAs_LLMCompletionResponse', 'void *', ['void *']),
    isValid: inworld.func('inworld_LLMCompletionResponse_is_valid', 'bool', [
        'void *',
    ]),
    isStreaming: inworld.func('inworld_LLMCompletionResponse_is_streaming', 'bool', ['void *']),
    getStream: inworld.func('inworld_LLMCompletionResponse_get_input_stream', 'void *', ['void *']),
    getText: inworld.func('inworld_LLMCompletionResponse_get_content_text', 'str', ['void *']),
};
// BaseData-related functions
exports.BaseDataFunctions = {
    delete: inworld.func('inworld_BaseData_delete', 'void', ['void *']),
    toString: inworld.func('inworld_BaseData_ToString', 'str', ['void *']),
    errorToString: inworld.func('inworld_Error_ToString', 'str', ['void *']),
    asText: inworld.func('inworld_BaseDataAs_Text', 'void *', ['void *']),
};
// VectorBaseData-related functions
exports.VectorBaseDataFunctions = {
    new: inworld.func('inworld_vector_BaseData_new', 'void *', []),
    delete: inworld.func('inworld_vector_BaseData_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_BaseData_push_back', 'void', [
        'void *',
        'void *',
    ]),
    size: inworld.func('inworld_vector_BaseData_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_BaseData_safe_get', 'void *', [
        'void *',
        'size_t',
    ]),
};
// StatusOrBaseData-related functions
exports.StatusOrBaseDataFunctions = {
    newFromStatus: inworld.func('inworld_StatusOr_string_new_rcabsl_Status', 'void *', ['void *']),
    newFromBaseData: inworld.func('inworld_StatusOr_BaseData_new_rcstd_shared_ptr_Sl_inworld_graphs_BaseData_Sg_', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_BaseData_delete', 'void', ['void *']),
};
// TTSOutput-related functions
exports.TTSOutputFunctions = {
    new: inworld.func('inworld_TTSOutput_new', 'void *', ['str', 'void *']),
    toStream: inworld.func('inworld_BaseDataAs_DataStream_TTSOutput', 'void *', [
        'void *',
    ]),
    isValid: inworld.func('inworld_DataStream_TTSOutput_is_valid', 'bool', [
        'void *',
    ]),
    getStream: inworld.func('inworld_DataStream_TTSOutput_stream', 'void *', [
        'void *',
    ]),
    streamHasNext: util.promisify(inworld.func('inworld_InputStream_TTSOutput_HasNext', 'bool', ['void *'])
        .async),
    streamRead: util.promisify(inworld.func('inworld_InputStream_TTSOutput_Read', 'void *', ['void *'])
        .async),
    streamDelete: inworld.func('inworld_InputStream_TTSOutput_delete', 'void', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_TTSOutput_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_TTSOutput_status', 'void *', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_TTSOutput_ok', 'bool', ['void *']),
    getText: inworld.func('inworld_TTSOutput_text_get', 'str', ['void *']),
    getAudio: inworld.func('inworld_TTSOutput_safe_audio', 'void *', ['void *']),
    audioDelete: inworld.func('inworld_Audio_delete', 'void', ['void *']),
};
// Safety Checker Factory related functions
exports.SafetyCheckerFactoryFunctions = {
    new: inworld.func('inworld_SafetyCheckerFactory_new', 'void *', []),
    delete: inworld.func('inworld_SafetyCheckerFactory_delete', 'void', [
        'void *',
    ]),
    createSafetyChecker: util.promisify(inworld.func('inworld_SafetyCheckerFactory_CreateSafetyChecker', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
};
// Safety Checker Creation Config related functions
exports.SafetyCheckerCreationConfigFunctions = {
    new: inworld.func('inworld_SafetyCheckerCreationConfig_new', 'void *', []),
    delete: inworld.func('inworld_SafetyCheckerCreationConfig_delete', 'void', [
        'void *',
    ]),
    setModelWeightsPath: inworld.func('inworld_SafetyCheckerCreationConfig_model_weights_path_set', 'void', ['void *', 'str']),
};
// Topic Threshold related functions
exports.TopicThresholdFunctions = {
    new: inworld.func('inworld_TopicThreshold_new', 'void *', []),
    delete: inworld.func('inworld_TopicThreshold_delete', 'void', ['void *']),
    setTopicName: inworld.func('inworld_TopicThreshold_topic_name_set', 'void', [
        'void *',
        'int',
    ]),
    setConfidence: inworld.func('inworld_TopicThreshold_threshold_set', 'void', [
        'void *',
        'float',
    ]),
};
// Detected Topic related functions
exports.DetectedTopicFunctions = {
    new: inworld.func('inworld_DetectedTopic_new', 'void *', []),
    delete: inworld.func('inworld_DetectedTopic_delete', 'void', ['void *']),
    getTopicName: inworld.func('inworld_DetectedTopic_topic_name_get', 'int', [
        'void *',
    ]),
    getConfidence: inworld.func('inworld_DetectedTopic_confidence_get', 'float', [
        'void *',
    ]),
};
// Vector DetectedTopic functions
exports.VectorDetectedTopicFunctions = {
    new: inworld.func('inworld_vector_DetectedTopic_new', 'void *', []),
    delete: inworld.func('inworld_vector_DetectedTopic_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_vector_DetectedTopic_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_DetectedTopic_get', 'void *', [
        'void *',
        'int',
    ]),
    pushBack: inworld.func('inworld_vector_DetectedTopic_push_back', 'void', [
        'void *',
        'void *',
    ]),
};
exports.CheckSafetyResponseFunctions = {
    new: inworld.func('inworld_CheckSafetyResponse_new', 'void *', []),
    delete: inworld.func('inworld_CheckSafetyResponse_delete', 'void', [
        'void *',
    ]),
    setIsSafe: inworld.func('inworld_CheckSafetyResponse_is_safe_set', 'void', [
        'void *',
        'bool',
    ]),
    getIsSafe: inworld.func('inworld_CheckSafetyResponse_is_safe_get', 'bool', [
        'void *',
    ]),
    setDetectedTopics: inworld.func('inworld_CheckSafetyResponse_detected_topics_set', 'void', ['void *', 'void *']),
    getDetectedTopics: inworld.func('inworld_CheckSafetyResponse_detected_topics_get', 'void *', ['void *']),
};
exports.StatusOrCheckSafetyResponseFunctions = {
    isOK: inworld.func('inworld_StatusOr_CheckSafetyResponse_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_CheckSafetyResponse_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_CheckSafetyResponse_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_CheckSafetyResponse_delete', 'void', [
        'void *',
    ]),
};
exports.StatusOrSafetyCheckerInterfaceFunctions = {
    isOK: inworld.func('inworld_StatusOr_SafetyCheckerInterface_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_SafetyCheckerInterface_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_SafetyCheckerInterface_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_SafetyCheckerInterface_delete', 'void', ['void *']),
};
exports.SafetyCheckerInterfaceFunctions = {
    delete: inworld.func('inworld_SafetyCheckerInterface_delete', 'void', [
        'void *',
    ]),
    checkSafety: util.promisify(inworld.func('inworld_SafetyCheckerInterface_CheckSafety_rcstd_string', 'void *', ['void *', 'str']).async),
    checkSafetyWithConfig: util.promisify(inworld.func('inworld_SafetyCheckerInterface_CheckSafety_rcstd_string_rcinworld_SafetyConfig', 'void *', ['void *', 'str', 'void *']).async),
};
exports.TelemetryFunctions = {
    init: inworld.func('inworld_ConfigureTelemetry_rcinworld_TelemetryConfig', 'void', ['void *']),
    shutdown: inworld.func('inworld_ShutdownTelemetry', 'void', []),
    // TelemetryConfig related functions
    configNew: inworld.func('inworld_TelemetryConfig_new', 'void *', []),
    configDelete: inworld.func('inworld_TelemetryConfig_delete', 'void', [
        'void *',
    ]),
    configSetEndpoint: inworld.func('inworld_TelemetryConfig_endpoint_set', 'void', ['void *', 'str']),
    configSetApiKey: inworld.func('inworld_TelemetryConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
    configSetServiceName: inworld.func('inworld_TelemetryConfig_service_name_set', 'void', ['void *', 'str']),
    configSetAppVersion: inworld.func('inworld_TelemetryConfig_service_version_set', 'void', ['void *', 'str']),
    configSetLogger: inworld.func('inworld_TelemetryConfig_logger_set', 'void', [
        'void *',
        'void *',
    ]),
    configSetTracer: inworld.func('inworld_TelemetryConfig_tracer_set', 'void', [
        'void *',
        'void *',
    ]),
    configSetExporterType: inworld.func('inworld_TelemetryConfig_exporter_type_set', 'void', ['void *', 'int']),
    // LoggerConfig related functions
    configLoggerNew: inworld.func('inworld_LoggerConfig_new', 'void *', []),
    configLoggerDelete: inworld.func('inworld_LoggerConfig_delete', 'void', [
        'void *',
    ]),
    configLoggerSetLevel: inworld.func('inworld_LoggerConfig_log_level_set', 'void', ['void *', 'int']),
    configLoggerSetSinkAbslLogs: inworld.func('inworld_LoggerConfig_sink_absl_logs_set', 'void', ['void *', 'bool']),
    // TracerConfig related functions
    configTracerNew: inworld.func('inworld_TracerConfig_new', 'void *', []),
    configTracerDelete: inworld.func('inworld_TracerConfig_delete', 'void', [
        'void *',
    ]),
    configTracerSetSamplingRate: inworld.func('inworld_TracerConfig_sampling_rate_set', 'void', ['void *', 'float']),
    // MetricConfig related functions
    metricConfigNew: inworld.func('inworld_MetricConfig_new', 'void *', []),
    metricConfigDelete: inworld.func('inworld_MetricConfig_delete', 'void', [
        'void *',
    ]),
    metricConfigSetMetricType: inworld.func('inworld_MetricConfig_metric_type_set', 'void', ['void *', 'int']),
    metricConfigGetMetricType: inworld.func('inworld_MetricConfig_metric_type_get', 'int', ['void *']),
    metricConfigSetName: inworld.func('inworld_MetricConfig_name_set', 'void', [
        'void *',
        'str',
    ]),
    metricConfigGetName: inworld.func('inworld_MetricConfig_name_get', 'str', [
        'void *',
    ]),
    metricConfigSetDescription: inworld.func('inworld_MetricConfig_description_set', 'void', ['void *', 'str']),
    metricConfigGetDescription: inworld.func('inworld_MetricConfig_description_get', 'str', ['void *']),
    metricConfigSetUnit: inworld.func('inworld_MetricConfig_unit_set', 'void', [
        'void *',
        'str',
    ]),
    metricConfigGetUnit: inworld.func('inworld_MetricConfig_unit_get', 'str', [
        'void *',
    ]),
    // ConfigureMetric function
    configureMetric: inworld.func('inworld_ConfigureMetric', 'void', ['void *']),
    // Metric methods
    recordCounterUInt: inworld.func('inworld_RecordCounterUInt_rcstd_string_unsigned_SS_long_SS_long', 'void', ['str', 'uint64']),
    recordCounterUIntWithTags: inworld.func('inworld_RecordCounterUInt_rcstd_string_unsigned_SS_long_SS_long_rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void', ['str', 'uint64', 'void *']),
    recordCounterDouble: inworld.func('inworld_RecordCounterDouble_rcstd_string_d', 'void', ['str', 'double']),
    recordCounterDoubleWithTags: inworld.func('inworld_RecordCounterDouble_rcstd_string_d_rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void', ['str', 'double', 'void *']),
    recordGaugeInt: inworld.func('inworld_RecordGaugeInt_rcstd_string_long_SS_long', 'void', ['str', 'int64']),
    recordGaugeIntWithTags: inworld.func('inworld_RecordGaugeInt_rcstd_string_long_SS_long_rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void', ['str', 'int64', 'void *']),
    recordGaugeDouble: inworld.func('inworld_RecordGaugeDouble_rcstd_string_d', 'void', ['str', 'double']),
    recordGaugeDoubleWithTags: inworld.func('inworld_RecordGaugeDouble_rcstd_string_d_rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void', ['str', 'double', 'void *']),
    recordHistogramUInt: inworld.func('inworld_RecordHistogramUInt_rcstd_string_unsigned_SS_long_SS_long', 'void', ['str', 'uint64']),
    recordHistogramUIntWithTags: inworld.func('inworld_RecordHistogramUInt_rcstd_string_unsigned_SS_long_SS_long_rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void', ['str', 'uint64', 'void *']),
    recordHistogramDouble: inworld.func('inworld_RecordHistogramDouble_rcstd_string_d', 'void', ['str', 'double']),
    recordHistogramDoubleWithTags: inworld.func('inworld_RecordHistogramDouble_rcstd_string_d_rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void', ['str', 'double', 'void *']),
    generateExecutionId: inworld.func('inworld_GenerateExecutionId', 'str', []),
    startSpan: inworld.func('inworld_StartSpan_rcstd_string', 'void *', ['str']),
    startSpanWithAttributes: inworld.func('inworld_StartSpan_rcstd_string_rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void *', ['str', 'void *']),
    startSpanWithParent: inworld.func('inworld_StartSpan_rcstd_string_rstd_map_Sl_std_string_Sc_std_string_Sg__rcstd_vector_Sl_inworld_telemetry_Span_Sg__rcinworld_telemetry_Span', 'void *', ['str', 'void *', 'void *', 'void *']),
    spanSetAttribute: inworld.func('inworld_Span_SetAttribute_rcstd_string_rcstd_string', 'void', ['void *', 'str', 'str']),
    spanSetAttributeArray: inworld.func('inworld_Span_SetAttribute_rcstd_string_rcstd_vector_Sl_std_string_Sg_', 'void', ['void *', 'str', 'void *']),
    spanSetOK: inworld.func('inworld_Span_SetOK', 'void', ['void *']),
    spanSetError: inworld.func('inworld_Span_SetError', 'void', [
        'void *',
        'str',
    ]),
    spanEnd: inworld.func('inworld_Span_End', 'void', ['void *']),
    spanDelete: inworld.func('inworld_Span_delete', 'void', ['void *']),
    // Vector operations for spans
    vectorSpanNew: inworld.func('inworld_vector_TelemetrySpan_new', 'void *', []),
    vectorSpanDelete: inworld.func('inworld_vector_TelemetrySpan_delete', 'void', ['void *']),
    vectorSpanSize: inworld.func('inworld_vector_TelemetrySpan_size', 'size_t', [
        'void *',
    ]),
    vectorSpanPushBack: inworld.func('inworld_vector_TelemetrySpan_push_back', 'void', ['void *', 'void *']),
    vectorSpanGet: inworld.func('inworld_vector_TelemetrySpan_get', 'void *', [
        'void *',
        'int',
    ]),
    vectorSpanSet: inworld.func('inworld_vector_TelemetrySpan_set', 'void', [
        'void *',
        'int',
        'void *',
    ]),
    vectorSpanClear: inworld.func('inworld_vector_TelemetrySpan_clear', 'void', [
        'void *',
    ]),
    vectorSpanEmpty: inworld.func('inworld_vector_TelemetrySpan_empty', 'bool', [
        'void *',
    ]),
    // Logging functions
    logMessage: inworld.func('inworld_LogMessage_eLogLevel_rcstd_string', 'void', ['int', 'str']),
    logMessageWithMap: inworld.func('inworld_LogMessage_eLogLevel_rcstd_string_rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void', ['int', 'str', 'void *']),
    logMessageWithMapAndProcessContext: inworld.func('inworld_LogMessage_eLogLevel_rcstd_string_std_shared_ptr_Sl_inworld_graphs_ProcessContext_Sg__rcstd_map_Sl_std_string_Sc_std_string_Sg_', 'void', ['int', 'str', 'void *', 'void *']),
};
// NER Interface related functions
exports.NERInterfaceFunctions = {
    delete: inworld.func('inworld_NERInterface_delete', 'void', ['void *']),
    extractEntities: util.promisify(inworld.func('inworld_NERInterface_ExtractEntities', 'void *', [
        'void *',
        'str',
    ]).async),
};
// NER Creation Config related functions
exports.NERCreationConfigFunctions = {
    new: inworld.func('inworld_NERCreationConfig_new', 'void *', []),
    delete: inworld.func('inworld_NERCreationConfig_delete', 'void', ['void *']),
    setEntities: inworld.func('inworld_NERCreationConfig_entities_set', 'void', [
        'void *',
        'void *',
    ]),
    getEntities: inworld.func('inworld_NERCreationConfig_entities_get', 'void *', ['void *']),
};
// NER Factory related functions
exports.NERFactoryFunctions = {
    delete: inworld.func('inworld_NERFactory_delete', 'void', ['void *']),
    createNER: util.promisify(inworld.func('inworld_NERFactory_CreateNER', 'void *', ['void *']).async),
};
// StatusOr NER Interface related functions
exports.StatusOrNERInterfaceFunctions = {
    new: inworld.func('inworld_StatusOr_NERInterface_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_NERInterface_ok', 'bool', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_NERInterface_status', 'void *', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_NERInterface_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_NERInterface_delete', 'void', [
        'void *',
    ]),
};
// EntityMatch related functions
exports.EntityMatchFunctions = {
    new: inworld.func('inworld_EntityMatch_new', 'void *', []),
    delete: inworld.func('inworld_EntityMatch_delete', 'void', ['void *']),
    setEntityName: inworld.func('inworld_EntityMatch_entity_name_set', 'void', [
        'void *',
        'str',
    ]),
    getEntityName: inworld.func('inworld_EntityMatch_entity_name_get', 'str', [
        'void *',
    ]),
    setRuleName: inworld.func('inworld_EntityMatch_rule_name_set', 'void', [
        'void *',
        'str',
    ]),
    getRuleName: inworld.func('inworld_EntityMatch_rule_name_get', 'str', [
        'void *',
    ]),
    setText: inworld.func('inworld_EntityMatch_text_set', 'void', [
        'void *',
        'str',
    ]),
    getText: inworld.func('inworld_EntityMatch_text_get', 'str', ['void *']),
};
// Vector EntityMatch related functions
exports.VectorEntityMatchFunctions = {
    new: inworld.func('inworld_vector_EntityMatch_new', 'void *', []),
    size: inworld.func('inworld_vector_EntityMatch_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_vector_EntityMatch_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_EntityMatch_get', 'void *', [
        'void *',
        'int',
    ]),
    delete: inworld.func('inworld_vector_EntityMatch_delete', 'void', ['void *']),
};
// StatusOr Vector EntityMatch related functions
exports.StatusOrVectorEntityMatchFunctions = {
    new: inworld.func('inworld_StatusOr_vector_EntityMatch_new', 'void *', []),
    isOK: inworld.func('inworld_StatusOr_vector_EntityMatch_ok', 'bool', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_vector_EntityMatch_status', 'void *', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_EntityMatch_value', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_vector_EntityMatch_delete', 'void', [
        'void *',
    ]),
};
// Entity related functions
exports.EntityFunctions = {
    new: inworld.func('inworld_Entity_new', 'void *', []),
    delete: inworld.func('inworld_Entity_delete', 'void', ['void *']),
    setName: inworld.func('inworld_Entity_name_set', 'void', ['void *', 'str']),
    getName: inworld.func('inworld_Entity_name_get', 'str', ['void *']),
    setRules: inworld.func('inworld_Entity_rules_set', 'void', [
        'void *',
        'void *',
    ]),
    getRules: inworld.func('inworld_Entity_rules_get', 'void *', ['void *']),
};
// Vector Entity related functions
exports.VectorEntityFunctions = {
    new: inworld.func('inworld_vector_Entity_new', 'void *', []),
    size: inworld.func('inworld_vector_Entity_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_vector_Entity_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_Entity_get', 'void *', ['void *', 'int']),
    delete: inworld.func('inworld_vector_Entity_delete', 'void', ['void *']),
};
// DictionaryRule related functions
exports.DictionaryRuleFunctions = {
    new: inworld.func('inworld_DictionaryRule_new', 'void *', []),
    delete: inworld.func('inworld_DictionaryRule_delete', 'void', ['void *']),
    setName: inworld.func('inworld_DictionaryRule_name_set', 'void', [
        'void *',
        'str',
    ]),
    getName: inworld.func('inworld_DictionaryRule_name_get', 'str', ['void *']),
    setDisplayName: inworld.func('inworld_DictionaryRule_display_name_set', 'void', ['void *', 'str']),
    getDisplayName: inworld.func('inworld_DictionaryRule_display_name_get', 'str', ['void *']),
    setSynonyms: inworld.func('inworld_DictionaryRule_synonyms_set', 'void', [
        'void *',
        'void *',
    ]),
    getSynonyms: inworld.func('inworld_DictionaryRule_synonyms_get', 'void *', [
        'void *',
    ]),
};
// Vector DictionaryRule related functions
exports.VectorDictionaryRuleFunctions = {
    new: inworld.func('inworld_vector_DictionaryRule_new', 'void *', []),
    size: inworld.func('inworld_vector_DictionaryRule_size', 'size_t', [
        'void *',
    ]),
    pushBack: inworld.func('inworld_vector_DictionaryRule_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_vector_DictionaryRule_get', 'void *', [
        'void *',
        'int',
    ]),
    delete: inworld.func('inworld_vector_DictionaryRule_delete', 'void', [
        'void *',
    ]),
};
// DataStream related functions
exports.StreamStringFunctions = {
    new: inworld.func('inworld_DataStream_string_new_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_', 'void *', ['void *', 'void *']),
    toStream: inworld.func('inworld_BaseDataAs_DataStream_String', 'void *', [
        'void *',
    ]),
    isValid: inworld.func('inworld_DataStream_string_is_valid', 'bool', [
        'void *',
    ]),
    getStream: inworld.func('inworld_DataStream_string_stream', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_DataStream_string_delete', 'void', ['void *']),
    deleteStream: inworld.func('inworld_InputStream_string_delete', 'void', [
        'void *',
    ]),
};
// CustomNodeWrapper-related functions
exports.CustomNodeWrapperFunctions = {
    new: inworld.func('inworld_CustomNodeWrapper_new_rcstd_string_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg__rcinworld_swig_helpers_CustomNodeThreadedProcessExecutor', 'void *', ['str', 'void *', 'void *']),
    delete: inworld.func('inworld_CustomNodeWrapper_delete', 'void', ['void *']),
};
exports.CustomNodeThreadedProcessExecutorFunctions = {
    new: inworld.func('inworld_CustomNodeThreadedProcessExecutor_new', 'void *', [
        'void *',
        'void *',
    ]),
    delete: inworld.func('inworld_CustomNodeThreadedProcessExecutor_delete', 'void', ['void *']),
    setOutput: inworld.func('inworld_CustomNodeThreadedProcessExecutor_SetOutput', 'void', ['int', 'void *']),
    getInputs: inworld.func('inworld_CustomNodeThreadedProcessExecutor_GetInputs', 'void *', ['int']),
    getContext: inworld.func('inworld_CustomNodeThreadedProcessExecutor_GetContext', 'void *', ['int']),
};
exports.ProcessContextFunctions = {
    getVariant: inworld.func('inworld_ProcessContext_GetVariant', 'string', [
        'void *',
    ]),
    isCancelled: inworld.func('inworld_ProcessContext_IsCancelled', 'bool', [
        'void *',
    ]),
    getConfig: inworld.func('inworld_ProcessContext_GetConfig', 'void *', [
        'void *',
    ]),
};
// Knowledge Factory related functions
exports.KnowledgeFactoryFunctions = {
    new: inworld.func('inworld_KnowledgeFactory_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeFactory_delete', 'void', ['void *']),
    createKnowledgeWithLocalConfig: util.promisify(inworld.func('inworld_KnowledgeFactory_CreateKnowledge_rcinworld_CreationContext_rcinworld_LocalKnowledgeConfig', 'void*', ['void *', 'void *', 'void *']).async),
    createKnowledgeWithRemoteConfig: util.promisify(inworld.func('inworld_KnowledgeFactory_CreateKnowledge_rcinworld_CreationContext_rcinworld_RemoteKnowledgeConfig', 'void*', ['void *', 'void *', 'void *']).async),
};
// LocalKnowledgeConfig related functions
exports.LocalKnowledgeConfigFunctions = {
    new: inworld.func('inworld_LocalKnowledgeConfig_new', 'void *', []),
    delete: inworld.func('inworld_LocalKnowledgeConfig_delete', 'void', [
        'void *',
    ]),
    setKnowledgeCompileConfig: inworld.func('inworld_LocalKnowledgeConfig_knowledge_compile_config_set', 'void', ['void *', 'void *']),
    getKnowledgeCompileConfig: inworld.func('inworld_LocalKnowledgeConfig_knowledge_compile_config_get', 'void *', ['void *']),
    setEmbedderComponentId: inworld.func('inworld_LocalKnowledgeConfig_embedder_component_id_set', 'void', ['void *', 'string']),
    getEmbedderComponentId: inworld.func('inworld_LocalKnowledgeConfig_embedder_component_id_get', 'string', ['void *']),
    // Commented out because these functions don't exist in the binary
    // setKnowledgeGetConfig: inworld.func(
    //   'inworld_LocalKnowledgeConfig_knowledge_get_config_set',
    //   'void',
    //   ['void *', 'void *'],
    // ),
    // getKnowledgeGetConfig: inworld.func(
    //   'inworld_LocalKnowledgeConfig_knowledge_get_config_get',
    //   'void *',
    //   ['void *'],
    // ),
};
// RemoteKnowledgeConfig related functions
exports.RemoteKnowledgeConfigFunctions = {
    new: inworld.func('inworld_RemoteKnowledgeConfig_new', 'void *', []),
    delete: inworld.func('inworld_RemoteKnowledgeConfig_delete', 'void', [
        'void *',
    ]),
    setKnowledgeCompileConfig: inworld.func('inworld_RemoteKnowledgeConfig_knowledge_compile_config_set', 'void', ['void *', 'void *']),
    setApiKey: inworld.func('inworld_RemoteKnowledgeConfig_api_key_set', 'void', [
        'void *',
        'str',
    ]),
};
// KnowledgeGetConfig related functions
// export const KnowledgeGetConfigFunctions = {
//   new: inworld.func('inworld_KnowledgeGetConfig_new', 'void *', []),
//   delete: inworld.func('inworld_KnowledgeGetConfig_delete', 'void', ['void *']),
//   setRetrievalConfig: inworld.func(
//     'inworld_KnowledgeGetConfig_retrieval_config_set',
//     'void',
//     ['void *', 'void *'],
//   ),
// };
// ParsingConfig related functions
exports.ParsingConfigFunctions = {
    new: inworld.func('inworld_ParsingConfig_new', 'void *', []),
    delete: inworld.func('inworld_ParsingConfig_delete', 'void', ['void *']),
    setMaxCharsPerChunk: inworld.func('inworld_ParsingConfig_max_chars_per_chunk_set', 'void', ['void *', 'int']),
    setMaxChunksPerDocument: inworld.func('inworld_ParsingConfig_max_chunks_per_document_set', 'void', ['void *', 'int']),
};
// KnowledgeCompileConfig related functions
exports.KnowledgeCompileConfigFunctions = {
    new: inworld.func('inworld_KnowledgeCompileConfig_new', 'void *', []),
    delete: inworld.func('inworld_KnowledgeCompileConfig_delete', 'void', [
        'void *',
    ]),
    setParsingConfig: inworld.func('inworld_KnowledgeCompileConfig_parsing_config_set', 'void', ['void *', 'void *']),
};
// Knowledge Interface related functions
exports.KnowledgeInterfaceFunctions = {
    delete: inworld.func('inworld_KnowledgeInterface_delete', 'void', ['void *']),
    getKnowledge: util.promisify(inworld.func('inworld_KnowledgeInterface_GetKnowledge', 'void *', [
        'void *',
        'void *',
        'void *',
    ]).async),
    compileKnowledgeFromRecords: util.promisify(inworld.func('inworld_KnowledgeInterface_CompileKnowledge_rcstd_string_rcstd_vector_Sl_std_string_Sg_', 'void *', ['void *', 'str', 'void *']).async),
    compileKnowledgeFromFile: util.promisify(inworld.func('inworld_KnowledgeInterface_CompileKnowledge_rcstd_string_cstd_vector_Sl_char_Sg__ceType', 'void *', ['void *', 'str', 'void *', 'int']).async),
    removeKnowledge: util.promisify(inworld.func('inworld_KnowledgeInterface_RemoveKnowledge', 'void *', [
        'void *',
        'str',
    ]).async),
};
// File related functions
exports.FileFunctions = {
    new: inworld.func('inworld_File_new', 'void *', []),
    delete: inworld.func('inworld_File_delete', 'void', ['void *']),
    setContent: inworld.func('inworld_File_content_set', 'void', [
        'void *',
        'void *',
    ]),
    setType: inworld.func('inworld_File_type_set', 'void', ['void *', 'int']),
};
// File Content related functions
exports.FileContentFunctions = {
    new: inworld.func('inworld_FileContent_new', 'void *', []),
    delete: inworld.func('inworld_FileContent_delete', 'void', ['void *']),
    setBytes: inworld.func('inworld_FileContent_bytes_set', 'void', [
        'void *',
        'void *',
    ]),
};
// Knowledge Status functions
exports.KnowledgeStatusFunctions = {
    isOK: inworld.func('inworld_StatusOr_KnowledgeInterface_ok', 'bool', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_KnowledgeInterface_value', 'void *', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_KnowledgeInterface_status', 'void *', ['void *']),
    delete: inworld.func('inworld_StatusOr_KnowledgeInterface_delete', 'void', [
        'void *',
    ]),
};
// Knowledge String Vector Status functions
exports.KnowledgeVectorStatusFunctions = {
    isOK: inworld.func('inworld_StatusOr_vector_string_ok', 'bool', ['void *']),
    getValue: inworld.func('inworld_StatusOr_vector_string_value', 'void *', [
        'void *',
    ]),
    getStatus: inworld.func('inworld_StatusOr_vector_string_status', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_vector_string_delete', 'void', [
        'void *',
    ]),
};
// Vector Char related functions
exports.VectorCharFunctions = {
    new: inworld.func('inworld_vector_char_new', 'void *', []),
    delete: inworld.func('inworld_vector_char_delete', 'void', ['void *']),
    pushBack: inworld.func('inworld_vector_char_push_back', 'void', [
        'void *',
        'char',
    ]),
    size: inworld.func('inworld_vector_char_size', 'size_t', ['void *']),
    get: inworld.func('inworld_vector_char_get', 'char', ['void *', 'int']),
    memcpyTo: inworld.func('inworld_memcpy_to_vector_char', 'void *', [
        'char *',
        'size_t',
    ]),
};
exports.KnowledgeNodeHelperFunctions = {
    toKnowledgeRecords: inworld.func('inworld_BaseDataAs_KnowledgeRecords', 'void *', ['void *']),
    isValid: inworld.func('inworld_KnowledgeRecords_is_valid', 'bool', [
        'void *',
    ]),
    getRecords: inworld.func('inworld_KnowledgeRecords_records', 'void *', [
        'void *',
    ]),
    toString: inworld.func('inworld_KnowledgeRecords_ToString', 'str', [
        'void *',
    ]),
};
exports.TransformationStreamFunctions = {
    newDestructor: inworld.func('inworld_TransformationStreamDestructor_new', 'void *', ['void *', 'void *']),
    deleteDestructor: inworld.func('inworld_TransformationStreamDestructor_delete', 'void', ['void *']),
    value: inworld.func('inworld_StatusOr_InputStream_BaseData_value', 'void *', [
        'void *',
    ]),
    toStream: inworld.func('inworld_BaseDataAs_DataStream_BaseData', 'void *', [
        'void *',
    ]),
};
exports.TransformationStreamContentToTextFunctions = {
    newDataStream: inworld.func('inworld_DataStream_string_new_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_', 'void *', [
        'void *',
        'void *', // CancellationContext*
    ]),
    newStreamWithoutFilter: inworld.func('inworld_TransformationStream_Content_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor', 'void *', ['void *', 'void *', 'void *']),
    newStreamWithFilter: inworld.func('inworld_TransformationStream_Content_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor', 'void *', ['void *', 'void *', 'void *', 'void *']),
    deleteStream: inworld.func('inworld_StatusOr_InputStream_string_delete', 'void', ['void *']),
    newTransformExecutorExecutor: inworld.func('inworld_TransformationStreamThreadedTransformExecutor_Content_To_string_new', 'void *', ['void *', 'void *']),
    deleteTransformExecutorExecutor: inworld.func('inworld_TransformationStreamThreadedTransformExecutor_Content_To_string_delete', 'void', ['void *']),
    getTransformExecutorInput: inworld.func('inworld_TransformationStreamThreadedTransformExecutor_Content_To_string_GetInput', 'void *', ['int']),
    setTransformExecutorOutput: inworld.func('inworld_TransformationStreamThreadedTransformExecutor_Content_To_string_SetOutput', 'void', ['int', 'void *']),
    newFilterExecutorExecutor: inworld.func('inworld_TransformationStreamThreadedFilterExecutor_string_new', 'void *', ['void *', 'void *']),
    deleteFilterExecutorExecutor: inworld.func('inworld_TransformationStreamThreadedFilterExecutor_string_delete', 'void', ['void *']),
    getFilterExecutorInput: inworld.func('inworld_TransformationStreamThreadedFilterExecutor_string_GetInput', 'void *', ['int']),
    setFilterExecutorOutput: inworld.func('inworld_TransformationStreamThreadedFilterExecutor_string_SetOutput', 'void', ['int', 'bool']),
    streamDelete: inworld.func('inworld_InputStream_string_delete', 'void', [
        'void *',
    ]),
    newEntity: inworld.func('inworld_StatusOr_string_new_rcstd_string', 'void *', ['str']),
    newStatus: inworld.func('inworld_StatusOr_string_new_rcabsl_Status', 'void *', ['void *']),
    getInputStream: inworld.func('inworld_StatusOr_string_new_rcabsl_Status', 'void *', ['void *']),
};
exports.ContentToStringStreamFunctions = {
    create: inworld.func('inworld_ContentToStringStream_Create', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_ContentToStringStream_delete', 'void', [
        'void *',
    ]),
    read: inworld.func('inworld_ContentToStringStream_Read', 'void *', [
        'void *',
    ]),
    hasNext: inworld.func('inworld_ContentToStringStream_HasNext', 'bool', [
        'void *',
    ]),
    isValid: inworld.func('inworld_ContentToStringStream_is_valid', 'bool', [
        'void *',
    ]),
    isOK: inworld.func('inworld_StatusOr_ContentToStringStream_ok', 'bool', [
        'void *',
    ]),
    getContent: inworld.func('inworld_StatusOr_ContentToStringStream_value', 'void *', ['void *']),
};
exports.TransformationStreamStringToStringFunctions = {
    newDataStream: inworld.func('inworld_DataStream_string_new_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_', 'void *', [
        'void *',
        'void *', // CancellationContext*
    ]),
    // Direct NAPI Create function for string to string transformation
    newStreamWithCallbackOnly: inworld.func('inworld_TransformationStream_string_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv', 'void *', ['void *', 'void *']),
    deleteStream: inworld.func('inworld_StatusOr_InputStream_string_delete', 'void', ['void *']),
    newEntity: inworld.func('inworld_StatusOr_string_new_rcstd_string', 'void *', ['str']),
    getInputStream: inworld.func('inworld_StatusOr_InputStream_string_value', 'void *', ['void *']),
};
exports.TransformationStreamDestructorFunctions = {
    new: inworld.func('inworld_TransformationStreamDestructor_new', 'void *', ['void *', 'void *']),
    delete: inworld.func('inworld_TransformationStreamDestructor_delete', 'void', ['void *']),
};
exports.TransformationStreamStrToTTSOutputFunctions = {
    newDataStream: inworld.func('inworld_DataStream_TTSOutput_new_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_', 'void *', [
        'void *',
        'void *', // CancellationContext*
    ]),
    newStreamWithoutFilter: inworld.func('inworld_TransformationStream_string_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor', 'void *', ['void *', 'void *', 'void *']),
    newStreamWithFilter: inworld.func('inworld_TransformationStream_string_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor', 'void *', ['void *', 'void *', 'void *', 'void *']),
    // Direct NAPI Create function for string to TTS transformation
    newStreamWithCallbackOnly: inworld.func('inworld_TransformationStream_string_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv', 'void *', ['void *', 'void *']),
    deleteStream: inworld.func('inworld_StatusOr_InputStream_TTSOutput_delete', 'void', ['void *']),
    newTransformExecutorExecutor: inworld.func('inworld_TransformationStreamThreadedTransformExecutor_string_To_TTSOutput_new', 'void *', ['void *', 'void *']),
    deleteTransformExecutorExecutor: inworld.func('inworld_TransformationStreamThreadedTransformExecutor_string_To_TTSOutput_delete', 'void', ['void *']),
    getTransformExecutorInput: inworld.func('inworld_TransformationStreamThreadedTransformExecutor_string_To_TTSOutput_GetInput', 'void *', ['int']),
    setTransformExecutorOutput: inworld.func('inworld_TransformationStreamThreadedTransformExecutor_string_To_TTSOutput_SetOutput', 'void', ['int', 'void *']),
    newFilterExecutorExecutor: inworld.func('inworld_TransformationStreamThreadedFilterExecutor_TTSOutput_new', 'void *', ['void *', 'void *']),
    deleteFilterExecutorExecutor: inworld.func('inworld_TransformationStreamThreadedFilterExecutor_TTSOutput_delete', 'void', ['void *']),
    getFilterExecutorInput: inworld.func('inworld_TransformationStreamThreadedFilterExecutor_TTSOutput_GetInput', 'void *', ['int']),
    setFilterExecutorOutput: inworld.func('inworld_TransformationStreamThreadedFilterExecutor_TTSOutput_SetOutput', 'void', ['int', 'bool']),
    streamDelete: inworld.func('inworld_InputStream_string_delete', 'void', [
        'void *',
    ]),
    newEntity: inworld.func('inworld_StatusOr_TTSOutput_new_rcinworld_graphs_TTSOutput', 'void *', ['void *']),
    newStatus: inworld.func('inworld_StatusOr_TTSOutput_new_rcabsl_Status', 'void *', ['void *']),
    getInputStream: inworld.func('inworld_StatusOr_InputStream_BaseData_value', 'void *', ['void *']),
};
// Content related functions
exports.ContentFunctions = {
    new: inworld.func('inworld_Content_new', 'void *', []),
    delete: inworld.func('inworld_Content_delete', 'void', ['void *']),
    setContent: inworld.func('inworld_Content_content_set', 'void', [
        'void *',
        'str',
    ]),
    getContent: inworld.func('inworld_Content_content_get', 'str', ['void *']),
    setToolCalls: inworld.func('inworld_Content_tool_calls_set', 'void', [
        'void *',
        'void *',
    ]),
    getToolCalls: inworld.func('inworld_Content_tool_calls_get', 'void *', [
        'void *',
    ]),
};
// Tool related functions
exports.ToolFunctions = {
    new: inworld.func('inworld_Tool_new', 'void *', []),
    delete: inworld.func('inworld_Tool_delete', 'void', ['void *']),
    setName: inworld.func('inworld_Tool_name_set', 'void', ['void *', 'str']),
    getName: inworld.func('inworld_Tool_name_get', 'str', ['void *']),
    setDescription: inworld.func('inworld_Tool_description_set', 'void', [
        'void *',
        'str',
    ]),
    getDescription: inworld.func('inworld_Tool_description_get', 'str', [
        'void *',
    ]),
    setPropertiesFromString: inworld.func('inworld_Tool_SetPropertiesFromString', 'void', ['void *', 'str']),
    getPropertiesAsString: inworld.func('inworld_Tool_GetPropertiesAsString', 'str', ['void *']),
};
// ToolCall related functions
exports.ToolCallFunctions = {
    new: inworld.func('inworld_ToolCall_new', 'void *', []),
    delete: inworld.func('inworld_ToolCall_delete', 'void', ['void *']),
    setId: inworld.func('inworld_ToolCall_id_set', 'void', ['void *', 'str']),
    getId: inworld.func('inworld_ToolCall_id_get', 'str', ['void *']),
    setName: inworld.func('inworld_ToolCall_name_set', 'void', ['void *', 'str']),
    getName: inworld.func('inworld_ToolCall_name_get', 'str', ['void *']),
    setArgs: inworld.func('inworld_ToolCall_args_set', 'void', ['void *', 'str']),
    getArgs: inworld.func('inworld_ToolCall_args_get', 'str', ['void *']),
};
// Tools vector functions
exports.ToolsVectorFunctions = {
    new: inworld.func('inworld_Tools_new', 'void *', []),
    delete: inworld.func('inworld_Tools_delete', 'void', ['void *']),
    size: inworld.func('inworld_Tools_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_Tools_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_Tools_get', 'void *', ['void *', 'int']),
    isEmpty: inworld.func('inworld_Tools_empty', 'bool', ['void *']),
};
// ToolCalls vector functions
exports.ToolCallsVectorFunctions = {
    new: inworld.func('inworld_ToolCalls_new', 'void *', []),
    delete: inworld.func('inworld_ToolCalls_delete', 'void', ['void *']),
    size: inworld.func('inworld_ToolCalls_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_ToolCalls_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_ToolCalls_get', 'void *', ['void *', 'int']),
    isEmpty: inworld.func('inworld_ToolCalls_empty', 'bool', ['void *']),
};
// Memory Factory related functions
exports.MemoryFactoryFunctions = {
    new: inworld.func('inworld_MemoryFactory_new', 'void *', []),
    delete: inworld.func('inworld_MemoryFactory_delete', 'void', ['void *']),
    createMemory: util.promisify(inworld.func('inworld_MemoryFactory_CreateMemory', 'void *', [
        'void *',
        'void *',
        'void *',
        'void *',
        'void *',
        'void *',
        'void *',
        'bool',
    ]).async),
};
// Messages vector functions
exports.MessagesVectorFunctions = {
    new: inworld.func('inworld_Messages_new', 'void *', []),
    delete: inworld.func('inworld_Messages_delete', 'void', ['void *']),
    size: inworld.func('inworld_Messages_size', 'size_t', ['void *']),
    pushBack: inworld.func('inworld_Messages_push_back', 'void', [
        'void *',
        'void *',
    ]),
    get: inworld.func('inworld_Messages_get', 'void *', ['void *', 'int']),
    isEmpty: inworld.func('inworld_Messages_empty', 'bool', ['void *']),
};
// New direct Create methods for nodes (replacing helper pattern)
exports.NodeCreateFunctions = {
    // LLM Chat Node
    createLLMChatNode: inworld.func('inworld_LLMChatNode_Create', 'void *', [
        'str',
        'void *',
    ]),
    // LLM Completion Node
    createLLMCompletionNode: inworld.func('inworld_LLMCompletionNode_Create', 'void *', ['str', 'void *']),
    // Goal Advancement Node
    createGoalAdvancementNode: inworld.func('inworld_GoalAdvancementNode_Create', 'void *', ['str', 'void *', 'void *']),
    // Intent Node
    createIntentNode: inworld.func('inworld_IntentNode_Create', 'void *', [
        'str',
        'void *',
        'void *',
        'void *',
    ]),
    // Knowledge Node
    createKnowledgeNode: inworld.func('inworld_KnowledgeNode_Create', 'void *', [
        'str',
        'void *',
        'void *',
        'void *',
    ]),
    // Memory Update Node
    createMemoryUpdateNode: inworld.func('inworld_MemoryUpdateNode_Create_rcstd_string_rcinworld_CreationContext_rcinworld_graphs_MemoryUpdateNodeCreationConfig_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg_', 'void *', ['str', 'void *', 'void *', 'void *']),
    createMemoryUpdateNodeSimple: inworld.func('inworld_MemoryUpdateNode_Create_rcstd_string_rcinworld_CreationContext_rcinworld_graphs_MemoryUpdateNodeCreationConfig', 'void *', ['str', 'void *', 'void *']),
    // Memory Retrieve Node
    createMemoryRetrieveNode: inworld.func('inworld_MemoryRetrieveNode_Create', 'void *', ['str', 'void *', 'void *', 'void *']),
    // Random Canned Text Node
    createRandomCannedTextNode: inworld.func('inworld_RandomCannedTextNode_Create', 'void *', ['str', 'void *']),
    // Safety Checker Node
    createSafetyCheckerNode: inworld.func('inworld_SafetyCheckerNode_Create', 'void *', ['str', 'void *', 'void *', 'void *']),
    // Keyword Matcher Node
    createKeywordMatcherNode: inworld.func('inworld_KeywordMatcherNode_Create_rcstd_string_rcinworld_graphs_KeywordMatcherNodeCreationConfig_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg_', 'void *', ['str', 'void *', 'void *']),
    createKeywordMatcherNodeSimple: inworld.func('inworld_KeywordMatcherNode_Create_rcstd_string_rcinworld_graphs_KeywordMatcherNodeCreationConfig', 'void *', ['str', 'void *']),
    // STT Node
    createSTTNode: inworld.func('inworld_STTNode_Create', 'void *', [
        'str',
        'void *',
    ]),
    // Text Aggregator Node
    createTextAggregatorNode: inworld.func('inworld_TextAggregatorNode_Create', 'void *', ['str', 'void *']),
    // Text Chunking Node
    createTextChunkingNode: inworld.func('inworld_TextChunkingNode_Create', 'void *', ['str', 'void *']),
    // TTS Node
    createTTSNode: inworld.func('inworld_TTSNode_Create', 'void *', [
        'str',
        'void *',
    ]),
    // LLM Chat Request Builder Node
    createLLMChatRequestBuilderNode: inworld.func('inworld_LLMChatRequestBuilderNode_Create', 'void *', ['str', 'void *']),
    // LLM Prompt Builder Node
    createLLMPromptBuilderNode: inworld.func('inworld_LLMPromptBuilderNode_Create', 'void *', ['str', 'void *']),
    // MCP List Tools Node
    createMCPListToolsNode: inworld.func('inworld_MCPListToolsNode_Create', 'void *', ['str', 'void *']),
    // MCP Call Tool Node
    createMCPCallToolNode: inworld.func('inworld_MCPCallToolNode_Create', 'void *', ['str', 'void *']),
};
exports.ExecutionConfigFunctions = {
    toJsonString: inworld.func('inworld_NodeExecutionConfig_toJsonString', 'void *', ['void *']),
    nodeExecutionConfigIsValid: inworld.func('inworld_NodeExecutionConfig_is_valid', 'bool', ['void *']),
    newIntentNodeExecutionConfig: inworld.func('inworld_IntentNodeExecutionConfig_new', 'void *', []),
    deleteIntentNodeExecutionConfig: inworld.func('inworld_IntentNodeExecutionConfig_delete', 'void', ['void *']),
    setMatcherConfigForIntentNodeExecutionConfig: inworld.func('inworld_IntentNodeExecutionConfig_matcher_config_set', 'void', ['void *', 'void *']),
    setReportToClientForIntentNodeExecutionConfig: inworld.func('inworld_IntentNodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    newSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_new', 'void *', []),
    deleteSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_delete', 'void', ['void *']),
    setReportToClientForSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    setSTTComponentIdForSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_stt_component_id_set', 'void', ['void *', 'str']),
    getSTTComponentIdForSTTNodeExecutionConfig: inworld.func('inworld_STTNodeExecutionConfig_stt_component_id_get', 'str', ['void *']),
    newTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_new', 'void *', []),
    setVoiceForTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_voice_set', 'void', ['void *', 'void *']),
    setReportToClientForTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    setTTSComponentIdForTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_tts_component_id_set', 'void', ['void *', 'str']),
    getTTSComponentIdForTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_tts_component_id_get', 'str', ['void *']),
    deleteTTSNodeExecutionConfig: inworld.func('inworld_TTSNodeExecutionConfig_delete', 'void', ['void *']),
    newLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_new', 'void *', []),
    setTextGenerationConfigForLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_text_generation_config_set', 'void', ['void *', 'void *']),
    setLLMComponentIdForLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_llm_component_id_set', 'void', ['void *', 'str']),
    setStreamIdForLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_stream_set', 'void', ['void *', 'bool']),
    setReportToClientForLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    deleteLLMNodeExecutionConfig: inworld.func('inworld_LLMChatNodeExecutionConfig_delete', 'void', ['void *']),
    newNodeExecutionConfig: inworld.func('inworld_NodeExecutionConfig_new', 'void *', []),
    deleteNodeExecutionConfig: inworld.func('inworld_NodeExecutionConfig_delete', 'void', ['void *']),
    setReportToClientForNodeExecutionConfig: inworld.func('inworld_NodeExecutionConfig_report_to_client_set', 'void', ['void *', 'bool']),
    getReportToClientForNodeExecutionConfig: inworld.func('inworld_NodeExecutionConfig_report_to_client_get', 'bool', ['void *']),
};
// ComponentRegistry related functions
exports.ComponentRegistryFunctions = {
    initializeRegistries: inworld.func('inworld_InitializeRegistries', 'void*', []),
    getInstance: inworld.func('inworld_ComponentRegistry_GetInstance', 'void *', []),
    isComponentRegistered: inworld.func('inworld_ComponentRegistry_IsComponentRegistered', 'bool', ['void *', 'str']),
    registerCustomNode: inworld.func('inworld_ComponentRegistry_RegisterCustomNode', 'void *', ['void *', 'str', 'void *']),
    unregisterComponent: inworld.func('inworld_ComponentRegistry_UnregisterComponent', 'void *', ['void *', 'str']),
    clear: inworld.func('inworld_ComponentRegistry_Clear', 'void', ['void *']),
    // New functions from git diff
    createComponentSTTInterface: inworld.func('inworld_ComponentRegistry_CreateComponent_STTInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteSTTConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentTTSInterface: inworld.func('inworld_ComponentRegistry_CreateComponent_TTSInterface', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentTextEmbedderInterfaceLocal: inworld.func('inworld_ComponentRegistry_CreateComponent_TextEmbedderInterface_rcstd_string_rcinworld_CreationContext_rcinworld_LocalTextEmbedderConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentTextEmbedderInterfaceRemote: inworld.func('inworld_ComponentRegistry_CreateComponent_TextEmbedderInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteTextEmbedderConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentKnowledgeInterfaceLocal: inworld.func('inworld_ComponentRegistry_CreateComponent_KnowledgeInterface_rcstd_string_rcinworld_CreationContext_rcinworld_LocalKnowledgeConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentKnowledgeInterfaceRemote: inworld.func('inworld_ComponentRegistry_CreateComponent_KnowledgeInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteKnowledgeConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentMCPClientInterface: inworld.func('inworld_ComponentRegistry_CreateComponent_MCPClientInterface', 'void *', ['void *', 'str', 'void *', 'void *']),
    // Additional CreateComponent functions
    createComponentLLMInterfaceLocal: inworld.func('inworld_ComponentRegistry_CreateComponent_LLMInterface_rcstd_string_rcinworld_CreationContext_rcinworld_LocalLLMConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentLLMInterfaceRemote: inworld.func('inworld_ComponentRegistry_CreateComponent_LLMInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteLLMConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentLLMRouting: inworld.func('inworld_ComponentRegistry_CreateComponent_LLMRouting', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentSTTInterfaceLocal: inworld.func('inworld_ComponentRegistry_CreateComponent_STTInterface_rcstd_string_rcinworld_CreationContext_rcinworld_LocalSTTConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentSTTInterfaceRemote: inworld.func('inworld_ComponentRegistry_CreateComponent_STTInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteSTTConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    createComponentTTSInterfaceRemote: inworld.func('inworld_ComponentRegistry_CreateComponent_TTSInterface', 'void *', ['void *', 'str', 'void *', 'void *']),
    registerCustomEdgeCondition: inworld.func('inworld_ComponentRegistry_RegisterCustomEdgeCondition_rcstd_string_rcinworld_swig_helpers_EdgeConditionExecutor', 'void *', ['void *', 'str', 'void *']),
    registerCustomEdgeConditionThreaded: inworld.func('inworld_ComponentRegistry_RegisterCustomEdgeCondition_rcstd_string_rcinworld_swig_helpers_EdgeConditionThreadedExecutor', 'void *', ['void *', 'str', 'void *']),
    registerEdgeConditionCallback: inworld.func('inworld_ComponentRegistry_RegisterEdgeConditionCallback', 'void *', ['void *', 'str', 'void *']),
    registerCallbackNode: inworld.func('inworld_ComponentRegistry_RegisterCallbackNode', 'void *', ['void *', 'str', 'void *']),
};
// CustomNodeThreadedCreateExecutor related functions
exports.CustomNodeThreadedCreateExecutorFunctions = {
    new: inworld.func('inworld_CustomNodeThreadedCreateExecutor_new', 'void *', [
        'void *',
        'void *',
    ]),
    delete: inworld.func('inworld_CustomNodeThreadedCreateExecutor_delete', 'void', ['void *']),
    getInputId: inworld.func('inworld_CustomNodeThreadedCreateExecutor_GetInputId', 'str', ['int']),
    getInputConfigs: inworld.func('inworld_CustomNodeThreadedCreateExecutor_GetInputConfigs', 'void *', ['int']),
    getInputExecutionConfig: inworld.func('inworld_CustomNodeThreadedCreateExecutor_GetInputExecutionConfig', 'void *', ['int']),
    setOutput: inworld.func('inworld_CustomNodeThreadedCreateExecutor_SetOutput', 'void', ['int', 'void *']),
};
// ConfigWrapperDestructor related functions
exports.ConfigWrapperDestructorFunctions = {
    new: inworld.func('inworld_ConfigWrapperDestructor_new', 'void *', [
        'void *',
        'void *',
    ]),
    delete: inworld.func('inworld_ConfigWrapperDestructor_delete', 'void', [
        'void *',
    ]),
};
// CustomConfigWrapper related functions
exports.CustomConfigWrapperFunctions = {
    size: inworld.func('inworld_vector_CustomConfigWrapper_size', 'size_t', [
        'void *',
    ]),
    get: inworld.func('inworld_vector_CustomConfigWrapper_get', 'void *', [
        'void *',
        'int',
    ]),
    typeId: inworld.func('inworld_CustomConfigWrapper_type_id', 'str', [
        'void *',
    ]),
    value: inworld.func('inworld_CustomConfigWrapper_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_CustomConfigWrapper_delete', 'void', [
        'void *',
    ]),
    new: inworld.func('inworld_CustomConfigWrapper_new', 'void *', [
        'str',
        'void *',
        'void *',
    ]),
};
// StatusOr_CustomConfigWrapper related functions
exports.StatusOrCustomConfigWrapperFunctions = {
    new: inworld.func('inworld_StatusOr_CustomConfigWrapper_new', 'void *', []),
    newFromCustomConfigWrapper: inworld.func('inworld_StatusOr_CustomConfigWrapper_new_rcstd_shared_ptr_Sl_inworld_swig_helpers_CustomConfigWrapper_Sg_', 'void *', ['void *']),
    newFromStatus: inworld.func('inworld_StatusOr_CustomConfigWrapper_new_rcabsl_Status', 'void *', ['void *']),
    ok: inworld.func('inworld_StatusOr_CustomConfigWrapper_ok', 'bool', [
        'void *',
    ]),
    status: inworld.func('inworld_StatusOr_CustomConfigWrapper_status', 'void *', ['void *']),
    value: inworld.func('inworld_StatusOr_CustomConfigWrapper_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_CustomConfigWrapper_delete', 'void', [
        'void *',
    ]),
};
// CustomConfigThreadedDeserializeExecutor related functions
exports.CustomConfigThreadedDeserializeExecutorFunctions = {
    new: inworld.func('inworld_CustomConfigThreadedDeserializeExecutor_new', 'void *', ['void *', 'void *']),
    delete: inworld.func('inworld_CustomConfigThreadedDeserializeExecutor_delete', 'void', ['void *']),
    getInput: inworld.func('inworld_CustomConfigThreadedDeserializeExecutor_GetInput', 'str', ['int']),
    setOutput: inworld.func('inworld_CustomConfigThreadedDeserializeExecutor_SetOutput', 'void', ['int', 'void *']),
};
// CustomConfigThreadedSerializeExecutor related functions
exports.CustomConfigThreadedSerializeExecutorFunctions = {
    new: inworld.func('inworld_CustomConfigThreadedSerializeExecutor_new', 'void *', ['void *', 'void *']),
    delete: inworld.func('inworld_CustomConfigThreadedSerializeExecutor_delete', 'void', ['void *']),
    getInput: inworld.func('inworld_CustomConfigThreadedSerializeExecutor_GetInput', 'void *', ['int']),
    setOutput: inworld.func('inworld_CustomConfigThreadedSerializeExecutor_SetOutput', 'void', ['int', 'str']),
};
// ConfigRegistry related functions
exports.ConfigRegistryFunctions = {
    getInstance: inworld.func('inworld_ConfigRegistry_GetInstance', 'void *', []),
    registerCustomConfig: inworld.func('inworld_ConfigRegistry_RegisterCustomConfig', 'void *', ['void *', 'str', 'void *', 'void *']),
    deserializeCustomConfig: inworld.func('inworld_ConfigRegistry_DeserializeCustomConfig', 'void *', ['void *', 'str', 'str']),
    serializeCustomConfig: inworld.func('inworld_ConfigRegistry_SerializeCustomConfig', 'void *', ['void *', 'str', 'void *']),
};
// GraphManagerConfig related functions
exports.GraphManagerConfigFunctions = {
    new: inworld.func('inworld_GraphManagerConfig_new', 'void *', []),
    delete: inworld.func('inworld_GraphManagerConfig_delete', 'void', ['void *']),
    setEnableRemoteConfig: inworld.func('inworld_GraphManagerConfig_enable_remote_config_set', 'void', ['void *', 'bool']),
    getEnableRemoteConfig: inworld.func('inworld_GraphManagerConfig_enable_remote_config_get', 'bool', ['void *']),
    setPollIntervalSeconds: inworld.func('inworld_GraphManagerConfig_poll_interval_seconds_set', 'void', ['void *', 'int']),
    getPollIntervalSeconds: inworld.func('inworld_GraphManagerConfig_poll_interval_seconds_get', 'int', ['void *']),
    setAddress: inworld.func('inworld_GraphManagerConfig_address_set', 'void', [
        'void *',
        'str',
    ]),
    getAddress: inworld.func('inworld_GraphManagerConfig_address_get', 'str', [
        'void *',
    ]),
    setTargetingKey: inworld.func('inworld_GraphManagerConfig_targeting_key_set', 'void', ['void *', 'str']),
    getTargetingKey: inworld.func('inworld_GraphManagerConfig_targeting_key_get', 'str', ['void *']),
    setInworldApiKey: inworld.func('inworld_GraphManagerConfig_inworld_api_key_set', 'void', ['void *', 'str']),
    getInworldApiKey: inworld.func('inworld_GraphManagerConfig_inworld_api_key_get', 'str', ['void *']),
    setMode: inworld.func('inworld_GraphManagerConfig_mode_set', 'void', [
        'void *',
        'int',
    ]),
    getMode: inworld.func('inworld_GraphManagerConfig_mode_get', 'int', [
        'void *',
    ]),
    setConfigEnvironmentVariables: inworld.func('inworld_GraphManagerConfig_config_environment_variables_set', 'void', ['void *', 'void *']),
    getConfigEnvironmentVariables: inworld.func('inworld_GraphManagerConfig_config_environment_variables_get', 'void *', ['void *']),
    Default: inworld.func('inworld_GraphManagerConfig_Default', 'void *', []),
    WithDisabledRemoteConfig: inworld.func('inworld_GraphManagerConfig_WithDisabledRemoteConfig', 'void *', []),
    WithRemoteConfig5: inworld.func('inworld_GraphManagerConfig_WithRemoteConfig_rcstd_string_rcstd_string_i_rcstd_string_eMode', 'void *', ['str', 'str', 'int', 'str', 'int']),
    WithRemoteConfig4: inworld.func('inworld_GraphManagerConfig_WithRemoteConfig_rcstd_string_rcstd_string_i_rcstd_string', 'void *', ['str', 'str', 'int', 'str']),
    WithRemoteConfig3: inworld.func('inworld_GraphManagerConfig_WithRemoteConfig_rcstd_string_rcstd_string_i', 'void *', ['str', 'str', 'int']),
    WithRemoteConfig2: inworld.func('inworld_GraphManagerConfig_WithRemoteConfig_rcstd_string_rcstd_string', 'void *', ['str', 'str']),
};
exports.GraphExecutorConfigFunctions = {
    new: inworld.func('inworld_GraphExecutorConfig_new', 'void *', []),
    delete: inworld.func('inworld_GraphExecutorConfig_delete', 'void', [
        'void *',
    ]),
    setWorkerStrategy: inworld.func('inworld_GraphExecutorConfig_worker_strategy_set', 'void', ['void *', 'int']),
    getWorkerStrategy: inworld.func('inworld_GraphExecutorConfig_worker_strategy_get', 'int', ['void *']),
    setWorkerCount: inworld.func('inworld_GraphExecutorConfig_worker_count_set', 'void', ['void *', 'void *']),
    getWorkerCount: inworld.func('inworld_GraphExecutorConfig_worker_count_get', 'void *', ['void *']),
    setCoreMultiplier: inworld.func('inworld_GraphExecutorConfig_core_multiplier_set', 'void', ['void *', 'float']),
    getCoreMultiplier: inworld.func('inworld_GraphExecutorConfig_core_multiplier_get', 'float', ['void *']),
    setGraphManagerConfig: inworld.func('inworld_GraphExecutorConfig_graph_manager_config_set', 'void', ['void *', 'void *']),
    getGraphManagerConfig: inworld.func('inworld_GraphExecutorConfig_graph_manager_config_get', 'void *', ['void *']),
    Default: inworld.func('inworld_GraphExecutorConfig_Default', 'void *', []),
    WithFixedWorkers: inworld.func('inworld_GraphExecutorConfig_WithFixedWorkers', 'void *', ['size_t']),
    WithSystemCoresF: inworld.func('inworld_GraphExecutorConfig_WithSystemCores_f', 'void *', ['float']),
    WithSystemCores: inworld.func('inworld_GraphExecutorConfig_WithSystemCores', 'void *', []),
    WithGraphManager: inworld.func('inworld_GraphExecutorConfig_WithGraphManager', 'void *', ['void *']),
    WithLocalGraphManager: inworld.func('inworld_GraphExecutorConfig_WithLocalGraphManager', 'void *', []),
};
exports.HashMapStringToStringFunctions = {
    new: inworld.func('inworld_HashMap_StringToString_new', 'void *', []),
    delete: inworld.func('inworld_HashMap_StringToString_delete', 'void', [
        'void *',
    ]),
    size: inworld.func('inworld_HashMap_StringToString_size', 'size_t', [
        'void *',
    ]),
    empty: inworld.func('inworld_HashMap_StringToString_empty', 'bool', [
        'void *',
    ]),
    clear: inworld.func('inworld_HashMap_StringToString_clear', 'void', [
        'void *',
    ]),
    get: inworld.func('inworld_HashMap_StringToString___getitem__', 'str', [
        'void *',
        'str',
    ]),
    set: inworld.func('inworld_HashMap_StringToString___setitem__', 'void', [
        'void *',
        'str',
        'str',
    ]),
    contains: inworld.func('inworld_HashMap_StringToString___contains__', 'bool', ['void *', 'str']),
};
exports.FFIFunctions = {
    makeDataStream: inworld.func('inworld_graphs_ffi_makeDataStream_pv', 'void *', ['void *']),
    makeDataStreamWithCancellation: inworld.func('inworld_graphs_ffi_makeDataStream_pv_std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_', 'void *', ['void *', 'void *']),
    makeCustomNode: inworld.func('inworld_graphs_ffi_makeCustomNode', 'void *', [
        'str',
        'void *',
        'void *',
    ]),
    getCustomNodeValue: inworld.func('inworld_StatusOr_NodePtr_value', 'void *', [
        'void *',
    ]),
    registerEdgeConditionCallback: inworld.func('inworld_ComponentRegistry_RegisterEdgeConditionCallback', 'void *', ['void *', 'str', 'void *']),
    registerCallbackNode: inworld.func('inworld_ComponentRegistry_RegisterCallbackNode', 'void *', ['void *', 'str', 'void *']),
    setConditionCallback: inworld.func('inworld_EdgeWrapper_SetConditionCallback', 'void', ['void *', 'void *']),
};
// CreationContext functions
exports.CreationContextFunctions = {
    new: inworld.func('inworld_CreationContext_new', 'void *', ['void *']),
    delete: inworld.func('inworld_CreationContext_delete', 'void', ['void *']),
};
// StatusOr_CreationContext functions
exports.StatusOrCreationContextFunctions = {
    new: inworld.func('inworld_StatusOr_CreationContext_new', 'void *', []),
    newWithCreationContext: inworld.func('inworld_StatusOr_CreationContext_new_rcinworld_CreationContext', 'void *', ['void *']),
    newWithStatus: inworld.func('inworld_StatusOr_CreationContext_new_rcabsl_Status', 'void *', ['void *']),
    isOK: inworld.func('inworld_StatusOr_CreationContext_ok', 'bool', ['void *']),
    getStatus: inworld.func('inworld_StatusOr_CreationContext_status', 'void *', [
        'void *',
    ]),
    getValue: inworld.func('inworld_StatusOr_CreationContext_value', 'void *', [
        'void *',
    ]),
    delete: inworld.func('inworld_StatusOr_CreationContext_delete', 'void', [
        'void *',
    ]),
};
// ComponentStore functions
exports.ComponentStoreFunctions = {
    new: inworld.func('inworld_ComponentStore_new', 'void *', []),
    newWithString: inworld.func('inworld_ComponentStore_new_rcstd_string', 'void *', ['str']),
    delete: inworld.func('inworld_ComponentStore_delete', 'void', ['void *']),
    clear: inworld.func('inworld_ComponentStore_Clear', 'void', ['void *']),
};
// LLMRoutingHelper functions
exports.LLMRoutingHelperFunctions = {
    createLLMRouting: inworld.func('inworld_LLMRoutingHelper_CreateLLMRouting', 'void *', ['void *', 'void *']),
};
// CancellationContext functions
exports.CancellationContextFunctions = {
    delete: inworld.func('inworld_CancellationContext_delete', 'void', [
        'void *',
    ]),
    isCancelled: inworld.func('inworld_CancellationContext_IsCancelled', 'bool', [
        'void *',
    ]),
    isValid: inworld.func('inworld_CancellationContext_is_valid', 'bool', [
        'void *',
    ]),
};
// LinearGraph functions
exports.LinearGraphFunctions = {
    new: inworld.func('inworld_LinearGraph_new', 'void *', ['str', 'void *']),
    delete: inworld.func('inworld_LinearGraph_delete', 'void', ['void *']),
    addNode: inworld.func('inworld_LinearGraph_AddNode', 'void', [
        'void *',
        'void *',
    ]),
    getCreationContextHelper: inworld.func('inworld_LinearGraph_GetCreationContextHelper', 'void *', ['void *']),
    addComponentLLMInterface: inworld.func('inworld_LinearGraph_AddComponent_LLMInterface', 'void *', ['void *', 'str', 'void *']),
    addComponentSTTInterface: inworld.func('inworld_LinearGraph_AddComponent_STTInterface', 'void *', ['void *', 'str', 'void *']),
    addComponentTTSInterface: inworld.func('inworld_LinearGraph_AddComponent_TTSInterface', 'void *', ['void *', 'str', 'void *']),
    addComponentTextEmbedderInterface: inworld.func('inworld_LinearGraph_AddComponent_TextEmbedderInterface', 'void *', ['void *', 'str', 'void *']),
    addComponentKnowledgeInterface: inworld.func('inworld_LinearGraph_AddComponent_KnowledgeInterface', 'void *', ['void *', 'str', 'void *']),
    addComponentMCPClientInterface: inworld.func('inworld_LinearGraph_AddComponent_MCPClientInterface', 'void *', ['void *', 'str', 'void *']),
};
