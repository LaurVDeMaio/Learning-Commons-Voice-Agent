"use strict";
/**
 * Main entry point for the Inworld Runtime Node.js SDK
 *
 * This file exports all the public interfaces, types and utilities of the Inworld
 * Runtime SDK, organized into namespaced modules for easier consumption.
 * It serves as the primary interface for developers to interact with the SDK.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentToStringStream = exports.telemetry = exports.core = exports.common = exports.primitives = exports.textProcessing = exports.device = void 0;
const inworld_1 = require("./common/error/inworld");
const RuntimeData_1 = require("./common/RuntimeData");
const content_to_string_stream_1 = require("./core/content_to_string_stream");
Object.defineProperty(exports, "ContentToStringStream", { enumerable: true, get: function () { return content_to_string_stream_1.ContentToStringStream; } });
const device_1 = require("./core/device");
const history_1 = require("./core/history");
const emoji_remover_1 = require("./core/text_processing/emoji_remover");
const sentence_stream_1 = require("./core/text_processing/sentence_stream");
const substring_remover_1 = require("./core/text_processing/substring_remover");
const text_in_brackets_remover_1 = require("./core/text_processing/text_in_brackets_remover");
const embedder_1 = require("./primitives/embedder");
const intent_1 = require("./primitives/intent");
const knowledge_1 = require("./primitives/knowledge");
const llm_1 = require("./primitives/llm");
const memory_1 = require("./primitives/memory");
const ner_1 = require("./primitives/ner");
const stt_1 = require("./primitives/stt");
const tts_1 = require("./primitives/tts");
const vad_1 = require("./primitives/vad");
const telemetry_1 = require("./telemetry");
exports.device = {
    Device: device_1.Device,
    DeviceRegistry: device_1.DeviceRegistry,
    DeviceType: device_1.DeviceType,
};
const embedder = {
    TextEmbedderFactory: embedder_1.TextEmbedderFactory,
    TextEmbedder: embedder_1.TextEmbedder,
};
const knowledge = {
    KnowledgeCollectionFactory: knowledge_1.KnowledgeCollectionFactory,
    KnowledgeFactory: knowledge_1.KnowledgeFactory,
    Knowledge: knowledge_1.Knowledge,
    ParsingConfig: knowledge_1.ParsingConfig,
    FileType: knowledge_1.FileType,
};
const intent = {
    IntentCompilerFactory: intent_1.IntentCompilerFactory,
    IntentMatcherFactory: intent_1.IntentMatcherFactory,
    EmbeddingMatcherConfig: intent_1.EmbeddingMatcherConfig,
    LLMMatcherConfig: intent_1.LLMMatcherConfig,
};
const vad = {
    VADFactory: vad_1.VADFactory,
    VAD: vad_1.VAD,
};
const ner = { NERFactory: ner_1.NERFactory, NER: ner_1.NER, EntityMatch: ner_1.EntityMatch };
exports.textProcessing = {
    EmojiRemover: emoji_remover_1.EmojiRemover,
    SubstringRemover: substring_remover_1.SubstringRemover,
    SentenceStream: sentence_stream_1.SentenceStream,
    TextInBracketsRemover: text_in_brackets_remover_1.TextInBracketsRemover,
};
const llm = {
    LLMFactory: llm_1.LLMFactory,
    LLM: llm_1.LLM,
    renderJinja: llm_1.renderJinja,
};
const stt = {
    STTFactory: stt_1.STTFactory,
    STT: stt_1.STT,
};
const tts = {
    TTSFactory: tts_1.TTSFactory,
    TTS: tts_1.TTS,
    SpeechSynthesisConfig: tts_1.SpeechSynthesisConfig,
};
const memory = {
    MemoryFactory: memory_1.MemoryFactory,
    Memory: memory_1.Memory,
    MemorySnapshot: memory_1.MemorySnapshot,
};
exports.primitives = {
    intent,
    llm,
    embedder,
    knowledge,
    vad,
    ner,
    textProcessing: exports.textProcessing,
    stt,
    tts,
    memory,
};
exports.common = {
    InworldError: inworld_1.InworldError,
};
exports.core = {
    device: exports.device,
    History: history_1.History,
    RuntimeData: RuntimeData_1.RuntimeData,
};
exports.telemetry = {
    init: telemetry_1.init,
    shutdown: telemetry_1.shutdown,
    ExporterType: telemetry_1.ExporterType,
    LogLevel: telemetry_1.LogLevel,
    logger: telemetry_1.logger,
    metric: telemetry_1.metric,
    configureMetric: telemetry_1.configureMetric,
    MetricType: telemetry_1.MetricType,
    Span: telemetry_1.Span,
    startSpan: telemetry_1.startSpan,
    startSpanWithAttributes: telemetry_1.startSpanWithAttributes,
    startSpanWithParent: telemetry_1.startSpanWithParent,
    generateExecutionId: telemetry_1.generateExecutionId,
};
