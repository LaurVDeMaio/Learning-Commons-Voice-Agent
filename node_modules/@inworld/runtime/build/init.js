"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopRuntime = stopRuntime;
exports.initializeInworldRuntime = initializeInworldRuntime;
require("dotenv/config");
const graph_1 = require("./graph");
const ComponentRegistry_1 = __importDefault(require("./graph/ComponentRegistry"));
const ComponentStore_1 = require("./graph/ComponentStore");
const GraphExecutionManager_1 = require("./graph/GraphExecutionManager");
const greeter_1 = require("./greeter");
const telemetry_1 = require("./telemetry");
let initialized = false;
if (process.env.INWORLD_DEBUG) {
    // eslint-disable-next-line no-console
    const originalDebug = console.debug.bind(console);
    // eslint-disable-next-line no-console
    console.debug = (...args) => {
        originalDebug(...args);
    };
}
else {
    // Muted when is not debug mode;
    // eslint-disable-next-line no-console
    console.debug = () => { };
}
function stopRuntime() {
    // eslint-disable-next-line no-console
    console.debug('Starting Inworld runtime cleanup...');
    try {
        GraphExecutionManager_1.GraphExecutionManager.getInstance().cleanupAllGraphs();
        GraphExecutionManager_1.GraphExecutionManager.destroy();
        graph_1.CustomNodeRegistry.destroy();
        ComponentStore_1.ComponentStore.destroy();
        ComponentRegistry_1.default.destroy();
        initialized = false;
        // eslint-disable-next-line no-console
        console.debug('Inworld runtime cleanup completed successfully');
    }
    catch (error) {
        // eslint-disable-next-line no-console
        console.error('Error during Inworld runtime cleanup:', error);
    }
}
process.once('exit', (code) => {
    // eslint-disable-next-line no-console
    console.debug('exit with code:', code);
    stopRuntime();
});
function initializeInworldRuntime(opts) {
    var _a, _b;
    if (initialized) {
        return;
    }
    initialized = true;
    (0, greeter_1.showWelcomeMessage)();
    const isTelemetryDisabled = process.env.DISABLE_TELEMETRY === 'true' ||
        process.env.DISABLE_TELEMETRY === '1';
    if (!isTelemetryDisabled && opts.apiKey) {
        (0, telemetry_1.init)({
            appName: (_a = opts.appName) !== null && _a !== void 0 ? _a : 'Inworld Runtime Node.js SDK',
            appVersion: (_b = opts.appVersion) !== null && _b !== void 0 ? _b : '1.0.0',
            apiKey: opts.apiKey,
        });
        ['SIGINT', 'SIGSEGV', 'SIGTERM', 'SIGQUIT', 'SIGBUS', 'exit'].forEach((signal) => {
            process.on(signal, () => {
                (0, telemetry_1.shutdown)();
            });
        });
    }
    else if (isTelemetryDisabled) {
        // eslint-disable-next-line no-console
        console.log('Telemetry is disabled via DISABLE_TELEMETRY environment variable');
    }
    else {
        // eslint-disable-next-line no-console
        console.warn('INWORLD_API_KEY is not set, telemetry will not be initialized');
    }
    ComponentRegistry_1.default.initializeRegistries();
}
