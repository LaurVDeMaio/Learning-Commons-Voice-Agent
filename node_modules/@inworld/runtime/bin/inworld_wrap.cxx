/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGC
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

/* -----------------------------------------------------------------------------
 * clabels.swg
 *
 * Definitions of C specific preprocessor symbols.
 * ----------------------------------------------------------------------------- */

// this is used instead of default SWIGEXPORT symbol

#ifndef SWIGEXPORTC
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORTC
#   else
#     define SWIGEXPORTC __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORTC __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORTC
#   endif
# endif
#endif


#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <setjmp.h>

#define SWIG_contract_assert(expr, msg) if(!(expr)) { printf("%s\n", msg); SWIG_exit(0); } else


typedef struct SwigObj SwigObj;


#ifndef SWIG_exception
#define SWIG_exception(code, msg)
#endif


#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORTC int SWIG_exit(int code) { exit(code); }
#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif




    #include <vector>
    #include "absl/log/log.h"
    #include "absl/log/log_sink_registry.h"

namespace inworld
{
    using InworldExternalLogListener = void (*)(int severity, const char* message, int length);

    /**
    * @class ExternalLogSinkSingleton
    * @brief Used by absl to broadcast log messages to whoever is listening. We are using it to
    * route those log messages to client programs via registered LogListener callback functions.
    */
    class ExternalLogSinkSingleton : public absl::LogSink {
        public:
            static ExternalLogSinkSingleton& Instance() {
                static ExternalLogSinkSingleton instance;
                return instance;
            }

            /**
            * @fn Send
            * @brief Called by absl when a log message is triggered. We pass this message along to
            * our registered listeners
            */
            void Send(const absl::LogEntry& entry) override {
                int severity{0};
                switch (entry.log_severity()) {
                    case absl::LogSeverity::kInfo: severity = 0; break;
                    case absl::LogSeverity::kWarning: severity = 1; break;
                    case absl::LogSeverity::kError: severity = 2; break;
                    case absl::LogSeverity::kFatal: severity = 3; break;
                    default: break;
                }
                
                const absl::string_view message = entry.text_message();
                for (auto listener : listeners_) {
                    if (listener != nullptr) {
                        listener(severity, message.data(), message.size());
                    }
                }
            }
        
            /**
            * @fn RegisterListener
            * @brief Saves a listener callback to a list and registers self with absl if that hasn't happend already.
            */
            void RegisterListener(InworldExternalLogListener listener) {
                if (listener != nullptr) {
                    listeners_.push_back(listener);
                }
                        
                if (!initialized_) {
                    absl::AddLogSink(this);  
                    initialized_ = true;
                }
            }
        
            /**
            * @fn UnregisterListener
            * @brief Removes a listener callback from list and unregisters self with absl if no more callbacks are in the list.
            */
            void UnregisterListener(InworldExternalLogListener listener) {
                listeners_.erase(std::remove(listeners_.begin(), listeners_.end(), listener), listeners_.end());
                if (initialized_ && listeners_.size() <= 0) {
                    absl::RemoveLogSink(this);
                    initialized_ = false;
                }
            }
        
        private:
            ExternalLogSinkSingleton() = default;
            std::vector<InworldExternalLogListener> listeners_;
            bool initialized_ = false;
    };

    #ifdef __cplusplus
    extern "C" {
    #endif
    
    /**
    * @fn RegisterExternalLogListener
    * @brief Register log listening callback function with our log sink.  
    */
    SWIGEXPORTC void RegisterExternalLogListener(InworldExternalLogListener log_listener)
    {
        ExternalLogSinkSingleton::Instance().RegisterListener((InworldExternalLogListener)log_listener);
    }

    /**
    * @fn UnregisterExternalLogListener
    * @brief Remove previously registered listener.  
    */
    SWIGEXPORTC void UnregisterExternalLogListener(InworldExternalLogListener log_listener)
    {
        ExternalLogSinkSingleton::Instance().UnregisterListener((InworldExternalLogListener)log_listener);
    }

    #ifdef __cplusplus
    }
    #endif

}



#include "inworld/library/core/blocking_stream.h"


#include "inworld/library/core/device_registry.h"


#include <typeinfo>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "inworld/library/core/device.h"
#include "inworld/library/core/event.h"
#include "inworld/library/core/intent.h"
#include "inworld/library/llm/llm_factory.h"
#include "inworld/library/primitives/intent_matcher_interface.h"
#include "inworld/library/primitives/keyword_matcher_interface.h"
#include "inworld/library/primitives/knowledge_retriever_interface.h"
#include "inworld/library/primitives/safety_checker_interface.h"
#include "inworld/library/primitives/ner_interface.h"
#include "inworld/library/telemetry/telemetry.h"
#include "inworld/graphs/schema/graph_schema.h"
#include "inworld/graphs/schema/data_schema.h"
#include "inworld/library/llm/llm_routing.h"
#include <map>
#include <vector>
#include <string>


#include <string>


#include <map>
#include <stdexcept>

SWIGINTERN std::vector< inworld::CompiledIntent >::const_reference inworld_std_vector_Sl_inworld_CompiledIntent_Sg__get__SWIG(std::vector< inworld::CompiledIntent > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_CompiledIntent_Sg__set__SWIG(std::vector< inworld::CompiledIntent > *self,int i,std::vector< inworld::CompiledIntent >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::Device >::const_reference inworld_std_vector_Sl_inworld_Device_Sg__get__SWIG(std::vector< inworld::Device > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_Device_Sg__set__SWIG(std::vector< inworld::Device > *self,int i,std::vector< inworld::Device >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::Event >::const_reference inworld_std_vector_Sl_inworld_Event_Sg__get__SWIG(std::vector< inworld::Event > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_Event_Sg__set__SWIG(std::vector< inworld::Event > *self,int i,std::vector< inworld::Event >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::Intent >::const_reference inworld_std_vector_Sl_inworld_Intent_Sg__get__SWIG(std::vector< inworld::Intent > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_Intent_Sg__set__SWIG(std::vector< inworld::Intent > *self,int i,std::vector< inworld::Intent >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::IntentMatch >::const_reference inworld_std_vector_Sl_inworld_IntentMatch_Sg__get__SWIG(std::vector< inworld::IntentMatch > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_IntentMatch_Sg__set__SWIG(std::vector< inworld::IntentMatch > *self,int i,std::vector< inworld::IntentMatch >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::KeywordMatch >::const_reference inworld_std_vector_Sl_inworld_KeywordMatch_Sg__get__SWIG(std::vector< inworld::KeywordMatch > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_KeywordMatch_Sg__set__SWIG(std::vector< inworld::KeywordMatch > *self,int i,std::vector< inworld::KeywordMatch >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::KeywordGroup >::const_reference inworld_std_vector_Sl_inworld_KeywordGroup_Sg__get__SWIG(std::vector< inworld::KeywordGroup > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_KeywordGroup_Sg__set__SWIG(std::vector< inworld::KeywordGroup > *self,int i,std::vector< inworld::KeywordGroup >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::KnowledgeRecord >::const_reference inworld_std_vector_Sl_inworld_KnowledgeRecord_Sg__get__SWIG(std::vector< inworld::KnowledgeRecord > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_KnowledgeRecord_Sg__set__SWIG(std::vector< inworld::KnowledgeRecord > *self,int i,std::vector< inworld::KnowledgeRecord >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::KnowledgeCollection >::const_reference inworld_std_vector_Sl_inworld_KnowledgeCollection_Sg__get__SWIG(std::vector< inworld::KnowledgeCollection > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_KnowledgeCollection_Sg__set__SWIG(std::vector< inworld::KnowledgeCollection > *self,int i,std::vector< inworld::KnowledgeCollection >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::LLMRoutingConfig >::const_reference inworld_std_vector_Sl_inworld_LLMRoutingConfig_Sg__get__SWIG(std::vector< inworld::LLMRoutingConfig > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_LLMRoutingConfig_Sg__set__SWIG(std::vector< inworld::LLMRoutingConfig > *self,int i,std::vector< inworld::LLMRoutingConfig >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::TopicThreshold >::const_reference inworld_std_vector_Sl_inworld_TopicThreshold_Sg__get__SWIG(std::vector< inworld::TopicThreshold > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_TopicThreshold_Sg__set__SWIG(std::vector< inworld::TopicThreshold > *self,int i,std::vector< inworld::TopicThreshold >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::DetectedTopic >::const_reference inworld_std_vector_Sl_inworld_DetectedTopic_Sg__get__SWIG(std::vector< inworld::DetectedTopic > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_DetectedTopic_Sg__set__SWIG(std::vector< inworld::DetectedTopic > *self,int i,std::vector< inworld::DetectedTopic >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::DictionaryRule >::const_reference inworld_std_vector_Sl_inworld_DictionaryRule_Sg__get__SWIG(std::vector< inworld::DictionaryRule > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_DictionaryRule_Sg__set__SWIG(std::vector< inworld::DictionaryRule > *self,int i,std::vector< inworld::DictionaryRule >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::Entity >::const_reference inworld_std_vector_Sl_inworld_Entity_Sg__get__SWIG(std::vector< inworld::Entity > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_Entity_Sg__set__SWIG(std::vector< inworld::Entity > *self,int i,std::vector< inworld::Entity >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::EntityMatch >::const_reference inworld_std_vector_Sl_inworld_EntityMatch_Sg__get__SWIG(std::vector< inworld::EntityMatch > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_EntityMatch_Sg__set__SWIG(std::vector< inworld::EntityMatch > *self,int i,std::vector< inworld::EntityMatch >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< float > >::const_reference inworld_std_vector_Sl_std_vector_Sl_float_Sg__Sg__get__SWIG(std::vector< std::vector< float > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_vector_Sl_float_Sg__Sg__set__SWIG(std::vector< std::vector< float > > *self,int i,std::vector< std::vector< float > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference inworld_std_vector_Sl_std_string_Sg__get__SWIG(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_string_Sg__set__SWIG(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::map< std::string,std::string > >::const_reference inworld_std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get__SWIG(std::vector< std::map< std::string,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set__SWIG(std::vector< std::map< std::string,std::string > > *self,int i,std::vector< std::map< std::string,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "inworld/library/telemetry/telemetry.h"
#include "examples/common/common_utils.h"
#include <string>


#include <optional>


#include <map>
#include <string>

SWIGINTERN std::string const &inworld_std_map_Sl_std_string_Sc_std_string_Sg__get__SWIG(std::map< std::string,std::string > *self,std::string const &key){
          std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
          if (i != self->end())
            return i->second;
          else
            throw std::out_of_range("key not found");
        }
SWIGINTERN void inworld_std_map_Sl_std_string_Sc_std_string_Sg__set__SWIG(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
          (*self)[key] = x;
        }
SWIGINTERN void inworld_std_map_Sl_std_string_Sc_std_string_Sg__del__SWIG(std::map< std::string,std::string > *self,std::string const &key){
          std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
          if (i != self->end())
            self->erase(i);
          else
            throw std::out_of_range("key not found");
        }
SWIGINTERN bool inworld_std_map_Sl_std_string_Sc_std_string_Sg__has_key__SWIG(std::map< std::string,std::string > const *self,std::string const &key){
          std::map< std::string, std::string, std::less< std::string > >::const_iterator i = self->find(key);
          return i != self->end();
        }

#include "inworld/graphs/nodes/node.h"
#include "absl/log/log.h"

#include "absl/synchronization/mutex.h"
#include "absl/strings/str_cat.h"
#include "absl/container/flat_hash_map.h"

#include "bindings/clib/ffi/graphs/nodes/custom_node_process_executor.h"
#include "bindings/clib/ffi/graphs/nodes/custom_node_threaded_process_executor.h"
#include "bindings/clib/ffi/graphs/nodes/custom_node_destructor.h"
#include "bindings/clib/ffi/graphs/nodes/custom_node_wrapper.h"


#include <functional>


#include <memory>


#include "absl/status/status.h"


#include <memory>


#include "absl/status/statusor.h"


#include "absl/status/status.h"

SWIGINTERN absl::Status inworld_absl_Status_createStatus__SWIG(absl::StatusCode code,std::string const &msg){
    return absl::Status(code, msg);
  }
SWIGINTERN std::string inworld_absl_Status_ToString__SWIG(absl::Status const *self){
    return self->ToString({});
  }

#include "inworld/graphs/nodes/process_context.h"
// Include all node headers that are referenced in %extend methods
#include "inworld/graphs/builtin/nodes/goal_advancement_node.h"
#include "inworld/graphs/builtin/nodes/intent_node.h"
#include "inworld/graphs/builtin/nodes/keyword_matcher_node.h"
#include "inworld/graphs/builtin/nodes/knowledge_node.h"
#include "inworld/graphs/builtin/nodes/llm_chat_node.h"
#include "inworld/graphs/builtin/nodes/llm_chat_request_builder_node.h"
#include "inworld/graphs/builtin/nodes/llm_completion_node.h"
#include "inworld/graphs/builtin/nodes/llm_prompt_builder_node.h"
#include "inworld/graphs/builtin/nodes/memory_node.h"
#include "inworld/graphs/builtin/nodes/random_canned_text_node.h"
#include "inworld/graphs/builtin/nodes/safety_checker_node.h"
#include "inworld/graphs/builtin/nodes/stt_node.h"
#include "inworld/graphs/builtin/nodes/text_aggregator_node.h"
#include "inworld/graphs/builtin/nodes/text_chunking_node.h"
#include "inworld/graphs/builtin/nodes/tts_node.h"
#include "inworld/graphs/builtin/nodes/mcp_node.h"
// Include primitive interface headers
#include "inworld/library/llm/llm_interface.h"
#include "inworld/library/speech/stt_interface.h"
#include "inworld/library/speech/tts_interface.h"
#include "inworld/library/embeddings/text_embedder_interface.h"
#include "inworld/library/primitives/knowledge_interface.h"
#include "inworld/graphs/builtin/clients/mcp_client_interface.h"


#include "inworld/graphs/schema/node_configuration.h"
#include <nlohmann/json.hpp>

SWIGINTERN std::vector< enum absl::StatusCode >::const_reference inworld_std_vector_Sl_absl_StatusCode_Sg__get__SWIG(std::vector< absl::StatusCode > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_absl_StatusCode_Sg__set__SWIG(std::vector< absl::StatusCode > *self,int i,std::vector< enum absl::StatusCode >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool inworld_inworld_graphs_NodeExecutionConfig_is_valid__SWIG(inworld::graphs::NodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::string > inworld_inworld_graphs_NodeExecutionConfig_toJsonString__SWIG(inworld::graphs::NodeExecutionConfig const *self){
        auto json_result = inworld::graphs::ToJson(*self);
        if (!json_result.ok()) {
            return json_result.status();
        }
        return json_result.value().dump();
    }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#include "inworld/graphs/nodes/node_execution_telemetry_context.h"

SWIGINTERN bool inworld_inworld_graphs_NodeExecutionTelemetryContext_is_valid__SWIG(inworld::graphs::NodeExecutionTelemetryContext const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_CancellationContext_is_valid__SWIG(inworld::graphs::CancellationContext const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > inworld_inworld_graphs_ProcessContext_GetComponent_GoalAdvancementNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::GoalAdvancementNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > inworld_inworld_graphs_ProcessContext_GetComponent_IntentNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::IntentNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > inworld_inworld_graphs_ProcessContext_GetComponent_KeywordMatcherNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::KeywordMatcherNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > inworld_inworld_graphs_ProcessContext_GetComponent_KnowledgeNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::KnowledgeNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > inworld_inworld_graphs_ProcessContext_GetComponent_LLMChatNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::LLMChatNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > inworld_inworld_graphs_ProcessContext_GetComponent_LLMChatRequestBuilderNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::LLMChatRequestBuilderNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > inworld_inworld_graphs_ProcessContext_GetComponent_LLMCompletionNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::LLMCompletionNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > inworld_inworld_graphs_ProcessContext_GetComponent_LLMPromptBuilderNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::LLMPromptBuilderNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > inworld_inworld_graphs_ProcessContext_GetComponent_MemoryUpdateNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::MemoryUpdateNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > inworld_inworld_graphs_ProcessContext_GetComponent_MemoryRetrieveNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::MemoryRetrieveNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > inworld_inworld_graphs_ProcessContext_GetComponent_RandomCannedTextNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::RandomCannedTextNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > inworld_inworld_graphs_ProcessContext_GetComponent_SafetyCheckerNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::SafetyCheckerNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > inworld_inworld_graphs_ProcessContext_GetComponent_STTNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::STTNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > inworld_inworld_graphs_ProcessContext_GetComponent_TextAggregatorNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::TextAggregatorNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > inworld_inworld_graphs_ProcessContext_GetComponent_TextChunkingNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::TextChunkingNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > inworld_inworld_graphs_ProcessContext_GetComponent_TTSNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::TTSNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > inworld_inworld_graphs_ProcessContext_GetComponent_MCPListToolsNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::MCPListToolsNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > inworld_inworld_graphs_ProcessContext_GetComponent_MCPCallToolNode__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::MCPCallToolNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > inworld_inworld_graphs_ProcessContext_GetComponent_LLMInterface__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::LLMInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > inworld_inworld_graphs_ProcessContext_GetComponent_STTInterface__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::STTInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > inworld_inworld_graphs_ProcessContext_GetComponent_TTSInterface__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::TTSInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > inworld_inworld_graphs_ProcessContext_GetComponent_TextEmbedderInterface__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::TextEmbedderInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > inworld_inworld_graphs_ProcessContext_GetComponent_KnowledgeInterface__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::KnowledgeInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > inworld_inworld_graphs_ProcessContext_GetComponent_MCPClientInterface__SWIG(inworld::graphs::ProcessContext const *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::graphs::MCPClientInterface>>(id);
    }

#include "include/inworld/graphs/schema/basic_data_schema.h"
#include "include/inworld/graphs/schema/data_schema.h"
#include "include/inworld/graphs/schema/data_stream.h"
#include "include/inworld/library/primitives/intent_matcher_interface.h"
#include "include/inworld/library/primitives/keyword_matcher_interface.h"
#include "include/inworld/library/speech/tts_interface.h"
#include <nlohmann/json.hpp>
#include "bindings/clib/ffi/graphs/schema/custom_data_to_json_executor.h"
#include "bindings/clib/ffi/graphs/schema/custom_data_destructor.h"
#include "bindings/clib/ffi/graphs/schema/custom_data_wrapper.h"


#include <optional>
#include <variant>
#include "inworld/library/primitives/intent_matcher_interface.h"
#include "inworld/graphs/nodes/node.h"

SWIGINTERN float &inworld_std_optional_Sl_float_Sg__get_value__SWIG(std::optional< float > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_float_Sg__set_value__SWIG(std::optional< float > *self,float &t){
        *self = t;
    }
SWIGINTERN int &inworld_std_optional_Sl_int_Sg__get_value__SWIG(std::optional< int > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_int_Sg__set_value__SWIG(std::optional< int > *self,int &t){
        *self = t;
    }
SWIGINTERN size_t &inworld_std_optional_Sl_size_t_Sg__get_value__SWIG(std::optional< size_t > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_size_t_Sg__set_value__SWIG(std::optional< size_t > *self,size_t &t){
        *self = t;
    }
SWIGINTERN std::string &inworld_std_optional_Sl_std_string_Sg__get_value__SWIG(std::optional< std::string > *self){
        return self->value();
    }

class SwigStrInOut {
  std::string str_;
  char* ptr_;
  size_t len_;
public:
  void init(char* ptr) {
    ptr_ = ptr;
    if (ptr_) {
      str_ = ptr_;
      len_ = str_.length();
    }
  }

  std::string* str() { return &str_; }

  ~SwigStrInOut() {
    if (ptr_) {
      memcpy(ptr_, str_.c_str(), len_);
      ptr_[len_] = '\0';
    }
  }
};

SWIGINTERN void inworld_std_optional_Sl_std_string_Sg__set_value__SWIG(std::optional< std::string > *self,std::string &t){
        *self = t;
    }

#include "inworld/library/primitives/intent_matcher_interface.h"
#include "inworld/library/llm/llm_interface.h"


#include "inworld/library/core/intent.h"


#include "inworld/library/embeddings/text_embedder_interface.h"
#include "absl/status/statusor.h"


#include "inworld/library/core/model_interface.h"

SWIGINTERN bool inworld_inworld_ModelInterface_is_valid__SWIG(inworld::ModelInterface const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_TextEmbedderInterface_is_valid__SWIG(inworld::TextEmbedderInterface const *self){
          return self != nullptr;
      }

#include "inworld/library/core/model_interface.h"
#include "inworld/library/core/stream_interface.h"
#include "inworld/library/llm/llm_interface.h"
#include "absl/status/statusor.h"
#include <memory>


#include "inworld/library/core/stream_interface.h"


#include "absl/time/time.h"

SWIGINTERN std::vector< inworld::LogitBias >::const_reference inworld_std_vector_Sl_inworld_LogitBias_Sg__get__SWIG(std::vector< inworld::LogitBias > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_LogitBias_Sg__set__SWIG(std::vector< inworld::LogitBias > *self,int i,std::vector< inworld::LogitBias >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::Tool >::const_reference inworld_std_vector_Sl_inworld_Tool_Sg__get__SWIG(std::vector< inworld::Tool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_Tool_Sg__set__SWIG(std::vector< inworld::Tool > *self,int i,std::vector< inworld::Tool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::Message >::const_reference inworld_std_vector_Sl_inworld_Message_Sg__get__SWIG(std::vector< inworld::Message > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_Message_Sg__set__SWIG(std::vector< inworld::Message > *self,int i,std::vector< inworld::Message >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::ToolCall >::const_reference inworld_std_vector_Sl_inworld_ToolCall_Sg__get__SWIG(std::vector< inworld::ToolCall > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_ToolCall_Sg__set__SWIG(std::vector< inworld::ToolCall > *self,int i,std::vector< inworld::ToolCall >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::ContentItem >::const_reference inworld_std_vector_Sl_inworld_ContentItem_Sg__get__SWIG(std::vector< inworld::ContentItem > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_ContentItem_Sg__set__SWIG(std::vector< inworld::ContentItem > *self,int i,std::vector< inworld::ContentItem >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool inworld_inworld_InputStream_Sl_inworld_Content_Sg__is_valid__SWIG(inworld::InputStream< inworld::Content > const *self){
          return self != nullptr;
      }
SWIGINTERN inworld::ToolChoice &inworld_std_optional_Sl_inworld_ToolChoice_Sg__get_value__SWIG(std::optional< inworld::ToolChoice > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_ToolChoice_Sg__set_value__SWIG(std::optional< inworld::ToolChoice > *self,inworld::ToolChoice &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_TextGenerationConfig_HasSeed__SWIG(inworld::TextGenerationConfig const *self){
        return self->seed.has_value();
    }
SWIGINTERN int inworld_inworld_TextGenerationConfig_GetSeed__SWIG(inworld::TextGenerationConfig const *self){
        if (self->seed.has_value()) {
            return self->seed.value();
        }
        return 0; // Default value if no seed is set
    }
SWIGINTERN void inworld_inworld_TextGenerationConfig_SetSeed__SWIG(inworld::TextGenerationConfig *self,int seed_value){
        self->seed = seed_value;
    }
SWIGINTERN void inworld_inworld_TextGenerationConfig_ClearSeed__SWIG(inworld::TextGenerationConfig *self){
        self->seed = std::nullopt;
    }
SWIGINTERN void inworld_inworld_Tool_SetPropertiesFromString__SWIG(inworld::Tool *self,std::string const &json_str){
        if (!json_str.empty()) {
            self->properties = nlohmann::json::parse(json_str);
        }
    }
SWIGINTERN std::string inworld_inworld_Tool_GetPropertiesAsString__SWIG(inworld::Tool const *self){
        return self->properties.dump();
    }
SWIGINTERN bool inworld_inworld_ToolChoice_IsStringChoice__SWIG(inworld::ToolChoice const *self){
        return std::holds_alternative<std::string>(self->choice);
    }
SWIGINTERN bool inworld_inworld_ToolChoice_IsFunctionChoice__SWIG(inworld::ToolChoice const *self){
        return std::holds_alternative<inworld::FunctionChoice>(self->choice);
    }
SWIGINTERN std::string inworld_inworld_ToolChoice_GetStringChoice__SWIG(inworld::ToolChoice const *self){
        if (std::holds_alternative<std::string>(self->choice)) {
            return std::get<std::string>(self->choice);
        }
        return "";
    }
SWIGINTERN inworld::FunctionChoice inworld_inworld_ToolChoice_GetFunctionChoice__SWIG(inworld::ToolChoice const *self){
        if (std::holds_alternative<inworld::FunctionChoice>(self->choice)) {
            return std::get<inworld::FunctionChoice>(self->choice);
        }
        return inworld::FunctionChoice{};
    }
SWIGINTERN void inworld_inworld_ToolChoice_SetStringChoice__SWIG(inworld::ToolChoice *self,std::string const &choice){
        self->choice = choice;
    }
SWIGINTERN void inworld_inworld_ToolChoice_SetFunctionChoice__SWIG(inworld::ToolChoice *self,inworld::FunctionChoice const &func_choice){
        self->choice = func_choice;
    }
SWIGINTERN bool inworld_inworld_ContentItem_IsText__SWIG(inworld::ContentItem const *self){
        return std::holds_alternative<std::string>(self->content_item);
    }
SWIGINTERN bool inworld_inworld_ContentItem_IsImage__SWIG(inworld::ContentItem const *self){
        return std::holds_alternative<inworld::ImageUrl>(self->content_item);
    }
SWIGINTERN std::string inworld_inworld_ContentItem_GetText__SWIG(inworld::ContentItem const *self){
        if (std::holds_alternative<std::string>(self->content_item)) {
            return std::get<std::string>(self->content_item);
        }
        return "";
    }
SWIGINTERN inworld::ImageUrl inworld_inworld_ContentItem_GetImageUrl__SWIG(inworld::ContentItem const *self){
        if (std::holds_alternative<inworld::ImageUrl>(self->content_item)) {
            return std::get<inworld::ImageUrl>(self->content_item);
        }
        return inworld::ImageUrl{};
    }
SWIGINTERN void inworld_inworld_ContentItem_SetText__SWIG(inworld::ContentItem *self,std::string const &text){
        self->content_item = text;
    }
SWIGINTERN void inworld_inworld_ContentItem_SetImageUrl__SWIG(inworld::ContentItem *self,inworld::ImageUrl const &image_url){
        self->content_item = image_url;
    }
SWIGINTERN bool inworld_inworld_Message_IsTextContent__SWIG(inworld::Message const *self){
        return std::holds_alternative<std::string>(self->content);
    }
SWIGINTERN bool inworld_inworld_Message_IsMultimodalContent__SWIG(inworld::Message const *self){
        return std::holds_alternative<std::vector<inworld::ContentItem>>(self->content);
    }
SWIGINTERN std::string inworld_inworld_Message_GetTextContent__SWIG(inworld::Message const *self){
        if (std::holds_alternative<std::string>(self->content)) {
            return std::get<std::string>(self->content);
        }
        return "";
    }
SWIGINTERN std::vector< inworld::ContentItem > inworld_inworld_Message_GetContentItems__SWIG(inworld::Message const *self){
        if (std::holds_alternative<std::vector<inworld::ContentItem>>(self->content)) {
            return std::get<std::vector<inworld::ContentItem>>(self->content);
        }
        return std::vector<inworld::ContentItem>{};
    }
SWIGINTERN void inworld_inworld_Message_SetTextContent__SWIG(inworld::Message *self,std::string const &text){
        self->content = text;
    }
SWIGINTERN void inworld_inworld_Message_SetContentItems__SWIG(inworld::Message *self,std::vector< inworld::ContentItem > const &content_items){
        self->content = content_items;
    }
SWIGINTERN bool inworld_inworld_LLMInterface_is_valid__SWIG(inworld::LLMInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > inworld_inworld_LLMInterface_GenerateContent__SWIG_0(inworld::LLMInterface const *self,std::string const &prompt,inworld::TextGenerationConfig const &config){
        return self->GenerateContent(prompt, config);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > inworld_inworld_LLMInterface_GenerateContent__SWIG_1(inworld::LLMInterface const *self,std::vector< inworld::Message > const &messages,inworld::TextGenerationConfig const &config){
        std::vector<inworld::Tool> empty_tools;
        return self->GenerateContent(messages, config, empty_tools);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > inworld_inworld_LLMInterface_GenerateContent__SWIG_2(inworld::LLMInterface const *self,std::vector< inworld::Message > const &messages,inworld::TextGenerationConfig const &config,std::vector< inworld::Tool > const &tools){
        return self->GenerateContent(messages, config, tools);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > inworld_inworld_LLMInterface_GenerateContent__SWIG_3(inworld::LLMInterface const *self,std::vector< inworld::Message > const &messages,inworld::TextGenerationConfig const &config,std::vector< inworld::Tool > const &tools,inworld::ToolChoice const &tool_choice){
        return self->GenerateContent(messages, config, tools, tool_choice);
    }
SWIGINTERN bool inworld_inworld_IntentMatcherInterface_is_valid__SWIG(inworld::IntentMatcherInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::vector< inworld::IntentMatch > > inworld_inworld_IntentMatcherInterface_MatchIntents__SWIG(inworld::IntentMatcherInterface const *self,std::string const &input){
        return self->MatchIntents({input});
    }
SWIGINTERN inworld::LlmMatcherConfig &inworld_std_optional_Sl_inworld_LlmMatcherConfig_Sg__get_value__SWIG(std::optional< inworld::LlmMatcherConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_LlmMatcherConfig_Sg__set_value__SWIG(std::optional< inworld::LlmMatcherConfig > *self,inworld::LlmMatcherConfig &t){
        *self = t;
    }
SWIGINTERN std::shared_ptr< inworld::TextEmbedderInterface const > &inworld_std_optional_Sl_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__Sg__get_value__SWIG(std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__Sg__set_value__SWIG(std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *self,std::shared_ptr< inworld::TextEmbedderInterface const > &t){
        *self = t;
    }
SWIGINTERN inworld::EmbeddingMatcherConfig &inworld_std_optional_Sl_inworld_EmbeddingMatcherConfig_Sg__get_value__SWIG(std::optional< inworld::EmbeddingMatcherConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_EmbeddingMatcherConfig_Sg__set_value__SWIG(std::optional< inworld::EmbeddingMatcherConfig > *self,inworld::EmbeddingMatcherConfig &t){
        *self = t;
    }

#include "inworld/library/core/model_interface.h"
#include "inworld/library/speech/tts_interface.h"
#include "absl/status/statusor.h"
#include <memory>


#include "inworld/library/core/stream_interface.h"
#include "inworld/library/llm/llm_interface.h"
#include "inworld/library/speech/tts_interface.h"
#include "bindings/clib/ffi/core/custom_stream_read_thru_executor.h"
#include "bindings/clib/ffi/core/custom_stream_read_thru_wrapper.h"
#include "bindings/clib/ffi/core/swig_blocking_stream.h"

#include <string>

SWIGINTERN bool inworld_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__is_valid__SWIG(inworld::InputStream< inworld::graphs::TTSOutput > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_InputStream_Sl_std_string_Sg__is_valid__SWIG(inworld::InputStream< std::string > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__is_valid__SWIG(inworld::InputStream< inworld::SpeechChunk > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__is_valid__SWIG(inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_swig_helpers_SwigBlockingStream_Sl_inworld_graphs_TTSOutput_Sg__is_valid__SWIG(inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_swig_helpers_SwigBlockingStream_Sl_inworld_Content_Sg__is_valid__SWIG(inworld::swig_helpers::SwigBlockingStream< inworld::Content > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_swig_helpers_SwigBlockingStream_Sl_inworld_SpeechChunk_Sg__is_valid__SWIG(inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_swig_helpers_SwigBlockingStream_Sl_std_string_Sg__is_valid__SWIG(inworld::swig_helpers::SwigBlockingStream< std::string > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_swig_helpers_SwigBlockingStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__is_valid__SWIG(inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_swig_helpers_CustomStringStreamReadThruWrapper_is_valid__SWIG(inworld::swig_helpers::CustomStringStreamReadThruWrapper const *self){
          return self != nullptr;
      }
SWIGINTERN std::vector< inworld::SpeechChunk::PhonemeTimestamp >::const_reference inworld_std_vector_Sl_inworld_SpeechChunk_PhonemeTimestamp_Sg__get__SWIG(std::vector< inworld::SpeechChunk::PhonemeTimestamp > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_SpeechChunk_PhonemeTimestamp_Sg__set__SWIG(std::vector< inworld::SpeechChunk::PhonemeTimestamp > *self,int i,std::vector< inworld::SpeechChunk::PhonemeTimestamp >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN inworld::InworldSpeechSynthesisConfig *inworld_inworld_SpeechSynthesisConfig_inworld_config__SWIG(inworld::SpeechSynthesisConfig *self){
        if(!std::holds_alternative<inworld::InworldSpeechSynthesisConfig>(self->config)) {
            self->config = inworld::InworldSpeechSynthesisConfig{};
        }
        return &std::get<inworld::InworldSpeechSynthesisConfig>(self->config);
    }
SWIGINTERN inworld::ElevenLabsSpeechSynthesisConfig *inworld_inworld_SpeechSynthesisConfig_eleven_labs_config__SWIG(inworld::SpeechSynthesisConfig *self){
        if(!std::holds_alternative<inworld::ElevenLabsSpeechSynthesisConfig>(self->config)) {
            self->config = inworld::ElevenLabsSpeechSynthesisConfig{};
        }
        return &std::get<inworld::ElevenLabsSpeechSynthesisConfig>(self->config);
    }
SWIGINTERN bool inworld_inworld_TTSInterface_is_valid__SWIG(inworld::TTSInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > inworld_inworld_TTSInterface_SynthesizeSpeech__SWIG_0(inworld::TTSInterface const *self,inworld::Voice const &voice,std::string const &input){
        return self->SynthesizeSpeech(voice, {input});
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > inworld_inworld_TTSInterface_SynthesizeSpeech__SWIG_1(inworld::TTSInterface const *self,inworld::Voice const &voice,std::string const &input,std::string const &instruction){
        return self->SynthesizeSpeech(voice, {input, instruction});
    }
SWIGINTERN inworld::Voice &inworld_std_optional_Sl_inworld_Voice_Sg__get_value__SWIG(std::optional< inworld::Voice > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_Voice_Sg__set_value__SWIG(std::optional< inworld::Voice > *self,inworld::Voice &t){
        *self = t;
    }

#include "inworld/library/primitives/keyword_matcher_interface.h"

SWIGINTERN bool inworld_inworld_KeywordMatcherInterface_is_valid__SWIG(inworld::KeywordMatcherInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< inworld::KeywordMatcherResponse > inworld_inworld_KeywordMatcherInterface_MatchKeywords__SWIG(inworld::KeywordMatcherInterface const *self,std::string const &input){
        return self->MatchKeywords({input});
    }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::BaseData > >::const_reference inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__get__SWIG(std::vector< std::shared_ptr< inworld::graphs::BaseData > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__set__SWIG(std::vector< std::shared_ptr< inworld::graphs::BaseData > > *self,int i,std::vector< std::shared_ptr< inworld::graphs::BaseData > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::shared_ptr< inworld::graphs::BaseData > inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__safe_get__SWIG(std::vector< std::shared_ptr< inworld::graphs::BaseData > > const *self,size_t index){
        if (index >= self->size()) {
            return nullptr;
        }
        return self->at(index);
    }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::Text > >::const_reference inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_Text_Sg__Sg__get__SWIG(std::vector< std::shared_ptr< inworld::graphs::Text > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_Text_Sg__Sg__set__SWIG(std::vector< std::shared_ptr< inworld::graphs::Text > > *self,int i,std::vector< std::shared_ptr< inworld::graphs::Text > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::ToolData > >::const_reference inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolData_Sg__Sg__get__SWIG(std::vector< std::shared_ptr< inworld::graphs::ToolData > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolData_Sg__Sg__set__SWIG(std::vector< std::shared_ptr< inworld::graphs::ToolData > > *self,int i,std::vector< std::shared_ptr< inworld::graphs::ToolData > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::const_reference inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallData_Sg__Sg__get__SWIG(std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallData_Sg__Sg__set__SWIG(std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *self,int i,std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::const_reference inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallResult_Sg__Sg__get__SWIG(std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallResult_Sg__Sg__set__SWIG(std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *self,int i,std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool inworld_inworld_graphs_BaseData_is_valid__SWIG(inworld::graphs::BaseData const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_Text_is_valid__SWIG(inworld::graphs::Text const *self){
          return self != nullptr;
      }
SWIGINTERN inworld::graphs::Text *inworld_inworld_graphs_Text_new__SWIG_1(std::string const &text,std::string const &id){
        return new inworld::graphs::Text(text + " " + id);
    }
SWIGINTERN bool inworld_inworld_graphs_Audio_is_valid__SWIG(inworld::graphs::Audio const *self){
          return self != nullptr;
      }
SWIGINTERN std::shared_ptr< inworld::graphs::Audio > inworld_inworld_graphs_TTSOutput_safe_audio__SWIG(inworld::graphs::TTSOutput const *self){
        return self->audio;
    }
SWIGINTERN bool inworld_inworld_graphs_SafetyResult_is_valid__SWIG(inworld::graphs::SafetyResult const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_MatchedKeywords_is_valid__SWIG(inworld::graphs::MatchedKeywords const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_ClassificationResult_is_valid__SWIG(inworld::graphs::ClassificationResult const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_KnowledgeRecords_is_valid__SWIG(inworld::graphs::KnowledgeRecords const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_Error_is_valid__SWIG(inworld::graphs::Error const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_MatchedIntents_is_valid__SWIG(inworld::graphs::MatchedIntents const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_GoalAdvancement_is_valid__SWIG(inworld::graphs::GoalAdvancement const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_Json_is_valid__SWIG(inworld::graphs::Json const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > inworld_inworld_graphs_Json_FromString__SWIG(std::string const &json_string){
        try {
            return std::make_shared<inworld::graphs::Json>(nlohmann::json::parse(json_string));
        } catch (const nlohmann::json::parse_error& e) {
            return absl::InvalidArgumentError(e.what());
        } catch (const std::exception& e) {
            return absl::InternalError(e.what());
        }
    }
SWIGINTERN std::string inworld_inworld_graphs_Json_value_as_string__SWIG(inworld::graphs::Json const *self){
        return self->value().dump();
    }
SWIGINTERN bool inworld_inworld_graphs_ToolCallData_is_valid__SWIG(inworld::graphs::ToolCallData const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_ListToolCallData_is_valid__SWIG(inworld::graphs::ListToolCallData const *self){
          return self != nullptr;
      }
SWIGINTERN inworld::graphs::ListToolCallData *inworld_inworld_graphs_ListToolCallData_new__SWIG_0(std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > tool_calls){
        std::vector<inworld::graphs::ToolCallData> tool_call_data_list;
        for (const auto& tool_call_data : tool_calls) {
            if (tool_call_data) {
                tool_call_data_list.push_back(*tool_call_data);
            }
        }
        return new inworld::graphs::ListToolCallData(tool_call_data_list);
    }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > inworld_inworld_graphs_ListToolCallData_tool_calls_swig__SWIG(inworld::graphs::ListToolCallData const *self){
        std::vector<std::shared_ptr<inworld::graphs::ToolCallData>> tool_call_data_list;
        for (const auto& tool_call_data : self->tool_calls()) {
            tool_call_data_list.push_back(std::make_shared<inworld::graphs::ToolCallData>(tool_call_data));
        }
        return tool_call_data_list;
    }
SWIGINTERN bool inworld_inworld_graphs_ToolData_is_valid__SWIG(inworld::graphs::ToolData const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_ListToolsData_is_valid__SWIG(inworld::graphs::ListToolsData const *self){
          return self != nullptr;
      }
SWIGINTERN inworld::graphs::ListToolsData *inworld_inworld_graphs_ListToolsData_new__SWIG_0(std::vector< std::shared_ptr< inworld::graphs::ToolData > > list_tools){
        std::vector<inworld::graphs::ToolData> tool_data_list;
        for (const auto& tool_data : list_tools) {
            if (tool_data) {
                tool_data_list.push_back(*tool_data);
            }
        }
        return new inworld::graphs::ListToolsData(tool_data_list);
    }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::ToolData > > inworld_inworld_graphs_ListToolsData_list_tools_swig__SWIG(inworld::graphs::ListToolsData const *self){
        std::vector<std::shared_ptr<inworld::graphs::ToolData>> tool_data_list;
        for (const auto& tool_data : self->list_tools()) {
            tool_data_list.push_back(std::make_shared<inworld::graphs::ToolData>(tool_data));
        }
        return tool_data_list;
    }
SWIGINTERN bool inworld_inworld_graphs_LLMChatRequest_is_valid__SWIG(inworld::graphs::LLMChatRequest const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_LLMChatResponse_is_valid__SWIG(inworld::graphs::LLMChatResponse const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_LLMChatResponse_has_complete_content__SWIG(inworld::graphs::LLMChatResponse const *self){
        return !self->is_streaming();
    }
SWIGINTERN inworld::Content inworld_inworld_graphs_LLMChatResponse_get_response_content__SWIG(inworld::graphs::LLMChatResponse const *self){
        if (self->is_streaming()) {
            return inworld::Content();
        }
        const auto& response_variant = self->response();
        if (std::holds_alternative<inworld::Content>(response_variant)) {
            return std::get<inworld::Content>(response_variant);
        }
        return inworld::Content();
    }
SWIGINTERN std::shared_ptr< inworld::InputStream< inworld::Content > > inworld_inworld_graphs_LLMChatResponse_get_response_stream__SWIG(inworld::graphs::LLMChatResponse const *self){
        if (!self->is_streaming()) {
            return nullptr;  // Not a streaming response
        }
        const auto& response_variant = self->response();
        if (std::holds_alternative<inworld::graphs::DataStream<inworld::Content>>(response_variant)) {
            auto& data_stream = std::get<inworld::graphs::DataStream<inworld::Content>>(response_variant);
            return data_stream.stream();
        }
        return nullptr;
    }
SWIGINTERN bool inworld_inworld_graphs_LLMCompletionResponse_is_valid__SWIG(inworld::graphs::LLMCompletionResponse const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_LLMCompletionResponse_has_complete_content__SWIG(inworld::graphs::LLMCompletionResponse const *self){
        return !self->is_streaming();
    }
SWIGINTERN std::string inworld_inworld_graphs_LLMCompletionResponse_get_content_text__SWIG(inworld::graphs::LLMCompletionResponse const *self){
        if (self->is_streaming()) {
            return "";  // Can't get text from streaming response directly
        }
        const auto& response_variant = self->response();
        if (std::holds_alternative<std::string>(response_variant)) {
            return std::get<std::string>(response_variant);
        }
        return "";
    }
SWIGINTERN std::shared_ptr< inworld::InputStream< std::string > > inworld_inworld_graphs_LLMCompletionResponse_get_input_stream__SWIG(inworld::graphs::LLMCompletionResponse const *self){
        if (!self->is_streaming()) {
            return nullptr;  // Not a streaming response
        }
        const auto& response_variant = self->response();
        if (std::holds_alternative<inworld::graphs::DataStream<std::string>>(response_variant)) {
            auto& data_stream = std::get<inworld::graphs::DataStream<std::string>>(response_variant);
            return data_stream.stream();
        }
        return nullptr;
    }
SWIGINTERN bool inworld_inworld_graphs_ToolCallResult_is_valid__SWIG(inworld::graphs::ToolCallResult const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_ListToolCallsResults_is_valid__SWIG(inworld::graphs::ListToolCallsResults const *self){
          return self != nullptr;
      }
SWIGINTERN inworld::graphs::ListToolCallsResults *inworld_inworld_graphs_ListToolCallsResults_new__SWIG_0(std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > tool_calls_results){
        std::vector<inworld::graphs::ToolCallResult> tool_call_result_list;
        for (const auto& tool_call_result : tool_calls_results) {
            if (tool_call_result) {
                tool_call_result_list.push_back(*tool_call_result);
            }
        }
        return new inworld::graphs::ListToolCallsResults(tool_call_result_list);
    }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > inworld_inworld_graphs_ListToolCallsResults_tool_call_results_swig__SWIG(inworld::graphs::ListToolCallsResults const *self){
        std::vector<std::shared_ptr<inworld::graphs::ToolCallResult>> tool_call_result_list;
        for (const auto& tool_call_result : self->tool_call_results()) {
            tool_call_result_list.push_back(std::make_shared<inworld::graphs::ToolCallResult>(tool_call_result));
        }
        return tool_call_result_list;
    }
SWIGINTERN bool inworld_inworld_graphs_TTSRequest_is_valid__SWIG(inworld::graphs::TTSRequest const *self){
          return self != nullptr;
      }
SWIGINTERN inworld::graphs::TTSRequest *inworld_inworld_graphs_TTSRequest_new__SWIG_0(std::shared_ptr< inworld::graphs::Text > text,std::optional< inworld::Voice > voice){
        if (!text) {
            return nullptr;
        }
        return new inworld::graphs::TTSRequest(*text, voice);
    }
SWIGINTERN inworld::graphs::TTSRequest *inworld_inworld_graphs_TTSRequest_new__SWIG_1(std::string const &text_content,std::optional< inworld::Voice > voice){
        inworld::graphs::Text text(text_content);
        return new inworld::graphs::TTSRequest(text, voice);
    }
SWIGINTERN inworld::graphs::TTSRequest *inworld_inworld_graphs_TTSRequest_new__SWIG_2(std::shared_ptr< inworld::graphs::DataStream< std::string > > stream,std::optional< inworld::Voice > voice){
        if (!stream) {
            return nullptr;
        }
        return new inworld::graphs::TTSRequest(*stream, voice);
    }
SWIGINTERN bool inworld_inworld_graphs_TTSRequest_has_text_content__SWIG(inworld::graphs::TTSRequest const *self){
        const auto& content_variant = self->content();
        return std::holds_alternative<inworld::graphs::Text>(content_variant);
    }
SWIGINTERN bool inworld_inworld_graphs_TTSRequest_has_stream_content__SWIG(inworld::graphs::TTSRequest const *self){
        const auto& content_variant = self->content();
        return std::holds_alternative<inworld::graphs::DataStream<std::string>>(content_variant);
    }
SWIGINTERN std::shared_ptr< inworld::graphs::Text > inworld_inworld_graphs_TTSRequest_get_text_content__SWIG(inworld::graphs::TTSRequest const *self){
        const auto& content_variant = self->content();
        if (std::holds_alternative<inworld::graphs::Text>(content_variant)) {
            const auto& text = std::get<inworld::graphs::Text>(content_variant);
            return std::make_shared<inworld::graphs::Text>(text);
        }
        return nullptr;
    }
SWIGINTERN std::shared_ptr< inworld::InputStream< std::string > > inworld_inworld_graphs_TTSRequest_get_content_stream__SWIG(inworld::graphs::TTSRequest const *self){
        const auto& content_variant = self->content();
        if (std::holds_alternative<inworld::graphs::DataStream<std::string>>(content_variant)) {
            auto& data_stream = std::get<inworld::graphs::DataStream<std::string>>(content_variant);
            return data_stream.stream();
        }
        return nullptr;
    }
SWIGINTERN std::optional< inworld::Voice > inworld_inworld_graphs_TTSRequest_get_voice__SWIG(inworld::graphs::TTSRequest const *self){
        return self->voice();
    }
SWIGINTERN bool inworld_inworld_swig_helpers_CustomDataWrapper_is_valid__SWIG(inworld::swig_helpers::CustomDataWrapper const *self){
          return self != nullptr;
      }

template <typename T>
std::shared_ptr<T> BaseDataAs(std::shared_ptr<inworld::graphs::BaseData> base_data) {
    return std::dynamic_pointer_cast<T>(base_data);
}

SWIGINTERN bool inworld_inworld_graphs_Node_is_valid__SWIG(inworld::graphs::Node const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_TypedNodeBase_is_valid__SWIG(inworld::graphs::TypedNodeBase const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_swig_helpers_CustomNodeWrapper_is_valid__SWIG(inworld::swig_helpers::CustomNodeWrapper const *self){
          return self != nullptr;
      }
SWIGINTERN inworld::BatchProcessingOptions &inworld_std_optional_Sl_inworld_BatchProcessingOptions_Sg__get_value__SWIG(std::optional< inworld::BatchProcessingOptions > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_BatchProcessingOptions_Sg__set_value__SWIG(std::optional< inworld::BatchProcessingOptions > *self,inworld::BatchProcessingOptions &t){
        *self = t;
    }

namespace inworld {
namespace telemetry {

class Span {
    public:
        Span() = default;
        explicit Span(opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) : span_(span) {}

        void SetAttribute(const std::string& key, const std::string& value) {
            span_->SetAttribute(key, value);
        }
        void SetAttribute(const std::string& key, const std::vector<std::string>& values) {
            std::vector<opentelemetry::nostd::string_view> value_views;
            for(const std::string& value : values)
            {
                value_views.push_back(value);
            }
            span_->SetAttribute(key, 
                opentelemetry::nostd::span<const opentelemetry::nostd::string_view>(value_views));
        }

        void SetOK() {
            span_->SetStatus(opentelemetry::trace::StatusCode::kOk);
        }

        void SetError(const std::string& description) {
            span_->SetStatus(opentelemetry::trace::StatusCode::kError, description);
        }

        void End() {
            span_->End();
        }

        opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> Get() const { return span_; }

    private:
        opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span_;
};
}
}

std::string GenerateExecutionId() {
    return inworld::GenerateExecutionId();
}

inworld::telemetry::Span StartSpan(const std::string& name) {
    return inworld::telemetry::Span(inworld::GetTracer()->StartSpan(name));
}

inworld::telemetry::Span StartSpan(const std::string& name, const std::map<std::string, std::string>& attributes) {
    return inworld::telemetry::Span(inworld::GetTracer()->StartSpan(name, attributes));
}

inworld::telemetry::Span StartSpan(
    const std::string& name,
    std::map<std::string, std::string>& attributes,
    const std::vector<inworld::telemetry::Span>& linked_spans,
    const inworld::telemetry::Span& root_span) {
    opentelemetry::trace::StartSpanOptions options;
    if (root_span.Get()) {
        options.parent = root_span.Get()->GetContext();
    }
    std::vector<std::pair<opentelemetry::trace::SpanContext,
                        std::map<std::string, std::string>>>
      links;
    for (const inworld::telemetry::Span& span : linked_spans) {
        links.push_back({span.Get()->GetContext(), attributes});
    }
    return inworld::telemetry::Span(inworld::GetTracer()->StartSpan(name, attributes, links, options));
}


SWIGINTERN std::vector< inworld::telemetry::Span >::const_reference inworld_std_vector_Sl_inworld_telemetry_Span_Sg__get__SWIG(std::vector< inworld::telemetry::Span > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_telemetry_Span_Sg__set__SWIG(std::vector< inworld::telemetry::Span > *self,int i,std::vector< inworld::telemetry::Span >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< inworld::graphs::Edge >::const_reference inworld_std_vector_Sl_inworld_graphs_Edge_Sg__get__SWIG(std::vector< inworld::graphs::Edge > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_graphs_Edge_Sg__set__SWIG(std::vector< inworld::graphs::Edge > *self,int i,std::vector< inworld::graphs::Edge >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

    template <typename T>
    std::vector<T> memcpy_to_vector(const T* data, size_t count) {
        std::vector<T> vector;
        if (!data) return {};
        vector.resize(count);
        std::memcpy(vector.data(), data, count * sizeof(T));
        return vector;
    }

SWIGINTERN std::vector< char >::const_reference inworld_std_vector_Sl_char_Sg__get__SWIG(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_char_Sg__set__SWIG(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< float >::const_reference inworld_std_vector_Sl_float_Sg__get__SWIG(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_float_Sg__set__SWIG(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "inworld/library/core/device.h"


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< inworld::Device > inworld_inworld_DeviceRegistry_GetAvailableDevices__SWIG(inworld::DeviceRegistry const *self){
        absl::StatusOr<std::vector<inworld::Device>> status_or = self->GetAvailableDevices();
        return status_or.ok() ? status_or.value() : std::vector<inworld::Device>{};
    }

#include <variant>
#include "inworld/library/core/event.h"

SWIGINTERN void inworld_inworld_AgentAction_set_parameter__SWIG(inworld::AgentAction *self,std::string const &key,std::string const &value){
        self->parameters[key] = value;
    }
SWIGINTERN bool inworld_inworld_AgentAction_contains_parameter__SWIG(inworld::AgentAction const *self,std::string const &key){
        return self->parameters.contains(key);
    }
SWIGINTERN std::string const &inworld_inworld_AgentAction_get_parameter__SWIG(inworld::AgentAction const *self,std::string const &key){
        return self->parameters.at(key);
    }
SWIGINTERN inworld::AgentSpeech *inworld_inworld_Event_speech__SWIG(inworld::Event *self){
        if(!std::holds_alternative<inworld::AgentSpeech>(self->event_variant)) {
            self->event_variant = inworld::AgentSpeech{};
        }
        return &std::get<inworld::AgentSpeech>(self->event_variant);
    }
SWIGINTERN inworld::AgentAction *inworld_inworld_Event_action__SWIG(inworld::Event *self){
        if(!std::holds_alternative<inworld::AgentAction>(self->event_variant)) {
            self->event_variant = inworld::AgentAction{};
        }
        return &std::get<inworld::AgentAction>(self->event_variant);
    }
SWIGINTERN bool inworld_inworld_Event_is_valid__SWIG(inworld::Event const *self){
          return self != nullptr;
      }

#include "inworld/library/core/text_processing/emoji_remover.h"

SWIGINTERN bool inworld_inworld_EmojiRemover_is_valid__SWIG(inworld::EmojiRemover const *self){
          return self != nullptr;
      }

#include "inworld/library/core/text_processing/sentence_stream.h"

SWIGINTERN bool inworld_inworld_SentenceStream_is_valid__SWIG(inworld::SentenceStream const *self){
          return self != nullptr;
      }

#include "inworld/library/core/content_to_string_stream.h"
#include "inworld/library/llm/llm_interface.h"

SWIGINTERN bool inworld_inworld_ContentToStringStream_is_valid__SWIG(inworld::ContentToStringStream const *self){
          return self != nullptr;
      }

#include "inworld/library/core/text_processing/substring_remover.h"

SWIGINTERN bool inworld_inworld_SubstringRemover_is_valid__SWIG(inworld::SubstringRemover const *self){
          return self != nullptr;
      }

#include "inworld/library/core/text_processing/text_in_brackets_remover.h"

SWIGINTERN bool inworld_inworld_TextInBracketsRemover_is_valid__SWIG(inworld::TextInBracketsRemover const *self){
          return self != nullptr;
      }

#include "inworld/library/core/stream_interface.h"
#include "inworld/library/core/reusable_stream.h"

#include "bindings/clib/ffi/core/transformation_stream_threaded_transform_executor.h"
#include "bindings/clib/ffi/core/transformation_stream_threaded_filter_executor.h"
#include "bindings/clib/ffi/core/transformation_stream_destructor.h"
#include "bindings/clib/ffi/core/transformation_stream.h"


#include "inworld/library/core/registry/registry_setup.h"


#include "inworld/library/core/registry/component_registry.h"
#include "inworld/library/llm/llm_interface.h"
#include "inworld/graphs/builtin/nodes/goal_advancement_node.h"
#include "inworld/graphs/builtin/nodes/intent_node.h"
#include "inworld/graphs/builtin/nodes/keyword_matcher_node.h"
#include "inworld/graphs/builtin/nodes/knowledge_node.h"
#include "inworld/graphs/builtin/nodes/llm_chat_node.h"
#include "inworld/graphs/builtin/nodes/llm_chat_request_builder_node.h"
#include "inworld/graphs/builtin/nodes/llm_completion_node.h"
#include "inworld/graphs/builtin/nodes/llm_prompt_builder_node.h"
#include "inworld/graphs/builtin/nodes/memory_node.h"
#include "inworld/graphs/builtin/nodes/random_canned_text_node.h"
#include "inworld/graphs/builtin/nodes/safety_checker_node.h"
#include "inworld/graphs/builtin/nodes/stt_node.h"
#include "inworld/graphs/builtin/nodes/text_aggregator_node.h"
#include "inworld/graphs/builtin/nodes/text_chunking_node.h"
#include "inworld/graphs/builtin/nodes/tts_node.h"
#include "inworld/library/common/macro_helpers.h"
#include "inworld/library/llm/llm_interface.h"
#include "inworld/library/speech/stt_factory.h"
#include "inworld/library/speech/stt_interface.h"
#include "inworld/library/speech/tts_factory.h"
#include "inworld/library/speech/tts_interface.h"
#include "inworld/library/embeddings/text_embedder_interface.h"
#include "inworld/library/embeddings/text_embedder_factory.h"
#include "inworld/library/primitives/knowledge_interface.h"
#include "inworld/library/primitives/knowledge_factory.h"
#include "inworld/graphs/builtin/nodes/mcp_node.h"
#include "inworld/graphs/builtin/clients/mcp_client_interface.h"
#include "inworld/graphs/builtin/clients/mcp_factory_configs.h"

#include "bindings/clib/ffi/graphs/edge_condition_executor.h"
#include "bindings/clib/ffi/graphs/edge_condition_threaded_executor.h"
#include "bindings/clib/ffi/graphs/nodes/custom_node_threaded_create_executor.h"

// JS callback support graphs/ffi_callback/registry.i
#include "inworld/library/common/status_helpers.h" 
#include "bindings/clib/ffi/nodejs/custom_node.h"
#include "bindings/clib/ffi/nodejs/edge_condition.h"

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_LLMInterface__SWIG_0(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::LocalLLMConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(LLMInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::LLMInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to LLMInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_LLMInterface__SWIG_1(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::RemoteLLMConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(LLMInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::LLMInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to LLMInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_LLMRouting__SWIG(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::LLMRoutingCreationConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(LLMRouting), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::LLMInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to LLMInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_STTInterface__SWIG_0(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::LocalSTTConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(STTInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::STTInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to STTInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_STTInterface__SWIG_1(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::RemoteSTTConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(STTInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::STTInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to STTInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_TTSInterface__SWIG(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::RemoteTTSConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(TTSInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::TTSInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to TTSInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_TextEmbedderInterface__SWIG_0(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::LocalTextEmbedderConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(TextEmbedderInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::TextEmbedderInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to TextEmbedderInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_TextEmbedderInterface__SWIG_1(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::RemoteTextEmbedderConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(TextEmbedderInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::TextEmbedderInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to TextEmbedderInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_KnowledgeInterface__SWIG_0(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::LocalKnowledgeConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(KnowledgeInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::KnowledgeInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to KnowledgeInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_KnowledgeInterface__SWIG_1(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::RemoteKnowledgeConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(KnowledgeInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::KnowledgeInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to KnowledgeInterface");
        }
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > inworld_inworld_ComponentRegistry_CreateComponent_MCPClientInterface__SWIG(inworld::ComponentRegistry *self,std::string const &id,inworld::CreationContext const &creation_context,inworld::graphs::MCPClientCreationConfig const &config){
        std::vector<std::any> args;
        args.push_back(config);
        auto result = self->CreateComponent(STRINGIFY(MCPClientInterface), id, creation_context, args);
        if (!result.ok()) {
            return result.status();
        }
        try {
            return std::any_cast<std::shared_ptr<const inworld::graphs::MCPClientInterface>>(result.value());
        } catch (const std::bad_any_cast&) {
            return absl::InternalError("Failed to cast created component to MCPClientInterface");
        }
    }
SWIGINTERN absl::Status inworld_inworld_ComponentRegistry_RegisterCustomEdgeCondition__SWIG_0(inworld::ComponentRegistry *self,std::string const &name,inworld::swig_helpers::EdgeConditionExecutor const &create_executor){
    return self->RegisterComponent(name, [create_executor](const std::string&) 
        -> absl::StatusOr<std::function<absl::StatusOr<bool>(const inworld::graphs::BaseData&)>> {
      return std::function<absl::StatusOr<bool>(const inworld::graphs::BaseData&)>(create_executor);
    });
  }
SWIGINTERN absl::Status inworld_inworld_ComponentRegistry_RegisterCustomEdgeCondition__SWIG_1(inworld::ComponentRegistry *self,std::string const &name,inworld::swig_helpers::EdgeConditionThreadedExecutor const &create_executor){
    return self->RegisterComponent(name, [create_executor](const std::string&) 
        -> absl::StatusOr<std::function<absl::StatusOr<bool>(const inworld::graphs::BaseData&)>> {
      return std::function<absl::StatusOr<bool>(const inworld::graphs::BaseData&)>(create_executor);
    });
  }
SWIGINTERN absl::Status inworld_inworld_ComponentRegistry_RegisterCustomNode__SWIG(inworld::ComponentRegistry *self,std::string const &type,inworld::swig_helpers::CustomNodeThreadedCreateExecutor const &create_executor){
    return self->RegisterComponent<std::shared_ptr<inworld::graphs::Node>>(type, [create_executor](const std::string& id, const std::vector<std::any>& configs) 
        -> absl::StatusOr<std::shared_ptr<inworld::swig_helpers::CustomNodeWrapper>> {
      std::shared_ptr<inworld::graphs::NodeExecutionConfig> execution_config;
      std::vector<std::shared_ptr<inworld::swig_helpers::CustomConfigWrapper>> custom_configs;
      for (const auto& config : configs) {
        if (config.type() == typeid(inworld::graphs::NodeExecutionConfig)) {
          auto config_val = std::any_cast<inworld::graphs::NodeExecutionConfig>(config);
          execution_config = std::make_shared<inworld::graphs::NodeExecutionConfig>(std::move(config_val));
        }
        else if (config.type() == typeid(std::shared_ptr<inworld::swig_helpers::CustomConfigWrapper>)) {
          custom_configs.push_back(std::any_cast<std::shared_ptr<inworld::swig_helpers::CustomConfigWrapper>>(config));
        }
        else {
          return absl::InvalidArgumentError("Invalid config type");
        }
      }
      return create_executor(id, execution_config, custom_configs);
    });
  }
SWIGINTERN absl::Status inworld_inworld_ComponentRegistry_RegisterEdgeConditionCallback__SWIG(inworld::ComponentRegistry *self,std::string const &name,void *callback_opaque){
    ASSIGN_OR_RETURN(auto cb,
                     inworld::ffi::fromOpaque(callback_opaque));
    using Callback = inworld::ffi::FfiCallback;
    using EdgeFn = std::function<absl::StatusOr<bool>(const inworld::graphs::BaseData&)>;
    return self->RegisterComponent(
        name,
        [cb = std::move(cb)](
            const std::string& /*unused*/) -> absl::StatusOr<EdgeFn> {
          auto fn = inworld::ffi::makeEdgeCondition(cb);
          return std::move(fn);
        });
  }
SWIGINTERN absl::Status inworld_inworld_ComponentRegistry_RegisterCallbackNode__SWIG(inworld::ComponentRegistry *self,std::string const &name,void *callback_opaque){
    ASSIGN_OR_RETURN(auto cb,
                     inworld::ffi::fromOpaque(callback_opaque));
    auto create = [cb = std::move(cb)](const std::string& id, const inworld::CreationContext& ctx, const std::vector<std::any>& configs)
        -> absl::StatusOr<std::shared_ptr<inworld::graphs::Node>> {
      std::shared_ptr<inworld::graphs::NodeExecutionConfig> execution_config;
      for (const auto& config : configs) {
        if (config.type() == typeid(inworld::graphs::NodeExecutionConfig)) {
          execution_config = std::make_shared<inworld::graphs::NodeExecutionConfig>(std::any_cast<inworld::graphs::NodeExecutionConfig>(config));
          break;
        }
      }
      return std::make_shared<inworld::ffi::CustomNode>(id, execution_config, cb);
    };

    return self->RegisterComponent<std::shared_ptr<inworld::graphs::Node>>(
        name, std::move(create));
  }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > inworld_inworld_ComponentStore_GetComponent_GoalAdvancementNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::GoalAdvancementNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > inworld_inworld_ComponentStore_GetComponent_IntentNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::IntentNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > inworld_inworld_ComponentStore_GetComponent_KeywordMatcherNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::KeywordMatcherNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > inworld_inworld_ComponentStore_GetComponent_KnowledgeNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::KnowledgeNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > inworld_inworld_ComponentStore_GetComponent_LLMChatNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::LLMChatNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > inworld_inworld_ComponentStore_GetComponent_LLMChatRequestBuilderNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::LLMChatRequestBuilderNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > inworld_inworld_ComponentStore_GetComponent_LLMCompletionNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::LLMCompletionNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > inworld_inworld_ComponentStore_GetComponent_LLMPromptBuilderNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::LLMPromptBuilderNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > inworld_inworld_ComponentStore_GetComponent_MemoryUpdateNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::MemoryUpdateNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > inworld_inworld_ComponentStore_GetComponent_MemoryRetrieveNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::MemoryRetrieveNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > inworld_inworld_ComponentStore_GetComponent_RandomCannedTextNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::RandomCannedTextNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > inworld_inworld_ComponentStore_GetComponent_SafetyCheckerNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::SafetyCheckerNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > inworld_inworld_ComponentStore_GetComponent_STTNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::STTNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > inworld_inworld_ComponentStore_GetComponent_TextAggregatorNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::TextAggregatorNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > inworld_inworld_ComponentStore_GetComponent_TextChunkingNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::TextChunkingNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > inworld_inworld_ComponentStore_GetComponent_TTSNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::TTSNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > inworld_inworld_ComponentStore_GetComponent_MCPListToolsNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::MCPListToolsNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > inworld_inworld_ComponentStore_GetComponent_MCPCallToolNode__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<inworld::graphs::MCPCallToolNode>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > inworld_inworld_ComponentStore_GetComponent_LLMInterface__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::LLMInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > inworld_inworld_ComponentStore_GetComponent_STTInterface__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::STTInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > inworld_inworld_ComponentStore_GetComponent_TTSInterface__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::TTSInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > inworld_inworld_ComponentStore_GetComponent_TextEmbedderInterface__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::TextEmbedderInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > inworld_inworld_ComponentStore_GetComponent_KnowledgeInterface__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::KnowledgeInterface>>(id);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > inworld_inworld_ComponentStore_GetComponent_MCPClientInterface__SWIG(inworld::ComponentStore *self,std::string const &id){
        return self->GetComponent<std::shared_ptr<const inworld::graphs::MCPClientInterface>>(id);
    }
SWIGINTERN absl::Status inworld_inworld_ComponentStore_AddComponent_LLMInterface__SWIG(inworld::ComponentStore *self,std::string const &id,std::shared_ptr< inworld::LLMInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_ComponentStore_AddComponent_STTInterface__SWIG(inworld::ComponentStore *self,std::string const &id,std::shared_ptr< inworld::STTInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_ComponentStore_AddComponent_TTSInterface__SWIG(inworld::ComponentStore *self,std::string const &id,std::shared_ptr< inworld::TTSInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_ComponentStore_AddComponent_TextEmbedderInterface__SWIG(inworld::ComponentStore *self,std::string const &id,std::shared_ptr< inworld::TextEmbedderInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_ComponentStore_AddComponent_KnowledgeInterface__SWIG(inworld::ComponentStore *self,std::string const &id,std::shared_ptr< inworld::KnowledgeInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_ComponentStore_AddComponent_MCPClientInterface__SWIG(inworld::ComponentStore *self,std::string const &id,std::shared_ptr< inworld::graphs::MCPClientInterface const > component){
        return self->AddComponent(id, std::any(component));
    }

#include "inworld/library/core/registry/config_registry.h"

#include "bindings/clib/ffi/core/registry/config_wrapper_destructor.h"
#include "bindings/clib/ffi/core/registry/custom_config_wrapper.h"
#include "bindings/clib/ffi/core/registry/custom_config_threaded_serialize_executor.h"
#include "bindings/clib/ffi/core/registry/custom_config_threaded_deserialize_executor.h"
#include "bindings/clib/ffi/core/registry/custom_execution_config_wrapper.h"
#include "bindings/clib/ffi/core/registry/custom_execution_config_threaded_serialize_executor.h"
#include "bindings/clib/ffi/core/registry/custom_execution_config_threaded_deserialize_executor.h"

SWIGINTERN std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::const_reference inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_swig_helpers_CustomConfigWrapper_Sg__Sg__get__SWIG(std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_swig_helpers_CustomConfigWrapper_Sg__Sg__set__SWIG(std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *self,int i,std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_swig_helpers_CustomConfigWrapper_Sg__Sg__safe_get__SWIG(std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const *self,size_t index){
        if (index >= self->size()) {
            return nullptr;
        }
        return self->at(index);
    }
SWIGINTERN absl::Status inworld_inworld_ConfigRegistry_RegisterCustomConfig__SWIG(inworld::ConfigRegistry *self,char const *type,inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor const &deserialize_executor,inworld::swig_helpers::CustomConfigThreadedSerializeExecutor const &serialize_executor){
    return self->RegisterConfig<std::shared_ptr<inworld::swig_helpers::CustomConfigWrapper>>(type, deserialize_executor, serialize_executor);
  }
SWIGINTERN absl::Status inworld_inworld_ConfigRegistry_RegisterCustomExecutionConfig__SWIG(inworld::ConfigRegistry *self,char const *type,inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor const &deserialize_executor,inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor const &serialize_executor){
    return self->RegisterConfig<std::shared_ptr<inworld::swig_helpers::CustomExecutionConfigWrapper>>(type, deserialize_executor, serialize_executor);
  }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > inworld_inworld_ConfigRegistry_DeserializeCustomConfig__SWIG(inworld::ConfigRegistry *self,char const *type,char const *json_data){
    nlohmann::json json_output;
    try {
      json_output = nlohmann::json::parse(json_data);
    } catch (const std::exception& e) {
      return absl::InvalidArgumentError(absl::StrCat("Error parsing JSON: ", e.what()));
    } catch (...) {
      return absl::InternalError("Unknown error parsing JSON in DeserializeCustomConfig");
    }

    auto result = self->DeserializeConfig(type, json_output);
    if (!result.ok()) {
      return result.status();
    }

    try {
      return std::any_cast<std::shared_ptr<inworld::swig_helpers::CustomConfigWrapper>>(result.value());
    } catch (const std::bad_any_cast& e) {
      return absl::InvalidArgumentError(absl::StrCat("Invalid config type for deserialization: ", e.what()));
    } catch (...) {
      return absl::InternalError("Unknown error casting result in DeserializeCustomConfig");
    }
  }
SWIGINTERN absl::StatusOr< std::string > inworld_inworld_ConfigRegistry_SerializeCustomConfig__SWIG(inworld::ConfigRegistry *self,char const *type,std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > const &config){
    auto result = self->SerializeConfig(type, config);
    if (!result.ok()) {
      return result.status();
    }

    return result->dump();
  }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > inworld_inworld_ConfigRegistry_DeserializeCustomExecutionConfig__SWIG(inworld::ConfigRegistry *self,char const *type,char const *json_data){
    nlohmann::json json_output;
    try {
      json_output = nlohmann::json::parse(json_data);
    } catch (const std::exception& e) {
      return absl::InvalidArgumentError(absl::StrCat("Error parsing JSON: ", e.what()));
    } catch (...) {
      return absl::InternalError("Unknown error parsing JSON in DeserializeCustomExecutionConfig");
    }

    auto result = self->DeserializeConfig(type, json_output);
    if (!result.ok()) {
      return result.status();
    }

    try {
      return std::any_cast<std::shared_ptr<inworld::swig_helpers::CustomExecutionConfigWrapper>>(result.value());
    } catch (const std::bad_any_cast& e) {
      return absl::InvalidArgumentError(absl::StrCat("Invalid config type for deserialization: ", e.what()));
    } catch (...) {
      return absl::InternalError("Unknown error casting result in DeserializeCustomExecutionConfig");
    }
  }
SWIGINTERN absl::StatusOr< std::string > inworld_inworld_ConfigRegistry_SerializeCustomExecutionConfig__SWIG(inworld::ConfigRegistry *self,char const *type,std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > const &config){
    auto result = self->SerializeConfig(type, config);
    if (!result.ok()) {
      return result.status();
    }

    return result->dump();
  }

#include "inworld/library/embeddings/text_embedder_factory.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN inworld::LocalTextEmbedderConfig &inworld_std_optional_Sl_inworld_LocalTextEmbedderConfig_Sg__get_value__SWIG(std::optional< inworld::LocalTextEmbedderConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_LocalTextEmbedderConfig_Sg__set_value__SWIG(std::optional< inworld::LocalTextEmbedderConfig > *self,inworld::LocalTextEmbedderConfig &t){
        *self = t;
    }
SWIGINTERN inworld::RemoteTextEmbedderConfig &inworld_std_optional_Sl_inworld_RemoteTextEmbedderConfig_Sg__get_value__SWIG(std::optional< inworld::RemoteTextEmbedderConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_RemoteTextEmbedderConfig_Sg__set_value__SWIG(std::optional< inworld::RemoteTextEmbedderConfig > *self,inworld::RemoteTextEmbedderConfig &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_TextEmbedderCreationConfig_has_local_config__SWIG(inworld::TextEmbedderCreationConfig const *self){
        return std::holds_alternative<inworld::LocalTextEmbedderConfig>(self->config);
    }
SWIGINTERN bool inworld_inworld_TextEmbedderCreationConfig_has_remote_config__SWIG(inworld::TextEmbedderCreationConfig const *self){
        return std::holds_alternative<inworld::RemoteTextEmbedderConfig>(self->config);
    }
SWIGINTERN std::optional< inworld::LocalTextEmbedderConfig > inworld_inworld_TextEmbedderCreationConfig_get_local_config__SWIG(inworld::TextEmbedderCreationConfig const *self){
        if (!std::holds_alternative<inworld::LocalTextEmbedderConfig>(self->config)) {
            return std::nullopt;
        }
        return std::get<inworld::LocalTextEmbedderConfig>(self->config);
    }
SWIGINTERN std::optional< inworld::RemoteTextEmbedderConfig > inworld_inworld_TextEmbedderCreationConfig_get_remote_config__SWIG(inworld::TextEmbedderCreationConfig const *self){
        if (!std::holds_alternative<inworld::RemoteTextEmbedderConfig>(self->config)) {
            return std::nullopt;
        }
        return std::get<inworld::RemoteTextEmbedderConfig>(self->config);
    }
SWIGINTERN void inworld_inworld_TextEmbedderCreationConfig_set_local_config__SWIG(inworld::TextEmbedderCreationConfig *self,inworld::LocalTextEmbedderConfig const &config){
        self->config = config;
    }
SWIGINTERN void inworld_inworld_TextEmbedderCreationConfig_set_remote_config__SWIG(inworld::TextEmbedderCreationConfig *self,inworld::RemoteTextEmbedderConfig const &config){
        self->config = config;
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > inworld_inworld_TextEmbedderFactory_CreateTextEmbedder__SWIG(inworld::TextEmbedderFactory const *self,inworld::TextEmbedderCreationConfig const &config){
        return self->CreateTextEmbedder(config);
    }

#include "inworld/library/primitives/knowledge_interface.h"
#include "inworld/library/primitives/knowledge_retriever_interface.h"


#include "inworld/library/primitives/knowledge_retriever_interface.h"

SWIGINTERN bool inworld_inworld_KnowledgeRetrieverInterface_is_valid__SWIG(inworld::KnowledgeRetrieverInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::vector< std::string > > inworld_inworld_KnowledgeRetrieverInterface_RetrieveKnowledge__SWIG(inworld::KnowledgeRetrieverInterface const *self,inworld::RetrievalConfig const &config,std::vector< inworld::KnowledgeCollection > const &collections,std::vector< inworld::Event > const &event_history){
        std::vector<std::shared_ptr<const inworld::KnowledgeCollection>> shared_collections;
        for(const inworld::KnowledgeCollection& collection : collections) {
            shared_collections.push_back(std::make_shared<const inworld::KnowledgeCollection>(collection));
        }
        return self->RetrieveKnowledge(config, shared_collections, event_history);
      }
SWIGINTERN bool inworld_inworld_KnowledgeInterface_is_valid__SWIG(inworld::KnowledgeInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::vector< std::string > > inworld_inworld_KnowledgeInterface_GetKnowledge__SWIG(inworld::KnowledgeInterface const *self,std::vector< std::string > const &ids,std::vector< inworld::Event > const &event_history){
        const inworld::KnowledgeGetInput knowledge_get_input{ids, event_history};
        return self->GetKnowledge(knowledge_get_input);
    }
SWIGINTERN absl::StatusOr< std::vector< std::string > > inworld_inworld_KnowledgeInterface_CompileKnowledge__SWIG_0(inworld::KnowledgeInterface const *self,std::string const &knowledge_id,std::vector< std::string > const &records){
        return self->CompileKnowledge(knowledge_id, records);
    }
SWIGINTERN absl::StatusOr< std::vector< std::string > > inworld_inworld_KnowledgeInterface_CompileKnowledge__SWIG_1(inworld::KnowledgeInterface const *self,std::string const &knowledge_id,std::vector< char > const file_bytes,inworld::File::Type const file_type){
        inworld::File file{{file_bytes}, file_type};
        return self->CompileKnowledge(knowledge_id, file);
    }

#include "inworld/library/primitives/knowledge_factory.h"
#include "inworld/library/primitives/knowledge_interface.h"


#include "inworld/library/common/language.h"

SWIGINTERN inworld::LocalKnowledgeConfig &inworld_std_optional_Sl_inworld_LocalKnowledgeConfig_Sg__get_value__SWIG(std::optional< inworld::LocalKnowledgeConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_LocalKnowledgeConfig_Sg__set_value__SWIG(std::optional< inworld::LocalKnowledgeConfig > *self,inworld::LocalKnowledgeConfig &t){
        *self = t;
    }
SWIGINTERN inworld::RemoteKnowledgeConfig &inworld_std_optional_Sl_inworld_RemoteKnowledgeConfig_Sg__get_value__SWIG(std::optional< inworld::RemoteKnowledgeConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_RemoteKnowledgeConfig_Sg__set_value__SWIG(std::optional< inworld::RemoteKnowledgeConfig > *self,inworld::RemoteKnowledgeConfig &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_KnowledgeCreationConfig_has_local_config__SWIG(inworld::KnowledgeCreationConfig *self){
        return std::holds_alternative<inworld::LocalKnowledgeConfig>(self->config);
    }
SWIGINTERN bool inworld_inworld_KnowledgeCreationConfig_has_remote_config__SWIG(inworld::KnowledgeCreationConfig *self){
        return std::holds_alternative<inworld::RemoteKnowledgeConfig>(self->config);
    }
SWIGINTERN std::optional< inworld::LocalKnowledgeConfig > inworld_inworld_KnowledgeCreationConfig_get_local_config__SWIG(inworld::KnowledgeCreationConfig *self){
        if (!std::holds_alternative<inworld::LocalKnowledgeConfig>(self->config)) {
            return std::nullopt;
        }   
        return std::get<inworld::LocalKnowledgeConfig>(self->config);
    }
SWIGINTERN std::optional< inworld::RemoteKnowledgeConfig > inworld_inworld_KnowledgeCreationConfig_get_remote_config__SWIG(inworld::KnowledgeCreationConfig *self){
        if (!std::holds_alternative<inworld::RemoteKnowledgeConfig>(self->config)) {
            return std::nullopt;
        }
        return std::get<inworld::RemoteKnowledgeConfig>(self->config);
    }
SWIGINTERN void inworld_inworld_KnowledgeCreationConfig_set_local_config__SWIG(inworld::KnowledgeCreationConfig *self,inworld::LocalKnowledgeConfig const &config){
        self->config = config;
    }
SWIGINTERN void inworld_inworld_KnowledgeCreationConfig_set_remote_config__SWIG(inworld::KnowledgeCreationConfig *self,inworld::RemoteKnowledgeConfig const &config){
        self->config = config;
    }
SWIGINTERN bool inworld_inworld_KnowledgeCreationConfig_is_valid__SWIG(inworld::KnowledgeCreationConfig const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > inworld_inworld_KnowledgeFactory_CreateKnowledge__SWIG_0(inworld::KnowledgeFactory const *self,inworld::CreationContext const &creation_context,inworld::LocalKnowledgeConfig const &config){
        inworld::KnowledgeCreationConfig variant{};
        variant.config = config;
        auto status_or = self->CreateKnowledge(creation_context, variant);
        if (status_or.ok()) {
            return std::shared_ptr<inworld::KnowledgeInterface>(status_or.value().release());
        }
        return status_or.status();
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > inworld_inworld_KnowledgeFactory_CreateKnowledge__SWIG_1(inworld::KnowledgeFactory const *self,inworld::CreationContext const &creation_context,inworld::RemoteKnowledgeConfig const &config){
        inworld::KnowledgeCreationConfig variant{};
        variant.config = config;
        auto status_or = self->CreateKnowledge(creation_context, variant);
        if (status_or.ok()) {
            return std::shared_ptr<inworld::KnowledgeInterface>(status_or.value().release());
        }
        return status_or.status();
    }

#include "inworld/library/primitives/knowledge_collection_factory.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN inworld::KnowledgeCollection inworld_inworld_KnowledgeCollectionFactory_CreateKnowledgeCollection__SWIG(inworld::KnowledgeCollectionFactory const *self,std::shared_ptr< inworld::TextEmbedderInterface > embedder,std::vector< std::string > const &texts){
        absl::StatusOr<inworld::KnowledgeCollection> status_or = self->CreateKnowledgeCollection(*embedder, texts);
        return status_or.ok() ? status_or.value() : inworld::KnowledgeCollection{};
    }

#include "inworld/library/primitives/knowledge_retriever_factory.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > inworld_inworld_KnowledgeRetrieverFactory_CreateKnowledgeRetriever__SWIG(inworld::KnowledgeRetrieverFactory const *self,std::shared_ptr< inworld::TextEmbedderInterface > embedder){
        return self->CreateKnowledgeRetriever(embedder);
    }

#include "inworld/library/primitives/intent_compiler_interface.h"

SWIGINTERN bool inworld_inworld_IntentCompilerInterface_is_valid__SWIG(inworld::IntentCompilerInterface const *self){
          return self != nullptr;
      }

#include "inworld/library/primitives/intent_compiler_factory.h"

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > inworld_inworld_IntentCompilerFactory_CreateIntentCompiler__SWIG_0(inworld::IntentCompilerFactory const *self,std::shared_ptr< inworld::TextEmbedderInterface const > embedder){
        return self->CreateIntentCompiler(embedder);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > inworld_inworld_IntentCompilerFactory_CreateIntentCompiler__SWIG_1(inworld::IntentCompilerFactory const *self){
        return self->CreateIntentCompiler();
    }

#include "inworld/library/primitives/intent_matcher_factory.h"
#include "inworld/library/primitives/intent_matcher_interface.h"

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > inworld_inworld_IntentMatcherFactory_CreateIntentMatcher__SWIG_0(inworld::IntentMatcherFactory const *self,std::shared_ptr< inworld::TextEmbedderInterface const > embedder,std::shared_ptr< inworld::LLMInterface const > llm_client,inworld::IntentMatcherCreationConfig const &creation_config){
        return self->CreateIntentMatcher(embedder, llm_client, creation_config);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > inworld_inworld_IntentMatcherFactory_CreateIntentMatcher__SWIG_1(inworld::IntentMatcherFactory const *self,std::shared_ptr< inworld::TextEmbedderInterface const > embedder,inworld::IntentMatcherCreationConfig const &creation_config){
        return self->CreateIntentMatcher(embedder, creation_config);
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > inworld_inworld_IntentMatcherFactory_CreateIntentMatcher__SWIG_2(inworld::IntentMatcherFactory const *self,std::shared_ptr< inworld::LLMInterface const > llm_client,inworld::IntentMatcherCreationConfig const &creation_config){
        return self->CreateIntentMatcher(llm_client, creation_config);
    }

#include "inworld/library/primitives/keyword_matcher_factory.h"
#include "inworld/library/primitives/keyword_matcher_interface.h"

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > inworld_inworld_KeywordMatcherFactory_CreateKeywordMatcher__SWIG(inworld::KeywordMatcherFactory const *self,std::vector< inworld::KeywordGroup > const &keyword_groups){
        absl::StatusOr<std::unique_ptr<inworld::KeywordMatcherInterface>> status_or = 
            self->CreateKeywordMatcher(keyword_groups);
        if (status_or.ok()) {
            return std::move(status_or.value());
        }
        return status_or.status();
    }

#include "inworld/library/primitives/ner_interface.h"

SWIGINTERN bool inworld_inworld_NERInterface_is_valid__SWIG(inworld::NERInterface const *self){
          return self != nullptr;
      }

#include "inworld/library/primitives/ner_factory.h"
#include "inworld/library/primitives/ner_interface.h"

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::NERInterface > > inworld_inworld_NERFactory_CreateNER__SWIG(inworld::NERCreationConfig const &config){
        absl::StatusOr<std::unique_ptr<inworld::NERInterface>> status_or = inworld::NERFactory::CreateNER(config);
        if (status_or.ok()) {
            return std::move(status_or.value());
        }
        return status_or.status();
    }

#include "inworld/library/common/text/prompts/jinja_compiler.h"
#include "inworld/library/common/status_helpers.h"
#include "inworld/library/llm/prompt_building_interface.h"
#include "absl/status/statusor.h"
#include "nlohmann/json.hpp"
#include <string>


    absl::StatusOr<std::string> RenderJinja(std::string jinja_template, std::string json_string) {
        ASSIGN_OR_RETURN(auto compiled_prompt_template,
            inworld::library::JinjaCompiler::Create(jinja_template));
        return compiled_prompt_template->Build(nlohmann::ordered_json::parse(json_string));
    }


#include "inworld/library/llm/llm_routing.h"
#include "absl/status/statusor.h"
#include "absl/time/time.h"
#include <memory>
#include <vector>


namespace inworld {
namespace swig_helpers {

class LLMRoutingHelper {
public:
    static absl::StatusOr<std::shared_ptr<const inworld::LLMRouting>> CreateLLMRouting(const CreationContext& creation_context, const inworld::LLMRoutingCreationConfig& routing_config) {
        auto result = inworld::LLMRouting::Create(creation_context, routing_config);
        if (!result.ok()) {
            return result.status();
        }
        return std::shared_ptr<const inworld::LLMRouting>(std::move(result.value()));
    }
};

} // namespace swig_helpers
} // namespace inworld

SWIGINTERN bool inworld_inworld_LLMRouting_is_valid__SWIG(inworld::LLMRouting const *self){
          return self != nullptr;
      }

#include "inworld/library/llm/llm_factory.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN inworld::LocalLLMConfig &inworld_std_optional_Sl_inworld_LocalLLMConfig_Sg__get_value__SWIG(std::optional< inworld::LocalLLMConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_LocalLLMConfig_Sg__set_value__SWIG(std::optional< inworld::LocalLLMConfig > *self,inworld::LocalLLMConfig &t){
        *self = t;
    }
SWIGINTERN inworld::RemoteLLMConfig &inworld_std_optional_Sl_inworld_RemoteLLMConfig_Sg__get_value__SWIG(std::optional< inworld::RemoteLLMConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_RemoteLLMConfig_Sg__set_value__SWIG(std::optional< inworld::RemoteLLMConfig > *self,inworld::RemoteLLMConfig &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_LLMCreationConfig_has_local_llm_config__SWIG(inworld::LLMCreationConfig const *self){
    return std::holds_alternative<inworld::LocalLLMConfig>(self->config);
  }
SWIGINTERN bool inworld_inworld_LLMCreationConfig_has_remote_llm_config__SWIG(inworld::LLMCreationConfig const *self){
    return std::holds_alternative<inworld::RemoteLLMConfig>(self->config);
  }
SWIGINTERN std::optional< inworld::LocalLLMConfig > inworld_inworld_LLMCreationConfig_get_local_llm_config__SWIG(inworld::LLMCreationConfig const *self){
    if (!std::holds_alternative<inworld::LocalLLMConfig>(self->config)) {
      return std::nullopt;
    }
    return std::get<inworld::LocalLLMConfig>(self->config);
  }
SWIGINTERN std::optional< inworld::RemoteLLMConfig > inworld_inworld_LLMCreationConfig_get_remote_llm_config__SWIG(inworld::LLMCreationConfig const *self){
    if (!std::holds_alternative<inworld::RemoteLLMConfig>(self->config)) {
      return std::nullopt;
    }
    return std::get<inworld::RemoteLLMConfig>(self->config);
  }
SWIGINTERN void inworld_inworld_LLMCreationConfig_set_local_llm_config__SWIG(inworld::LLMCreationConfig *self,inworld::LocalLLMConfig const &config){
    self->config = config;
  }
SWIGINTERN void inworld_inworld_LLMCreationConfig_set_remote_llm_config__SWIG(inworld::LLMCreationConfig *self,inworld::RemoteLLMConfig const &config){
    self->config = config;
  }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > inworld_inworld_LLMFactory_CreateLLM__SWIG_0(inworld::LLMFactory const *self,inworld::LocalLLMConfig const &config){
        return self->CreateLLM({config});
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > inworld_inworld_LLMFactory_CreateLLM__SWIG_1(inworld::LLMFactory const *self,inworld::RemoteLLMConfig const &config){
        return self->CreateLLM({config});
    }

#include "inworld/library/primitives/memory_interface.h"

SWIGINTERN inworld::RollingSummaryConfig &inworld_std_optional_Sl_inworld_RollingSummaryConfig_Sg__get_value__SWIG(std::optional< inworld::RollingSummaryConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_RollingSummaryConfig_Sg__set_value__SWIG(std::optional< inworld::RollingSummaryConfig > *self,inworld::RollingSummaryConfig &t){
        *self = t;
    }
SWIGINTERN inworld::FlashMemoryConfig &inworld_std_optional_Sl_inworld_FlashMemoryConfig_Sg__get_value__SWIG(std::optional< inworld::FlashMemoryConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_FlashMemoryConfig_Sg__set_value__SWIG(std::optional< inworld::FlashMemoryConfig > *self,inworld::FlashMemoryConfig &t){
        *self = t;
    }
SWIGINTERN inworld::LongTermMemoryConfig &inworld_std_optional_Sl_inworld_LongTermMemoryConfig_Sg__get_value__SWIG(std::optional< inworld::LongTermMemoryConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_LongTermMemoryConfig_Sg__set_value__SWIG(std::optional< inworld::LongTermMemoryConfig > *self,inworld::LongTermMemoryConfig &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_MemoryInterface_is_valid__SWIG(inworld::MemoryInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::vector< std::string > > inworld_inworld_MemoryInterface_GetMemory__SWIG_0(inworld::MemoryInterface const *self,std::vector< inworld::Event > const &event_history,inworld::MemorySnapshot const &memory_snapshot,inworld::RetrievalConfig const &retrieval_config,bool return_rolling_summary=false){
        return self->GetMemory({
            event_history, 
            memory_snapshot, 
            retrieval_config, 
            return_rolling_summary
        });
      }
SWIGINTERN absl::StatusOr< inworld::MemorySnapshot > inworld_inworld_MemoryInterface_UpdateMemory__SWIG(inworld::MemoryInterface const *self,std::vector< inworld::Event > const &event_history,inworld::MemorySnapshot const &memory_snapshot){
        return self->UpdateMemory({event_history, memory_snapshot});
      }

#include "inworld/library/primitives/memory_factory.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > inworld_inworld_MemoryFactory_CreateMemory__SWIG(inworld::MemoryFactory const *self,std::shared_ptr< inworld::LLMInterface > llm,std::shared_ptr< inworld::TextEmbedderInterface > embedder,inworld::RollingSummaryConfig &rolling_summary_config,inworld::FlashMemoryConfig &flash_memory_config,inworld::LongTermMemoryConfig &long_term_memory_config,inworld::RetrievalConfig &retrieval_config,bool return_rolling_summary){
        return self->CreateMemory(
            llm,
            embedder,
           {
            {rolling_summary_config, flash_memory_config, long_term_memory_config}
          });
    }

#include "inworld/library/primitives/safety_checker_interface.h"

SWIGINTERN bool inworld_inworld_SafetyCheckerInterface_is_valid__SWIG(inworld::SafetyCheckerInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< inworld::CheckSafetyResponse > inworld_inworld_SafetyCheckerInterface_CheckSafety__SWIG_0(inworld::SafetyCheckerInterface const *self,std::string const &input){
          return self->CheckSafety({input});
    }
SWIGINTERN absl::StatusOr< inworld::CheckSafetyResponse > inworld_inworld_SafetyCheckerInterface_CheckSafety__SWIG_1(inworld::SafetyCheckerInterface const *self,std::string const &input,inworld::SafetyConfig const &config_override){
          return self->CheckSafety({input}, config_override);
    }

#include "inworld/library/primitives/safety_checker_factory.h"

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > inworld_inworld_SafetyCheckerFactory_CreateSafetyChecker__SWIG(inworld::SafetyCheckerFactory const *self,std::shared_ptr< inworld::TextEmbedderInterface const > embedder,inworld::SafetyCheckerCreationConfig const &creation_config){
        return self->CreateSafetyChecker(embedder, creation_config);
    }

#include "inworld/library/core/model_interface.h"
#include "inworld/library/core/audio_chunk.h"
#include "inworld/library/speech/stt_interface.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_STTInterface_is_valid__SWIG(inworld::STTInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > inworld_inworld_STTInterface_RecognizeSpeech__SWIG(inworld::STTInterface const *self,inworld::AudioChunk &audio_chunk,inworld::SpeechRecognitionConfig const &config){
        return self->RecognizeSpeech(std::move(audio_chunk), config);
    }

#include "inworld/library/speech/stt_factory.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN inworld::LocalSTTConfig &inworld_std_optional_Sl_inworld_LocalSTTConfig_Sg__get_value__SWIG(std::optional< inworld::LocalSTTConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_LocalSTTConfig_Sg__set_value__SWIG(std::optional< inworld::LocalSTTConfig > *self,inworld::LocalSTTConfig &t){
        *self = t;
    }
SWIGINTERN inworld::RemoteSTTConfig &inworld_std_optional_Sl_inworld_RemoteSTTConfig_Sg__get_value__SWIG(std::optional< inworld::RemoteSTTConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_RemoteSTTConfig_Sg__set_value__SWIG(std::optional< inworld::RemoteSTTConfig > *self,inworld::RemoteSTTConfig &t){
        *self = t;
    }
SWIGINTERN inworld::library::Language &inworld_std_optional_Sl_inworld_library_Language_Sg__get_value__SWIG(std::optional< inworld::library::Language > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_library_Language_Sg__set_value__SWIG(std::optional< inworld::library::Language > *self,inworld::library::Language &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_STTCreationConfig_has_local_config__SWIG(inworld::STTCreationConfig *self){
        return std::holds_alternative<inworld::LocalSTTConfig>(self->config);
    }
SWIGINTERN bool inworld_inworld_STTCreationConfig_has_remote_config__SWIG(inworld::STTCreationConfig *self){
        return std::holds_alternative<inworld::RemoteSTTConfig>(self->config);
    }
SWIGINTERN std::optional< inworld::LocalSTTConfig > inworld_inworld_STTCreationConfig_get_local_config__SWIG(inworld::STTCreationConfig *self){
        if (!std::holds_alternative<inworld::LocalSTTConfig>(self->config)) {
            return std::nullopt;
        }   
        return std::get<inworld::LocalSTTConfig>(self->config);
    }
SWIGINTERN std::optional< inworld::RemoteSTTConfig > inworld_inworld_STTCreationConfig_get_remote_config__SWIG(inworld::STTCreationConfig *self){
        if (!std::holds_alternative<inworld::RemoteSTTConfig>(self->config)) {
            return std::nullopt;
        }
        return std::get<inworld::RemoteSTTConfig>(self->config);
    }
SWIGINTERN void inworld_inworld_STTCreationConfig_set_local_config__SWIG(inworld::STTCreationConfig *self,inworld::LocalSTTConfig const &config){
        self->config = config;
    }
SWIGINTERN void inworld_inworld_STTCreationConfig_set_remote_config__SWIG(inworld::STTCreationConfig *self,inworld::RemoteSTTConfig const &config){
        self->config = config;
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > inworld_inworld_STTFactory_CreateSTT__SWIG_0(inworld::STTFactory const *self,inworld::LocalSTTConfig const &config){
        return self->CreateSTT({config});
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > inworld_inworld_STTFactory_CreateSTT__SWIG_1(inworld::STTFactory const *self,inworld::RemoteSTTConfig const &config){
        return self->CreateSTT({config});
    }

#include "inworld/library/speech/tts_factory.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN inworld::RemoteTTSConfig &inworld_std_optional_Sl_inworld_RemoteTTSConfig_Sg__get_value__SWIG(std::optional< inworld::RemoteTTSConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_RemoteTTSConfig_Sg__set_value__SWIG(std::optional< inworld::RemoteTTSConfig > *self,inworld::RemoteTTSConfig &t){
        *self = t;
    }
SWIGINTERN inworld::SpeechSynthesisConfig &inworld_std_optional_Sl_inworld_SpeechSynthesisConfig_Sg__get_value__SWIG(std::optional< inworld::SpeechSynthesisConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_SpeechSynthesisConfig_Sg__set_value__SWIG(std::optional< inworld::SpeechSynthesisConfig > *self,inworld::SpeechSynthesisConfig &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_TTSCreationConfig_has_remote_config__SWIG(inworld::TTSCreationConfig *self){
        return std::holds_alternative<inworld::RemoteTTSConfig>(self->config);
    }
SWIGINTERN std::optional< inworld::RemoteTTSConfig > inworld_inworld_TTSCreationConfig_get_remote_config__SWIG(inworld::TTSCreationConfig *self){
        if (!std::holds_alternative<inworld::RemoteTTSConfig>(self->config)) {
            return std::nullopt;
        }
        return std::get<inworld::RemoteTTSConfig>(self->config);
    }
SWIGINTERN void inworld_inworld_TTSCreationConfig_set_remote_config__SWIG(inworld::TTSCreationConfig *self,inworld::RemoteTTSConfig const &config){
        self->config = config;
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > inworld_inworld_TTSFactory_CreateTTS__SWIG(inworld::TTSFactory const *self,inworld::RemoteTTSConfig const &config){
        return self->CreateTTS({config});
    }

#include "inworld/library/core/model_interface.h"
#include "inworld/library/speech/vad_interface.h"
#include "absl/status/statusor.h"


#include <utility>


#include "inworld/library/core/audio_chunk.h"

SWIGINTERN std::vector< std::pair< int,int > >::const_reference inworld_std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__get__SWIG(std::vector< std::pair< int,int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__set__SWIG(std::vector< std::pair< int,int > > *self,int i,std::vector< std::pair< int,int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool inworld_inworld_VADInterface_is_valid__SWIG(inworld::VADInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< int > inworld_inworld_VADInterface_DetectVoiceActivity__SWIG(inworld::VADInterface *self,inworld::AudioChunk &audio_chunk,inworld::VoiceActivityDetectionConfig const &config){
        return self->DetectVoiceActivity(std::move(audio_chunk), config);
    }
SWIGINTERN absl::StatusOr< std::vector< std::pair< int,int > > > inworld_inworld_VADInterface_DetectSilence__SWIG(inworld::VADInterface *self,std::vector< float > const &audio_data,int sample_rate,inworld::VoiceActivityDetectionConfig const &config){
        return self->DetectSilence(audio_data.begin(), audio_data.end(), sample_rate, config);
    }

#include "inworld/library/speech/vad_factory.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::VADInterface > > inworld_inworld_VADFactory_CreateVAD__SWIG(inworld::VADFactory const *self,inworld::LocalVADConfig const &config){
        return self->CreateVAD({config});
    }

#include "inworld/graphs/configuration/config_parser.h"

SWIGINTERN absl::StatusOr< inworld::graphs::ConfigParser * > inworld_inworld_graphs_ConfigParser_CreateConfigParser__SWIG(){
    try {
      auto status_or_parser = inworld::graphs::ConfigParser::Create();
      if (!status_or_parser.ok()) {
        return status_or_parser.status();
      }
      return status_or_parser.value().release();
    } catch (const std::exception& e) {
      return absl::InternalError(std::string("Unexpected error: ") + e.what());
    }
  }
SWIGINTERN absl::StatusOr< inworld::graphs::ConfigParser * > inworld_inworld_graphs_ConfigParser_CreateConfigParserWithDefaults__SWIG(absl::flat_hash_map< std::string,std::string > const &default_substitutions){
    try {
      auto status_or_parser = inworld::graphs::ConfigParser::Create(default_substitutions);
      if (!status_or_parser.ok()) {
        return status_or_parser.status();
      }
      return status_or_parser.value().release();
    } catch (const std::exception& e) {
      return absl::InternalError(std::string("Unexpected error: ") + e.what());
    }
  }
SWIGINTERN absl::StatusOr< inworld::graphs::CompiledGraphInterface * > inworld_inworld_graphs_ConfigParser_ParseGraphFromJsonString__SWIG(inworld::graphs::ConfigParser *self,char const *config_string){
    try {
      nlohmann::json parsed_json = nlohmann::json::parse(config_string);
      auto status_or = self->ParseGraphFromJson(parsed_json);
      if (!status_or.ok()) {
        return status_or.status();
      }
      return status_or.value().release(); 
    } catch (const nlohmann::json::parse_error& e) {
      return absl::InvalidArgumentError(std::string("JSON parsing error: ") + e.what());
    } catch (const std::exception& e) {
      return absl::InternalError(std::string("Unexpected error: ") + e.what());
    }
  }
SWIGINTERN absl::StatusOr< inworld::graphs::CompiledGraphInterface * > inworld_inworld_graphs_ConfigParser_ParseGraphFromJsonStringWithSubstitutions__SWIG(inworld::graphs::ConfigParser *self,char const *config_string,absl::flat_hash_map< std::string,std::string > const &substitutions){
    try {
      nlohmann::json parsed_json = nlohmann::json::parse(config_string);
      auto status_or = self->ParseGraphFromJson(parsed_json, substitutions);
      if (!status_or.ok()) {
        return status_or.status();
      }
      return status_or.value().release();
    } catch (const nlohmann::json::parse_error& e) {
      return absl::InvalidArgumentError(std::string("JSON parsing error: ") + e.what());
    } catch (const std::exception& e) {
      return absl::InternalError(std::string("Unexpected error: ") + e.what());
    }
  }

#include "inworld/graphs/compiled_graph_interface.h"


#include "inworld/graphs/schema/graph_schema.h"


#include "absl/container/flat_hash_map.h"
#include "absl/container/flat_hash_set.h"
#include "absl/container/btree_map.h"


#include <set>
#include <stdexcept>

SWIGINTERN bool inworld_absl_flat_hash_set_Sl_std_string_Sg____contains____SWIG(absl::flat_hash_set< std::string > *self,std::string const &key){
                return self->contains(key);
            }
SWIGINTERN void inworld_absl_flat_hash_set_Sl_std_string_Sg__add__SWIG(absl::flat_hash_set< std::string > *self,std::string const &key){
                self->insert(key);
            }
SWIGINTERN absl::flat_hash_set< std::string > &inworld_absl_flat_hash_map_Sl_std_string_Sc_absl_flat_hash_set_Sl_std_string_Sg__Sg____getitem____SWIG(absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *self,std::string const &key){
                return (*self)[key];
            }
SWIGINTERN void inworld_absl_flat_hash_map_Sl_std_string_Sc_absl_flat_hash_set_Sl_std_string_Sg__Sg____setitem____SWIG(absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *self,std::string const &key,absl::flat_hash_set< std::string > const &value){
                (*self)[key] = value;
            }
SWIGINTERN bool inworld_absl_flat_hash_map_Sl_std_string_Sc_absl_flat_hash_set_Sl_std_string_Sg__Sg____contains____SWIG(absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *self,std::string const &key){
                return self->contains(key);
            }
SWIGINTERN std::shared_ptr< inworld::graphs::Node > &inworld_absl_flat_hash_map_Sl_std_string_Sc_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg____getitem____SWIG(absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *self,std::string const &key){
                return (*self)[key];
            }
SWIGINTERN void inworld_absl_flat_hash_map_Sl_std_string_Sc_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg____setitem____SWIG(absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *self,std::string const &key,std::shared_ptr< inworld::graphs::Node > const &value){
                (*self)[key] = value;
            }
SWIGINTERN bool inworld_absl_flat_hash_map_Sl_std_string_Sc_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg____contains____SWIG(absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *self,std::string const &key){
                return self->contains(key);
            }
SWIGINTERN inworld::graphs::Loop &inworld_absl_flat_hash_map_Sl_std_string_Sc_inworld_graphs_Loop_Sg____getitem____SWIG(absl::flat_hash_map< std::string,inworld::graphs::Loop > *self,std::string const &key){
                return (*self)[key];
            }
SWIGINTERN void inworld_absl_flat_hash_map_Sl_std_string_Sc_inworld_graphs_Loop_Sg____setitem____SWIG(absl::flat_hash_map< std::string,inworld::graphs::Loop > *self,std::string const &key,inworld::graphs::Loop const &value){
                (*self)[key] = value;
            }
SWIGINTERN bool inworld_absl_flat_hash_map_Sl_std_string_Sc_inworld_graphs_Loop_Sg____contains____SWIG(absl::flat_hash_map< std::string,inworld::graphs::Loop > *self,std::string const &key){
                return self->contains(key);
            }

#include "bindings/clib/ffi/graphs/edge_condition_executor.h"
#include "bindings/clib/ffi/graphs/edge_condition_threaded_executor.h"
#include "inworld/library/core/registry/component_registry.h"


#include "inworld/graphs/construction/graph.h"
#include "absl/synchronization/mutex.h"
#include "absl/strings/str_cat.h"
#include "absl/container/flat_hash_map.h"

#include "bindings/clib/ffi/graphs/edge_condition_executor.h"
#include "bindings/clib/ffi/graphs/edge_condition_threaded_executor.h"
#include "bindings/clib/ffi/graphs/edge_wrapper.h"

SWIGINTERN absl::StatusOr< inworld::graphs::CompiledGraphInterface * > inworld_inworld_graphs_Graph_CompileAndReturnRaw__SWIG(inworld::graphs::Graph *self){
        LOG(INFO) << "Compiling graphs";
        auto status_or = self->Compile();
        LOG(INFO) << "Graph compiled";
        if (!status_or.ok()) {
            return status_or.status();
        }
        // Transfer ownership to caller
        return status_or.value().release();
    }
SWIGINTERN inworld::swig_helpers::EdgeWrapper inworld_inworld_graphs_Graph_CreateEdge__SWIG(inworld::graphs::Graph *self,std::shared_ptr< inworld::graphs::Node > from_node,std::shared_ptr< inworld::graphs::Node > to_node){
        auto edge_builder = new inworld::graphs::Graph::EdgeBuilder(self->AddEdge(from_node, to_node));
        auto result = inworld::swig_helpers::EdgeWrapper(edge_builder);
        return result;
    }
SWIGINTERN absl::StatusOr< inworld::CreationContext > inworld_inworld_graphs_Graph_GetCreationContextHelper__SWIG(inworld::graphs::Graph *self){
        return self->GetCreationContext();
    }
SWIGINTERN absl::Status inworld_inworld_graphs_Graph_AddComponent_LLMInterface__SWIG(inworld::graphs::Graph *self,std::string const &id,std::shared_ptr< inworld::LLMInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_Graph_AddComponent_STTInterface__SWIG(inworld::graphs::Graph *self,std::string const &id,std::shared_ptr< inworld::STTInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_Graph_AddComponent_TTSInterface__SWIG(inworld::graphs::Graph *self,std::string const &id,std::shared_ptr< inworld::TTSInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_Graph_AddComponent_TextEmbedderInterface__SWIG(inworld::graphs::Graph *self,std::string const &id,std::shared_ptr< inworld::TextEmbedderInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_Graph_AddComponent_KnowledgeInterface__SWIG(inworld::graphs::Graph *self,std::string const &id,std::shared_ptr< inworld::KnowledgeInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_Graph_AddComponent_MCPClientInterface__SWIG(inworld::graphs::Graph *self,std::string const &id,std::shared_ptr< inworld::graphs::MCPClientInterface const > component){
        return self->AddComponent(id, std::any(component));
    }

#include "inworld/graphs/construction/linear_graph.h"


#include "inworld/graphs/builtin/clients/mcp_client_interface.h"

SWIGINTERN bool inworld_inworld_graphs_MCPClientInterface_is_valid__SWIG(inworld::graphs::MCPClientInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::string > inworld_inworld_graphs_MCPClientInterface_Call__SWIG(inworld::graphs::MCPClientInterface const *self,inworld::ToolCall const &tool_call){
        auto status_or_json = self->Call(tool_call);
        if(status_or_json.ok()) {
            return status_or_json.value().dump();
        } else {
            return status_or_json.status();
        }
    }
SWIGINTERN std::vector< std::shared_ptr< inworld::graphs::Node > >::const_reference inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg__get__SWIG(std::vector< std::shared_ptr< inworld::graphs::Node > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg__set__SWIG(std::vector< std::shared_ptr< inworld::graphs::Node > > *self,int i,std::vector< std::shared_ptr< inworld::graphs::Node > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN absl::StatusOr< inworld::CreationContext > inworld_inworld_graphs_LinearGraph_GetCreationContextHelper__SWIG(inworld::graphs::LinearGraph const *self){
        return self->GetCreationContext();
    }
SWIGINTERN absl::Status inworld_inworld_graphs_LinearGraph_AddComponent_LLMInterface__SWIG(inworld::graphs::LinearGraph *self,std::string const &id,std::shared_ptr< inworld::LLMInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_LinearGraph_AddComponent_STTInterface__SWIG(inworld::graphs::LinearGraph *self,std::string const &id,std::shared_ptr< inworld::STTInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_LinearGraph_AddComponent_TTSInterface__SWIG(inworld::graphs::LinearGraph *self,std::string const &id,std::shared_ptr< inworld::TTSInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_LinearGraph_AddComponent_TextEmbedderInterface__SWIG(inworld::graphs::LinearGraph *self,std::string const &id,std::shared_ptr< inworld::TextEmbedderInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_LinearGraph_AddComponent_KnowledgeInterface__SWIG(inworld::graphs::LinearGraph *self,std::string const &id,std::shared_ptr< inworld::KnowledgeInterface > component){
        return self->AddComponent(id, std::any(component));
    }
SWIGINTERN absl::Status inworld_inworld_graphs_LinearGraph_AddComponent_MCPClientInterface__SWIG(inworld::graphs::LinearGraph *self,std::string const &id,std::shared_ptr< inworld::graphs::MCPClientInterface > component){
        return self->AddComponent(id, std::any(component));
    }

#include "inworld/library/core/registry/component_registry.h"
#include "inworld/graphs/nodes/node.h"

#include "bindings/clib/ffi/graphs/nodes/custom_node_threaded_create_executor.h"


#include "inworld/graphs/schema/data_stream.h"
#include "inworld/graphs/schema/basic_data_schema.h"

SWIGINTERN bool inworld_inworld_graphs_DataStream_Sl_inworld_graphs_TTSOutput_Sg__is_valid__SWIG(inworld::graphs::DataStream< inworld::graphs::TTSOutput > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_DataStream_Sl_std_string_Sg__is_valid__SWIG(inworld::graphs::DataStream< std::string > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_DataStream_Sl_inworld_Content_Sg__is_valid__SWIG(inworld::graphs::DataStream< inworld::Content > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_DataStream_Sl_inworld_SpeechChunk_Sg__is_valid__SWIG(inworld::graphs::DataStream< inworld::SpeechChunk > const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_DataStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__is_valid__SWIG(inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const *self){
          return self != nullptr;
      }

#include "include/inworld/graphs/builtin/schema/event_history.h"
#include "inworld/library/core/event.h"

SWIGINTERN bool inworld_inworld_graphs_EventHistory_is_valid__SWIG(inworld::graphs::EventHistory const *self){
          return self != nullptr;
      }

#include "inworld/graphs/execution/executor_interface.h"
#include "inworld/library/core/stream_interface.h"
#include "inworld/graphs/schema/data_schema.h"
#include <map>
#include <mutex>
#include <optional>

SWIGINTERN std::string &inworld_absl_flat_hash_map_Sl_std_string_Sc_std_string_Sg____getitem____SWIG(absl::flat_hash_map< std::string,std::string > *self,std::string const &key){
                return (*self)[key];
            }
SWIGINTERN void inworld_absl_flat_hash_map_Sl_std_string_Sc_std_string_Sg____setitem____SWIG(absl::flat_hash_map< std::string,std::string > *self,std::string const &key,std::string const &value){
                (*self)[key] = value;
            }
SWIGINTERN bool inworld_absl_flat_hash_map_Sl_std_string_Sc_std_string_Sg____contains____SWIG(absl::flat_hash_map< std::string,std::string > *self,std::string const &key){
                return self->contains(key);
            }
SWIGINTERN std::string &inworld_absl_btree_map_Sl_std_string_Sc_std_string_Sg____getitem____SWIG(absl::btree_map< std::string,std::string > *self,std::string const &key){
                return (*self)[key];
            }
SWIGINTERN void inworld_absl_btree_map_Sl_std_string_Sc_std_string_Sg____setitem____SWIG(absl::btree_map< std::string,std::string > *self,std::string const &key,std::string const &value){
                (*self)[key] = value;
            }
SWIGINTERN bool inworld_absl_btree_map_Sl_std_string_Sc_std_string_Sg____contains____SWIG(absl::btree_map< std::string,std::string > *self,std::string const &key){
                return self->contains(key);
            }

namespace {
  // Thread-safe storage for execution data using the existing ExecutionResult struct
  std::map<int, inworld::graphs::ExecutionResult> g_executions;
  int g_next_handle_id = 1;
  std::mutex g_mutex;

  // Helper to encapsulate common execution logic
  int CommonExecute(inworld::graphs::ExecutorInterface* self,
                    std::shared_ptr<inworld::graphs::BaseData> data,
                    const std::string& execution_id,
                    const std::optional<inworld::graphs::UserContext>& user_context = std::nullopt) {
    std::lock_guard<std::mutex> lock(g_mutex);
    inworld::graphs::ExecutionResult execution_result;

    if (user_context.has_value()) {
      execution_result = self->Execute(std::move(data), execution_id, user_context.value());
    } else {
      execution_result = self->Execute(std::move(data), execution_id);
    }

    int handle = g_next_handle_id++;
    g_executions.emplace(handle, std::move(execution_result));
    return handle;
  }
}

SWIGINTERN int inworld_inworld_graphs_ExecutorInterface_ExecuteSimplified__SWIG(inworld::graphs::ExecutorInterface *self,std::shared_ptr< inworld::graphs::BaseData > data,std::string const &execution_id){
    return CommonExecute(self, data, execution_id);
  }
SWIGINTERN int inworld_inworld_graphs_ExecutorInterface_ExecuteSimplifiedWithUserContext__SWIG(inworld::graphs::ExecutorInterface *self,std::shared_ptr< inworld::graphs::BaseData > data,std::string const &execution_id,inworld::graphs::UserContext const &user_context){
    return CommonExecute(self, data, execution_id, user_context);
  }
SWIGINTERN std::shared_ptr< inworld::graphs::BaseData > inworld_inworld_graphs_ExecutorInterface_GetNextResult__SWIG(inworld::graphs::ExecutorInterface *self,int execution_handle){
    std::lock_guard<std::mutex> lock(g_mutex);
    auto it = g_executions.find(execution_handle);

    if (it == g_executions.end()) {
      


      SWIG_exception(SWIG_RuntimeError, "Execution handle not found");
      
      return nullptr;
    }
    
    if (!it->second.result_stream->HasNext()) {
      


      SWIG_exception(SWIG_RuntimeError, "No more results");
      
      return nullptr;
    }
    
    auto result_or = it->second.result_stream->Read();
    if (result_or.ok()) {
      auto result = result_or.value();
      if (auto error = std::dynamic_pointer_cast<inworld::graphs::Error>(result)) {
        LOG(ERROR) << "Error: " << error->status().message();
      } else {
        LOG_DEBUG << "Result: " << result->ToString();
      }
      return result;
    }



    SWIG_exception(SWIG_RuntimeError, "Error reading result");

    return nullptr;
  }
SWIGINTERN bool inworld_inworld_graphs_ExecutorInterface_HasMoreResults__SWIG(inworld::graphs::ExecutorInterface *self,int execution_handle){
    std::lock_guard<std::mutex> lock(g_mutex);
    auto it = g_executions.find(execution_handle);
    if (it == g_executions.end()) {
      LOG(ERROR) << "Execution handle not found " << execution_handle;
      return false;
    }
    return it->second.result_stream->HasNext();
  }
SWIGINTERN std::string inworld_inworld_graphs_ExecutorInterface_GetExecutionVariant__SWIG(inworld::graphs::ExecutorInterface *self,int execution_handle){
    std::lock_guard<std::mutex> lock(g_mutex);
    auto it = g_executions.find(execution_handle);
    if (it == g_executions.end()) {
      LOG(ERROR) << "Execution handle not found " << execution_handle;
      return "";
    }
    return it->second.variant;
  }
SWIGINTERN void inworld_inworld_graphs_ExecutorInterface_CloseExecution__SWIG(inworld::graphs::ExecutorInterface *self,int execution_handle){
    std::lock_guard<std::mutex> lock(g_mutex);
    LOG_DEBUG << "Closing execution " << execution_handle;
    auto it = g_executions.find(execution_handle);
    if (it != g_executions.end()) {
      g_executions.erase(it);
    }
  }
SWIGINTERN void inworld_inworld_graphs_ExecutorInterface_CleanupAllExecutions__SWIG(inworld::graphs::ExecutorInterface *self){
    std::lock_guard<std::mutex> lock(g_mutex);
    g_executions.clear();
  }

// In the C part, we include the real header
#include "inworld/graphs/execution/graph_executor_factory.h"


namespace inworld {
namespace graphs {
namespace swig_helpers {

class GraphExecutorFactoryHelper {
public:
  // Takes raw pointers and returns raw pointers to avoid SWIG issues with unique_ptr
  static inworld::graphs::ExecutorInterface* Create(
      inworld::graphs::CompiledGraphInterface* graphs) {
    if (!graphs) return nullptr;
    // Create unique_ptr only inside the function body
    std::unique_ptr<const inworld::graphs::CompiledGraphInterface> owned_graph(graphs);
    std::unique_ptr<inworld::graphs::ExecutorInterface> executor =
        inworld::graphs::GraphExecutorFactory::Create(std::move(owned_graph));
    return executor.release();
  }

  static inworld::graphs::ExecutorInterface* Create(
      inworld::graphs::CompiledGraphInterface* graphs,
      const inworld::graphs::GraphExecutorConfig& config) {
    if (!graphs) return nullptr;
    std::unique_ptr<const inworld::graphs::CompiledGraphInterface> owned_graph(graphs);
    std::unique_ptr<inworld::graphs::ExecutorInterface> executor =
        inworld::graphs::GraphExecutorFactory::Create(std::move(owned_graph), config);
    return executor.release();
  }
};

} // namespace swig_helpers
} // namespace graphs
} // namespace inworld


#include "inworld/graphs/builtin/clients/mcp_factory_configs.h"
#include "inworld/graphs/builtin/clients/mcp_client_factory.h"


#include "inworld/graphs/builtin/clients/mcp_factory_configs.h"

SWIGINTERN void inworld_inworld_graphs_MCPStdioAuthConfig_set__SWIG(inworld::graphs::MCPStdioAuthConfig *self,std::string const &key,std::string const &value){
        self->env[key] = value;
    }
SWIGINTERN void inworld_inworld_graphs_MCPAuthConfig_set_http_auth_config__SWIG(inworld::graphs::MCPAuthConfig *self,inworld::graphs::MCPHttpAuthConfig const &config){
        self->config = config;
    }
SWIGINTERN void inworld_inworld_graphs_MCPAuthConfig_set_stdio_auth_config__SWIG(inworld::graphs::MCPAuthConfig *self,inworld::graphs::MCPStdioAuthConfig const &config){
        self->config = config;
    }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > inworld_inworld_graphs_MCPClientFactory_CreateMCPClient__SWIG(inworld::graphs::MCPClientFactory *self,inworld::graphs::MCPClientCreationConfig const &config){
        return self->CreateMCPClient(config);
    }

#include "inworld/graphs/builtin/clients/mcp_session_factory.h"


#include "inworld/graphs/builtin/clients/mcp_session_interface.h"

SWIGINTERN bool inworld_inworld_graphs_MCPSessionInterface_is_valid__SWIG(inworld::graphs::MCPSessionInterface const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > inworld_inworld_graphs_MCPSessionFactory_CreateMCPSession__SWIG(inworld::graphs::MCPSessionFactory *self,inworld::graphs::MCPSessionCreationConfig const &config){
        return self->CreateMCPSession(config);
      }

#include "inworld/graphs/builtin/nodes/mcp_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_MCPListToolsNodeExecutionConfig_is_valid__SWIG(inworld::graphs::MCPListToolsNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_MCPListToolsNode_is_valid__SWIG(inworld::graphs::MCPListToolsNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > inworld_inworld_graphs_MCPListToolsNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > const &execution_config){
    return inworld::graphs::MCPListToolsNode::Create(id, execution_config ? *execution_config : inworld::graphs::MCPListToolsNodeExecutionConfig());
  }
SWIGINTERN bool inworld_inworld_graphs_MCPCallToolNodeExecutionConfig_is_valid__SWIG(inworld::graphs::MCPCallToolNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_MCPCallToolNode_is_valid__SWIG(inworld::graphs::MCPCallToolNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > inworld_inworld_graphs_MCPCallToolNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > const &execution_config){
    return inworld::graphs::MCPCallToolNode::Create(id, execution_config ? *execution_config : inworld::graphs::MCPCallToolNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/llm_chat_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN inworld::LLMCreationConfig &inworld_std_optional_Sl_inworld_LLMCreationConfig_Sg__get_value__SWIG(std::optional< inworld::LLMCreationConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_LLMCreationConfig_Sg__set_value__SWIG(std::optional< inworld::LLMCreationConfig > *self,inworld::LLMCreationConfig &t){
        *self = t;
    }
SWIGINTERN std::vector< inworld::LLMRoutingConfig > &inworld_std_optional_Sl_std_vector_Sl_inworld_LLMRoutingConfig_Sg__Sg__get_value__SWIG(std::optional< std::vector< inworld::LLMRoutingConfig > > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_std_vector_Sl_inworld_LLMRoutingConfig_Sg__Sg__set_value__SWIG(std::optional< std::vector< inworld::LLMRoutingConfig > > *self,std::vector< inworld::LLMRoutingConfig > &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_graphs_LLMChatNodeExecutionConfig_is_valid__SWIG(inworld::graphs::LLMChatNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_LLMChatNode_is_valid__SWIG(inworld::graphs::LLMChatNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > inworld_inworld_graphs_LLMChatNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > const &execution_config){
    return inworld::graphs::LLMChatNode::Create(id, execution_config ? *execution_config : inworld::graphs::LLMChatNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/llm_completion_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_LLMCompletionNodeExecutionConfig_is_valid__SWIG(inworld::graphs::LLMCompletionNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_LLMCompletionNode_is_valid__SWIG(inworld::graphs::LLMCompletionNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > inworld_inworld_graphs_LLMCompletionNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > const &execution_config){
    return inworld::graphs::LLMCompletionNode::Create(id, execution_config ? *execution_config : inworld::graphs::LLMCompletionNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/goal_advancement_node.h"
#include "absl/status/statusor.h"
#include <memory>
#include <variant>


#include "inworld/graphs/builtin/schema/goals.h"

SWIGINTERN inworld::graphs::Condition &inworld_std_optional_Sl_inworld_graphs_Condition_Sg__get_value__SWIG(std::optional< inworld::graphs::Condition > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_graphs_Condition_Sg__set_value__SWIG(std::optional< inworld::graphs::Condition > *self,inworld::graphs::Condition &t){
        *self = t;
    }
SWIGINTERN std::vector< inworld::graphs::Goal >::const_reference inworld_std_vector_Sl_inworld_graphs_Goal_Sg__get__SWIG(std::vector< inworld::graphs::Goal > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_graphs_Goal_Sg__set__SWIG(std::vector< inworld::graphs::Goal > *self,int i,std::vector< inworld::graphs::Goal >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN inworld::TextGenerationConfig &inworld_std_optional_Sl_inworld_TextGenerationConfig_Sg__get_value__SWIG(std::optional< inworld::TextGenerationConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_TextGenerationConfig_Sg__set_value__SWIG(std::optional< inworld::TextGenerationConfig > *self,inworld::TextGenerationConfig &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_graphs_GoalAdvancementNodeExecutionConfig_is_valid__SWIG(inworld::graphs::GoalAdvancementNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_GoalAdvancementNode_is_valid__SWIG(inworld::graphs::GoalAdvancementNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > inworld_inworld_graphs_GoalAdvancementNode_Create__SWIG(std::string const &id,inworld::graphs::GoalAdvancementNodeCreationConfig const &creation_config,std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > const &execution_config){
    return inworld::graphs::GoalAdvancementNode::Create(id, creation_config, execution_config ? *execution_config : inworld::graphs::GoalAdvancementNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/intent_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN inworld::TextEmbedderCreationConfig &inworld_std_optional_Sl_inworld_TextEmbedderCreationConfig_Sg__get_value__SWIG(std::optional< inworld::TextEmbedderCreationConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_TextEmbedderCreationConfig_Sg__set_value__SWIG(std::optional< inworld::TextEmbedderCreationConfig > *self,inworld::TextEmbedderCreationConfig &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_graphs_IntentNodeExecutionConfig_is_valid__SWIG(inworld::graphs::IntentNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_IntentNode_is_valid__SWIG(inworld::graphs::IntentNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > inworld_inworld_graphs_IntentNode_Create__SWIG(std::string const &id,inworld::CreationContext const &creation_context,inworld::graphs::IntentNodeCreationConfig const &creation_config,std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > const &execution_config){
    return inworld::graphs::IntentNode::Create(id, creation_context, creation_config, execution_config ? *execution_config : inworld::graphs::IntentNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/knowledge_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_KnowledgeNodeExecutionConfig_is_valid__SWIG(inworld::graphs::KnowledgeNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_KnowledgeNode_is_valid__SWIG(inworld::graphs::KnowledgeNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > inworld_inworld_graphs_KnowledgeNode_Create__SWIG(std::string const &id,inworld::CreationContext const &creation_context,inworld::graphs::KnowledgeNodeCreationConfig const &creation_config,std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > const &execution_config){
    return inworld::graphs::KnowledgeNode::Create(id, creation_context, creation_config, execution_config ? *execution_config : inworld::graphs::KnowledgeNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/memory_node.h"
#include "absl/status/statusor.h"
#include <memory>


namespace inworld {
struct MemoryUpdateConfig;
struct RetrievalConfig;

namespace graphs {
class Node;
class BaseData;
class Text;
class Audio;
class MemoryState;
class EventHistory;
class KnowledgeRecords;

struct MemoryUpdateNodeCreationConfig;
struct MemoryRetrieveNodeCreationConfig;
struct NodeExecutionConfig;
struct MemoryRetrieveNodeExecutionConfig;

template <typename OutputT, typename... InputTs>
class TypedNode;

class MemoryUpdateNode;
class MemoryRetrieveNode;
}  // namespace graphs
}  // namespace inworld

SWIGINTERN bool inworld_inworld_graphs_MemoryRetrieveNodeExecutionConfig_is_valid__SWIG(inworld::graphs::MemoryRetrieveNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_MemoryUpdateNode_is_valid__SWIG(inworld::graphs::MemoryUpdateNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > inworld_inworld_graphs_MemoryUpdateNode_Create__SWIG_0(std::string const &id,inworld::CreationContext const &creation_context,inworld::graphs::MemoryUpdateNodeCreationConfig const &creation_config){
    return inworld::graphs::MemoryUpdateNode::Create(id, creation_context, creation_config);
  }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > inworld_inworld_graphs_MemoryUpdateNode_Create__SWIG_1(std::string const &id,inworld::CreationContext const &creation_context,inworld::graphs::MemoryUpdateNodeCreationConfig const &creation_config,std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &execution_config){
    return inworld::graphs::MemoryUpdateNode::Create(id, creation_context, creation_config, execution_config ? std::make_optional<inworld::graphs::NodeExecutionConfig>(*execution_config) : std::nullopt);
  }
SWIGINTERN bool inworld_inworld_graphs_MemoryRetrieveNode_is_valid__SWIG(inworld::graphs::MemoryRetrieveNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > inworld_inworld_graphs_MemoryRetrieveNode_Create__SWIG(std::string const &id,inworld::CreationContext const &creation_context,inworld::graphs::MemoryRetrieveNodeCreationConfig const &creation_config,std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > const &execution_config){
    return inworld::graphs::MemoryRetrieveNode::Create(id, creation_context, creation_config, execution_config ? *execution_config : inworld::graphs::MemoryRetrieveNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/random_canned_text_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_RandomCannedTextNodeExecutionConfig_is_valid__SWIG(inworld::graphs::RandomCannedTextNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_RandomCannedTextNode_is_valid__SWIG(inworld::graphs::RandomCannedTextNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > inworld_inworld_graphs_RandomCannedTextNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > const &execution_config){
    return inworld::graphs::RandomCannedTextNode::Create(id, execution_config ? *execution_config : inworld::graphs::RandomCannedTextNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/safety_checker_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN inworld::SafetyConfig &inworld_std_optional_Sl_inworld_SafetyConfig_Sg__get_value__SWIG(std::optional< inworld::SafetyConfig > *self){
        return self->value();
    }
SWIGINTERN void inworld_std_optional_Sl_inworld_SafetyConfig_Sg__set_value__SWIG(std::optional< inworld::SafetyConfig > *self,inworld::SafetyConfig &t){
        *self = t;
    }
SWIGINTERN bool inworld_inworld_graphs_SafetyCheckerNodeExecutionConfig_is_valid__SWIG(inworld::graphs::SafetyCheckerNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_SafetyCheckerNode_is_valid__SWIG(inworld::graphs::SafetyCheckerNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > inworld_inworld_graphs_SafetyCheckerNode_Create__SWIG(std::string const &id,inworld::CreationContext const &creation_context,inworld::graphs::SafetyCheckerNodeCreationConfig const &creation_config,std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > const &execution_config){
    return inworld::graphs::SafetyCheckerNode::Create(id, creation_context, creation_config, execution_config ? *execution_config : inworld::graphs::SafetyCheckerNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/keyword_matcher_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_KeywordMatcherNode_is_valid__SWIG(inworld::graphs::KeywordMatcherNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > inworld_inworld_graphs_KeywordMatcherNode_Create__SWIG_0(std::string const &id,inworld::graphs::KeywordMatcherNodeCreationConfig const &creation_config){
    return inworld::graphs::KeywordMatcherNode::Create(id, creation_config);
  }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > inworld_inworld_graphs_KeywordMatcherNode_Create__SWIG_1(std::string const &id,inworld::graphs::KeywordMatcherNodeCreationConfig const &creation_config,std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &execution_config){
    return inworld::graphs::KeywordMatcherNode::Create(id, creation_config, execution_config ? std::make_optional<inworld::graphs::NodeExecutionConfig>(*execution_config) : std::nullopt);
  }

#include "inworld/graphs/builtin/nodes/stt_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_STTNodeExecutionConfig_is_valid__SWIG(inworld::graphs::STTNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_STTNode_is_valid__SWIG(inworld::graphs::STTNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > inworld_inworld_graphs_STTNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > const &execution_config){
    return inworld::graphs::STTNode::Create(id, execution_config ? *execution_config : inworld::graphs::STTNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/text_aggregator_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_TextAggregatorNode_is_valid__SWIG(inworld::graphs::TextAggregatorNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > inworld_inworld_graphs_TextAggregatorNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &execution_config){
    return inworld::graphs::TextAggregatorNode::Create(id, execution_config ? std::make_optional<inworld::graphs::NodeExecutionConfig>(*execution_config) : std::nullopt);
  }

#include "inworld/graphs/builtin/nodes/text_chunking_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_TextChunkingNode_is_valid__SWIG(inworld::graphs::TextChunkingNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > inworld_inworld_graphs_TextChunkingNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &execution_config){
    return inworld::graphs::TextChunkingNode::Create(id, execution_config ? std::make_optional<inworld::graphs::NodeExecutionConfig>(*execution_config) : std::nullopt);
  }

#include "inworld/graphs/builtin/nodes/tts_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_TTSNodeExecutionConfig_is_valid__SWIG(inworld::graphs::TTSNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_TTSNode_is_valid__SWIG(inworld::graphs::TTSNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > inworld_inworld_graphs_TTSNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > const &execution_config){
    return inworld::graphs::TTSNode::Create(id, execution_config ? *execution_config : inworld::graphs::TTSNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/nodes/llm_chat_request_builder_node.h"
#include "absl/status/statusor.h"
#include <memory>
#include <variant>

SWIGINTERN std::vector< inworld::graphs::ChatMessage >::const_reference inworld_std_vector_Sl_inworld_graphs_ChatMessage_Sg__get__SWIG(std::vector< inworld::graphs::ChatMessage > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void inworld_std_vector_Sl_inworld_graphs_ChatMessage_Sg__set__SWIG(std::vector< inworld::graphs::ChatMessage > *self,int i,std::vector< inworld::graphs::ChatMessage >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool inworld_inworld_graphs_ChatMessage_HasSingleContent__SWIG(inworld::graphs::ChatMessage const *self){
        return std::holds_alternative<inworld::graphs::TextContent>(self->content);
    }
SWIGINTERN bool inworld_inworld_graphs_ChatMessage_HasMultimodalContent__SWIG(inworld::graphs::ChatMessage const *self){
        return std::holds_alternative<std::vector<inworld::graphs::ChatMessageContent>>(self->content);
    }
SWIGINTERN void inworld_inworld_graphs_ChatMessage_SetTextContent__SWIG(inworld::graphs::ChatMessage *self,std::string const &text){
        inworld::graphs::TextContent text_content;
        text_content.value = text;
        self->content = text_content;
    }
SWIGINTERN void inworld_inworld_graphs_ChatMessage_SetTemplateContent__SWIG(inworld::graphs::ChatMessage *self,std::string const &template_str){
        inworld::graphs::StringTemplate tmpl;
        tmpl.value = template_str;
        inworld::graphs::TextContent text_content;
        text_content.value = tmpl;
        self->content = text_content;
    }
SWIGINTERN void inworld_inworld_graphs_ChatMessage_InitMultimodalContent__SWIG(inworld::graphs::ChatMessage *self){
        self->content = std::vector<inworld::graphs::ChatMessageContent>();
    }
SWIGINTERN void inworld_inworld_graphs_ChatMessage_AddTextToMultimodal__SWIG(inworld::graphs::ChatMessage *self,std::string const &text){
        // Create the vector if it doesn't exist
        if (!std::holds_alternative<std::vector<inworld::graphs::ChatMessageContent>>(self->content)) {
            self->content = std::vector<inworld::graphs::ChatMessageContent>();
        }

        // Create content item
        inworld::graphs::TextContent text_content;
        text_content.value = text;
        inworld::graphs::ChatMessageContent item;
        item.content = text_content;

        // Add to vector
        auto& vec = std::get<std::vector<inworld::graphs::ChatMessageContent>>(self->content);
        vec.push_back(item);
    }
SWIGINTERN void inworld_inworld_graphs_ChatMessage_AddTemplateToMultimodal__SWIG(inworld::graphs::ChatMessage *self,std::string const &template_str){
        if (!std::holds_alternative<std::vector<inworld::graphs::ChatMessageContent>>(self->content)) {
            self->content = std::vector<inworld::graphs::ChatMessageContent>();
        }

        inworld::graphs::StringTemplate tmpl;
        tmpl.value = template_str;
        inworld::graphs::TextContent text_content;
        text_content.value = tmpl;
        inworld::graphs::ChatMessageContent item;
        item.content = text_content;

        auto& vec = std::get<std::vector<inworld::graphs::ChatMessageContent>>(self->content);
        vec.push_back(item);
    }
SWIGINTERN void inworld_inworld_graphs_ChatMessage_AddImageToMultimodal__SWIG_0(inworld::graphs::ChatMessage *self,std::string const &url,std::string const &detail="auto"){
        if (!std::holds_alternative<std::vector<inworld::graphs::ChatMessageContent>>(self->content)) {
            self->content = std::vector<inworld::graphs::ChatMessageContent>();
        }

        inworld::graphs::ImageContent image_content;
        image_content.url = url;
        image_content.detail = detail;
        inworld::graphs::ChatMessageContent item;
        item.content = image_content;

        auto& vec = std::get<std::vector<inworld::graphs::ChatMessageContent>>(self->content);
        vec.push_back(item);
    }
SWIGINTERN void inworld_inworld_graphs_ChatMessage_AddImageTemplateToMultimodal__SWIG_0(inworld::graphs::ChatMessage *self,std::string const &url_template,std::string const &detail="auto"){
        if (!std::holds_alternative<std::vector<inworld::graphs::ChatMessageContent>>(self->content)) {
            self->content = std::vector<inworld::graphs::ChatMessageContent>();
        }

        inworld::graphs::StringTemplate tmpl;
        tmpl.value = url_template;
        inworld::graphs::ImageContent image_content;
        image_content.url = tmpl;
        image_content.detail = detail;
        inworld::graphs::ChatMessageContent item;
        item.content = image_content;

        auto& vec = std::get<std::vector<inworld::graphs::ChatMessageContent>>(self->content);
        vec.push_back(item);
    }
SWIGINTERN int inworld_inworld_graphs_ChatMessage_GetMultimodalItemCount__SWIG(inworld::graphs::ChatMessage const *self){
        if (!std::holds_alternative<std::vector<inworld::graphs::ChatMessageContent>>(self->content)) {
            return 0;
        }
        const auto& vec = std::get<std::vector<inworld::graphs::ChatMessageContent>>(self->content);
        return static_cast<int>(vec.size());
    }
SWIGINTERN bool inworld_inworld_graphs_LLMChatRequestBuilderNodeExecutionConfig_is_valid__SWIG(inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > inworld_inworld_graphs_LLMChatRequestBuilderNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > const &execution_config){
    return inworld::graphs::LLMChatRequestBuilderNode::Create(id, execution_config ? *execution_config : inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig());
  }

#include "inworld/graphs/builtin/schema/memory.h"

SWIGINTERN bool inworld_inworld_graphs_MemoryState_is_valid__SWIG(inworld::graphs::MemoryState const *self){
          return self != nullptr;
      }
SWIGINTERN std::string inworld_inworld_graphs_MemoryState_GetJson__SWIG(inworld::graphs::MemoryState *self){
    auto json = inworld::graphs::ToJson(self->memory_snapshot());
    return json->dump();
  }

#include "inworld/graphs/evaluation/feedback_recorder.h"


#include "inworld/graphs/builtin/nodes/llm_prompt_builder_node.h"
#include "absl/status/statusor.h"
#include <memory>

SWIGINTERN bool inworld_inworld_graphs_LLMPromptBuilderNodeExecutionConfig_is_valid__SWIG(inworld::graphs::LLMPromptBuilderNodeExecutionConfig const *self){
          return self != nullptr;
      }
SWIGINTERN bool inworld_inworld_graphs_LLMPromptBuilderNode_is_valid__SWIG(inworld::graphs::LLMPromptBuilderNode const *self){
          return self != nullptr;
      }
SWIGINTERN absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > inworld_inworld_graphs_LLMPromptBuilderNode_Create__SWIG(std::string const &id,std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > const &execution_config){
    return inworld::graphs::LLMPromptBuilderNode::Create(id, execution_config ? *execution_config : inworld::graphs::LLMPromptBuilderNodeExecutionConfig());
  }


#include "inworld/library/common/status_helpers.h"
#include "bindings/clib/ffi/nodejs/tagged_value.h"
#include "bindings/clib/ffi/nodejs/custom_node.h"

namespace inworld {
namespace ffi {
using BaseDataPtr = std::shared_ptr<inworld::graphs::BaseData>;
using FfiCbPtr = std::shared_ptr<inworld::ffi::FfiCallback>;
using NodePtr = std::shared_ptr<inworld::graphs::Node>;

// Create DatStream<T> from an FFI callback
absl::StatusOr<BaseDataPtr> graphs_ffi_makeDataStream(void* callback_opaque,
    std::shared_ptr<inworld::graphs::CancellationContext> cancellation_context = nullptr) {
  ASSIGN_OR_RETURN(auto cb, inworld::ffi::fromOpaque(callback_opaque));
  auto tv = inworld::ffi::TaggedValue::makeInputStream(cb, {});
  if (!tv.ok()) {
    return tv.status();  // propagate error
  }
  return tv.value()->asGraphData(cancellation_context);  // StatusOr<BaseDataPtr>
}

// Create a custom node from an FFI callback
absl::StatusOr<NodePtr> graphs_ffi_makeCustomNode(std::string id, std::shared_ptr<inworld::graphs::NodeExecutionConfig> config, void* callback_opaque) {
  ASSIGN_OR_RETURN(auto cb, inworld::ffi::fromOpaque(callback_opaque));
  return std::make_shared<inworld::ffi::CustomNode>(std::move(id), config, cb);
}

} // namespace ffi
} //namespace inworld



    #include "inworld/library/core/registry/component_registry.h"
    #include "inworld/library/common/status_helpers.h"
    #include "bindings/clib/ffi/nodejs/custom_node.h"
    #include "bindings/clib/ffi/nodejs/edge_condition.h"

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORTC SwigObj* inworld_vector_CompiledIntent_new() {
  std::vector< inworld::CompiledIntent > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::CompiledIntent > *)new std::vector< inworld::CompiledIntent >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_CompiledIntent_copy(SwigObj* carg1) {
  std::vector< inworld::CompiledIntent > *cppresult;
  std::vector< inworld::CompiledIntent > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;

  cppresult = (std::vector< inworld::CompiledIntent > *)new std::vector< inworld::CompiledIntent >((std::vector< inworld::CompiledIntent > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_CompiledIntent_size(SwigObj* carg1) {
  std::vector< inworld::CompiledIntent >::size_type cppresult;
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;
  cppresult = ((std::vector< inworld::CompiledIntent > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_CompiledIntent_capacity(SwigObj* carg1) {
  std::vector< inworld::CompiledIntent >::size_type cppresult;
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;
  cppresult = ((std::vector< inworld::CompiledIntent > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_CompiledIntent_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;
  std::vector< inworld::CompiledIntent >::size_type arg2 ;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;
  arg2 = (std::vector< inworld::CompiledIntent >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_CompiledIntent_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;
  cppresult = (bool)((std::vector< inworld::CompiledIntent > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_CompiledIntent_clear(SwigObj* carg1) {
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_CompiledIntent_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;
  std::vector< inworld::CompiledIntent >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;

  arg2 = (std::vector< inworld::CompiledIntent >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::CompiledIntent >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_CompiledIntent_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::CompiledIntent >::value_type *cppresult;
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::CompiledIntent >::value_type *) &inworld_std_vector_Sl_inworld_CompiledIntent_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_CompiledIntent_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;
  int arg2 ;
  std::vector< inworld::CompiledIntent >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::CompiledIntent >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_CompiledIntent_Sg__set__SWIG(arg1,arg2,(inworld::CompiledIntent const &)*arg3);
}


SWIGEXPORTC void inworld_vector_CompiledIntent_delete(SwigObj* carg1) {
  std::vector< inworld::CompiledIntent > *arg1 = (std::vector< inworld::CompiledIntent > *) 0 ;

  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_Device_new() {
  std::vector< inworld::Device > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::Device > *)new std::vector< inworld::Device >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Device_copy(SwigObj* carg1) {
  std::vector< inworld::Device > *cppresult;
  std::vector< inworld::Device > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::Device > *) carg1;

  cppresult = (std::vector< inworld::Device > *)new std::vector< inworld::Device >((std::vector< inworld::Device > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Device_size(SwigObj* carg1) {
  std::vector< inworld::Device >::size_type cppresult;
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Device > *) carg1;
  cppresult = ((std::vector< inworld::Device > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Device_capacity(SwigObj* carg1) {
  std::vector< inworld::Device >::size_type cppresult;
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Device > *) carg1;
  cppresult = ((std::vector< inworld::Device > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Device_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;
  std::vector< inworld::Device >::size_type arg2 ;

  arg1 = (std::vector< inworld::Device > *) carg1;
  arg2 = (std::vector< inworld::Device >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_Device_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::Device > *) carg1;
  cppresult = (bool)((std::vector< inworld::Device > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Device_clear(SwigObj* carg1) {
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;

  arg1 = (std::vector< inworld::Device > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_Device_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;
  std::vector< inworld::Device >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::Device > *) carg1;

  arg2 = (std::vector< inworld::Device >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::Device >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_Device_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::Device >::value_type *cppresult;
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::Device > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::Device >::value_type *) &inworld_std_vector_Sl_inworld_Device_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Device_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;
  int arg2 ;
  std::vector< inworld::Device >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::Device > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::Device >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_Device_Sg__set__SWIG(arg1,arg2,(inworld::Device const &)*arg3);
}


SWIGEXPORTC void inworld_vector_Device_delete(SwigObj* carg1) {
  std::vector< inworld::Device > *arg1 = (std::vector< inworld::Device > *) 0 ;

  arg1 = (std::vector< inworld::Device > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_Event_new() {
  std::vector< inworld::Event > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::Event > *)new std::vector< inworld::Event >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Event_copy(SwigObj* carg1) {
  std::vector< inworld::Event > *cppresult;
  std::vector< inworld::Event > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::Event > *) carg1;

  cppresult = (std::vector< inworld::Event > *)new std::vector< inworld::Event >((std::vector< inworld::Event > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Event_size(SwigObj* carg1) {
  std::vector< inworld::Event >::size_type cppresult;
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Event > *) carg1;
  cppresult = ((std::vector< inworld::Event > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Event_capacity(SwigObj* carg1) {
  std::vector< inworld::Event >::size_type cppresult;
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Event > *) carg1;
  cppresult = ((std::vector< inworld::Event > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Event_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;
  std::vector< inworld::Event >::size_type arg2 ;

  arg1 = (std::vector< inworld::Event > *) carg1;
  arg2 = (std::vector< inworld::Event >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_Event_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::Event > *) carg1;
  cppresult = (bool)((std::vector< inworld::Event > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Event_clear(SwigObj* carg1) {
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;

  arg1 = (std::vector< inworld::Event > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_Event_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;
  std::vector< inworld::Event >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::Event > *) carg1;

  arg2 = (std::vector< inworld::Event >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::Event >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_Event_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::Event >::value_type *cppresult;
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::Event > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::Event >::value_type *) &inworld_std_vector_Sl_inworld_Event_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Event_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;
  int arg2 ;
  std::vector< inworld::Event >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::Event > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::Event >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_Event_Sg__set__SWIG(arg1,arg2,(inworld::Event const &)*arg3);
}


SWIGEXPORTC void inworld_vector_Event_delete(SwigObj* carg1) {
  std::vector< inworld::Event > *arg1 = (std::vector< inworld::Event > *) 0 ;

  arg1 = (std::vector< inworld::Event > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_Intent_new() {
  std::vector< inworld::Intent > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::Intent > *)new std::vector< inworld::Intent >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Intent_copy(SwigObj* carg1) {
  std::vector< inworld::Intent > *cppresult;
  std::vector< inworld::Intent > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::Intent > *) carg1;

  cppresult = (std::vector< inworld::Intent > *)new std::vector< inworld::Intent >((std::vector< inworld::Intent > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Intent_size(SwigObj* carg1) {
  std::vector< inworld::Intent >::size_type cppresult;
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Intent > *) carg1;
  cppresult = ((std::vector< inworld::Intent > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Intent_capacity(SwigObj* carg1) {
  std::vector< inworld::Intent >::size_type cppresult;
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Intent > *) carg1;
  cppresult = ((std::vector< inworld::Intent > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Intent_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;
  std::vector< inworld::Intent >::size_type arg2 ;

  arg1 = (std::vector< inworld::Intent > *) carg1;
  arg2 = (std::vector< inworld::Intent >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_Intent_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::Intent > *) carg1;
  cppresult = (bool)((std::vector< inworld::Intent > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Intent_clear(SwigObj* carg1) {
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;

  arg1 = (std::vector< inworld::Intent > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_Intent_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;
  std::vector< inworld::Intent >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::Intent > *) carg1;

  arg2 = (std::vector< inworld::Intent >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::Intent >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_Intent_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::Intent >::value_type *cppresult;
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::Intent > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::Intent >::value_type *) &inworld_std_vector_Sl_inworld_Intent_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Intent_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;
  int arg2 ;
  std::vector< inworld::Intent >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::Intent > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::Intent >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_Intent_Sg__set__SWIG(arg1,arg2,(inworld::Intent const &)*arg3);
}


SWIGEXPORTC void inworld_vector_Intent_delete(SwigObj* carg1) {
  std::vector< inworld::Intent > *arg1 = (std::vector< inworld::Intent > *) 0 ;

  arg1 = (std::vector< inworld::Intent > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_IntentMatch_new() {
  std::vector< inworld::IntentMatch > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::IntentMatch > *)new std::vector< inworld::IntentMatch >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_IntentMatch_copy(SwigObj* carg1) {
  std::vector< inworld::IntentMatch > *cppresult;
  std::vector< inworld::IntentMatch > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::IntentMatch > *) carg1;

  cppresult = (std::vector< inworld::IntentMatch > *)new std::vector< inworld::IntentMatch >((std::vector< inworld::IntentMatch > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_IntentMatch_size(SwigObj* carg1) {
  std::vector< inworld::IntentMatch >::size_type cppresult;
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;
  cppresult = ((std::vector< inworld::IntentMatch > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_IntentMatch_capacity(SwigObj* carg1) {
  std::vector< inworld::IntentMatch >::size_type cppresult;
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;
  cppresult = ((std::vector< inworld::IntentMatch > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_IntentMatch_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;
  std::vector< inworld::IntentMatch >::size_type arg2 ;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;
  arg2 = (std::vector< inworld::IntentMatch >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_IntentMatch_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;
  cppresult = (bool)((std::vector< inworld::IntentMatch > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_IntentMatch_clear(SwigObj* carg1) {
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_IntentMatch_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;
  std::vector< inworld::IntentMatch >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;

  arg2 = (std::vector< inworld::IntentMatch >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::IntentMatch >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_IntentMatch_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::IntentMatch >::value_type *cppresult;
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::IntentMatch >::value_type *) &inworld_std_vector_Sl_inworld_IntentMatch_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_IntentMatch_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;
  int arg2 ;
  std::vector< inworld::IntentMatch >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::IntentMatch >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_IntentMatch_Sg__set__SWIG(arg1,arg2,(inworld::IntentMatch const &)*arg3);
}


SWIGEXPORTC void inworld_vector_IntentMatch_delete(SwigObj* carg1) {
  std::vector< inworld::IntentMatch > *arg1 = (std::vector< inworld::IntentMatch > *) 0 ;

  arg1 = (std::vector< inworld::IntentMatch > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_KeywordMatch_new() {
  std::vector< inworld::KeywordMatch > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::KeywordMatch > *)new std::vector< inworld::KeywordMatch >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_KeywordMatch_copy(SwigObj* carg1) {
  std::vector< inworld::KeywordMatch > *cppresult;
  std::vector< inworld::KeywordMatch > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;

  cppresult = (std::vector< inworld::KeywordMatch > *)new std::vector< inworld::KeywordMatch >((std::vector< inworld::KeywordMatch > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_KeywordMatch_size(SwigObj* carg1) {
  std::vector< inworld::KeywordMatch >::size_type cppresult;
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;
  cppresult = ((std::vector< inworld::KeywordMatch > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_KeywordMatch_capacity(SwigObj* carg1) {
  std::vector< inworld::KeywordMatch >::size_type cppresult;
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;
  cppresult = ((std::vector< inworld::KeywordMatch > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KeywordMatch_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;
  std::vector< inworld::KeywordMatch >::size_type arg2 ;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;
  arg2 = (std::vector< inworld::KeywordMatch >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_KeywordMatch_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;
  cppresult = (bool)((std::vector< inworld::KeywordMatch > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KeywordMatch_clear(SwigObj* carg1) {
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_KeywordMatch_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;
  std::vector< inworld::KeywordMatch >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;

  arg2 = (std::vector< inworld::KeywordMatch >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::KeywordMatch >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_KeywordMatch_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::KeywordMatch >::value_type *cppresult;
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::KeywordMatch >::value_type *) &inworld_std_vector_Sl_inworld_KeywordMatch_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KeywordMatch_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;
  int arg2 ;
  std::vector< inworld::KeywordMatch >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::KeywordMatch >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_KeywordMatch_Sg__set__SWIG(arg1,arg2,(inworld::KeywordMatch const &)*arg3);
}


SWIGEXPORTC void inworld_vector_KeywordMatch_delete(SwigObj* carg1) {
  std::vector< inworld::KeywordMatch > *arg1 = (std::vector< inworld::KeywordMatch > *) 0 ;

  arg1 = (std::vector< inworld::KeywordMatch > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_KeywordGroup_new() {
  std::vector< inworld::KeywordGroup > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::KeywordGroup > *)new std::vector< inworld::KeywordGroup >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_KeywordGroup_copy(SwigObj* carg1) {
  std::vector< inworld::KeywordGroup > *cppresult;
  std::vector< inworld::KeywordGroup > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;

  cppresult = (std::vector< inworld::KeywordGroup > *)new std::vector< inworld::KeywordGroup >((std::vector< inworld::KeywordGroup > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_KeywordGroup_size(SwigObj* carg1) {
  std::vector< inworld::KeywordGroup >::size_type cppresult;
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;
  cppresult = ((std::vector< inworld::KeywordGroup > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_KeywordGroup_capacity(SwigObj* carg1) {
  std::vector< inworld::KeywordGroup >::size_type cppresult;
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;
  cppresult = ((std::vector< inworld::KeywordGroup > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KeywordGroup_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;
  std::vector< inworld::KeywordGroup >::size_type arg2 ;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;
  arg2 = (std::vector< inworld::KeywordGroup >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_KeywordGroup_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;
  cppresult = (bool)((std::vector< inworld::KeywordGroup > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KeywordGroup_clear(SwigObj* carg1) {
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_KeywordGroup_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;
  std::vector< inworld::KeywordGroup >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;

  arg2 = (std::vector< inworld::KeywordGroup >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::KeywordGroup >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_KeywordGroup_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::KeywordGroup >::value_type *cppresult;
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::KeywordGroup >::value_type *) &inworld_std_vector_Sl_inworld_KeywordGroup_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KeywordGroup_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;
  int arg2 ;
  std::vector< inworld::KeywordGroup >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::KeywordGroup >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_KeywordGroup_Sg__set__SWIG(arg1,arg2,(inworld::KeywordGroup const &)*arg3);
}


SWIGEXPORTC void inworld_vector_KeywordGroup_delete(SwigObj* carg1) {
  std::vector< inworld::KeywordGroup > *arg1 = (std::vector< inworld::KeywordGroup > *) 0 ;

  arg1 = (std::vector< inworld::KeywordGroup > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_KnowledgeRecord_new() {
  std::vector< inworld::KnowledgeRecord > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::KnowledgeRecord > *)new std::vector< inworld::KnowledgeRecord >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_KnowledgeRecord_copy(SwigObj* carg1) {
  std::vector< inworld::KnowledgeRecord > *cppresult;
  std::vector< inworld::KnowledgeRecord > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;

  cppresult = (std::vector< inworld::KnowledgeRecord > *)new std::vector< inworld::KnowledgeRecord >((std::vector< inworld::KnowledgeRecord > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_KnowledgeRecord_size(SwigObj* carg1) {
  std::vector< inworld::KnowledgeRecord >::size_type cppresult;
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;
  cppresult = ((std::vector< inworld::KnowledgeRecord > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_KnowledgeRecord_capacity(SwigObj* carg1) {
  std::vector< inworld::KnowledgeRecord >::size_type cppresult;
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;
  cppresult = ((std::vector< inworld::KnowledgeRecord > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KnowledgeRecord_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;
  std::vector< inworld::KnowledgeRecord >::size_type arg2 ;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;
  arg2 = (std::vector< inworld::KnowledgeRecord >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_KnowledgeRecord_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;
  cppresult = (bool)((std::vector< inworld::KnowledgeRecord > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KnowledgeRecord_clear(SwigObj* carg1) {
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_KnowledgeRecord_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;
  std::vector< inworld::KnowledgeRecord >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;

  arg2 = (std::vector< inworld::KnowledgeRecord >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::KnowledgeRecord >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_KnowledgeRecord_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::KnowledgeRecord >::value_type *cppresult;
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::KnowledgeRecord >::value_type *) &inworld_std_vector_Sl_inworld_KnowledgeRecord_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KnowledgeRecord_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;
  int arg2 ;
  std::vector< inworld::KnowledgeRecord >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::KnowledgeRecord >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_KnowledgeRecord_Sg__set__SWIG(arg1,arg2,(inworld::KnowledgeRecord const &)*arg3);
}


SWIGEXPORTC void inworld_vector_KnowledgeRecord_delete(SwigObj* carg1) {
  std::vector< inworld::KnowledgeRecord > *arg1 = (std::vector< inworld::KnowledgeRecord > *) 0 ;

  arg1 = (std::vector< inworld::KnowledgeRecord > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_KnowledgeCollection_new() {
  std::vector< inworld::KnowledgeCollection > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::KnowledgeCollection > *)new std::vector< inworld::KnowledgeCollection >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_KnowledgeCollection_copy(SwigObj* carg1) {
  std::vector< inworld::KnowledgeCollection > *cppresult;
  std::vector< inworld::KnowledgeCollection > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;

  cppresult = (std::vector< inworld::KnowledgeCollection > *)new std::vector< inworld::KnowledgeCollection >((std::vector< inworld::KnowledgeCollection > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_KnowledgeCollection_size(SwigObj* carg1) {
  std::vector< inworld::KnowledgeCollection >::size_type cppresult;
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;
  cppresult = ((std::vector< inworld::KnowledgeCollection > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_KnowledgeCollection_capacity(SwigObj* carg1) {
  std::vector< inworld::KnowledgeCollection >::size_type cppresult;
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;
  cppresult = ((std::vector< inworld::KnowledgeCollection > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KnowledgeCollection_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;
  std::vector< inworld::KnowledgeCollection >::size_type arg2 ;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;
  arg2 = (std::vector< inworld::KnowledgeCollection >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_KnowledgeCollection_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;
  cppresult = (bool)((std::vector< inworld::KnowledgeCollection > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KnowledgeCollection_clear(SwigObj* carg1) {
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_KnowledgeCollection_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;
  std::vector< inworld::KnowledgeCollection >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;

  arg2 = (std::vector< inworld::KnowledgeCollection >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::KnowledgeCollection >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_KnowledgeCollection_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::KnowledgeCollection >::value_type *cppresult;
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::KnowledgeCollection >::value_type *) &inworld_std_vector_Sl_inworld_KnowledgeCollection_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_KnowledgeCollection_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;
  int arg2 ;
  std::vector< inworld::KnowledgeCollection >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::KnowledgeCollection >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_KnowledgeCollection_Sg__set__SWIG(arg1,arg2,(inworld::KnowledgeCollection const &)*arg3);
}


SWIGEXPORTC void inworld_vector_KnowledgeCollection_delete(SwigObj* carg1) {
  std::vector< inworld::KnowledgeCollection > *arg1 = (std::vector< inworld::KnowledgeCollection > *) 0 ;

  arg1 = (std::vector< inworld::KnowledgeCollection > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_LLMRoutingConfig_new() {
  std::vector< inworld::LLMRoutingConfig > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::LLMRoutingConfig > *)new std::vector< inworld::LLMRoutingConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_LLMRoutingConfig_copy(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *cppresult;
  std::vector< inworld::LLMRoutingConfig > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;

  cppresult = (std::vector< inworld::LLMRoutingConfig > *)new std::vector< inworld::LLMRoutingConfig >((std::vector< inworld::LLMRoutingConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_LLMRoutingConfig_size(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig >::size_type cppresult;
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  cppresult = ((std::vector< inworld::LLMRoutingConfig > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_LLMRoutingConfig_capacity(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig >::size_type cppresult;
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  cppresult = ((std::vector< inworld::LLMRoutingConfig > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_LLMRoutingConfig_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;
  std::vector< inworld::LLMRoutingConfig >::size_type arg2 ;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  arg2 = (std::vector< inworld::LLMRoutingConfig >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_LLMRoutingConfig_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  cppresult = (bool)((std::vector< inworld::LLMRoutingConfig > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_LLMRoutingConfig_clear(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_LLMRoutingConfig_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;
  std::vector< inworld::LLMRoutingConfig >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;

  arg2 = (std::vector< inworld::LLMRoutingConfig >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::LLMRoutingConfig >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_LLMRoutingConfig_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::LLMRoutingConfig >::value_type *cppresult;
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::LLMRoutingConfig >::value_type *) &inworld_std_vector_Sl_inworld_LLMRoutingConfig_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_LLMRoutingConfig_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;
  int arg2 ;
  std::vector< inworld::LLMRoutingConfig >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::LLMRoutingConfig >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_LLMRoutingConfig_Sg__set__SWIG(arg1,arg2,(inworld::LLMRoutingConfig const &)*arg3);
}


SWIGEXPORTC void inworld_vector_LLMRoutingConfig_delete(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *arg1 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;

  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_TopicThreshold_new() {
  std::vector< inworld::TopicThreshold > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::TopicThreshold > *)new std::vector< inworld::TopicThreshold >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_TopicThreshold_copy(SwigObj* carg1) {
  std::vector< inworld::TopicThreshold > *cppresult;
  std::vector< inworld::TopicThreshold > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;

  cppresult = (std::vector< inworld::TopicThreshold > *)new std::vector< inworld::TopicThreshold >((std::vector< inworld::TopicThreshold > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_TopicThreshold_size(SwigObj* carg1) {
  std::vector< inworld::TopicThreshold >::size_type cppresult;
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;
  cppresult = ((std::vector< inworld::TopicThreshold > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_TopicThreshold_capacity(SwigObj* carg1) {
  std::vector< inworld::TopicThreshold >::size_type cppresult;
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;
  cppresult = ((std::vector< inworld::TopicThreshold > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_TopicThreshold_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;
  std::vector< inworld::TopicThreshold >::size_type arg2 ;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;
  arg2 = (std::vector< inworld::TopicThreshold >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_TopicThreshold_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;
  cppresult = (bool)((std::vector< inworld::TopicThreshold > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_TopicThreshold_clear(SwigObj* carg1) {
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_TopicThreshold_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;
  std::vector< inworld::TopicThreshold >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;

  arg2 = (std::vector< inworld::TopicThreshold >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::TopicThreshold >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_TopicThreshold_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::TopicThreshold >::value_type *cppresult;
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::TopicThreshold >::value_type *) &inworld_std_vector_Sl_inworld_TopicThreshold_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_TopicThreshold_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;
  int arg2 ;
  std::vector< inworld::TopicThreshold >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::TopicThreshold >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_TopicThreshold_Sg__set__SWIG(arg1,arg2,(inworld::TopicThreshold const &)*arg3);
}


SWIGEXPORTC void inworld_vector_TopicThreshold_delete(SwigObj* carg1) {
  std::vector< inworld::TopicThreshold > *arg1 = (std::vector< inworld::TopicThreshold > *) 0 ;

  arg1 = (std::vector< inworld::TopicThreshold > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_DetectedTopic_new() {
  std::vector< inworld::DetectedTopic > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::DetectedTopic > *)new std::vector< inworld::DetectedTopic >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_DetectedTopic_copy(SwigObj* carg1) {
  std::vector< inworld::DetectedTopic > *cppresult;
  std::vector< inworld::DetectedTopic > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;

  cppresult = (std::vector< inworld::DetectedTopic > *)new std::vector< inworld::DetectedTopic >((std::vector< inworld::DetectedTopic > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_DetectedTopic_size(SwigObj* carg1) {
  std::vector< inworld::DetectedTopic >::size_type cppresult;
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;
  cppresult = ((std::vector< inworld::DetectedTopic > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_DetectedTopic_capacity(SwigObj* carg1) {
  std::vector< inworld::DetectedTopic >::size_type cppresult;
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;
  cppresult = ((std::vector< inworld::DetectedTopic > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_DetectedTopic_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;
  std::vector< inworld::DetectedTopic >::size_type arg2 ;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;
  arg2 = (std::vector< inworld::DetectedTopic >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_DetectedTopic_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;
  cppresult = (bool)((std::vector< inworld::DetectedTopic > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_DetectedTopic_clear(SwigObj* carg1) {
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_DetectedTopic_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;
  std::vector< inworld::DetectedTopic >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;

  arg2 = (std::vector< inworld::DetectedTopic >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::DetectedTopic >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_DetectedTopic_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::DetectedTopic >::value_type *cppresult;
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::DetectedTopic >::value_type *) &inworld_std_vector_Sl_inworld_DetectedTopic_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_DetectedTopic_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;
  int arg2 ;
  std::vector< inworld::DetectedTopic >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::DetectedTopic >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_DetectedTopic_Sg__set__SWIG(arg1,arg2,(inworld::DetectedTopic const &)*arg3);
}


SWIGEXPORTC void inworld_vector_DetectedTopic_delete(SwigObj* carg1) {
  std::vector< inworld::DetectedTopic > *arg1 = (std::vector< inworld::DetectedTopic > *) 0 ;

  arg1 = (std::vector< inworld::DetectedTopic > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_DictionaryRule_new() {
  std::vector< inworld::DictionaryRule > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::DictionaryRule > *)new std::vector< inworld::DictionaryRule >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_DictionaryRule_copy(SwigObj* carg1) {
  std::vector< inworld::DictionaryRule > *cppresult;
  std::vector< inworld::DictionaryRule > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;

  cppresult = (std::vector< inworld::DictionaryRule > *)new std::vector< inworld::DictionaryRule >((std::vector< inworld::DictionaryRule > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_DictionaryRule_size(SwigObj* carg1) {
  std::vector< inworld::DictionaryRule >::size_type cppresult;
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;
  cppresult = ((std::vector< inworld::DictionaryRule > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_DictionaryRule_capacity(SwigObj* carg1) {
  std::vector< inworld::DictionaryRule >::size_type cppresult;
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;
  cppresult = ((std::vector< inworld::DictionaryRule > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_DictionaryRule_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;
  std::vector< inworld::DictionaryRule >::size_type arg2 ;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;
  arg2 = (std::vector< inworld::DictionaryRule >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_DictionaryRule_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;
  cppresult = (bool)((std::vector< inworld::DictionaryRule > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_DictionaryRule_clear(SwigObj* carg1) {
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_DictionaryRule_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;
  std::vector< inworld::DictionaryRule >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;

  arg2 = (std::vector< inworld::DictionaryRule >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::DictionaryRule >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_DictionaryRule_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::DictionaryRule >::value_type *cppresult;
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::DictionaryRule >::value_type *) &inworld_std_vector_Sl_inworld_DictionaryRule_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_DictionaryRule_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;
  int arg2 ;
  std::vector< inworld::DictionaryRule >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::DictionaryRule >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_DictionaryRule_Sg__set__SWIG(arg1,arg2,(inworld::DictionaryRule const &)*arg3);
}


SWIGEXPORTC void inworld_vector_DictionaryRule_delete(SwigObj* carg1) {
  std::vector< inworld::DictionaryRule > *arg1 = (std::vector< inworld::DictionaryRule > *) 0 ;

  arg1 = (std::vector< inworld::DictionaryRule > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_Entity_new() {
  std::vector< inworld::Entity > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::Entity > *)new std::vector< inworld::Entity >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Entity_copy(SwigObj* carg1) {
  std::vector< inworld::Entity > *cppresult;
  std::vector< inworld::Entity > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::Entity > *) carg1;

  cppresult = (std::vector< inworld::Entity > *)new std::vector< inworld::Entity >((std::vector< inworld::Entity > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Entity_size(SwigObj* carg1) {
  std::vector< inworld::Entity >::size_type cppresult;
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Entity > *) carg1;
  cppresult = ((std::vector< inworld::Entity > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Entity_capacity(SwigObj* carg1) {
  std::vector< inworld::Entity >::size_type cppresult;
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Entity > *) carg1;
  cppresult = ((std::vector< inworld::Entity > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Entity_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;
  std::vector< inworld::Entity >::size_type arg2 ;

  arg1 = (std::vector< inworld::Entity > *) carg1;
  arg2 = (std::vector< inworld::Entity >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_Entity_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::Entity > *) carg1;
  cppresult = (bool)((std::vector< inworld::Entity > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Entity_clear(SwigObj* carg1) {
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;

  arg1 = (std::vector< inworld::Entity > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_Entity_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;
  std::vector< inworld::Entity >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::Entity > *) carg1;

  arg2 = (std::vector< inworld::Entity >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::Entity >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_Entity_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::Entity >::value_type *cppresult;
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::Entity > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::Entity >::value_type *) &inworld_std_vector_Sl_inworld_Entity_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Entity_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;
  int arg2 ;
  std::vector< inworld::Entity >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::Entity > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::Entity >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_Entity_Sg__set__SWIG(arg1,arg2,(inworld::Entity const &)*arg3);
}


SWIGEXPORTC void inworld_vector_Entity_delete(SwigObj* carg1) {
  std::vector< inworld::Entity > *arg1 = (std::vector< inworld::Entity > *) 0 ;

  arg1 = (std::vector< inworld::Entity > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_EntityMatch_new() {
  std::vector< inworld::EntityMatch > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::EntityMatch > *)new std::vector< inworld::EntityMatch >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_EntityMatch_copy(SwigObj* carg1) {
  std::vector< inworld::EntityMatch > *cppresult;
  std::vector< inworld::EntityMatch > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::EntityMatch > *) carg1;

  cppresult = (std::vector< inworld::EntityMatch > *)new std::vector< inworld::EntityMatch >((std::vector< inworld::EntityMatch > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_EntityMatch_size(SwigObj* carg1) {
  std::vector< inworld::EntityMatch >::size_type cppresult;
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;
  cppresult = ((std::vector< inworld::EntityMatch > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_EntityMatch_capacity(SwigObj* carg1) {
  std::vector< inworld::EntityMatch >::size_type cppresult;
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;
  cppresult = ((std::vector< inworld::EntityMatch > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_EntityMatch_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;
  std::vector< inworld::EntityMatch >::size_type arg2 ;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;
  arg2 = (std::vector< inworld::EntityMatch >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_EntityMatch_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;
  cppresult = (bool)((std::vector< inworld::EntityMatch > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_EntityMatch_clear(SwigObj* carg1) {
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_EntityMatch_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;
  std::vector< inworld::EntityMatch >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;

  arg2 = (std::vector< inworld::EntityMatch >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::EntityMatch >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_EntityMatch_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::EntityMatch >::value_type *cppresult;
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::EntityMatch >::value_type *) &inworld_std_vector_Sl_inworld_EntityMatch_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_EntityMatch_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;
  int arg2 ;
  std::vector< inworld::EntityMatch >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::EntityMatch >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_EntityMatch_Sg__set__SWIG(arg1,arg2,(inworld::EntityMatch const &)*arg3);
}


SWIGEXPORTC void inworld_vector_EntityMatch_delete(SwigObj* carg1) {
  std::vector< inworld::EntityMatch > *arg1 = (std::vector< inworld::EntityMatch > *) 0 ;

  arg1 = (std::vector< inworld::EntityMatch > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_vector_float_new() {
  std::vector< std::vector< float > > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_vector_float_copy(SwigObj* carg1) {
  std::vector< std::vector< float > > *cppresult;
  std::vector< std::vector< float > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::vector< float > > *) carg1;

  cppresult = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >((std::vector< std::vector< float > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_vector_float_size(SwigObj* carg1) {
  std::vector< std::vector< float > >::size_type cppresult;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::vector< float > > *) carg1;
  cppresult = ((std::vector< std::vector< float > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_vector_float_capacity(SwigObj* carg1) {
  std::vector< std::vector< float > >::size_type cppresult;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::vector< float > > *) carg1;
  cppresult = ((std::vector< std::vector< float > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_vector_float_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > >::size_type arg2 ;

  arg1 = (std::vector< std::vector< float > > *) carg1;
  arg2 = (std::vector< std::vector< float > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_vector_float_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  bool result;

  arg1 = (std::vector< std::vector< float > > *) carg1;
  cppresult = (bool)((std::vector< std::vector< float > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_vector_float_clear(SwigObj* carg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;

  arg1 = (std::vector< std::vector< float > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_vector_float_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::vector< float > > *) carg1;

  arg2 = (std::vector< std::vector< float > >::value_type *) carg2;

  (arg1)->push_back((std::vector< std::vector< float > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_vector_float_get(SwigObj* carg1, int carg2) {
  std::vector< std::vector< float > >::value_type *cppresult;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::vector< float > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::vector< float > >::value_type *) &inworld_std_vector_Sl_std_vector_Sl_float_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_vector_float_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< float > >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::vector< float > > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< std::vector< float > >::value_type *) carg3;

  inworld_std_vector_Sl_std_vector_Sl_float_Sg__Sg__set__SWIG(arg1,arg2,(std::vector< float > const &)*arg3);
}


SWIGEXPORTC void inworld_vector_vector_float_delete(SwigObj* carg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;

  arg1 = (std::vector< std::vector< float > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_string_new() {
  std::vector< std::string > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::string > *)new std::vector< std::string >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_string_copy(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  std::vector< std::string > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::string > *) carg1;

  cppresult = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_string_size(SwigObj* carg1) {
  std::vector< std::string >::size_type cppresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::string > *) carg1;
  cppresult = ((std::vector< std::string > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_string_capacity(SwigObj* carg1) {
  std::vector< std::string >::size_type cppresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::string > *) carg1;
  cppresult = ((std::vector< std::string > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_string_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;

  arg1 = (std::vector< std::string > *) carg1;
  arg2 = (std::vector< std::string >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_string_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;

  arg1 = (std::vector< std::string > *) carg1;
  cppresult = (bool)((std::vector< std::string > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_string_clear(SwigObj* carg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;

  arg1 = (std::vector< std::string > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_string_push_back(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::string > *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORTC const char * inworld_vector_string_get(SwigObj* carg1, int carg2) {
  std::vector< std::string >::value_type *cppresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  const char * result;

  arg1 = (std::vector< std::string > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::string >::value_type *) &inworld_std_vector_Sl_std_string_Sg__get__SWIG(arg1,arg2);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_vector_string_set(SwigObj* carg1, int carg2, const char * carg3) {
  std::string temp3 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::string > *) carg1;
  arg2 = (int) carg2;

  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;

  inworld_std_vector_Sl_std_string_Sg__set__SWIG(arg1,arg2,(std::string const &)*arg3);
}


SWIGEXPORTC void inworld_vector_string_delete(SwigObj* carg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;

  arg1 = (std::vector< std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_map_string_string_new() {
  std::vector< std::map< std::string,std::string > > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::map< std::string,std::string > > *)new std::vector< std::map< std::string,std::string > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_map_string_string_copy(SwigObj* carg1) {
  std::vector< std::map< std::string,std::string > > *cppresult;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::map< std::string,std::string,std::less< std::string > > > *) carg1;

  cppresult = (std::vector< std::map< std::string,std::string > > *)new std::vector< std::map< std::string,std::string > >((std::vector< std::map< std::string,std::string,std::less< std::string > > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_map_string_string_size(SwigObj* carg1) {
  std::vector< std::map< std::string,std::string > >::size_type cppresult;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;
  cppresult = ((std::vector< std::map< std::string,std::string > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_map_string_string_capacity(SwigObj* carg1) {
  std::vector< std::map< std::string,std::string > >::size_type cppresult;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;
  cppresult = ((std::vector< std::map< std::string,std::string > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_map_string_string_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type arg2 ;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;
  arg2 = (std::vector< std::map< std::string,std::string > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_map_string_string_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  bool result;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;
  cppresult = (bool)((std::vector< std::map< std::string,std::string > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_map_string_string_clear(SwigObj* carg1) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_map_string_string_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;

  arg2 = (std::vector< std::map< std::string,std::string > >::value_type *) carg2;

  (arg1)->push_back((std::vector< std::map< std::string,std::string > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_map_string_string_get(SwigObj* carg1, int carg2) {
  std::vector< std::map< std::string,std::string,std::less< std::string > > >::value_type *cppresult;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::map< std::string,std::string,std::less< std::string > > >::value_type *) &inworld_std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_map_string_string_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< std::map< std::string,std::string > >::value_type *) carg3;

  inworld_std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set__SWIG(arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORTC void inworld_vector_map_string_string_delete(SwigObj* carg1) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;

  arg1 = (std::vector< std::map< std::string,std::string > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_map_string_string_new() {
  std::map< std::string,std::string > *cppresult;
  SwigObj* result;

  cppresult = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_map_string_string_copy(SwigObj* carg1) {
  std::map< std::string,std::string > *cppresult;
  std::map< std::string,std::string > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::map< std::string,std::string > *) carg1;

  cppresult = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_map_string_string_size(SwigObj* carg1) {
  size_t cppresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  size_t result;

  arg1 = (std::map< std::string,std::string > *) carg1;
  cppresult = ((std::map< std::string,std::string > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_map_string_string_empty(SwigObj* carg1) {
  bool cppresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;

  arg1 = (std::map< std::string,std::string > *) carg1;
  cppresult = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_map_string_string_clear(SwigObj* carg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;

  arg1 = (std::map< std::string,std::string > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC const char * inworld_map_string_string_get(SwigObj* carg1, const char * carg2) {
  std::string *cppresult;
  std::string temp2 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  const char * result;

  arg1 = (std::map< std::string,std::string > *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (std::string *) &inworld_std_map_Sl_std_string_Sc_std_string_Sg__get__SWIG(arg1,(std::string const &)*arg2);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_map_string_string_set(SwigObj* carg1, const char * carg2, const char * carg3) {
  std::string temp2 ;
  std::string temp3 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;

  arg1 = (std::map< std::string,std::string > *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;

  inworld_std_map_Sl_std_string_Sc_std_string_Sg__set__SWIG(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORTC void inworld_map_string_string_del(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (std::map< std::string,std::string > *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  inworld_std_map_Sl_std_string_Sc_std_string_Sg__del__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC bool inworld_map_string_string_has_key(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;

  arg1 = (std::map< std::string,std::string > *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (bool)inworld_std_map_Sl_std_string_Sc_std_string_Sg__has_key__SWIG((std::map< std::string,std::string > const *)arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_map_string_string_delete(SwigObj* carg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;

  arg1 = (std::map< std::string,std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_Status_ok(SwigObj* carg1) {
  bool cppresult;
  absl::Status *arg1 = (absl::Status *) 0 ;
  bool result;

  arg1 = (absl::Status *) carg1;
  cppresult = (bool)((absl::Status const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Status_createStatus(int carg1, const char * carg2) {
  absl::Status cppresult;
  std::string temp2 ;
  absl::StatusCode arg1 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (absl::StatusCode) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_absl_Status_createStatus__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC const char * inworld_Status_ToString(SwigObj* carg1) {
  std::string cppresult;
  absl::Status *arg1 = (absl::Status *) 0 ;
  const char * result;

  arg1 = (absl::Status *) carg1;
  cppresult = inworld_absl_Status_ToString__SWIG((absl::Status const *)arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_Status_new() {
  absl::Status *cppresult;
  SwigObj* result;

  cppresult = (absl::Status *)new absl::Status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Status_delete(SwigObj* carg1) {
  absl::Status *arg1 = (absl::Status *) 0 ;

  arg1 = (absl::Status *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_int_new() {
  absl::StatusOr< int > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< int > *)new absl::StatusOr< int >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_int_new_rci(int carg1) {
  absl::StatusOr< int > *cppresult;
  int *arg1 = 0 ;
  SwigObj* result;

  arg1 = &carg1;
  cppresult = (absl::StatusOr< int > *)new absl::StatusOr< int >((int const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_int_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< int > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< int > *)new absl::StatusOr< int >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_int_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< int > *arg1 = (absl::StatusOr< int > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< int > *) carg1;
  cppresult = (bool)((absl::StatusOr< int > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_int_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< int > *arg1 = (absl::StatusOr< int > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< int > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< int > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC int inworld_StatusOr_int_value(SwigObj* carg1) {
  int cppresult;
  absl::StatusOr< int > *arg1 = (absl::StatusOr< int > *) 0 ;
  int result;

  arg1 = (absl::StatusOr< int > *) carg1;
  cppresult = (int)((absl::StatusOr< int > const *)arg1)->value();
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_StatusOr_int_delete(SwigObj* carg1) {
  absl::StatusOr< int > *arg1 = (absl::StatusOr< int > *) 0 ;

  arg1 = (absl::StatusOr< int > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_string_new() {
  absl::StatusOr< std::string > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::string > *)new absl::StatusOr< std::string >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_string_new_rcstd_string(const char * carg1) {
  absl::StatusOr< std::string > *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  cppresult = (absl::StatusOr< std::string > *)new absl::StatusOr< std::string >((std::string const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_string_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::string > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::string > *)new absl::StatusOr< std::string >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_string_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::string > *arg1 = (absl::StatusOr< std::string > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::string > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::string > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_string_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::string > *arg1 = (absl::StatusOr< std::string > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::string > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::string > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_StatusOr_string_value(SwigObj* carg1) {
  std::string cppresult;
  absl::StatusOr< std::string > *arg1 = (absl::StatusOr< std::string > *) 0 ;
  const char * result;

  arg1 = (absl::StatusOr< std::string > *) carg1;
  cppresult = ((absl::StatusOr< std::string > const *)arg1)->value();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC void inworld_StatusOr_string_delete(SwigObj* carg1) {
  absl::StatusOr< std::string > *arg1 = (absl::StatusOr< std::string > *) 0 ;

  arg1 = (absl::StatusOr< std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_string_new() {
  absl::StatusOr< std::vector< std::string > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::vector< std::string > > *)new absl::StatusOr< std::vector< std::string > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_string_new_rcstd_vector_Sl_std_string_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::string > > *cppresult;
  std::vector< std::string > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::string > *) carg1;

  cppresult = (absl::StatusOr< std::vector< std::string > > *)new absl::StatusOr< std::vector< std::string > >((std::vector< std::string > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_string_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::string > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::vector< std::string > > *)new absl::StatusOr< std::vector< std::string > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_vector_string_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::vector< std::string > > *arg1 = (absl::StatusOr< std::vector< std::string > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::vector< std::string > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::vector< std::string > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_string_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::vector< std::string > > *arg1 = (absl::StatusOr< std::vector< std::string > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< std::string > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::vector< std::string > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_string_value(SwigObj* carg1) {
  std::vector< std::string > cppresult;
  absl::StatusOr< std::vector< std::string > > *arg1 = (absl::StatusOr< std::vector< std::string > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< std::string > > *) carg1;
  cppresult = ((absl::StatusOr< std::vector< std::string > > const *)arg1)->value();
  result = (SwigObj*)new std::vector< std::string >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_vector_string_delete(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::string > > *arg1 = (absl::StatusOr< std::vector< std::string > > *) 0 ;

  arg1 = (absl::StatusOr< std::vector< std::string > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_float_new() {
  absl::StatusOr< std::vector< float > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::vector< float > > *)new absl::StatusOr< std::vector< float > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_float_new_rcstd_vector_Sl_float_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::vector< float > > *cppresult;
  std::vector< float > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< float > *) carg1;

  cppresult = (absl::StatusOr< std::vector< float > > *)new absl::StatusOr< std::vector< float > >((std::vector< float > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_float_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::vector< float > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::vector< float > > *)new absl::StatusOr< std::vector< float > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_vector_float_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::vector< float > > *arg1 = (absl::StatusOr< std::vector< float > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::vector< float > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::vector< float > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_float_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::vector< float > > *arg1 = (absl::StatusOr< std::vector< float > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< float > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::vector< float > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_float_value(SwigObj* carg1) {
  std::vector< float > cppresult;
  absl::StatusOr< std::vector< float > > *arg1 = (absl::StatusOr< std::vector< float > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< float > > *) carg1;
  cppresult = ((absl::StatusOr< std::vector< float > > const *)arg1)->value();
  result = (SwigObj*)new std::vector< float >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_vector_float_delete(SwigObj* carg1) {
  absl::StatusOr< std::vector< float > > *arg1 = (absl::StatusOr< std::vector< float > > *) 0 ;

  arg1 = (absl::StatusOr< std::vector< float > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_vector_float_new() {
  absl::StatusOr< std::vector< std::vector< float > > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::vector< std::vector< float > > > *)new absl::StatusOr< std::vector< std::vector< float > > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_vector_float_new_rcstd_vector_Sl_std_vector_Sl_float_Sg__Sg_(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::vector< float > > > *cppresult;
  std::vector< std::vector< float > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::vector< float > > *) carg1;

  cppresult = (absl::StatusOr< std::vector< std::vector< float > > > *)new absl::StatusOr< std::vector< std::vector< float > > >((std::vector< std::vector< float > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_vector_float_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::vector< float > > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::vector< std::vector< float > > > *)new absl::StatusOr< std::vector< std::vector< float > > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_vector_vector_float_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::vector< std::vector< float > > > *arg1 = (absl::StatusOr< std::vector< std::vector< float > > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::vector< std::vector< float > > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::vector< std::vector< float > > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_vector_float_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::vector< std::vector< float > > > *arg1 = (absl::StatusOr< std::vector< std::vector< float > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< std::vector< float > > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::vector< std::vector< float > > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_vector_float_value(SwigObj* carg1) {
  std::vector< std::vector< float > > cppresult;
  absl::StatusOr< std::vector< std::vector< float > > > *arg1 = (absl::StatusOr< std::vector< std::vector< float > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< std::vector< float > > > *) carg1;
  cppresult = ((absl::StatusOr< std::vector< std::vector< float > > > const *)arg1)->value();
  result = (SwigObj*)new std::vector< std::vector< float > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_vector_vector_float_delete(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::vector< float > > > *arg1 = (absl::StatusOr< std::vector< std::vector< float > > > *) 0 ;

  arg1 = (absl::StatusOr< std::vector< std::vector< float > > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SpeechChunk_new() {
  absl::StatusOr< inworld::SpeechChunk > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< inworld::SpeechChunk > *)new absl::StatusOr< inworld::SpeechChunk >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SpeechChunk_new_rcinworld_SpeechChunk(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > *cppresult;
  inworld::SpeechChunk *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::SpeechChunk *) carg1;

  cppresult = (absl::StatusOr< inworld::SpeechChunk > *)new absl::StatusOr< inworld::SpeechChunk >((inworld::SpeechChunk const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SpeechChunk_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< inworld::SpeechChunk > *)new absl::StatusOr< inworld::SpeechChunk >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SpeechChunk_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::SpeechChunk > *arg1 = (absl::StatusOr< inworld::SpeechChunk > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< inworld::SpeechChunk > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::SpeechChunk > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SpeechChunk_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::SpeechChunk > *arg1 = (absl::StatusOr< inworld::SpeechChunk > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::SpeechChunk > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::SpeechChunk > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SpeechChunk_value(SwigObj* carg1) {
  inworld::SpeechChunk cppresult;
  absl::StatusOr< inworld::SpeechChunk > *arg1 = (absl::StatusOr< inworld::SpeechChunk > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::SpeechChunk > *) carg1;
  cppresult = ((absl::StatusOr< inworld::SpeechChunk > const *)arg1)->value();
  result = (SwigObj*)new inworld::SpeechChunk(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SpeechChunk_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > *arg1 = (absl::StatusOr< inworld::SpeechChunk > *) 0 ;

  arg1 = (absl::StatusOr< inworld::SpeechChunk > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Content_new() {
  absl::StatusOr< inworld::Content > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< inworld::Content > *)new absl::StatusOr< inworld::Content >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Content_new_rcinworld_Content(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > *cppresult;
  inworld::Content *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::Content *) carg1;

  cppresult = (absl::StatusOr< inworld::Content > *)new absl::StatusOr< inworld::Content >((inworld::Content const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Content_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< inworld::Content > *)new absl::StatusOr< inworld::Content >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_Content_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::Content > *arg1 = (absl::StatusOr< inworld::Content > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< inworld::Content > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::Content > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Content_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::Content > *arg1 = (absl::StatusOr< inworld::Content > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::Content > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::Content > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Content_value(SwigObj* carg1) {
  inworld::Content cppresult;
  absl::StatusOr< inworld::Content > *arg1 = (absl::StatusOr< inworld::Content > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::Content > *) carg1;
  cppresult = ((absl::StatusOr< inworld::Content > const *)arg1)->value();
  result = (SwigObj*)new inworld::Content(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_Content_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > *arg1 = (absl::StatusOr< inworld::Content > *) 0 ;

  arg1 = (absl::StatusOr< inworld::Content > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeCollection_new() {
  absl::StatusOr< inworld::KnowledgeCollection > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< inworld::KnowledgeCollection > *)new absl::StatusOr< inworld::KnowledgeCollection >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeCollection_new_rcinworld_KnowledgeCollection(SwigObj* carg1) {
  absl::StatusOr< inworld::KnowledgeCollection > *cppresult;
  inworld::KnowledgeCollection *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::KnowledgeCollection *) carg1;

  cppresult = (absl::StatusOr< inworld::KnowledgeCollection > *)new absl::StatusOr< inworld::KnowledgeCollection >((inworld::KnowledgeCollection const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeCollection_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::KnowledgeCollection > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< inworld::KnowledgeCollection > *)new absl::StatusOr< inworld::KnowledgeCollection >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_KnowledgeCollection_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::KnowledgeCollection > *arg1 = (absl::StatusOr< inworld::KnowledgeCollection > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< inworld::KnowledgeCollection > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::KnowledgeCollection > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeCollection_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::KnowledgeCollection > *arg1 = (absl::StatusOr< inworld::KnowledgeCollection > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::KnowledgeCollection > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::KnowledgeCollection > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeCollection_value(SwigObj* carg1) {
  inworld::KnowledgeCollection cppresult;
  absl::StatusOr< inworld::KnowledgeCollection > *arg1 = (absl::StatusOr< inworld::KnowledgeCollection > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::KnowledgeCollection > *) carg1;
  cppresult = ((absl::StatusOr< inworld::KnowledgeCollection > const *)arg1)->value();
  result = (SwigObj*)new inworld::KnowledgeCollection(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_KnowledgeCollection_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::KnowledgeCollection > *arg1 = (absl::StatusOr< inworld::KnowledgeCollection > *) 0 ;

  arg1 = (absl::StatusOr< inworld::KnowledgeCollection > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemorySnapshot_new() {
  absl::StatusOr< inworld::MemorySnapshot > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< inworld::MemorySnapshot > *)new absl::StatusOr< inworld::MemorySnapshot >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemorySnapshot_new_rcinworld_MemorySnapshot(SwigObj* carg1) {
  absl::StatusOr< inworld::MemorySnapshot > *cppresult;
  inworld::MemorySnapshot *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::MemorySnapshot *) carg1;

  cppresult = (absl::StatusOr< inworld::MemorySnapshot > *)new absl::StatusOr< inworld::MemorySnapshot >((inworld::MemorySnapshot const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemorySnapshot_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::MemorySnapshot > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< inworld::MemorySnapshot > *)new absl::StatusOr< inworld::MemorySnapshot >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_MemorySnapshot_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::MemorySnapshot > *arg1 = (absl::StatusOr< inworld::MemorySnapshot > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< inworld::MemorySnapshot > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::MemorySnapshot > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemorySnapshot_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::MemorySnapshot > *arg1 = (absl::StatusOr< inworld::MemorySnapshot > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::MemorySnapshot > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::MemorySnapshot > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemorySnapshot_value(SwigObj* carg1) {
  inworld::MemorySnapshot cppresult;
  absl::StatusOr< inworld::MemorySnapshot > *arg1 = (absl::StatusOr< inworld::MemorySnapshot > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::MemorySnapshot > *) carg1;
  cppresult = ((absl::StatusOr< inworld::MemorySnapshot > const *)arg1)->value();
  result = (SwigObj*)new inworld::MemorySnapshot(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_MemorySnapshot_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::MemorySnapshot > *arg1 = (absl::StatusOr< inworld::MemorySnapshot > *) 0 ;

  arg1 = (absl::StatusOr< inworld::MemorySnapshot > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CheckSafetyResponse_new() {
  absl::StatusOr< inworld::CheckSafetyResponse > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< inworld::CheckSafetyResponse > *)new absl::StatusOr< inworld::CheckSafetyResponse >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CheckSafetyResponse_new_rcinworld_CheckSafetyResponse(SwigObj* carg1) {
  absl::StatusOr< inworld::CheckSafetyResponse > *cppresult;
  inworld::CheckSafetyResponse *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::CheckSafetyResponse *) carg1;

  cppresult = (absl::StatusOr< inworld::CheckSafetyResponse > *)new absl::StatusOr< inworld::CheckSafetyResponse >((inworld::CheckSafetyResponse const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CheckSafetyResponse_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::CheckSafetyResponse > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< inworld::CheckSafetyResponse > *)new absl::StatusOr< inworld::CheckSafetyResponse >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_CheckSafetyResponse_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::CheckSafetyResponse > *arg1 = (absl::StatusOr< inworld::CheckSafetyResponse > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< inworld::CheckSafetyResponse > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::CheckSafetyResponse > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CheckSafetyResponse_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::CheckSafetyResponse > *arg1 = (absl::StatusOr< inworld::CheckSafetyResponse > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::CheckSafetyResponse > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::CheckSafetyResponse > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CheckSafetyResponse_value(SwigObj* carg1) {
  inworld::CheckSafetyResponse cppresult;
  absl::StatusOr< inworld::CheckSafetyResponse > *arg1 = (absl::StatusOr< inworld::CheckSafetyResponse > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::CheckSafetyResponse > *) carg1;
  cppresult = ((absl::StatusOr< inworld::CheckSafetyResponse > const *)arg1)->value();
  result = (SwigObj*)new inworld::CheckSafetyResponse(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_CheckSafetyResponse_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::CheckSafetyResponse > *arg1 = (absl::StatusOr< inworld::CheckSafetyResponse > *) 0 ;

  arg1 = (absl::StatusOr< inworld::CheckSafetyResponse > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SilenceIntervals_new() {
  absl::StatusOr< std::vector< std::pair< int,int > > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::vector< std::pair< int,int > > > *)new absl::StatusOr< std::vector< std::pair< int,int > > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SilenceIntervals_new_rcstd_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg_(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::pair< int,int > > > *cppresult;
  std::vector< std::pair< int,int > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::pair< int,int > > *) carg1;

  cppresult = (absl::StatusOr< std::vector< std::pair< int,int > > > *)new absl::StatusOr< std::vector< std::pair< int,int > > >((std::vector< std::pair< int,int > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SilenceIntervals_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::pair< int,int > > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::vector< std::pair< int,int > > > *)new absl::StatusOr< std::vector< std::pair< int,int > > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SilenceIntervals_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::vector< std::pair< int,int > > > *arg1 = (absl::StatusOr< std::vector< std::pair< int,int > > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::vector< std::pair< int,int > > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::vector< std::pair< int,int > > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SilenceIntervals_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::vector< std::pair< int,int > > > *arg1 = (absl::StatusOr< std::vector< std::pair< int,int > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< std::pair< int,int > > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::vector< std::pair< int,int > > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SilenceIntervals_value(SwigObj* carg1) {
  std::vector< std::pair< int,int > > cppresult;
  absl::StatusOr< std::vector< std::pair< int,int > > > *arg1 = (absl::StatusOr< std::vector< std::pair< int,int > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< std::pair< int,int > > > *) carg1;
  cppresult = ((absl::StatusOr< std::vector< std::pair< int,int > > > const *)arg1)->value();
  result = (SwigObj*)new std::vector< std::pair< int,int > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SilenceIntervals_delete(SwigObj* carg1) {
  absl::StatusOr< std::vector< std::pair< int,int > > > *arg1 = (absl::StatusOr< std::vector< std::pair< int,int > > > *) 0 ;

  arg1 = (absl::StatusOr< std::vector< std::pair< int,int > > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_CompiledIntent_new() {
  absl::StatusOr< std::vector< inworld::CompiledIntent > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *)new absl::StatusOr< std::vector< inworld::CompiledIntent > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_CompiledIntent_new_rcstd_vector_Sl_inworld_CompiledIntent_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::CompiledIntent > > *cppresult;
  std::vector< inworld::CompiledIntent > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::CompiledIntent > *) carg1;

  cppresult = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *)new absl::StatusOr< std::vector< inworld::CompiledIntent > >((std::vector< inworld::CompiledIntent > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_CompiledIntent_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::CompiledIntent > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *)new absl::StatusOr< std::vector< inworld::CompiledIntent > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_vector_CompiledIntent_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::vector< inworld::CompiledIntent > > *arg1 = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::vector< inworld::CompiledIntent > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_CompiledIntent_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::vector< inworld::CompiledIntent > > *arg1 = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::vector< inworld::CompiledIntent > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_CompiledIntent_value(SwigObj* carg1) {
  std::vector< inworld::CompiledIntent > cppresult;
  absl::StatusOr< std::vector< inworld::CompiledIntent > > *arg1 = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *) carg1;
  cppresult = ((absl::StatusOr< std::vector< inworld::CompiledIntent > > const *)arg1)->value();
  result = (SwigObj*)new std::vector< inworld::CompiledIntent >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_vector_CompiledIntent_delete(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::CompiledIntent > > *arg1 = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *) 0 ;

  arg1 = (absl::StatusOr< std::vector< inworld::CompiledIntent > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_IntentMatch_new() {
  absl::StatusOr< std::vector< inworld::IntentMatch > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::vector< inworld::IntentMatch > > *)new absl::StatusOr< std::vector< inworld::IntentMatch > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_IntentMatch_new_rcstd_vector_Sl_inworld_IntentMatch_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::IntentMatch > > *cppresult;
  std::vector< inworld::IntentMatch > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::IntentMatch > *) carg1;

  cppresult = (absl::StatusOr< std::vector< inworld::IntentMatch > > *)new absl::StatusOr< std::vector< inworld::IntentMatch > >((std::vector< inworld::IntentMatch > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_IntentMatch_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::IntentMatch > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::vector< inworld::IntentMatch > > *)new absl::StatusOr< std::vector< inworld::IntentMatch > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_vector_IntentMatch_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::vector< inworld::IntentMatch > > *arg1 = (absl::StatusOr< std::vector< inworld::IntentMatch > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::vector< inworld::IntentMatch > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::vector< inworld::IntentMatch > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_IntentMatch_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::vector< inworld::IntentMatch > > *arg1 = (absl::StatusOr< std::vector< inworld::IntentMatch > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< inworld::IntentMatch > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::vector< inworld::IntentMatch > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_IntentMatch_value(SwigObj* carg1) {
  std::vector< inworld::IntentMatch > cppresult;
  absl::StatusOr< std::vector< inworld::IntentMatch > > *arg1 = (absl::StatusOr< std::vector< inworld::IntentMatch > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< inworld::IntentMatch > > *) carg1;
  cppresult = ((absl::StatusOr< std::vector< inworld::IntentMatch > > const *)arg1)->value();
  result = (SwigObj*)new std::vector< inworld::IntentMatch >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_vector_IntentMatch_delete(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::IntentMatch > > *arg1 = (absl::StatusOr< std::vector< inworld::IntentMatch > > *) 0 ;

  arg1 = (absl::StatusOr< std::vector< inworld::IntentMatch > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_EntityMatch_new() {
  absl::StatusOr< std::vector< inworld::EntityMatch > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::vector< inworld::EntityMatch > > *)new absl::StatusOr< std::vector< inworld::EntityMatch > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_EntityMatch_new_rcstd_vector_Sl_inworld_EntityMatch_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::EntityMatch > > *cppresult;
  std::vector< inworld::EntityMatch > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::EntityMatch > *) carg1;

  cppresult = (absl::StatusOr< std::vector< inworld::EntityMatch > > *)new absl::StatusOr< std::vector< inworld::EntityMatch > >((std::vector< inworld::EntityMatch > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_EntityMatch_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::EntityMatch > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::vector< inworld::EntityMatch > > *)new absl::StatusOr< std::vector< inworld::EntityMatch > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_vector_EntityMatch_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::vector< inworld::EntityMatch > > *arg1 = (absl::StatusOr< std::vector< inworld::EntityMatch > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::vector< inworld::EntityMatch > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::vector< inworld::EntityMatch > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_EntityMatch_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::vector< inworld::EntityMatch > > *arg1 = (absl::StatusOr< std::vector< inworld::EntityMatch > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< inworld::EntityMatch > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::vector< inworld::EntityMatch > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_vector_EntityMatch_value(SwigObj* carg1) {
  std::vector< inworld::EntityMatch > cppresult;
  absl::StatusOr< std::vector< inworld::EntityMatch > > *arg1 = (absl::StatusOr< std::vector< inworld::EntityMatch > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< inworld::EntityMatch > > *) carg1;
  cppresult = ((absl::StatusOr< std::vector< inworld::EntityMatch > > const *)arg1)->value();
  result = (SwigObj*)new std::vector< inworld::EntityMatch >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_vector_EntityMatch_delete(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::EntityMatch > > *arg1 = (absl::StatusOr< std::vector< inworld::EntityMatch > > *) 0 ;

  arg1 = (absl::StatusOr< std::vector< inworld::EntityMatch > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMInterface_new_rcstd_shared_ptr_Sl_inworld_LLMInterface_SS_const_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *cppresult;
  std::shared_ptr< inworld::LLMInterface const > empty1 ;
  std::shared_ptr< inworld::LLMInterface const > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr<const inworld::LLMInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >((std::shared_ptr< inworld::LLMInterface const > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_LLMInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::LLMInterface const > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::LLMInterface const >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_LLMInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMRouting_new() {
  absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *)new absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMRouting_new_rcstd_shared_ptr_Sl_inworld_LLMRouting_SS_const_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *cppresult;
  std::shared_ptr< inworld::LLMRouting const > empty1 ;
  std::shared_ptr< inworld::LLMRouting const > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr<const inworld::LLMRouting>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *)new absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > >((std::shared_ptr< inworld::LLMRouting const > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMRouting_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *)new absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_LLMRouting_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMRouting_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_LLMRouting_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::LLMRouting const > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::LLMRouting const >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_LLMRouting_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_STTInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_STTInterface_new_rcstd_shared_ptr_Sl_inworld_STTInterface_SS_const_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *cppresult;
  std::shared_ptr< inworld::STTInterface const > empty1 ;
  std::shared_ptr< inworld::STTInterface const > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr<const inworld::STTInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >((std::shared_ptr< inworld::STTInterface const > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_STTInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_STTInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_STTInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_STTInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::STTInterface const > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::STTInterface const >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_STTInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSInterface_new_rcstd_shared_ptr_Sl_inworld_TTSInterface_SS_const_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *cppresult;
  std::shared_ptr< inworld::TTSInterface const > empty1 ;
  std::shared_ptr< inworld::TTSInterface const > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr<const inworld::TTSInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > >((std::shared_ptr< inworld::TTSInterface const > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_TTSInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::TTSInterface const > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::TTSInterface const >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_TTSInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_VADInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::VADInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_VADInterface_new_rcstd_shared_ptr_Sl_inworld_VADInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *cppresult;
  std::shared_ptr< inworld::VADInterface > empty1 ;
  std::shared_ptr< inworld::VADInterface > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::VADInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::VADInterface > >((std::shared_ptr< inworld::VADInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_VADInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::VADInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_VADInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::VADInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_VADInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::VADInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_VADInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::VADInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::VADInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::VADInterface >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_VADInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::VADInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentCompilerInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentCompilerInterface_new_rcstd_shared_ptr_Sl_inworld_IntentCompilerInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *cppresult;
  std::shared_ptr< inworld::IntentCompilerInterface > empty1 ;
  std::shared_ptr< inworld::IntentCompilerInterface > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::IntentCompilerInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > >((std::shared_ptr< inworld::IntentCompilerInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentCompilerInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_IntentCompilerInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentCompilerInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentCompilerInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::IntentCompilerInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::IntentCompilerInterface >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_IntentCompilerInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentMatcherInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentMatcherInterface_new_rcstd_shared_ptr_Sl_inworld_IntentMatcherInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *cppresult;
  std::shared_ptr< inworld::IntentMatcherInterface > empty1 ;
  std::shared_ptr< inworld::IntentMatcherInterface > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::IntentMatcherInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > >((std::shared_ptr< inworld::IntentMatcherInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentMatcherInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_IntentMatcherInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentMatcherInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_IntentMatcherInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::IntentMatcherInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::IntentMatcherInterface >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_IntentMatcherInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherInterface_new_rcstd_shared_ptr_Sl_inworld_KeywordMatcherInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *cppresult;
  std::shared_ptr< inworld::KeywordMatcherInterface > empty1 ;
  std::shared_ptr< inworld::KeywordMatcherInterface > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::KeywordMatcherInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > >((std::shared_ptr< inworld::KeywordMatcherInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_KeywordMatcherInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::KeywordMatcherInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::KeywordMatcherInterface >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_KeywordMatcherInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherResponse_new() {
  absl::StatusOr< inworld::KeywordMatcherResponse > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< inworld::KeywordMatcherResponse > *)new absl::StatusOr< inworld::KeywordMatcherResponse >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherResponse_new_rcinworld_KeywordMatcherResponse(SwigObj* carg1) {
  absl::StatusOr< inworld::KeywordMatcherResponse > *cppresult;
  inworld::KeywordMatcherResponse *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::KeywordMatcherResponse *) carg1;

  cppresult = (absl::StatusOr< inworld::KeywordMatcherResponse > *)new absl::StatusOr< inworld::KeywordMatcherResponse >((inworld::KeywordMatcherResponse const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherResponse_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::KeywordMatcherResponse > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< inworld::KeywordMatcherResponse > *)new absl::StatusOr< inworld::KeywordMatcherResponse >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_KeywordMatcherResponse_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::KeywordMatcherResponse > *arg1 = (absl::StatusOr< inworld::KeywordMatcherResponse > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< inworld::KeywordMatcherResponse > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::KeywordMatcherResponse > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherResponse_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::KeywordMatcherResponse > *arg1 = (absl::StatusOr< inworld::KeywordMatcherResponse > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::KeywordMatcherResponse > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::KeywordMatcherResponse > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KeywordMatcherResponse_value(SwigObj* carg1) {
  inworld::KeywordMatcherResponse cppresult;
  absl::StatusOr< inworld::KeywordMatcherResponse > *arg1 = (absl::StatusOr< inworld::KeywordMatcherResponse > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::KeywordMatcherResponse > *) carg1;
  cppresult = ((absl::StatusOr< inworld::KeywordMatcherResponse > const *)arg1)->value();
  result = (SwigObj*)new inworld::KeywordMatcherResponse(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_KeywordMatcherResponse_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::KeywordMatcherResponse > *arg1 = (absl::StatusOr< inworld::KeywordMatcherResponse > *) 0 ;

  arg1 = (absl::StatusOr< inworld::KeywordMatcherResponse > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeInterface_new_rcstd_shared_ptr_Sl_inworld_KnowledgeInterface_SS_const_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *cppresult;
  std::shared_ptr< inworld::KnowledgeInterface const > empty1 ;
  std::shared_ptr< inworld::KnowledgeInterface const > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr<const inworld::KnowledgeInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >((std::shared_ptr< inworld::KnowledgeInterface const > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_KnowledgeInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::KnowledgeInterface const > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::KnowledgeInterface const >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_KnowledgeInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeRetrieverInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeRetrieverInterface_new_rcstd_shared_ptr_Sl_inworld_KnowledgeRetrieverInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *cppresult;
  std::shared_ptr< inworld::KnowledgeRetrieverInterface > empty1 ;
  std::shared_ptr< inworld::KnowledgeRetrieverInterface > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::KnowledgeRetrieverInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > >((std::shared_ptr< inworld::KnowledgeRetrieverInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeRetrieverInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_KnowledgeRetrieverInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeRetrieverInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_KnowledgeRetrieverInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::KnowledgeRetrieverInterface >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_KnowledgeRetrieverInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemoryInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemoryInterface_new_rcstd_shared_ptr_Sl_inworld_MemoryInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *cppresult;
  std::shared_ptr< inworld::MemoryInterface > empty1 ;
  std::shared_ptr< inworld::MemoryInterface > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::MemoryInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > >((std::shared_ptr< inworld::MemoryInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemoryInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_MemoryInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemoryInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MemoryInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::MemoryInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::MemoryInterface >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_MemoryInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SafetyCheckerInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SafetyCheckerInterface_new_rcstd_shared_ptr_Sl_inworld_SafetyCheckerInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *cppresult;
  std::shared_ptr< inworld::SafetyCheckerInterface > empty1 ;
  std::shared_ptr< inworld::SafetyCheckerInterface > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::SafetyCheckerInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > >((std::shared_ptr< inworld::SafetyCheckerInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SafetyCheckerInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SafetyCheckerInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SafetyCheckerInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SafetyCheckerInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::SafetyCheckerInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::SafetyCheckerInterface >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SafetyCheckerInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextEmbedderInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextEmbedderInterface_new_rcstd_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > empty1 ;
  std::shared_ptr< inworld::TextEmbedderInterface const > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr<const inworld::TextEmbedderInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > >((std::shared_ptr< inworld::TextEmbedderInterface const > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextEmbedderInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_TextEmbedderInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextEmbedderInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextEmbedderInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface const > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::TextEmbedderInterface const >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_TextEmbedderInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_EmojiRemover_new() {
  absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_EmojiRemover_new_rcstd_shared_ptr_Sl_inworld_EmojiRemover_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *cppresult;
  std::shared_ptr< inworld::EmojiRemover > empty1 ;
  std::shared_ptr< inworld::EmojiRemover > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::EmojiRemover>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > >((std::shared_ptr< inworld::EmojiRemover > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_EmojiRemover_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_EmojiRemover_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_EmojiRemover_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_EmojiRemover_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::EmojiRemover > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::EmojiRemover >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_EmojiRemover_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SentenceStream_new() {
  absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *)new absl::StatusOr< std::shared_ptr< inworld::SentenceStream > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SentenceStream_new_rcstd_shared_ptr_Sl_inworld_SentenceStream_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *cppresult;
  std::shared_ptr< inworld::SentenceStream > empty1 ;
  std::shared_ptr< inworld::SentenceStream > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::SentenceStream>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *)new absl::StatusOr< std::shared_ptr< inworld::SentenceStream > >((std::shared_ptr< inworld::SentenceStream > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SentenceStream_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *)new absl::StatusOr< std::shared_ptr< inworld::SentenceStream > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SentenceStream_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SentenceStream_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SentenceStream_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::SentenceStream > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::SentenceStream >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SentenceStream_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SubstringRemover_new() {
  absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SubstringRemover_new_rcstd_shared_ptr_Sl_inworld_SubstringRemover_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *cppresult;
  std::shared_ptr< inworld::SubstringRemover > empty1 ;
  std::shared_ptr< inworld::SubstringRemover > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::SubstringRemover>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > >((std::shared_ptr< inworld::SubstringRemover > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SubstringRemover_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SubstringRemover_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SubstringRemover_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SubstringRemover_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::SubstringRemover > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::SubstringRemover >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SubstringRemover_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextInBracketsRemover_new() {
  absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextInBracketsRemover_new_rcstd_shared_ptr_Sl_inworld_TextInBracketsRemover_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *cppresult;
  std::shared_ptr< inworld::TextInBracketsRemover > empty1 ;
  std::shared_ptr< inworld::TextInBracketsRemover > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::TextInBracketsRemover>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > >((std::shared_ptr< inworld::TextInBracketsRemover > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextInBracketsRemover_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *)new absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_TextInBracketsRemover_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextInBracketsRemover_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TextInBracketsRemover_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::TextInBracketsRemover > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::TextInBracketsRemover >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_TextInBracketsRemover_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ContentToStringStream_new() {
  absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *)new absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ContentToStringStream_new_rcstd_shared_ptr_Sl_inworld_ContentToStringStream_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *cppresult;
  std::shared_ptr< inworld::ContentToStringStream > empty1 ;
  std::shared_ptr< inworld::ContentToStringStream > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::ContentToStringStream>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *)new absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > >((std::shared_ptr< inworld::ContentToStringStream > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ContentToStringStream_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *)new absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_ContentToStringStream_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ContentToStringStream_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ContentToStringStream_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::ContentToStringStream > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::ContentToStringStream >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_ContentToStringStream_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NERInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::NERInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NERInterface_new_rcstd_shared_ptr_Sl_inworld_NERInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *cppresult;
  std::shared_ptr< inworld::NERInterface > empty1 ;
  std::shared_ptr< inworld::NERInterface > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::NERInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::NERInterface > >((std::shared_ptr< inworld::NERInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NERInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::NERInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_NERInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::NERInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NERInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::NERInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NERInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::NERInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::NERInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::NERInterface >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_NERInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::NERInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CreationContext_new() {
  absl::StatusOr< inworld::CreationContext > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< inworld::CreationContext > *)new absl::StatusOr< inworld::CreationContext >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CreationContext_new_rcinworld_CreationContext(SwigObj* carg1) {
  absl::StatusOr< inworld::CreationContext > *cppresult;
  inworld::CreationContext *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::CreationContext *) carg1;

  cppresult = (absl::StatusOr< inworld::CreationContext > *)new absl::StatusOr< inworld::CreationContext >((inworld::CreationContext const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CreationContext_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::CreationContext > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< inworld::CreationContext > *)new absl::StatusOr< inworld::CreationContext >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_CreationContext_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::CreationContext > *arg1 = (absl::StatusOr< inworld::CreationContext > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< inworld::CreationContext > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::CreationContext > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CreationContext_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::CreationContext > *arg1 = (absl::StatusOr< inworld::CreationContext > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::CreationContext > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::CreationContext > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CreationContext_value(SwigObj* carg1) {
  SwigValueWrapper< inworld::CreationContext > cppresult;
  absl::StatusOr< inworld::CreationContext > *arg1 = (absl::StatusOr< inworld::CreationContext > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::CreationContext > *) carg1;
  cppresult = ((absl::StatusOr< inworld::CreationContext > const *)arg1)->value();
  result = (SwigObj*)new inworld::CreationContext(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_CreationContext_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::CreationContext > *arg1 = (absl::StatusOr< inworld::CreationContext > *) 0 ;

  arg1 = (absl::StatusOr< inworld::CreationContext > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_StatusCode_new() {
  std::vector< absl::StatusCode > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< absl::StatusCode > *)new std::vector< absl::StatusCode >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_StatusCode_copy(SwigObj* carg1) {
  std::vector< absl::StatusCode > *cppresult;
  std::vector< absl::StatusCode > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< absl::StatusCode > *) carg1;

  cppresult = (std::vector< absl::StatusCode > *)new std::vector< absl::StatusCode >((std::vector< absl::StatusCode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_StatusCode_size(SwigObj* carg1) {
  std::vector< enum absl::StatusCode >::size_type cppresult;
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;
  size_t result;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  cppresult = ((std::vector< absl::StatusCode > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_StatusCode_capacity(SwigObj* carg1) {
  std::vector< enum absl::StatusCode >::size_type cppresult;
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;
  size_t result;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  cppresult = ((std::vector< absl::StatusCode > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_StatusCode_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;
  std::vector< enum absl::StatusCode >::size_type arg2 ;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  arg2 = (std::vector< enum absl::StatusCode >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_StatusCode_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;
  bool result;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  cppresult = (bool)((std::vector< absl::StatusCode > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_StatusCode_clear(SwigObj* carg1) {
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_StatusCode_push_back(SwigObj* carg1, int* carg2) {
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;
  std::vector< enum absl::StatusCode >::value_type *arg2 = 0 ;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  arg2 = (std::vector< enum absl::StatusCode >::value_type *) carg2;
  (arg1)->push_back((std::vector< enum absl::StatusCode >::value_type const &)*arg2);
}


SWIGEXPORTC int* inworld_vector_StatusCode_get(SwigObj* carg1, int carg2) {
  std::vector< enum absl::StatusCode >::value_type *cppresult;
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;
  int arg2 ;
  int* result;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< enum absl::StatusCode >::value_type *) &inworld_std_vector_Sl_absl_StatusCode_Sg__get__SWIG(arg1,arg2);
  result = (int*)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_StatusCode_set(SwigObj* carg1, int carg2, int* carg3) {
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;
  int arg2 ;
  std::vector< enum absl::StatusCode >::value_type *arg3 = 0 ;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  arg2 = (int) carg2;
  arg3 = (std::vector< enum absl::StatusCode >::value_type *) carg3;
  inworld_std_vector_Sl_absl_StatusCode_Sg__set__SWIG(arg1,arg2,(enum absl::StatusCode const &)*arg3);
}


SWIGEXPORTC void inworld_vector_StatusCode_delete(SwigObj* carg1) {
  std::vector< absl::StatusCode > *arg1 = (std::vector< absl::StatusCode > *) 0 ;

  arg1 = (std::vector< absl::StatusCode > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_NodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionConfig *arg1 = (inworld::graphs::NodeExecutionConfig *) 0 ;
  bool arg2 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::NodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_NodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionConfig *arg1 = (inworld::graphs::NodeExecutionConfig *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::graphs::NodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_NodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionConfig *arg1 = (inworld::graphs::NodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::NodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_NodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionConfig *arg1 = (inworld::graphs::NodeExecutionConfig *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::graphs::NodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_NodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionConfig *arg1 = (inworld::graphs::NodeExecutionConfig *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::NodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_NodeExecutionConfig_is_valid__SWIG((inworld::graphs::NodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_NodeExecutionConfig_toJsonString(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionConfig *arg1 = (inworld::graphs::NodeExecutionConfig *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::NodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_NodeExecutionConfig_toJsonString__SWIG((inworld::graphs::NodeExecutionConfig const *)arg1);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_NodeExecutionConfig_new() {
  inworld::graphs::NodeExecutionConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::graphs::NodeExecutionConfig *)new inworld::graphs::NodeExecutionConfig();

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::NodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_NodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionConfig *arg1 = (inworld::graphs::NodeExecutionConfig *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::NodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_NodeExecutionTelemetryContext_execution_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::NodeExecutionTelemetryContext const > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionTelemetryContext *arg1 = (inworld::graphs::NodeExecutionTelemetryContext *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::NodeExecutionTelemetryContext > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionTelemetryContext *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::NodeExecutionTelemetryContext const *)arg1)->execution_id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC bool inworld_NodeExecutionTelemetryContext_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::NodeExecutionTelemetryContext const > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionTelemetryContext *arg1 = (inworld::graphs::NodeExecutionTelemetryContext *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::NodeExecutionTelemetryContext > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionTelemetryContext *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_NodeExecutionTelemetryContext_is_valid__SWIG((inworld::graphs::NodeExecutionTelemetryContext const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_NodeExecutionTelemetryContext_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::NodeExecutionTelemetryContext > *smartarg1 = 0 ;
  inworld::graphs::NodeExecutionTelemetryContext *arg1 = (inworld::graphs::NodeExecutionTelemetryContext *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::NodeExecutionTelemetryContext > *)carg1;
  arg1 = (inworld::graphs::NodeExecutionTelemetryContext *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_CancellationContext_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::CancellationContext > *smartarg1 = 0 ;
  inworld::graphs::CancellationContext *arg1 = (inworld::graphs::CancellationContext *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::CancellationContext > *)carg1;
  arg1 = (inworld::graphs::CancellationContext *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_CancellationContext_IsCancelled(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::CancellationContext const > *smartarg1 = 0 ;
  inworld::graphs::CancellationContext *arg1 = (inworld::graphs::CancellationContext *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::CancellationContext > *)carg1;
  arg1 = (inworld::graphs::CancellationContext *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)((inworld::graphs::CancellationContext const *)arg1)->IsCancelled();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_CancellationContext_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::CancellationContext const > *smartarg1 = 0 ;
  inworld::graphs::CancellationContext *arg1 = (inworld::graphs::CancellationContext *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::CancellationContext > *)carg1;
  arg1 = (inworld::graphs::CancellationContext *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_CancellationContext_is_valid__SWIG((inworld::graphs::CancellationContext const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ProcessContext_delete(SwigObj* carg1) {
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;

  arg1 = (inworld::graphs::ProcessContext *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_copy(SwigObj* carg1) {
  inworld::graphs::ProcessContext *cppresult;
  inworld::graphs::ProcessContext *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::graphs::ProcessContext *) carg1;

  cppresult = (inworld::graphs::ProcessContext *)new inworld::graphs::ProcessContext((inworld::graphs::ProcessContext const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_ProcessContext_GetVariant(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  const char * result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;
  cppresult = (std::string *) &((inworld::graphs::ProcessContext const *)arg1)->GetVariant();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC const char * inworld_ProcessContext_GetExecutionId(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  const char * result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;
  cppresult = (std::string *) &((inworld::graphs::ProcessContext const *)arg1)->GetExecutionId();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetConfig(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::NodeExecutionConfig > > cppresult;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;
  cppresult = ((inworld::graphs::ProcessContext const *)arg1)->GetConfig();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::NodeExecutionConfig >(cppresult) : 0);
  return result;
}


SWIGEXPORTC bool inworld_ProcessContext_IsCancelled(SwigObj* carg1) {
  bool cppresult;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  bool result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;
  cppresult = (bool)((inworld::graphs::ProcessContext const *)arg1)->IsCancelled();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetCancellationContext(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > cppresult;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;
  cppresult = ((inworld::graphs::ProcessContext const *)arg1)->GetCancellationContext();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::CancellationContext >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetNodeExecutionTelemetryContext(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::NodeExecutionTelemetryContext > > cppresult;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;
  cppresult = ((inworld::graphs::ProcessContext const *)arg1)->GetNodeExecutionTelemetryContext();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::NodeExecutionTelemetryContext >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_GoalAdvancementNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_GoalAdvancementNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_IntentNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_IntentNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_KeywordMatcherNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_KeywordMatcherNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_KnowledgeNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_KnowledgeNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_LLMChatNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_LLMChatNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_LLMChatRequestBuilderNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_LLMChatRequestBuilderNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_LLMCompletionNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_LLMCompletionNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_LLMPromptBuilderNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_LLMPromptBuilderNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_MemoryUpdateNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_MemoryUpdateNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_MemoryRetrieveNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_MemoryRetrieveNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_RandomCannedTextNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_RandomCannedTextNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_SafetyCheckerNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_SafetyCheckerNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_STTNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_STTNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_TextAggregatorNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_TextAggregatorNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_TextChunkingNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_TextChunkingNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_TTSNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_TTSNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_MCPListToolsNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_MCPListToolsNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_MCPCallToolNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_MCPCallToolNode__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_LLMInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_LLMInterface__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_STTInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_STTInterface__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_TTSInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_TTSInterface__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_TextEmbedderInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_TextEmbedderInterface__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_KnowledgeInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_KnowledgeInterface__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ProcessContext_GetComponent_MCPClientInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > cppresult;
  std::string temp2 ;
  inworld::graphs::ProcessContext *arg1 = (inworld::graphs::ProcessContext *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::ProcessContext *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_graphs_ProcessContext_GetComponent_MCPClientInterface__SWIG((inworld::graphs::ProcessContext const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_float_new() {
  std::optional< float > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< float > *)new std::optional< float >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_float_new_rcf(float carg1) {
  std::optional< float > *cppresult;
  float *arg1 = 0 ;
  SwigObj* result;

  arg1 = &carg1;
  cppresult = (std::optional< float > *)new std::optional< float >((float const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_float_copy(SwigObj* carg1) {
  std::optional< float > *cppresult;
  std::optional< float > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< float > *) carg1;

  cppresult = (std::optional< float > *)new std::optional< float >((std::optional< float > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_float_delete(SwigObj* carg1) {
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;

  arg1 = (std::optional< float > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_float_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;
  bool result;

  arg1 = (std::optional< float > *) carg1;
  cppresult = (bool)((std::optional< float > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC float * inworld_optional_float_value(SwigObj* carg1) {
  float *cppresult;
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;
  float * result;

  arg1 = (std::optional< float > *) carg1;
  cppresult = (float *) &(arg1)->value();
  result = (float *)cppresult;
  return result;
}


SWIGEXPORTC float inworld_optional_float_valueConst(SwigObj* carg1) {
  float *cppresult;
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;
  float result;

  arg1 = (std::optional< float > *) carg1;
  cppresult = (float *) &((std::optional< float > const *)arg1)->value();
  result = (float)*cppresult;
  return result;
}


SWIGEXPORTC float inworld_optional_float_value_or(SwigObj* carg1, float carg2) {
  float cppresult;
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;
  float *arg2 = 0 ;
  float result;

  arg1 = (std::optional< float > *) carg1;
  arg2 = &carg2;
  cppresult = (float)((std::optional< float > const *)arg1)->value_or((float const &)*arg2);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_float_reset(SwigObj* carg1) {
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;

  arg1 = (std::optional< float > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC float * inworld_optional_float_get(SwigObj* carg1) {
  float *cppresult;
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;
  float * result;

  arg1 = (std::optional< float > *) carg1;
  cppresult = (float *) &(arg1)->operator *();
  result = (float *)cppresult;
  return result;
}


SWIGEXPORTC float inworld_optional_float_getConst(SwigObj* carg1) {
  float *cppresult;
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;
  float result;

  arg1 = (std::optional< float > *) carg1;
  cppresult = (float *) &((std::optional< float > const *)arg1)->operator *();
  result = (float)*cppresult;
  return result;
}


SWIGEXPORTC float * inworld_optional_float_get_value(SwigObj* carg1) {
  float *cppresult;
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;
  float * result;

  arg1 = (std::optional< float > *) carg1;
  cppresult = (float *) &inworld_std_optional_Sl_float_Sg__get_value__SWIG(arg1);
  result = (float *)cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_float_set_value(SwigObj* carg1, float * carg2) {
  std::optional< float > *arg1 = (std::optional< float > *) 0 ;
  float *arg2 = 0 ;

  arg1 = (std::optional< float > *) carg1;
  arg2 = (float *) carg2;
  inworld_std_optional_Sl_float_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_int_new() {
  std::optional< int > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< int > *)new std::optional< int >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_int_new_rci(int carg1) {
  std::optional< int > *cppresult;
  int *arg1 = 0 ;
  SwigObj* result;

  arg1 = &carg1;
  cppresult = (std::optional< int > *)new std::optional< int >((int const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_int_copy(SwigObj* carg1) {
  std::optional< int > *cppresult;
  std::optional< int > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< int > *) carg1;

  cppresult = (std::optional< int > *)new std::optional< int >((std::optional< int > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_int_delete(SwigObj* carg1) {
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;

  arg1 = (std::optional< int > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_int_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;
  bool result;

  arg1 = (std::optional< int > *) carg1;
  cppresult = (bool)((std::optional< int > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC int * inworld_optional_int_value(SwigObj* carg1) {
  int *cppresult;
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;
  int * result;

  arg1 = (std::optional< int > *) carg1;
  cppresult = (int *) &(arg1)->value();
  result = (int *)cppresult;
  return result;
}


SWIGEXPORTC int inworld_optional_int_valueConst(SwigObj* carg1) {
  int *cppresult;
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;
  int result;

  arg1 = (std::optional< int > *) carg1;
  cppresult = (int *) &((std::optional< int > const *)arg1)->value();
  result = (int)*cppresult;
  return result;
}


SWIGEXPORTC int inworld_optional_int_value_or(SwigObj* carg1, int carg2) {
  int cppresult;
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;
  int *arg2 = 0 ;
  int result;

  arg1 = (std::optional< int > *) carg1;
  arg2 = &carg2;
  cppresult = (int)((std::optional< int > const *)arg1)->value_or((int const &)*arg2);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_int_reset(SwigObj* carg1) {
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;

  arg1 = (std::optional< int > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC int * inworld_optional_int_get(SwigObj* carg1) {
  int *cppresult;
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;
  int * result;

  arg1 = (std::optional< int > *) carg1;
  cppresult = (int *) &(arg1)->operator *();
  result = (int *)cppresult;
  return result;
}


SWIGEXPORTC int inworld_optional_int_getConst(SwigObj* carg1) {
  int *cppresult;
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;
  int result;

  arg1 = (std::optional< int > *) carg1;
  cppresult = (int *) &((std::optional< int > const *)arg1)->operator *();
  result = (int)*cppresult;
  return result;
}


SWIGEXPORTC int * inworld_optional_int_get_value(SwigObj* carg1) {
  int *cppresult;
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;
  int * result;

  arg1 = (std::optional< int > *) carg1;
  cppresult = (int *) &inworld_std_optional_Sl_int_Sg__get_value__SWIG(arg1);
  result = (int *)cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_int_set_value(SwigObj* carg1, int * carg2) {
  std::optional< int > *arg1 = (std::optional< int > *) 0 ;
  int *arg2 = 0 ;

  arg1 = (std::optional< int > *) carg1;
  arg2 = (int *) carg2;
  inworld_std_optional_Sl_int_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_sizet_new() {
  std::optional< size_t > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< size_t > *)new std::optional< size_t >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_sizet_new_rcsize_t(size_t carg1) {
  std::optional< size_t > *cppresult;
  size_t *arg1 = 0 ;
  SwigObj* result;

  arg1 = &carg1;
  cppresult = (std::optional< size_t > *)new std::optional< size_t >((size_t const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_sizet_copy(SwigObj* carg1) {
  std::optional< size_t > *cppresult;
  std::optional< size_t > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< size_t > *) carg1;

  cppresult = (std::optional< size_t > *)new std::optional< size_t >((std::optional< size_t > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_sizet_delete(SwigObj* carg1) {
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;

  arg1 = (std::optional< size_t > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_sizet_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;
  bool result;

  arg1 = (std::optional< size_t > *) carg1;
  cppresult = (bool)((std::optional< size_t > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC size_t * inworld_optional_sizet_value(SwigObj* carg1) {
  size_t *cppresult;
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;
  size_t * result;

  arg1 = (std::optional< size_t > *) carg1;
  cppresult = (size_t *) &(arg1)->value();
  result = (size_t *)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_optional_sizet_valueConst(SwigObj* carg1) {
  size_t *cppresult;
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;
  size_t result;

  arg1 = (std::optional< size_t > *) carg1;
  cppresult = (size_t *) &((std::optional< size_t > const *)arg1)->value();
  result = (size_t)*cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_optional_sizet_value_or(SwigObj* carg1, size_t carg2) {
  size_t cppresult;
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;
  size_t *arg2 = 0 ;
  size_t result;

  arg1 = (std::optional< size_t > *) carg1;
  arg2 = &carg2;
  cppresult = ((std::optional< size_t > const *)arg1)->value_or((size_t const &)*arg2);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_sizet_reset(SwigObj* carg1) {
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;

  arg1 = (std::optional< size_t > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC size_t * inworld_optional_sizet_get(SwigObj* carg1) {
  size_t *cppresult;
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;
  size_t * result;

  arg1 = (std::optional< size_t > *) carg1;
  cppresult = (size_t *) &(arg1)->operator *();
  result = (size_t *)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_optional_sizet_getConst(SwigObj* carg1) {
  size_t *cppresult;
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;
  size_t result;

  arg1 = (std::optional< size_t > *) carg1;
  cppresult = (size_t *) &((std::optional< size_t > const *)arg1)->operator *();
  result = (size_t)*cppresult;
  return result;
}


SWIGEXPORTC size_t * inworld_optional_sizet_get_value(SwigObj* carg1) {
  size_t *cppresult;
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;
  size_t * result;

  arg1 = (std::optional< size_t > *) carg1;
  cppresult = (size_t *) &inworld_std_optional_Sl_size_t_Sg__get_value__SWIG(arg1);
  result = (size_t *)cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_sizet_set_value(SwigObj* carg1, size_t * carg2) {
  std::optional< size_t > *arg1 = (std::optional< size_t > *) 0 ;
  size_t *arg2 = 0 ;

  arg1 = (std::optional< size_t > *) carg1;
  arg2 = (size_t *) carg2;
  inworld_std_optional_Sl_size_t_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_string_new() {
  std::optional< std::string > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< std::string > *)new std::optional< std::string >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_string_new_rcstd_string(const char * carg1) {
  std::optional< std::string > *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  cppresult = (std::optional< std::string > *)new std::optional< std::string >((std::string const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_string_copy(SwigObj* carg1) {
  std::optional< std::string > *cppresult;
  std::optional< std::string > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< std::string > *) carg1;

  cppresult = (std::optional< std::string > *)new std::optional< std::string >((std::optional< std::string > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_string_delete(SwigObj* carg1) {
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;

  arg1 = (std::optional< std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_string_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;
  bool result;

  arg1 = (std::optional< std::string > *) carg1;
  cppresult = (bool)((std::optional< std::string > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC char * inworld_optional_string_value(SwigObj* carg1) {
  std::string *cppresult;
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;
  char * result;

  arg1 = (std::optional< std::string > *) carg1;
  cppresult = (std::string *) &(arg1)->value();

  result = (char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC const char * inworld_optional_string_valueConst(SwigObj* carg1) {
  std::string *cppresult;
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;
  const char * result;

  arg1 = (std::optional< std::string > *) carg1;
  cppresult = (std::string *) &((std::optional< std::string > const *)arg1)->value();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC const char * inworld_optional_string_value_or(SwigObj* carg1, const char * carg2) {
  std::string cppresult;
  std::string temp2 ;
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  const char * result;

  arg1 = (std::optional< std::string > *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = ((std::optional< std::string > const *)arg1)->value_or((std::string const &)*arg2);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC void inworld_optional_string_reset(SwigObj* carg1) {
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;

  arg1 = (std::optional< std::string > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC char * inworld_optional_string_get(SwigObj* carg1) {
  std::string *cppresult;
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;
  char * result;

  arg1 = (std::optional< std::string > *) carg1;
  cppresult = (std::string *) &(arg1)->operator *();

  result = (char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC const char * inworld_optional_string_getConst(SwigObj* carg1) {
  std::string *cppresult;
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;
  const char * result;

  arg1 = (std::optional< std::string > *) carg1;
  cppresult = (std::string *) &((std::optional< std::string > const *)arg1)->operator *();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC char * inworld_optional_string_get_value(SwigObj* carg1) {
  std::string *cppresult;
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;
  char * result;

  arg1 = (std::optional< std::string > *) carg1;
  cppresult = (std::string *) &inworld_std_optional_Sl_std_string_Sg__get_value__SWIG(arg1);

  result = (char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_optional_string_set_value(SwigObj* carg1, char * carg2) {
  SwigStrInOut temp2 ;
  std::optional< std::string > *arg1 = (std::optional< std::string > *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (std::optional< std::string > *) carg1;

  temp2.init(carg2);
  arg2 = temp2.str();

  inworld_std_optional_Sl_std_string_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_Intent_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Intent *arg1 = (inworld::Intent *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Intent *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_Intent_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::Intent *arg1 = (inworld::Intent *) 0 ;
  const char * result;

  arg1 = (inworld::Intent *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_Intent_phrases_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::Intent *arg1 = (inworld::Intent *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;

  arg1 = (inworld::Intent *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->phrases = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Intent_phrases_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::Intent *arg1 = (inworld::Intent *) 0 ;
  SwigObj* result;

  arg1 = (inworld::Intent *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->phrases);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Intent_new() {
  inworld::Intent *cppresult;
  SwigObj* result;

  cppresult = (inworld::Intent *)new inworld::Intent();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Intent_delete(SwigObj* carg1) {
  inworld::Intent *arg1 = (inworld::Intent *) 0 ;

  arg1 = (inworld::Intent *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_CompiledIntent_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::CompiledIntent *arg1 = (inworld::CompiledIntent *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::CompiledIntent *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_CompiledIntent_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::CompiledIntent *arg1 = (inworld::CompiledIntent *) 0 ;
  const char * result;

  arg1 = (inworld::CompiledIntent *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_CompiledIntent_normalized_phrases_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::CompiledIntent *arg1 = (inworld::CompiledIntent *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;

  arg1 = (inworld::CompiledIntent *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->normalized_phrases = *arg2;
}


SWIGEXPORTC SwigObj* inworld_CompiledIntent_normalized_phrases_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::CompiledIntent *arg1 = (inworld::CompiledIntent *) 0 ;
  SwigObj* result;

  arg1 = (inworld::CompiledIntent *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->normalized_phrases);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CompiledIntent_phrase_embeddings_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::CompiledIntent *arg1 = (inworld::CompiledIntent *) 0 ;
  std::vector< std::vector< float > > *arg2 = (std::vector< std::vector< float > > *) 0 ;

  arg1 = (inworld::CompiledIntent *) carg1;
  arg2 = (std::vector< std::vector< float > > *) carg2;
  if (arg1) (arg1)->phrase_embeddings = *arg2;
}


SWIGEXPORTC SwigObj* inworld_CompiledIntent_phrase_embeddings_get(SwigObj* carg1) {
  std::vector< std::vector< float > > *cppresult;
  inworld::CompiledIntent *arg1 = (inworld::CompiledIntent *) 0 ;
  SwigObj* result;

  arg1 = (inworld::CompiledIntent *) carg1;
  cppresult = (std::vector< std::vector< float > > *)& ((arg1)->phrase_embeddings);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CompiledIntent_new() {
  inworld::CompiledIntent *cppresult;
  SwigObj* result;

  cppresult = (inworld::CompiledIntent *)new inworld::CompiledIntent();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CompiledIntent_delete(SwigObj* carg1) {
  inworld::CompiledIntent *arg1 = (inworld::CompiledIntent *) 0 ;

  arg1 = (inworld::CompiledIntent *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ModelProperties_model_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ModelProperties *arg1 = (inworld::ModelProperties *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ModelProperties *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->model_id = *arg2;
}


SWIGEXPORTC const char * inworld_ModelProperties_model_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::ModelProperties *arg1 = (inworld::ModelProperties *) 0 ;
  const char * result;

  arg1 = (inworld::ModelProperties *) carg1;
  cppresult = (std::string *) & ((arg1)->model_id);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ModelProperties_new() {
  inworld::ModelProperties *cppresult;
  SwigObj* result;

  cppresult = (inworld::ModelProperties *)new inworld::ModelProperties();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ModelProperties_delete(SwigObj* carg1) {
  inworld::ModelProperties *arg1 = (inworld::ModelProperties *) 0 ;

  arg1 = (inworld::ModelProperties *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ModelInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::ModelInterface > *smartarg1 = 0 ;
  inworld::ModelInterface *arg1 = (inworld::ModelInterface *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::ModelInterface > *)carg1;
  arg1 = (inworld::ModelInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_ModelInterface_model_properties(SwigObj* carg1) {
  inworld::ModelProperties cppresult;
  std::shared_ptr< inworld::ModelInterface const > *smartarg1 = 0 ;
  inworld::ModelInterface *arg1 = (inworld::ModelInterface *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::ModelInterface > *)carg1;
  arg1 = (inworld::ModelInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::ModelInterface const *)arg1)->model_properties();
  result = (SwigObj*)new inworld::ModelProperties(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_ModelInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::ModelInterface const > *smartarg1 = 0 ;
  inworld::ModelInterface *arg1 = (inworld::ModelInterface *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::ModelInterface > *)carg1;
  arg1 = (inworld::ModelInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_ModelInterface_is_valid__SWIG((inworld::ModelInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextEmbedderInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::TextEmbedderInterface > *smartarg1 = 0 ;
  inworld::TextEmbedderInterface *arg1 = (inworld::TextEmbedderInterface *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::TextEmbedderInterface > *)carg1;
  arg1 = (inworld::TextEmbedderInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TextEmbedderInterface_Embed(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::vector< float > > cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::TextEmbedderInterface *arg1 = (inworld::TextEmbedderInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::TextEmbedderInterface > *)carg1;
  arg1 = (inworld::TextEmbedderInterface *)(smartarg1 ? smartarg1->get() : 0);

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = ((inworld::TextEmbedderInterface const *)arg1)->Embed((std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::vector< float > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextEmbedderInterface_EmbedBatch(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::vector< std::vector< float > > > cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > *smartarg1 = 0 ;
  inworld::TextEmbedderInterface *arg1 = (inworld::TextEmbedderInterface *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::TextEmbedderInterface > *)carg1;
  arg1 = (inworld::TextEmbedderInterface *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (std::vector< std::string > *) carg2;

  cppresult = ((inworld::TextEmbedderInterface const *)arg1)->EmbedBatch((std::vector< std::string > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::vector< std::vector< float > > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TextEmbedderInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > *smartarg1 = 0 ;
  inworld::TextEmbedderInterface *arg1 = (inworld::TextEmbedderInterface *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::TextEmbedderInterface > *)carg1;
  arg1 = (inworld::TextEmbedderInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_TextEmbedderInterface_is_valid__SWIG((inworld::TextEmbedderInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextEmbedderInterface_model_properties(SwigObj* carg1) {
  inworld::ModelProperties cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > *smartarg1 = 0 ;
  inworld::TextEmbedderInterface *arg1 = (inworld::TextEmbedderInterface *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::TextEmbedderInterface > *)carg1;
  arg1 = (inworld::TextEmbedderInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::TextEmbedderInterface const *)arg1)->model_properties();
  result = (SwigObj*)new inworld::ModelProperties(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Duration_new() {
  absl::Duration *cppresult;
  SwigObj* result;

  cppresult = (absl::Duration *)new absl::Duration();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Duration_delete(SwigObj* carg1) {
  absl::Duration *arg1 = (absl::Duration *) 0 ;

  arg1 = (absl::Duration *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_LogitBiasVector_new() {
  std::vector< inworld::LogitBias > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::LogitBias > *)new std::vector< inworld::LogitBias >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LogitBiasVector_copy(SwigObj* carg1) {
  std::vector< inworld::LogitBias > *cppresult;
  std::vector< inworld::LogitBias > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::LogitBias > *) carg1;

  cppresult = (std::vector< inworld::LogitBias > *)new std::vector< inworld::LogitBias >((std::vector< inworld::LogitBias > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_LogitBiasVector_size(SwigObj* carg1) {
  std::vector< inworld::LogitBias >::size_type cppresult;
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;
  cppresult = ((std::vector< inworld::LogitBias > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_LogitBiasVector_capacity(SwigObj* carg1) {
  std::vector< inworld::LogitBias >::size_type cppresult;
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;
  cppresult = ((std::vector< inworld::LogitBias > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_LogitBiasVector_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;
  std::vector< inworld::LogitBias >::size_type arg2 ;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;
  arg2 = (std::vector< inworld::LogitBias >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_LogitBiasVector_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;
  cppresult = (bool)((std::vector< inworld::LogitBias > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LogitBiasVector_clear(SwigObj* carg1) {
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_LogitBiasVector_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;
  std::vector< inworld::LogitBias >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;

  arg2 = (std::vector< inworld::LogitBias >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::LogitBias >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_LogitBiasVector_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::LogitBias >::value_type *cppresult;
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::LogitBias >::value_type *) &inworld_std_vector_Sl_inworld_LogitBias_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LogitBiasVector_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;
  int arg2 ;
  std::vector< inworld::LogitBias >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::LogitBias >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_LogitBias_Sg__set__SWIG(arg1,arg2,(inworld::LogitBias const &)*arg3);
}


SWIGEXPORTC void inworld_LogitBiasVector_delete(SwigObj* carg1) {
  std::vector< inworld::LogitBias > *arg1 = (std::vector< inworld::LogitBias > *) 0 ;

  arg1 = (std::vector< inworld::LogitBias > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_Tools_new() {
  std::vector< inworld::Tool > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::Tool > *)new std::vector< inworld::Tool >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Tools_copy(SwigObj* carg1) {
  std::vector< inworld::Tool > *cppresult;
  std::vector< inworld::Tool > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::Tool > *) carg1;

  cppresult = (std::vector< inworld::Tool > *)new std::vector< inworld::Tool >((std::vector< inworld::Tool > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_Tools_size(SwigObj* carg1) {
  std::vector< inworld::Tool >::size_type cppresult;
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Tool > *) carg1;
  cppresult = ((std::vector< inworld::Tool > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_Tools_capacity(SwigObj* carg1) {
  std::vector< inworld::Tool >::size_type cppresult;
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Tool > *) carg1;
  cppresult = ((std::vector< inworld::Tool > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_Tools_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;
  std::vector< inworld::Tool >::size_type arg2 ;

  arg1 = (std::vector< inworld::Tool > *) carg1;
  arg2 = (std::vector< inworld::Tool >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_Tools_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::Tool > *) carg1;
  cppresult = (bool)((std::vector< inworld::Tool > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Tools_clear(SwigObj* carg1) {
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;

  arg1 = (std::vector< inworld::Tool > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_Tools_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;
  std::vector< inworld::Tool >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::Tool > *) carg1;

  arg2 = (std::vector< inworld::Tool >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::Tool >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_Tools_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::Tool >::value_type *cppresult;
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::Tool > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::Tool >::value_type *) &inworld_std_vector_Sl_inworld_Tool_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Tools_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;
  int arg2 ;
  std::vector< inworld::Tool >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::Tool > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::Tool >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_Tool_Sg__set__SWIG(arg1,arg2,(inworld::Tool const &)*arg3);
}


SWIGEXPORTC void inworld_Tools_delete(SwigObj* carg1) {
  std::vector< inworld::Tool > *arg1 = (std::vector< inworld::Tool > *) 0 ;

  arg1 = (std::vector< inworld::Tool > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Tools_new() {
  absl::StatusOr< std::vector< inworld::Tool > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::vector< inworld::Tool > > *)new absl::StatusOr< std::vector< inworld::Tool > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Tools_new_rcstd_vector_Sl_inworld_Tool_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::Tool > > *cppresult;
  std::vector< inworld::Tool > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::Tool > *) carg1;

  cppresult = (absl::StatusOr< std::vector< inworld::Tool > > *)new absl::StatusOr< std::vector< inworld::Tool > >((std::vector< inworld::Tool > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Tools_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::Tool > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::vector< inworld::Tool > > *)new absl::StatusOr< std::vector< inworld::Tool > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_Tools_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::vector< inworld::Tool > > *arg1 = (absl::StatusOr< std::vector< inworld::Tool > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::vector< inworld::Tool > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::vector< inworld::Tool > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Tools_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::vector< inworld::Tool > > *arg1 = (absl::StatusOr< std::vector< inworld::Tool > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< inworld::Tool > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::vector< inworld::Tool > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Tools_value(SwigObj* carg1) {
  std::vector< inworld::Tool > cppresult;
  absl::StatusOr< std::vector< inworld::Tool > > *arg1 = (absl::StatusOr< std::vector< inworld::Tool > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::vector< inworld::Tool > > *) carg1;
  cppresult = ((absl::StatusOr< std::vector< inworld::Tool > > const *)arg1)->value();
  result = (SwigObj*)new std::vector< inworld::Tool >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_Tools_delete(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::Tool > > *arg1 = (absl::StatusOr< std::vector< inworld::Tool > > *) 0 ;

  arg1 = (absl::StatusOr< std::vector< inworld::Tool > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_Messages_new() {
  std::vector< inworld::Message > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::Message > *)new std::vector< inworld::Message >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Messages_copy(SwigObj* carg1) {
  std::vector< inworld::Message > *cppresult;
  std::vector< inworld::Message > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::Message > *) carg1;

  cppresult = (std::vector< inworld::Message > *)new std::vector< inworld::Message >((std::vector< inworld::Message > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_Messages_size(SwigObj* carg1) {
  std::vector< inworld::Message >::size_type cppresult;
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Message > *) carg1;
  cppresult = ((std::vector< inworld::Message > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_Messages_capacity(SwigObj* carg1) {
  std::vector< inworld::Message >::size_type cppresult;
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::Message > *) carg1;
  cppresult = ((std::vector< inworld::Message > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_Messages_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;
  std::vector< inworld::Message >::size_type arg2 ;

  arg1 = (std::vector< inworld::Message > *) carg1;
  arg2 = (std::vector< inworld::Message >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_Messages_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::Message > *) carg1;
  cppresult = (bool)((std::vector< inworld::Message > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Messages_clear(SwigObj* carg1) {
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;

  arg1 = (std::vector< inworld::Message > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_Messages_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;
  std::vector< inworld::Message >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::Message > *) carg1;

  arg2 = (std::vector< inworld::Message >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::Message >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_Messages_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::Message >::value_type *cppresult;
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::Message > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::Message >::value_type *) &inworld_std_vector_Sl_inworld_Message_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Messages_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;
  int arg2 ;
  std::vector< inworld::Message >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::Message > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::Message >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_Message_Sg__set__SWIG(arg1,arg2,(inworld::Message const &)*arg3);
}


SWIGEXPORTC void inworld_Messages_delete(SwigObj* carg1) {
  std::vector< inworld::Message > *arg1 = (std::vector< inworld::Message > *) 0 ;

  arg1 = (std::vector< inworld::Message > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_ToolCalls_new() {
  std::vector< inworld::ToolCall > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::ToolCall > *)new std::vector< inworld::ToolCall >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ToolCalls_copy(SwigObj* carg1) {
  std::vector< inworld::ToolCall > *cppresult;
  std::vector< inworld::ToolCall > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::ToolCall > *) carg1;

  cppresult = (std::vector< inworld::ToolCall > *)new std::vector< inworld::ToolCall >((std::vector< inworld::ToolCall > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_ToolCalls_size(SwigObj* carg1) {
  std::vector< inworld::ToolCall >::size_type cppresult;
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;
  cppresult = ((std::vector< inworld::ToolCall > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_ToolCalls_capacity(SwigObj* carg1) {
  std::vector< inworld::ToolCall >::size_type cppresult;
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;
  cppresult = ((std::vector< inworld::ToolCall > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_ToolCalls_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;
  std::vector< inworld::ToolCall >::size_type arg2 ;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;
  arg2 = (std::vector< inworld::ToolCall >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_ToolCalls_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;
  cppresult = (bool)((std::vector< inworld::ToolCall > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ToolCalls_clear(SwigObj* carg1) {
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_ToolCalls_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;
  std::vector< inworld::ToolCall >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;

  arg2 = (std::vector< inworld::ToolCall >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::ToolCall >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_ToolCalls_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::ToolCall >::value_type *cppresult;
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::ToolCall >::value_type *) &inworld_std_vector_Sl_inworld_ToolCall_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ToolCalls_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;
  int arg2 ;
  std::vector< inworld::ToolCall >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::ToolCall >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_ToolCall_Sg__set__SWIG(arg1,arg2,(inworld::ToolCall const &)*arg3);
}


SWIGEXPORTC void inworld_ToolCalls_delete(SwigObj* carg1) {
  std::vector< inworld::ToolCall > *arg1 = (std::vector< inworld::ToolCall > *) 0 ;

  arg1 = (std::vector< inworld::ToolCall > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_ContentItems_new() {
  std::vector< inworld::ContentItem > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::ContentItem > *)new std::vector< inworld::ContentItem >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ContentItems_copy(SwigObj* carg1) {
  std::vector< inworld::ContentItem > *cppresult;
  std::vector< inworld::ContentItem > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::ContentItem > *) carg1;

  cppresult = (std::vector< inworld::ContentItem > *)new std::vector< inworld::ContentItem >((std::vector< inworld::ContentItem > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_ContentItems_size(SwigObj* carg1) {
  std::vector< inworld::ContentItem >::size_type cppresult;
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;
  cppresult = ((std::vector< inworld::ContentItem > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_ContentItems_capacity(SwigObj* carg1) {
  std::vector< inworld::ContentItem >::size_type cppresult;
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;
  cppresult = ((std::vector< inworld::ContentItem > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_ContentItems_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;
  std::vector< inworld::ContentItem >::size_type arg2 ;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;
  arg2 = (std::vector< inworld::ContentItem >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_ContentItems_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;
  cppresult = (bool)((std::vector< inworld::ContentItem > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ContentItems_clear(SwigObj* carg1) {
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_ContentItems_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;
  std::vector< inworld::ContentItem >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;

  arg2 = (std::vector< inworld::ContentItem >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::ContentItem >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_ContentItems_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::ContentItem >::value_type *cppresult;
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::ContentItem >::value_type *) &inworld_std_vector_Sl_inworld_ContentItem_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ContentItems_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;
  int arg2 ;
  std::vector< inworld::ContentItem >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::ContentItem >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_ContentItem_Sg__set__SWIG(arg1,arg2,(inworld::ContentItem const &)*arg3);
}


SWIGEXPORTC void inworld_ContentItems_delete(SwigObj* carg1) {
  std::vector< inworld::ContentItem > *arg1 = (std::vector< inworld::ContentItem > *) 0 ;

  arg1 = (std::vector< inworld::ContentItem > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_InputStream_Content_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::InputStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::Content > *arg1 = (inworld::InputStream< inworld::Content > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::Content> > *)carg1;
  arg1 = (inworld::InputStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_InputStream_Content_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::Content > *arg1 = (inworld::InputStream< inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::Content> > *)carg1;
  arg1 = (inworld::InputStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_InputStream_Content_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::Content > *arg1 = (inworld::InputStream< inworld::Content > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::Content> > *)carg1;
  arg1 = (inworld::InputStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_InputStream_Content_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > const > *smartarg1 = 0 ;
  inworld::InputStream< inworld::Content > *arg1 = (inworld::InputStream< inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::InputStream<inworld::Content> > *)carg1;
  arg1 = (inworld::InputStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_InputStream_Sl_inworld_Content_Sg__is_valid__SWIG((inworld::InputStream< inworld::Content > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_Content_new() {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_Content_new_rcstd_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  std::shared_ptr< inworld::InputStream< inworld::Content > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >((std::shared_ptr< inworld::InputStream< inworld::Content > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_Content_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_InputStream_Content_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_Content_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_Content_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< inworld::Content > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_InputStream_Content_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_new() {
  std::optional< inworld::ToolChoice > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< inworld::ToolChoice > *)new std::optional< inworld::ToolChoice >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_new_rcinworld_ToolChoice(SwigObj* carg1) {
  std::optional< inworld::ToolChoice > *cppresult;
  inworld::ToolChoice *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::ToolChoice *) carg1;

  cppresult = (std::optional< inworld::ToolChoice > *)new std::optional< inworld::ToolChoice >((inworld::ToolChoice const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_copy(SwigObj* carg1) {
  std::optional< inworld::ToolChoice > *cppresult;
  std::optional< inworld::ToolChoice > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< inworld::ToolChoice > *) carg1;

  cppresult = (std::optional< inworld::ToolChoice > *)new std::optional< inworld::ToolChoice >((std::optional< inworld::ToolChoice > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_OptionalToolChoice_delete(SwigObj* carg1) {
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_OptionalToolChoice_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;
  bool result;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;
  cppresult = (bool)((std::optional< inworld::ToolChoice > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_value(SwigObj* carg1) {
  inworld::ToolChoice *cppresult;
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;
  cppresult = (inworld::ToolChoice *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_valueConst(SwigObj* carg1) {
  inworld::ToolChoice *cppresult;
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;
  cppresult = (inworld::ToolChoice *) &((std::optional< inworld::ToolChoice > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::ToolChoice cppresult;
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;
  inworld::ToolChoice *arg2 = 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;

  arg2 = (inworld::ToolChoice *) carg2;

  cppresult = ((std::optional< inworld::ToolChoice > const *)arg1)->value_or((inworld::ToolChoice const &)*arg2);
  result = (SwigObj*)new inworld::ToolChoice(cppresult);
  return result;
}


SWIGEXPORTC void inworld_OptionalToolChoice_reset(SwigObj* carg1) {
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_get(SwigObj* carg1) {
  inworld::ToolChoice *cppresult;
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;
  cppresult = (inworld::ToolChoice *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_getConst(SwigObj* carg1) {
  inworld::ToolChoice *cppresult;
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;
  cppresult = (inworld::ToolChoice *) &((std::optional< inworld::ToolChoice > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_OptionalToolChoice_get_value(SwigObj* carg1) {
  inworld::ToolChoice *cppresult;
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;
  cppresult = (inworld::ToolChoice *) &inworld_std_optional_Sl_inworld_ToolChoice_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_OptionalToolChoice_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::ToolChoice > *arg1 = (std::optional< inworld::ToolChoice > *) 0 ;
  inworld::ToolChoice *arg2 = 0 ;

  arg1 = (std::optional< inworld::ToolChoice > *) carg1;

  arg2 = (inworld::ToolChoice *) carg2;

  inworld_std_optional_Sl_inworld_ToolChoice_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_LogitBias_token_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LogitBias *arg1 = (inworld::LogitBias *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::LogitBias *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->token_id = *arg2;
}


SWIGEXPORTC const char * inworld_LogitBias_token_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::LogitBias *arg1 = (inworld::LogitBias *) 0 ;
  const char * result;

  arg1 = (inworld::LogitBias *) carg1;
  cppresult = (std::string *) & ((arg1)->token_id);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_LogitBias_bias_value_set(SwigObj* carg1, int carg2) {
  inworld::LogitBias *arg1 = (inworld::LogitBias *) 0 ;
  int arg2 ;

  arg1 = (inworld::LogitBias *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->bias_value = arg2;
}


SWIGEXPORTC int inworld_LogitBias_bias_value_get(SwigObj* carg1) {
  int cppresult;
  inworld::LogitBias *arg1 = (inworld::LogitBias *) 0 ;
  int result;

  arg1 = (inworld::LogitBias *) carg1;
  cppresult = (int) ((arg1)->bias_value);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LogitBias_new() {
  inworld::LogitBias *cppresult;
  SwigObj* result;

  cppresult = (inworld::LogitBias *)new inworld::LogitBias();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LogitBias_delete(SwigObj* carg1) {
  inworld::LogitBias *arg1 = (inworld::LogitBias *) 0 ;

  arg1 = (inworld::LogitBias *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TextGenerationConfig_max_new_tokens_set(SwigObj* carg1, int carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  int arg2 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_new_tokens = arg2;
}


SWIGEXPORTC int inworld_TextGenerationConfig_max_new_tokens_get(SwigObj* carg1) {
  int cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  int result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (int) ((arg1)->max_new_tokens);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_max_prompt_length_set(SwigObj* carg1, int carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  int arg2 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_prompt_length = arg2;
}


SWIGEXPORTC int inworld_TextGenerationConfig_max_prompt_length_get(SwigObj* carg1) {
  int cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  int result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (int) ((arg1)->max_prompt_length);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_temperature_set(SwigObj* carg1, float carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORTC float inworld_TextGenerationConfig_temperature_get(SwigObj* carg1) {
  float cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (float) ((arg1)->temperature);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_top_p_set(SwigObj* carg1, float carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->top_p = arg2;
}


SWIGEXPORTC float inworld_TextGenerationConfig_top_p_get(SwigObj* carg1) {
  float cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (float) ((arg1)->top_p);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_repetition_penalty_set(SwigObj* carg1, float carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->repetition_penalty = arg2;
}


SWIGEXPORTC float inworld_TextGenerationConfig_repetition_penalty_get(SwigObj* carg1) {
  float cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (float) ((arg1)->repetition_penalty);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_frequency_penalty_set(SwigObj* carg1, float carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->frequency_penalty = arg2;
}


SWIGEXPORTC float inworld_TextGenerationConfig_frequency_penalty_get(SwigObj* carg1) {
  float cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (float) ((arg1)->frequency_penalty);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_presence_penalty_set(SwigObj* carg1, float carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->presence_penalty = arg2;
}


SWIGEXPORTC float inworld_TextGenerationConfig_presence_penalty_get(SwigObj* carg1) {
  float cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  float result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (float) ((arg1)->presence_penalty);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_stop_sequences_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->stop_sequences = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TextGenerationConfig_stop_sequences_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->stop_sequences);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_seed_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  std::optional< int > *arg2 = (std::optional< int > *) 0 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (std::optional< int > *) carg2;
  if (arg1) (arg1)->seed = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TextGenerationConfig_seed_get(SwigObj* carg1) {
  std::optional< int > *cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (std::optional< int > *)& ((arg1)->seed);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_logit_bias_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  std::vector< inworld::LogitBias > *arg2 = (std::vector< inworld::LogitBias > *) 0 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (std::vector< inworld::LogitBias > *) carg2;
  if (arg1) (arg1)->logit_bias = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TextGenerationConfig_logit_bias_get(SwigObj* carg1) {
  std::vector< inworld::LogitBias > *cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (std::vector< inworld::LogitBias > *)& ((arg1)->logit_bias);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_TextGenerationConfig_HasSeed(SwigObj* carg1) {
  bool cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  bool result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (bool)inworld_inworld_TextGenerationConfig_HasSeed__SWIG((inworld::TextGenerationConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC int inworld_TextGenerationConfig_GetSeed(SwigObj* carg1) {
  int cppresult;
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  int result;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  cppresult = (int)inworld_inworld_TextGenerationConfig_GetSeed__SWIG((inworld::TextGenerationConfig const *)arg1);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_SetSeed(SwigObj* carg1, int carg2) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;
  int arg2 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  arg2 = (int) carg2;
  inworld_inworld_TextGenerationConfig_SetSeed__SWIG(arg1,arg2);
}


SWIGEXPORTC void inworld_TextGenerationConfig_ClearSeed(SwigObj* carg1) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  inworld_inworld_TextGenerationConfig_ClearSeed__SWIG(arg1);
}


SWIGEXPORTC SwigObj* inworld_TextGenerationConfig_new() {
  inworld::TextGenerationConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::TextGenerationConfig *)new inworld::TextGenerationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextGenerationConfig_delete(SwigObj* carg1) {
  inworld::TextGenerationConfig *arg1 = (inworld::TextGenerationConfig *) 0 ;

  arg1 = (inworld::TextGenerationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Tool_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Tool *arg1 = (inworld::Tool *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Tool *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_Tool_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::Tool *arg1 = (inworld::Tool *) 0 ;
  const char * result;

  arg1 = (inworld::Tool *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_Tool_description_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Tool *arg1 = (inworld::Tool *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Tool *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORTC const char * inworld_Tool_description_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::Tool *arg1 = (inworld::Tool *) 0 ;
  const char * result;

  arg1 = (inworld::Tool *) carg1;
  cppresult = (std::string *) & ((arg1)->description);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_Tool_SetPropertiesFromString(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Tool *arg1 = (inworld::Tool *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Tool *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  inworld_inworld_Tool_SetPropertiesFromString__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC const char * inworld_Tool_GetPropertiesAsString(SwigObj* carg1) {
  std::string cppresult;
  inworld::Tool *arg1 = (inworld::Tool *) 0 ;
  const char * result;

  arg1 = (inworld::Tool *) carg1;
  cppresult = inworld_inworld_Tool_GetPropertiesAsString__SWIG((inworld::Tool const *)arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_Tool_new() {
  inworld::Tool *cppresult;
  SwigObj* result;

  cppresult = (inworld::Tool *)new inworld::Tool();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Tool_delete(SwigObj* carg1) {
  inworld::Tool *arg1 = (inworld::Tool *) 0 ;

  arg1 = (inworld::Tool *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_FunctionChoice_type_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::FunctionChoice *arg1 = (inworld::FunctionChoice *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::FunctionChoice *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORTC const char * inworld_FunctionChoice_type_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::FunctionChoice *arg1 = (inworld::FunctionChoice *) 0 ;
  const char * result;

  arg1 = (inworld::FunctionChoice *) carg1;
  cppresult = (std::string *) & ((arg1)->type);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_FunctionChoice_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::FunctionChoice *arg1 = (inworld::FunctionChoice *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::FunctionChoice *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_FunctionChoice_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::FunctionChoice *arg1 = (inworld::FunctionChoice *) 0 ;
  const char * result;

  arg1 = (inworld::FunctionChoice *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_FunctionChoice_new() {
  inworld::FunctionChoice *cppresult;
  SwigObj* result;

  cppresult = (inworld::FunctionChoice *)new inworld::FunctionChoice();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_FunctionChoice_delete(SwigObj* carg1) {
  inworld::FunctionChoice *arg1 = (inworld::FunctionChoice *) 0 ;

  arg1 = (inworld::FunctionChoice *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_ToolChoice_IsStringChoice(SwigObj* carg1) {
  bool cppresult;
  inworld::ToolChoice *arg1 = (inworld::ToolChoice *) 0 ;
  bool result;

  arg1 = (inworld::ToolChoice *) carg1;
  cppresult = (bool)inworld_inworld_ToolChoice_IsStringChoice__SWIG((inworld::ToolChoice const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ToolChoice_IsFunctionChoice(SwigObj* carg1) {
  bool cppresult;
  inworld::ToolChoice *arg1 = (inworld::ToolChoice *) 0 ;
  bool result;

  arg1 = (inworld::ToolChoice *) carg1;
  cppresult = (bool)inworld_inworld_ToolChoice_IsFunctionChoice__SWIG((inworld::ToolChoice const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_ToolChoice_GetStringChoice(SwigObj* carg1) {
  std::string cppresult;
  inworld::ToolChoice *arg1 = (inworld::ToolChoice *) 0 ;
  const char * result;

  arg1 = (inworld::ToolChoice *) carg1;
  cppresult = inworld_inworld_ToolChoice_GetStringChoice__SWIG((inworld::ToolChoice const *)arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ToolChoice_GetFunctionChoice(SwigObj* carg1) {
  inworld::FunctionChoice cppresult;
  inworld::ToolChoice *arg1 = (inworld::ToolChoice *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ToolChoice *) carg1;
  cppresult = inworld_inworld_ToolChoice_GetFunctionChoice__SWIG((inworld::ToolChoice const *)arg1);
  result = (SwigObj*)new inworld::FunctionChoice(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ToolChoice_SetStringChoice(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ToolChoice *arg1 = (inworld::ToolChoice *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ToolChoice *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  inworld_inworld_ToolChoice_SetStringChoice__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ToolChoice_SetFunctionChoice(SwigObj* carg1, SwigObj* carg2) {
  inworld::ToolChoice *arg1 = (inworld::ToolChoice *) 0 ;
  inworld::FunctionChoice *arg2 = 0 ;

  arg1 = (inworld::ToolChoice *) carg1;

  arg2 = (inworld::FunctionChoice *) carg2;

  inworld_inworld_ToolChoice_SetFunctionChoice__SWIG(arg1,(inworld::FunctionChoice const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_ToolChoice_new() {
  inworld::ToolChoice *cppresult;
  SwigObj* result;

  cppresult = (inworld::ToolChoice *)new inworld::ToolChoice();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ToolChoice_delete(SwigObj* carg1) {
  inworld::ToolChoice *arg1 = (inworld::ToolChoice *) 0 ;

  arg1 = (inworld::ToolChoice *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ToolCall_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ToolCall *arg1 = (inworld::ToolCall *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ToolCall *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORTC const char * inworld_ToolCall_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::ToolCall *arg1 = (inworld::ToolCall *) 0 ;
  const char * result;

  arg1 = (inworld::ToolCall *) carg1;
  cppresult = (std::string *) & ((arg1)->id);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_ToolCall_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ToolCall *arg1 = (inworld::ToolCall *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ToolCall *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_ToolCall_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::ToolCall *arg1 = (inworld::ToolCall *) 0 ;
  const char * result;

  arg1 = (inworld::ToolCall *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_ToolCall_args_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ToolCall *arg1 = (inworld::ToolCall *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ToolCall *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->args = *arg2;
}


SWIGEXPORTC const char * inworld_ToolCall_args_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::ToolCall *arg1 = (inworld::ToolCall *) 0 ;
  const char * result;

  arg1 = (inworld::ToolCall *) carg1;
  cppresult = (std::string *) & ((arg1)->args);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ToolCall_new() {
  inworld::ToolCall *cppresult;
  SwigObj* result;

  cppresult = (inworld::ToolCall *)new inworld::ToolCall();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ToolCall_delete(SwigObj* carg1) {
  inworld::ToolCall *arg1 = (inworld::ToolCall *) 0 ;

  arg1 = (inworld::ToolCall *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ImageUrl_url_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ImageUrl *arg1 = (inworld::ImageUrl *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ImageUrl *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORTC const char * inworld_ImageUrl_url_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::ImageUrl *arg1 = (inworld::ImageUrl *) 0 ;
  const char * result;

  arg1 = (inworld::ImageUrl *) carg1;
  cppresult = (std::string *) & ((arg1)->url);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_ImageUrl_detail_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ImageUrl *arg1 = (inworld::ImageUrl *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ImageUrl *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->detail = *arg2;
}


SWIGEXPORTC const char * inworld_ImageUrl_detail_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::ImageUrl *arg1 = (inworld::ImageUrl *) 0 ;
  const char * result;

  arg1 = (inworld::ImageUrl *) carg1;
  cppresult = (std::string *) & ((arg1)->detail);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ImageUrl_new() {
  inworld::ImageUrl *cppresult;
  SwigObj* result;

  cppresult = (inworld::ImageUrl *)new inworld::ImageUrl();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ImageUrl_delete(SwigObj* carg1) {
  inworld::ImageUrl *arg1 = (inworld::ImageUrl *) 0 ;

  arg1 = (inworld::ImageUrl *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_ContentItem_IsText(SwigObj* carg1) {
  bool cppresult;
  inworld::ContentItem *arg1 = (inworld::ContentItem *) 0 ;
  bool result;

  arg1 = (inworld::ContentItem *) carg1;
  cppresult = (bool)inworld_inworld_ContentItem_IsText__SWIG((inworld::ContentItem const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ContentItem_IsImage(SwigObj* carg1) {
  bool cppresult;
  inworld::ContentItem *arg1 = (inworld::ContentItem *) 0 ;
  bool result;

  arg1 = (inworld::ContentItem *) carg1;
  cppresult = (bool)inworld_inworld_ContentItem_IsImage__SWIG((inworld::ContentItem const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_ContentItem_GetText(SwigObj* carg1) {
  std::string cppresult;
  inworld::ContentItem *arg1 = (inworld::ContentItem *) 0 ;
  const char * result;

  arg1 = (inworld::ContentItem *) carg1;
  cppresult = inworld_inworld_ContentItem_GetText__SWIG((inworld::ContentItem const *)arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ContentItem_GetImageUrl(SwigObj* carg1) {
  inworld::ImageUrl cppresult;
  inworld::ContentItem *arg1 = (inworld::ContentItem *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ContentItem *) carg1;
  cppresult = inworld_inworld_ContentItem_GetImageUrl__SWIG((inworld::ContentItem const *)arg1);
  result = (SwigObj*)new inworld::ImageUrl(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ContentItem_SetText(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ContentItem *arg1 = (inworld::ContentItem *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ContentItem *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  inworld_inworld_ContentItem_SetText__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ContentItem_SetImageUrl(SwigObj* carg1, SwigObj* carg2) {
  inworld::ContentItem *arg1 = (inworld::ContentItem *) 0 ;
  inworld::ImageUrl *arg2 = 0 ;

  arg1 = (inworld::ContentItem *) carg1;

  arg2 = (inworld::ImageUrl *) carg2;

  inworld_inworld_ContentItem_SetImageUrl__SWIG(arg1,(inworld::ImageUrl const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_ContentItem_new() {
  inworld::ContentItem *cppresult;
  SwigObj* result;

  cppresult = (inworld::ContentItem *)new inworld::ContentItem();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ContentItem_delete(SwigObj* carg1) {
  inworld::ContentItem *arg1 = (inworld::ContentItem *) 0 ;

  arg1 = (inworld::ContentItem *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Message_role_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Message *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->role = *arg2;
}


SWIGEXPORTC const char * inworld_Message_role_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  const char * result;

  arg1 = (inworld::Message *) carg1;
  cppresult = (std::string *) & ((arg1)->role);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_Message_tool_calls_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  std::vector< inworld::ToolCall > *arg2 = (std::vector< inworld::ToolCall > *) 0 ;

  arg1 = (inworld::Message *) carg1;
  arg2 = (std::vector< inworld::ToolCall > *) carg2;
  if (arg1) (arg1)->tool_calls = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Message_tool_calls_get(SwigObj* carg1) {
  std::vector< inworld::ToolCall > *cppresult;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  SwigObj* result;

  arg1 = (inworld::Message *) carg1;
  cppresult = (std::vector< inworld::ToolCall > *)& ((arg1)->tool_calls);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Message_tool_call_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Message *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->tool_call_id = *arg2;
}


SWIGEXPORTC const char * inworld_Message_tool_call_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  const char * result;

  arg1 = (inworld::Message *) carg1;
  cppresult = (std::string *) & ((arg1)->tool_call_id);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC bool inworld_Message_IsTextContent(SwigObj* carg1) {
  bool cppresult;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  bool result;

  arg1 = (inworld::Message *) carg1;
  cppresult = (bool)inworld_inworld_Message_IsTextContent__SWIG((inworld::Message const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_Message_IsMultimodalContent(SwigObj* carg1) {
  bool cppresult;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  bool result;

  arg1 = (inworld::Message *) carg1;
  cppresult = (bool)inworld_inworld_Message_IsMultimodalContent__SWIG((inworld::Message const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_Message_GetTextContent(SwigObj* carg1) {
  std::string cppresult;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  const char * result;

  arg1 = (inworld::Message *) carg1;
  cppresult = inworld_inworld_Message_GetTextContent__SWIG((inworld::Message const *)arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_Message_GetContentItems(SwigObj* carg1) {
  std::vector< inworld::ContentItem > cppresult;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  SwigObj* result;

  arg1 = (inworld::Message *) carg1;
  cppresult = inworld_inworld_Message_GetContentItems__SWIG((inworld::Message const *)arg1);
  result = (SwigObj*)new std::vector< inworld::ContentItem >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_Message_SetTextContent(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Message *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  inworld_inworld_Message_SetTextContent__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_Message_SetContentItems(SwigObj* carg1, SwigObj* carg2) {
  inworld::Message *arg1 = (inworld::Message *) 0 ;
  std::vector< inworld::ContentItem > *arg2 = 0 ;

  arg1 = (inworld::Message *) carg1;

  arg2 = (std::vector< inworld::ContentItem > *) carg2;

  inworld_inworld_Message_SetContentItems__SWIG(arg1,(std::vector< inworld::ContentItem > const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_Message_new() {
  inworld::Message *cppresult;
  SwigObj* result;

  cppresult = (inworld::Message *)new inworld::Message();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Message_delete(SwigObj* carg1) {
  inworld::Message *arg1 = (inworld::Message *) 0 ;

  arg1 = (inworld::Message *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Content_content_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Content *arg1 = (inworld::Content *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Content *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->content = *arg2;
}


SWIGEXPORTC const char * inworld_Content_content_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::Content *arg1 = (inworld::Content *) 0 ;
  const char * result;

  arg1 = (inworld::Content *) carg1;
  cppresult = (std::string *) & ((arg1)->content);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_Content_tool_calls_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::Content *arg1 = (inworld::Content *) 0 ;
  std::vector< inworld::ToolCall > *arg2 = (std::vector< inworld::ToolCall > *) 0 ;

  arg1 = (inworld::Content *) carg1;
  arg2 = (std::vector< inworld::ToolCall > *) carg2;
  if (arg1) (arg1)->tool_calls = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Content_tool_calls_get(SwigObj* carg1) {
  std::vector< inworld::ToolCall > *cppresult;
  inworld::Content *arg1 = (inworld::Content *) 0 ;
  SwigObj* result;

  arg1 = (inworld::Content *) carg1;
  cppresult = (std::vector< inworld::ToolCall > *)& ((arg1)->tool_calls);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Content_new() {
  inworld::Content *cppresult;
  SwigObj* result;

  cppresult = (inworld::Content *)new inworld::Content();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Content_delete(SwigObj* carg1) {
  inworld::Content *arg1 = (inworld::Content *) 0 ;

  arg1 = (inworld::Content *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LLMInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::LLMInterface > *smartarg1 = 0 ;
  inworld::LLMInterface *arg1 = (inworld::LLMInterface *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::LLMInterface > *)carg1;
  arg1 = (inworld::LLMInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_LLMInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::LLMInterface const > *smartarg1 = 0 ;
  inworld::LLMInterface *arg1 = (inworld::LLMInterface *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::LLMInterface > *)carg1;
  arg1 = (inworld::LLMInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_LLMInterface_is_valid__SWIG((inworld::LLMInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMInterface_GenerateContent_rcstd_string_rcinworld_TextGenerationConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::LLMInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::LLMInterface *arg1 = (inworld::LLMInterface *) 0 ;
  std::string *arg2 = 0 ;
  inworld::TextGenerationConfig *arg3 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::LLMInterface > *)carg1;
  arg1 = (inworld::LLMInterface *)(smartarg1 ? smartarg1->get() : 0);

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::TextGenerationConfig *) carg3;

  cppresult = inworld_inworld_LLMInterface_GenerateContent__SWIG_0((inworld::LLMInterface const *)arg1,(std::string const &)*arg2,(inworld::TextGenerationConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMInterface_GenerateContent_rcstd_vector_Sl_inworld_Message_Sg__rcinworld_TextGenerationConfig(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::LLMInterface const > *smartarg1 = 0 ;
  inworld::LLMInterface *arg1 = (inworld::LLMInterface *) 0 ;
  std::vector< inworld::Message > *arg2 = 0 ;
  inworld::TextGenerationConfig *arg3 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::LLMInterface > *)carg1;
  arg1 = (inworld::LLMInterface *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (std::vector< inworld::Message > *) carg2;


  arg3 = (inworld::TextGenerationConfig *) carg3;

  cppresult = inworld_inworld_LLMInterface_GenerateContent__SWIG_1((inworld::LLMInterface const *)arg1,(std::vector< inworld::Message > const &)*arg2,(inworld::TextGenerationConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMInterface_GenerateContent_rcstd_vector_Sl_inworld_Message_Sg__rcinworld_TextGenerationConfig_rcstd_vector_Sl_inworld_Tool_Sg_(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::LLMInterface const > *smartarg1 = 0 ;
  inworld::LLMInterface *arg1 = (inworld::LLMInterface *) 0 ;
  std::vector< inworld::Message > *arg2 = 0 ;
  inworld::TextGenerationConfig *arg3 = 0 ;
  std::vector< inworld::Tool > *arg4 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::LLMInterface > *)carg1;
  arg1 = (inworld::LLMInterface *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (std::vector< inworld::Message > *) carg2;


  arg3 = (inworld::TextGenerationConfig *) carg3;


  arg4 = (std::vector< inworld::Tool > *) carg4;

  cppresult = inworld_inworld_LLMInterface_GenerateContent__SWIG_2((inworld::LLMInterface const *)arg1,(std::vector< inworld::Message > const &)*arg2,(inworld::TextGenerationConfig const &)*arg3,(std::vector< inworld::Tool > const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMInterface_GenerateContent_rcstd_vector_Sl_inworld_Message_Sg__rcinworld_TextGenerationConfig_rcstd_vector_Sl_inworld_Tool_Sg__rcinworld_ToolChoice(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4, SwigObj* carg5) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::LLMInterface const > *smartarg1 = 0 ;
  inworld::LLMInterface *arg1 = (inworld::LLMInterface *) 0 ;
  std::vector< inworld::Message > *arg2 = 0 ;
  inworld::TextGenerationConfig *arg3 = 0 ;
  std::vector< inworld::Tool > *arg4 = 0 ;
  inworld::ToolChoice *arg5 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::LLMInterface > *)carg1;
  arg1 = (inworld::LLMInterface *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (std::vector< inworld::Message > *) carg2;


  arg3 = (inworld::TextGenerationConfig *) carg3;


  arg4 = (std::vector< inworld::Tool > *) carg4;


  arg5 = (inworld::ToolChoice *) carg5;

  cppresult = inworld_inworld_LLMInterface_GenerateContent__SWIG_3((inworld::LLMInterface const *)arg1,(std::vector< inworld::Message > const &)*arg2,(inworld::TextGenerationConfig const &)*arg3,(std::vector< inworld::Tool > const &)*arg4,(inworld::ToolChoice const &)*arg5);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMInterface_model_properties(SwigObj* carg1) {
  inworld::ModelProperties cppresult;
  std::shared_ptr< inworld::LLMInterface const > *smartarg1 = 0 ;
  inworld::LLMInterface *arg1 = (inworld::LLMInterface *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::LLMInterface > *)carg1;
  arg1 = (inworld::LLMInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::LLMInterface const *)arg1)->model_properties();
  result = (SwigObj*)new inworld::ModelProperties(cppresult);
  return result;
}


SWIGEXPORTC void inworld_IntentMatch_intent_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::IntentMatch *arg1 = (inworld::IntentMatch *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::IntentMatch *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->intent_name = *arg2;
}


SWIGEXPORTC const char * inworld_IntentMatch_intent_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::IntentMatch *arg1 = (inworld::IntentMatch *) 0 ;
  const char * result;

  arg1 = (inworld::IntentMatch *) carg1;
  cppresult = (std::string *) & ((arg1)->intent_name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_IntentMatch_score_set(SwigObj* carg1, float carg2) {
  inworld::IntentMatch *arg1 = (inworld::IntentMatch *) 0 ;
  float arg2 ;

  arg1 = (inworld::IntentMatch *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORTC float inworld_IntentMatch_score_get(SwigObj* carg1) {
  float cppresult;
  inworld::IntentMatch *arg1 = (inworld::IntentMatch *) 0 ;
  float result;

  arg1 = (inworld::IntentMatch *) carg1;
  cppresult = (float) ((arg1)->score);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentMatch_new() {
  inworld::IntentMatch *cppresult;
  SwigObj* result;

  cppresult = (inworld::IntentMatch *)new inworld::IntentMatch();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentMatch_delete(SwigObj* carg1) {
  inworld::IntentMatch *arg1 = (inworld::IntentMatch *) 0 ;

  arg1 = (inworld::IntentMatch *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_EmbeddingMatcherConfig_similarity_threshold_set(SwigObj* carg1, float carg2) {
  inworld::EmbeddingMatcherConfig *arg1 = (inworld::EmbeddingMatcherConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::EmbeddingMatcherConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->similarity_threshold = arg2;
}


SWIGEXPORTC float inworld_EmbeddingMatcherConfig_similarity_threshold_get(SwigObj* carg1) {
  float cppresult;
  inworld::EmbeddingMatcherConfig *arg1 = (inworld::EmbeddingMatcherConfig *) 0 ;
  float result;

  arg1 = (inworld::EmbeddingMatcherConfig *) carg1;
  cppresult = (float) ((arg1)->similarity_threshold);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_EmbeddingMatcherConfig_new() {
  inworld::EmbeddingMatcherConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::EmbeddingMatcherConfig *)new inworld::EmbeddingMatcherConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_EmbeddingMatcherConfig_delete(SwigObj* carg1) {
  inworld::EmbeddingMatcherConfig *arg1 = (inworld::EmbeddingMatcherConfig *) 0 ;

  arg1 = (inworld::EmbeddingMatcherConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LlmMatcherConfig_generation_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;
  inworld::TextGenerationConfig *arg2 = (inworld::TextGenerationConfig *) 0 ;

  arg1 = (inworld::LlmMatcherConfig *) carg1;
  arg2 = (inworld::TextGenerationConfig *) carg2;
  if (arg1) (arg1)->generation_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LlmMatcherConfig_generation_config_get(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::LlmMatcherConfig *) carg1;
  cppresult = (inworld::TextGenerationConfig *)& ((arg1)->generation_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LlmMatcherConfig_prompt_template_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::LlmMatcherConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->prompt_template = *arg2;
}


SWIGEXPORTC const char * inworld_LlmMatcherConfig_prompt_template_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;
  const char * result;

  arg1 = (inworld::LlmMatcherConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->prompt_template);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_LlmMatcherConfig_embedding_similarity_threshold_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;
  std::optional< float > *arg2 = (std::optional< float > *) 0 ;

  arg1 = (inworld::LlmMatcherConfig *) carg1;
  arg2 = (std::optional< float > *) carg2;
  if (arg1) (arg1)->embedding_similarity_threshold = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LlmMatcherConfig_embedding_similarity_threshold_get(SwigObj* carg1) {
  std::optional< float > *cppresult;
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::LlmMatcherConfig *) carg1;
  cppresult = (std::optional< float > *)& ((arg1)->embedding_similarity_threshold);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LlmMatcherConfig_max_embedding_matches_for_llm_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;
  std::optional< int > *arg2 = (std::optional< int > *) 0 ;

  arg1 = (inworld::LlmMatcherConfig *) carg1;
  arg2 = (std::optional< int > *) carg2;
  if (arg1) (arg1)->max_embedding_matches_for_llm = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LlmMatcherConfig_max_embedding_matches_for_llm_get(SwigObj* carg1) {
  std::optional< int > *cppresult;
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::LlmMatcherConfig *) carg1;
  cppresult = (std::optional< int > *)& ((arg1)->max_embedding_matches_for_llm);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LlmMatcherConfig_new() {
  inworld::LlmMatcherConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::LlmMatcherConfig *)new inworld::LlmMatcherConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LlmMatcherConfig_delete(SwigObj* carg1) {
  inworld::LlmMatcherConfig *arg1 = (inworld::LlmMatcherConfig *) 0 ;

  arg1 = (inworld::LlmMatcherConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_IntentMatcherConfig_embedding_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::IntentMatcherConfig *arg1 = (inworld::IntentMatcherConfig *) 0 ;
  std::optional< inworld::EmbeddingMatcherConfig > *arg2 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;

  arg1 = (inworld::IntentMatcherConfig *) carg1;
  arg2 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg2;
  if (arg1) (arg1)->embedding = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherConfig_embedding_get(SwigObj* carg1) {
  std::optional< inworld::EmbeddingMatcherConfig > *cppresult;
  inworld::IntentMatcherConfig *arg1 = (inworld::IntentMatcherConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::IntentMatcherConfig *) carg1;
  cppresult = (std::optional< inworld::EmbeddingMatcherConfig > *)& ((arg1)->embedding);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentMatcherConfig_llm_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::IntentMatcherConfig *arg1 = (inworld::IntentMatcherConfig *) 0 ;
  std::optional< inworld::LlmMatcherConfig > *arg2 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;

  arg1 = (inworld::IntentMatcherConfig *) carg1;
  arg2 = (std::optional< inworld::LlmMatcherConfig > *) carg2;
  if (arg1) (arg1)->llm = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherConfig_llm_get(SwigObj* carg1) {
  std::optional< inworld::LlmMatcherConfig > *cppresult;
  inworld::IntentMatcherConfig *arg1 = (inworld::IntentMatcherConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::IntentMatcherConfig *) carg1;
  cppresult = (std::optional< inworld::LlmMatcherConfig > *)& ((arg1)->llm);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentMatcherConfig_top_n_intents_set(SwigObj* carg1, int carg2) {
  inworld::IntentMatcherConfig *arg1 = (inworld::IntentMatcherConfig *) 0 ;
  int arg2 ;

  arg1 = (inworld::IntentMatcherConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->top_n_intents = arg2;
}


SWIGEXPORTC int inworld_IntentMatcherConfig_top_n_intents_get(SwigObj* carg1) {
  int cppresult;
  inworld::IntentMatcherConfig *arg1 = (inworld::IntentMatcherConfig *) 0 ;
  int result;

  arg1 = (inworld::IntentMatcherConfig *) carg1;
  cppresult = (int) ((arg1)->top_n_intents);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherConfig_new() {
  inworld::IntentMatcherConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::IntentMatcherConfig *)new inworld::IntentMatcherConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentMatcherConfig_delete(SwigObj* carg1) {
  inworld::IntentMatcherConfig *arg1 = (inworld::IntentMatcherConfig *) 0 ;

  arg1 = (inworld::IntentMatcherConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_IntentMatcherInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::IntentMatcherInterface > *smartarg1 = 0 ;
  inworld::IntentMatcherInterface *arg1 = (inworld::IntentMatcherInterface *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::IntentMatcherInterface > *)carg1;
  arg1 = (inworld::IntentMatcherInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_IntentMatcherInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::IntentMatcherInterface const > *smartarg1 = 0 ;
  inworld::IntentMatcherInterface *arg1 = (inworld::IntentMatcherInterface *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::IntentMatcherInterface > *)carg1;
  arg1 = (inworld::IntentMatcherInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_IntentMatcherInterface_is_valid__SWIG((inworld::IntentMatcherInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherInterface_MatchIntents(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::vector< inworld::IntentMatch > > cppresult;
  std::shared_ptr< inworld::IntentMatcherInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::IntentMatcherInterface *arg1 = (inworld::IntentMatcherInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::IntentMatcherInterface > *)carg1;
  arg1 = (inworld::IntentMatcherInterface *)(smartarg1 ? smartarg1->get() : 0);

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_IntentMatcherInterface_MatchIntents__SWIG((inworld::IntentMatcherInterface const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::vector< inworld::IntentMatch > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_new() {
  std::optional< inworld::LlmMatcherConfig > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< inworld::LlmMatcherConfig > *)new std::optional< inworld::LlmMatcherConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_new_rcinworld_LlmMatcherConfig(SwigObj* carg1) {
  std::optional< inworld::LlmMatcherConfig > *cppresult;
  inworld::LlmMatcherConfig *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::LlmMatcherConfig *) carg1;

  cppresult = (std::optional< inworld::LlmMatcherConfig > *)new std::optional< inworld::LlmMatcherConfig >((inworld::LlmMatcherConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_copy(SwigObj* carg1) {
  std::optional< inworld::LlmMatcherConfig > *cppresult;
  std::optional< inworld::LlmMatcherConfig > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;

  cppresult = (std::optional< inworld::LlmMatcherConfig > *)new std::optional< inworld::LlmMatcherConfig >((std::optional< inworld::LlmMatcherConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LlmMatcherConfig_delete(SwigObj* carg1) {
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_LlmMatcherConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;
  bool result;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::LlmMatcherConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_value(SwigObj* carg1) {
  inworld::LlmMatcherConfig *cppresult;
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;
  cppresult = (inworld::LlmMatcherConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_valueConst(SwigObj* carg1) {
  inworld::LlmMatcherConfig *cppresult;
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;
  cppresult = (inworld::LlmMatcherConfig *) &((std::optional< inworld::LlmMatcherConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::LlmMatcherConfig cppresult;
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;
  inworld::LlmMatcherConfig *arg2 = 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;

  arg2 = (inworld::LlmMatcherConfig *) carg2;

  cppresult = ((std::optional< inworld::LlmMatcherConfig > const *)arg1)->value_or((inworld::LlmMatcherConfig const &)*arg2);
  result = (SwigObj*)new inworld::LlmMatcherConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_LlmMatcherConfig_reset(SwigObj* carg1) {
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_get(SwigObj* carg1) {
  inworld::LlmMatcherConfig *cppresult;
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;
  cppresult = (inworld::LlmMatcherConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_getConst(SwigObj* carg1) {
  inworld::LlmMatcherConfig *cppresult;
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;
  cppresult = (inworld::LlmMatcherConfig *) &((std::optional< inworld::LlmMatcherConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LlmMatcherConfig_get_value(SwigObj* carg1) {
  inworld::LlmMatcherConfig *cppresult;
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;
  cppresult = (inworld::LlmMatcherConfig *) &inworld_std_optional_Sl_inworld_LlmMatcherConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LlmMatcherConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::LlmMatcherConfig > *arg1 = (std::optional< inworld::LlmMatcherConfig > *) 0 ;
  inworld::LlmMatcherConfig *arg2 = 0 ;

  arg1 = (std::optional< inworld::LlmMatcherConfig > *) carg1;

  arg2 = (inworld::LlmMatcherConfig *) carg2;

  inworld_std_optional_Sl_inworld_LlmMatcherConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_new() {
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *)new std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_new_rcstd_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg_(SwigObj* carg1) {
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > empty1 ;
  std::shared_ptr< inworld::TextEmbedderInterface const > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr<const inworld::TextEmbedderInterface>*)carg1 : &empty1;
  cppresult = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *)new std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > >((std::shared_ptr< inworld::TextEmbedderInterface const > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_copy(SwigObj* carg1) {
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *cppresult;
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;

  cppresult = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *)new std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > >((std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_TextEmbedderInterface_delete(SwigObj* carg1) {
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_TextEmbedderInterface_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  bool result;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = (bool)((std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_value(SwigObj* carg1) {
  std::shared_ptr< inworld::TextEmbedderInterface const > *cppresult;
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = (std::shared_ptr< inworld::TextEmbedderInterface const > *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_valueConst(SwigObj* carg1) {
  std::shared_ptr< inworld::TextEmbedderInterface const > *cppresult;
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = (std::shared_ptr< inworld::TextEmbedderInterface const > *) &((std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > const *)arg1)->value();
  result = (SwigObj*)(*cppresult ? cppresult : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_value_or(SwigObj* carg1, SwigObj* carg2) {
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface const > > cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > empty2 ;
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  std::shared_ptr< inworld::TextEmbedderInterface const > *arg2 = 0 ;
  SwigObj* result;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;

  arg2 = carg2 ? (std::shared_ptr<const inworld::TextEmbedderInterface>*)carg2 : &empty2;
  cppresult = ((std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > const *)arg1)->value_or((std::shared_ptr< inworld::TextEmbedderInterface const > const &)*arg2);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::TextEmbedderInterface const >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_optional_TextEmbedderInterface_reset(SwigObj* carg1) {
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_get(SwigObj* carg1) {
  std::shared_ptr< inworld::TextEmbedderInterface const > *cppresult;
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = (std::shared_ptr< inworld::TextEmbedderInterface const > *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_getConst(SwigObj* carg1) {
  std::shared_ptr< inworld::TextEmbedderInterface const > *cppresult;
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = (std::shared_ptr< inworld::TextEmbedderInterface const > *) &((std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > const *)arg1)->operator *();
  result = (SwigObj*)(*cppresult ? cppresult : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderInterface_get_value(SwigObj* carg1) {
  std::shared_ptr< inworld::TextEmbedderInterface const > *cppresult;
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;
  cppresult = (std::shared_ptr< inworld::TextEmbedderInterface const > *) &inworld_std_optional_Sl_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_TextEmbedderInterface_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) 0 ;
  std::shared_ptr< inworld::TextEmbedderInterface const > *arg2 = 0 ;

  arg1 = (std::optional< std::shared_ptr< inworld::TextEmbedderInterface const > > *) carg1;

  arg2 = (std::shared_ptr< inworld::TextEmbedderInterface const > *) carg2;

  inworld_std_optional_Sl_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_new() {
  std::optional< inworld::EmbeddingMatcherConfig > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< inworld::EmbeddingMatcherConfig > *)new std::optional< inworld::EmbeddingMatcherConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_new_rcinworld_EmbeddingMatcherConfig(SwigObj* carg1) {
  std::optional< inworld::EmbeddingMatcherConfig > *cppresult;
  inworld::EmbeddingMatcherConfig *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::EmbeddingMatcherConfig *) carg1;

  cppresult = (std::optional< inworld::EmbeddingMatcherConfig > *)new std::optional< inworld::EmbeddingMatcherConfig >((inworld::EmbeddingMatcherConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_copy(SwigObj* carg1) {
  std::optional< inworld::EmbeddingMatcherConfig > *cppresult;
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;

  cppresult = (std::optional< inworld::EmbeddingMatcherConfig > *)new std::optional< inworld::EmbeddingMatcherConfig >((std::optional< inworld::EmbeddingMatcherConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_EmbeddingMatcherConfig_delete(SwigObj* carg1) {
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_EmbeddingMatcherConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;
  bool result;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::EmbeddingMatcherConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_value(SwigObj* carg1) {
  inworld::EmbeddingMatcherConfig *cppresult;
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;
  cppresult = (inworld::EmbeddingMatcherConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_valueConst(SwigObj* carg1) {
  inworld::EmbeddingMatcherConfig *cppresult;
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;
  cppresult = (inworld::EmbeddingMatcherConfig *) &((std::optional< inworld::EmbeddingMatcherConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::EmbeddingMatcherConfig cppresult;
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;
  inworld::EmbeddingMatcherConfig *arg2 = 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;

  arg2 = (inworld::EmbeddingMatcherConfig *) carg2;

  cppresult = ((std::optional< inworld::EmbeddingMatcherConfig > const *)arg1)->value_or((inworld::EmbeddingMatcherConfig const &)*arg2);
  result = (SwigObj*)new inworld::EmbeddingMatcherConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_EmbeddingMatcherConfig_reset(SwigObj* carg1) {
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_get(SwigObj* carg1) {
  inworld::EmbeddingMatcherConfig *cppresult;
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;
  cppresult = (inworld::EmbeddingMatcherConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_getConst(SwigObj* carg1) {
  inworld::EmbeddingMatcherConfig *cppresult;
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;
  cppresult = (inworld::EmbeddingMatcherConfig *) &((std::optional< inworld::EmbeddingMatcherConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_EmbeddingMatcherConfig_get_value(SwigObj* carg1) {
  inworld::EmbeddingMatcherConfig *cppresult;
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;
  cppresult = (inworld::EmbeddingMatcherConfig *) &inworld_std_optional_Sl_inworld_EmbeddingMatcherConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_EmbeddingMatcherConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::EmbeddingMatcherConfig > *arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) 0 ;
  inworld::EmbeddingMatcherConfig *arg2 = 0 ;

  arg1 = (std::optional< inworld::EmbeddingMatcherConfig > *) carg1;

  arg2 = (inworld::EmbeddingMatcherConfig *) carg2;

  inworld_std_optional_Sl_inworld_EmbeddingMatcherConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_InputStream_TTSOutput_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::graphs::TTSOutput > *arg1 = (inworld::InputStream< inworld::graphs::TTSOutput > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::InputStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_InputStream_TTSOutput_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::graphs::TTSOutput > *arg1 = (inworld::InputStream< inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::InputStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_InputStream_TTSOutput_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::graphs::TTSOutput > *arg1 = (inworld::InputStream< inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::InputStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_InputStream_TTSOutput_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > const > *smartarg1 = 0 ;
  inworld::InputStream< inworld::graphs::TTSOutput > *arg1 = (inworld::InputStream< inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::InputStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::InputStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__is_valid__SWIG((inworld::InputStream< inworld::graphs::TTSOutput > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_InputStream_string_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::InputStream< std::string > > *smartarg1 = 0 ;
  inworld::InputStream< std::string > *arg1 = (inworld::InputStream< std::string > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::InputStream<std::string> > *)carg1;
  arg1 = (inworld::InputStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_InputStream_string_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > *smartarg1 = 0 ;
  inworld::InputStream< std::string > *arg1 = (inworld::InputStream< std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<std::string> > *)carg1;
  arg1 = (inworld::InputStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_InputStream_string_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > *smartarg1 = 0 ;
  inworld::InputStream< std::string > *arg1 = (inworld::InputStream< std::string > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<std::string> > *)carg1;
  arg1 = (inworld::InputStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_InputStream_string_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< std::string > const > *smartarg1 = 0 ;
  inworld::InputStream< std::string > *arg1 = (inworld::InputStream< std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::InputStream<std::string> > *)carg1;
  arg1 = (inworld::InputStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_InputStream_Sl_std_string_Sg__is_valid__SWIG((inworld::InputStream< std::string > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_InputStream_SpeechChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::SpeechChunk > *arg1 = (inworld::InputStream< inworld::SpeechChunk > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::InputStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_InputStream_SpeechChunk_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::SpeechChunk > *arg1 = (inworld::InputStream< inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::InputStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_InputStream_SpeechChunk_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::InputStream< inworld::SpeechChunk > *arg1 = (inworld::InputStream< inworld::SpeechChunk > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::InputStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_InputStream_SpeechChunk_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > const > *smartarg1 = 0 ;
  inworld::InputStream< inworld::SpeechChunk > *arg1 = (inworld::InputStream< inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::InputStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::InputStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__is_valid__SWIG((inworld::InputStream< inworld::SpeechChunk > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_InputStream_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_InputStream_BaseData_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_InputStream_BaseData_Read(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_InputStream_BaseData_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > const > *smartarg1 = 0 ;
  inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__is_valid__SWIG((inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_string_new() {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_string_new_rcstd_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  std::shared_ptr< inworld::InputStream< std::string > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >((std::shared_ptr< inworld::InputStream< std::string > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_string_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_InputStream_string_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_string_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_string_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< std::string > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_InputStream_string_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_SpeechChunk_new() {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_SpeechChunk_new_rcstd_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >((std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_SpeechChunk_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_InputStream_SpeechChunk_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_SpeechChunk_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_SpeechChunk_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_InputStream_SpeechChunk_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_BaseData_new() {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_BaseData_new_rcstd_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >((std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_BaseData_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_InputStream_BaseData_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_BaseData_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_BaseData_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_InputStream_BaseData_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_TTSOutput_new() {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_TTSOutput_new_rcstd_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >((std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_TTSOutput_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_InputStream_TTSOutput_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_TTSOutput_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_InputStream_TTSOutput_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_InputStream_TTSOutput_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_TTSOutput_Create() {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > > > cppresult;
  SwigObj* result;

  cppresult = inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_TTSOutput_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_BlockingStream_TTSOutput_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_TTSOutput_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_BlockingStream_TTSOutput_Write(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *) 0 ;
  SwigValueWrapper< inworld::graphs::TTSOutput > arg2 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *(inworld::graphs::TTSOutput *)carg2;
  cppresult = (bool)(arg1)->Write(SWIG_STD_MOVE(arg2));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_TTSOutput_Close(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (arg1)->Close();
}


SWIGEXPORTC void inworld_BlockingStream_TTSOutput_Close_rcabsl_Status(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *) 0 ;
  absl::Status *arg2 = 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (absl::Status *) carg2;

  (arg1)->Close((absl::Status const &)*arg2);
}


SWIGEXPORTC bool inworld_BlockingStream_TTSOutput_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > const > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_swig_helpers_SwigBlockingStream_Sl_inworld_graphs_TTSOutput_Sg__is_valid__SWIG((inworld::swig_helpers::SwigBlockingStream< inworld::graphs::TTSOutput > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_Content_Create() {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > > > cppresult;
  SwigObj* result;

  cppresult = inworld::swig_helpers::SwigBlockingStream< inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_Content_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::Content > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::Content > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_BlockingStream_Content_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::Content > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_Content_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::Content > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::Content > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_BlockingStream_Content_Write(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::Content > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::Content > *) 0 ;
  inworld::Content arg2 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *(inworld::Content *)carg2;
  cppresult = (bool)(arg1)->Write(SWIG_STD_MOVE(arg2));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_Content_Close(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::Content > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::Content > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (arg1)->Close();
}


SWIGEXPORTC void inworld_BlockingStream_Content_Close_rcabsl_Status(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::Content > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::Content > *) 0 ;
  absl::Status *arg2 = 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (absl::Status *) carg2;

  (arg1)->Close((absl::Status const &)*arg2);
}


SWIGEXPORTC bool inworld_BlockingStream_Content_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::Content > const > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::Content > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::SwigBlockingStream<inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_swig_helpers_SwigBlockingStream_Sl_inworld_Content_Sg__is_valid__SWIG((inworld::swig_helpers::SwigBlockingStream< inworld::Content > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_SpeechChunk_Create() {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > > > cppresult;
  SwigObj* result;

  cppresult = inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_SpeechChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_BlockingStream_SpeechChunk_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_SpeechChunk_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_BlockingStream_SpeechChunk_Write(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *) 0 ;
  inworld::SpeechChunk arg2 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *(inworld::SpeechChunk *)carg2;
  cppresult = (bool)(arg1)->Write(SWIG_STD_MOVE(arg2));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_SpeechChunk_Close(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (arg1)->Close();
}


SWIGEXPORTC void inworld_BlockingStream_SpeechChunk_Close_rcabsl_Status(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *) 0 ;
  absl::Status *arg2 = 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (absl::Status *) carg2;

  (arg1)->Close((absl::Status const &)*arg2);
}


SWIGEXPORTC bool inworld_BlockingStream_SpeechChunk_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > const > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_swig_helpers_SwigBlockingStream_Sl_inworld_SpeechChunk_Sg__is_valid__SWIG((inworld::swig_helpers::SwigBlockingStream< inworld::SpeechChunk > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_string_Create() {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > > > cppresult;
  SwigObj* result;

  cppresult = inworld::swig_helpers::SwigBlockingStream< std::string >::SWIGTEMPLATEDISAMBIGUATOR Create();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_string_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::string > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::string > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_BlockingStream_string_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::string > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_string_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::string > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::string > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_BlockingStream_string_Write(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::string > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::string > *) 0 ;
  std::string arg2 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);

  if (carg2)
  arg2 = carg2;

  cppresult = (bool)(arg1)->Write(SWIG_STD_MOVE(arg2));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_string_Close(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::string > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::string > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (arg1)->Close();
}


SWIGEXPORTC void inworld_BlockingStream_string_Close_rcabsl_Status(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::string > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::string > *) 0 ;
  absl::Status *arg2 = 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (absl::Status *) carg2;

  (arg1)->Close((absl::Status const &)*arg2);
}


SWIGEXPORTC bool inworld_BlockingStream_string_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::string > const > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::string > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::SwigBlockingStream<std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_swig_helpers_SwigBlockingStream_Sl_std_string_Sg__is_valid__SWIG((inworld::swig_helpers::SwigBlockingStream< std::string > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_BaseData_Create() {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  SwigObj* result;

  cppresult = inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_BlockingStream_BaseData_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BlockingStream_BaseData_Read(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_BlockingStream_BaseData_Write(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::BaseData > empty2 ;
  inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg2 : empty2;
  cppresult = (bool)(arg1)->Write(SWIG_STD_MOVE(arg2));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_BlockingStream_BaseData_Close(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (arg1)->Close();
}


SWIGEXPORTC void inworld_BlockingStream_BaseData_Close_rcabsl_Status(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  absl::Status *arg2 = 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (absl::Status *) carg2;

  (arg1)->Close((absl::Status const &)*arg2);
}


SWIGEXPORTC bool inworld_BlockingStream_BaseData_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > const > *smartarg1 = 0 ;
  inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::SwigBlockingStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_swig_helpers_SwigBlockingStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__is_valid__SWIG((inworld::swig_helpers::SwigBlockingStream< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomStringStreamReadThruWrapper_new() {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomStringStreamReadThruWrapper_new_rcstd_shared_ptr_Sl_inworld_swig_helpers_CustomStringStreamReadThruWrapper_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > empty1 ;
  std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > >((std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomStringStreamReadThruWrapper_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_CustomStringStreamReadThruWrapper_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomStringStreamReadThruWrapper_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomStringStreamReadThruWrapper_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_CustomStringStreamReadThruWrapper_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomStringStreamReadThruExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomStringStreamReadThruExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomStringStreamReadThruExecutor *)new inworld::swig_helpers::CustomStringStreamReadThruExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomStringStreamReadThruExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomStringStreamReadThruExecutor *arg1 = (inworld::swig_helpers::CustomStringStreamReadThruExecutor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomStringStreamReadThruExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomStringStreamReadThruWrapper_Create(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::CustomStringStreamReadThruExecutor *arg2 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::CustomStringStreamReadThruExecutor *) carg2;

  cppresult = inworld::swig_helpers::CustomStringStreamReadThruWrapper::Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::CustomStringStreamReadThruExecutor const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_CustomStringStreamReadThruWrapper_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomStringStreamReadThruWrapper *arg1 = (inworld::swig_helpers::CustomStringStreamReadThruWrapper *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomStringStreamReadThruWrapper *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_CustomStringStreamReadThruWrapper_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomStringStreamReadThruWrapper *arg1 = (inworld::swig_helpers::CustomStringStreamReadThruWrapper *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomStringStreamReadThruWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomStringStreamReadThruWrapper_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomStringStreamReadThruWrapper *arg1 = (inworld::swig_helpers::CustomStringStreamReadThruWrapper *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomStringStreamReadThruWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_CustomStringStreamReadThruWrapper_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomStringStreamReadThruWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomStringStreamReadThruWrapper *arg1 = (inworld::swig_helpers::CustomStringStreamReadThruWrapper *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomStringStreamReadThruWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomStringStreamReadThruWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_swig_helpers_CustomStringStreamReadThruWrapper_is_valid__SWIG((inworld::swig_helpers::CustomStringStreamReadThruWrapper const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_SynthesizedSpeech_PhonemeTimestamp_new() {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *)new std::vector< inworld::SpeechChunk::PhonemeTimestamp >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_SynthesizedSpeech_PhonemeTimestamp_copy(SwigObj* carg1) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *cppresult;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;

  cppresult = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *)new std::vector< inworld::SpeechChunk::PhonemeTimestamp >((std::vector< inworld::SpeechChunk::PhonemeTimestamp > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_SynthesizedSpeech_PhonemeTimestamp_size(SwigObj* carg1) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp >::size_type cppresult;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;
  cppresult = ((std::vector< inworld::SpeechChunk::PhonemeTimestamp > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_SynthesizedSpeech_PhonemeTimestamp_capacity(SwigObj* carg1) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp >::size_type cppresult;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;
  cppresult = ((std::vector< inworld::SpeechChunk::PhonemeTimestamp > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_SynthesizedSpeech_PhonemeTimestamp_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp >::size_type arg2 ;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;
  arg2 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_SynthesizedSpeech_PhonemeTimestamp_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;
  cppresult = (bool)((std::vector< inworld::SpeechChunk::PhonemeTimestamp > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_SynthesizedSpeech_PhonemeTimestamp_clear(SwigObj* carg1) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_SynthesizedSpeech_PhonemeTimestamp_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;

  arg2 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::SpeechChunk::PhonemeTimestamp >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_SynthesizedSpeech_PhonemeTimestamp_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp >::value_type *cppresult;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::SpeechChunk::PhonemeTimestamp >::value_type *) &inworld_std_vector_Sl_inworld_SpeechChunk_PhonemeTimestamp_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_SynthesizedSpeech_PhonemeTimestamp_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;
  int arg2 ;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_SpeechChunk_PhonemeTimestamp_Sg__set__SWIG(arg1,arg2,(inworld::SpeechChunk::PhonemeTimestamp const &)*arg3);
}


SWIGEXPORTC void inworld_vector_SynthesizedSpeech_PhonemeTimestamp_delete(SwigObj* carg1) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;

  arg1 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_SpeechSynthesisPostprocessingConfig_sample_rate_set(SwigObj* carg1, int carg2) {
  inworld::SpeechSynthesisPostprocessingConfig *arg1 = (inworld::SpeechSynthesisPostprocessingConfig *) 0 ;
  int arg2 ;

  arg1 = (inworld::SpeechSynthesisPostprocessingConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->sample_rate = arg2;
}


SWIGEXPORTC int inworld_SpeechSynthesisPostprocessingConfig_sample_rate_get(SwigObj* carg1) {
  int cppresult;
  inworld::SpeechSynthesisPostprocessingConfig *arg1 = (inworld::SpeechSynthesisPostprocessingConfig *) 0 ;
  int result;

  arg1 = (inworld::SpeechSynthesisPostprocessingConfig *) carg1;
  cppresult = (int) ((arg1)->sample_rate);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SpeechSynthesisPostprocessingConfig_new() {
  inworld::SpeechSynthesisPostprocessingConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::SpeechSynthesisPostprocessingConfig *)new inworld::SpeechSynthesisPostprocessingConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechSynthesisPostprocessingConfig_delete(SwigObj* carg1) {
  inworld::SpeechSynthesisPostprocessingConfig *arg1 = (inworld::SpeechSynthesisPostprocessingConfig *) 0 ;

  arg1 = (inworld::SpeechSynthesisPostprocessingConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_SpeechSynthesisInferenceConfig_temperature_set(SwigObj* carg1, float carg2) {
  inworld::SpeechSynthesisInferenceConfig *arg1 = (inworld::SpeechSynthesisInferenceConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::SpeechSynthesisInferenceConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORTC float inworld_SpeechSynthesisInferenceConfig_temperature_get(SwigObj* carg1) {
  float cppresult;
  inworld::SpeechSynthesisInferenceConfig *arg1 = (inworld::SpeechSynthesisInferenceConfig *) 0 ;
  float result;

  arg1 = (inworld::SpeechSynthesisInferenceConfig *) carg1;
  cppresult = (float) ((arg1)->temperature);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechSynthesisInferenceConfig_pitch_set(SwigObj* carg1, float carg2) {
  inworld::SpeechSynthesisInferenceConfig *arg1 = (inworld::SpeechSynthesisInferenceConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::SpeechSynthesisInferenceConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->pitch = arg2;
}


SWIGEXPORTC float inworld_SpeechSynthesisInferenceConfig_pitch_get(SwigObj* carg1) {
  float cppresult;
  inworld::SpeechSynthesisInferenceConfig *arg1 = (inworld::SpeechSynthesisInferenceConfig *) 0 ;
  float result;

  arg1 = (inworld::SpeechSynthesisInferenceConfig *) carg1;
  cppresult = (float) ((arg1)->pitch);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechSynthesisInferenceConfig_speaking_rate_set(SwigObj* carg1, float carg2) {
  inworld::SpeechSynthesisInferenceConfig *arg1 = (inworld::SpeechSynthesisInferenceConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::SpeechSynthesisInferenceConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->speaking_rate = arg2;
}


SWIGEXPORTC float inworld_SpeechSynthesisInferenceConfig_speaking_rate_get(SwigObj* carg1) {
  float cppresult;
  inworld::SpeechSynthesisInferenceConfig *arg1 = (inworld::SpeechSynthesisInferenceConfig *) 0 ;
  float result;

  arg1 = (inworld::SpeechSynthesisInferenceConfig *) carg1;
  cppresult = (float) ((arg1)->speaking_rate);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SpeechSynthesisInferenceConfig_new() {
  inworld::SpeechSynthesisInferenceConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::SpeechSynthesisInferenceConfig *)new inworld::SpeechSynthesisInferenceConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechSynthesisInferenceConfig_delete(SwigObj* carg1) {
  inworld::SpeechSynthesisInferenceConfig *arg1 = (inworld::SpeechSynthesisInferenceConfig *) 0 ;

  arg1 = (inworld::SpeechSynthesisInferenceConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_InworldSpeechSynthesisConfig_model_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::InworldSpeechSynthesisConfig *arg1 = (inworld::InworldSpeechSynthesisConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::InworldSpeechSynthesisConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->model_id = *arg2;
}


SWIGEXPORTC const char * inworld_InworldSpeechSynthesisConfig_model_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::InworldSpeechSynthesisConfig *arg1 = (inworld::InworldSpeechSynthesisConfig *) 0 ;
  const char * result;

  arg1 = (inworld::InworldSpeechSynthesisConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->model_id);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_InworldSpeechSynthesisConfig_postprocessing_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::InworldSpeechSynthesisConfig *arg1 = (inworld::InworldSpeechSynthesisConfig *) 0 ;
  inworld::SpeechSynthesisPostprocessingConfig *arg2 = (inworld::SpeechSynthesisPostprocessingConfig *) 0 ;

  arg1 = (inworld::InworldSpeechSynthesisConfig *) carg1;
  arg2 = (inworld::SpeechSynthesisPostprocessingConfig *) carg2;
  if (arg1) (arg1)->postprocessing = *arg2;
}


SWIGEXPORTC SwigObj* inworld_InworldSpeechSynthesisConfig_postprocessing_get(SwigObj* carg1) {
  inworld::SpeechSynthesisPostprocessingConfig *cppresult;
  inworld::InworldSpeechSynthesisConfig *arg1 = (inworld::InworldSpeechSynthesisConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::InworldSpeechSynthesisConfig *) carg1;
  cppresult = (inworld::SpeechSynthesisPostprocessingConfig *)& ((arg1)->postprocessing);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_InworldSpeechSynthesisConfig_inference_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::InworldSpeechSynthesisConfig *arg1 = (inworld::InworldSpeechSynthesisConfig *) 0 ;
  inworld::SpeechSynthesisInferenceConfig *arg2 = (inworld::SpeechSynthesisInferenceConfig *) 0 ;

  arg1 = (inworld::InworldSpeechSynthesisConfig *) carg1;
  arg2 = (inworld::SpeechSynthesisInferenceConfig *) carg2;
  if (arg1) (arg1)->inference = *arg2;
}


SWIGEXPORTC SwigObj* inworld_InworldSpeechSynthesisConfig_inference_get(SwigObj* carg1) {
  inworld::SpeechSynthesisInferenceConfig *cppresult;
  inworld::InworldSpeechSynthesisConfig *arg1 = (inworld::InworldSpeechSynthesisConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::InworldSpeechSynthesisConfig *) carg1;
  cppresult = (inworld::SpeechSynthesisInferenceConfig *)& ((arg1)->inference);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_InworldSpeechSynthesisConfig_new() {
  inworld::InworldSpeechSynthesisConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::InworldSpeechSynthesisConfig *)new inworld::InworldSpeechSynthesisConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_InworldSpeechSynthesisConfig_delete(SwigObj* carg1) {
  inworld::InworldSpeechSynthesisConfig *arg1 = (inworld::InworldSpeechSynthesisConfig *) 0 ;

  arg1 = (inworld::InworldSpeechSynthesisConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ElevenLabsSpeechSynthesisConfig_query_params_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::ElevenLabsSpeechSynthesisConfig *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) 0 ;
  inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *arg2 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) 0 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) carg1;
  arg2 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) carg2;
  if (arg1) (arg1)->query_params = *arg2;
}


SWIGEXPORTC SwigObj* inworld_ElevenLabsSpeechSynthesisConfig_query_params_get(SwigObj* carg1) {
  inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *cppresult;
  inworld::ElevenLabsSpeechSynthesisConfig *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) carg1;
  cppresult = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *)& ((arg1)->query_params);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ElevenLabsSpeechSynthesisConfig_request_params_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::ElevenLabsSpeechSynthesisConfig *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) 0 ;
  inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *arg2 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) 0 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) carg1;
  arg2 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) carg2;
  if (arg1) (arg1)->request_params = *arg2;
}


SWIGEXPORTC SwigObj* inworld_ElevenLabsSpeechSynthesisConfig_request_params_get(SwigObj* carg1) {
  inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *cppresult;
  inworld::ElevenLabsSpeechSynthesisConfig *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) carg1;
  cppresult = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *)& ((arg1)->request_params);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ElevenLabsSpeechSynthesisConfig_new() {
  inworld::ElevenLabsSpeechSynthesisConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::ElevenLabsSpeechSynthesisConfig *)new inworld::ElevenLabsSpeechSynthesisConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ElevenLabsSpeechSynthesisConfig_delete(SwigObj* carg1) {
  inworld::ElevenLabsSpeechSynthesisConfig *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) 0 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_QueryParams_enable_logging_set(SwigObj* carg1, bool carg2) {
  inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) 0 ;
  bool arg2 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->enable_logging = arg2;
}


SWIGEXPORTC bool inworld_QueryParams_enable_logging_get(SwigObj* carg1) {
  bool cppresult;
  inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) 0 ;
  bool result;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) carg1;
  cppresult = (bool) ((arg1)->enable_logging);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_QueryParams_output_format_set(SwigObj* carg1, int carg2) {
  inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) 0 ;
  enum inworld::ElevenLabsSpeechSynthesisConfig::QueryParams::OutputFormat arg2 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) carg1;
  arg2 = (enum inworld::ElevenLabsSpeechSynthesisConfig::QueryParams::OutputFormat) carg2;
  if (arg1) (arg1)->output_format = arg2;
}


SWIGEXPORTC int inworld_QueryParams_output_format_get(SwigObj* carg1) {
  enum inworld::ElevenLabsSpeechSynthesisConfig::QueryParams::OutputFormat cppresult;
  inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) 0 ;
  int result;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) carg1;
  cppresult = (enum inworld::ElevenLabsSpeechSynthesisConfig::QueryParams::OutputFormat) ((arg1)->output_format);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_QueryParams_new() {
  inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *cppresult;
  SwigObj* result;

  cppresult = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *)new inworld::ElevenLabsSpeechSynthesisConfig::QueryParams();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_QueryParams_delete(SwigObj* carg1) {
  inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) 0 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::QueryParams *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_RequestParams_model_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->model_id = *arg2;
}


SWIGEXPORTC const char * inworld_RequestParams_model_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) 0 ;
  const char * result;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) carg1;
  cppresult = (std::string *) & ((arg1)->model_id);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_RequestParams_apply_text_normalization_set(SwigObj* carg1, int carg2) {
  inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) 0 ;
  enum inworld::ElevenLabsSpeechSynthesisConfig::RequestParams::TextNormalization arg2 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) carg1;
  arg2 = (enum inworld::ElevenLabsSpeechSynthesisConfig::RequestParams::TextNormalization) carg2;
  if (arg1) (arg1)->apply_text_normalization = arg2;
}


SWIGEXPORTC int inworld_RequestParams_apply_text_normalization_get(SwigObj* carg1) {
  enum inworld::ElevenLabsSpeechSynthesisConfig::RequestParams::TextNormalization cppresult;
  inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) 0 ;
  int result;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) carg1;
  cppresult = (enum inworld::ElevenLabsSpeechSynthesisConfig::RequestParams::TextNormalization) ((arg1)->apply_text_normalization);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RequestParams_new() {
  inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *cppresult;
  SwigObj* result;

  cppresult = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *)new inworld::ElevenLabsSpeechSynthesisConfig::RequestParams();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RequestParams_delete(SwigObj* carg1) {
  inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) 0 ;

  arg1 = (inworld::ElevenLabsSpeechSynthesisConfig::RequestParams *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_SpeechSynthesisConfig_inworld_config(SwigObj* carg1) {
  inworld::InworldSpeechSynthesisConfig *cppresult;
  inworld::SpeechSynthesisConfig *arg1 = (inworld::SpeechSynthesisConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::SpeechSynthesisConfig *) carg1;
  cppresult = (inworld::InworldSpeechSynthesisConfig *)inworld_inworld_SpeechSynthesisConfig_inworld_config__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SpeechSynthesisConfig_eleven_labs_config(SwigObj* carg1) {
  inworld::ElevenLabsSpeechSynthesisConfig *cppresult;
  inworld::SpeechSynthesisConfig *arg1 = (inworld::SpeechSynthesisConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::SpeechSynthesisConfig *) carg1;
  cppresult = (inworld::ElevenLabsSpeechSynthesisConfig *)inworld_inworld_SpeechSynthesisConfig_eleven_labs_config__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SpeechSynthesisConfig_new() {
  inworld::SpeechSynthesisConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::SpeechSynthesisConfig *)new inworld::SpeechSynthesisConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechSynthesisConfig_delete(SwigObj* carg1) {
  inworld::SpeechSynthesisConfig *arg1 = (inworld::SpeechSynthesisConfig *) 0 ;

  arg1 = (inworld::SpeechSynthesisConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Voice_speaker_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Voice *arg1 = (inworld::Voice *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::Voice *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->speaker_id = *arg2;
}


SWIGEXPORTC const char * inworld_Voice_speaker_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::Voice *arg1 = (inworld::Voice *) 0 ;
  const char * result;

  arg1 = (inworld::Voice *) carg1;
  cppresult = (std::string *) & ((arg1)->speaker_id);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_Voice_language_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::Voice *arg1 = (inworld::Voice *) 0 ;
  std::optional< inworld::library::Language > *arg2 = (std::optional< inworld::library::Language > *) 0 ;

  arg1 = (inworld::Voice *) carg1;
  arg2 = (std::optional< inworld::library::Language > *) carg2;
  if (arg1) (arg1)->language = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Voice_language_get(SwigObj* carg1) {
  std::optional< inworld::library::Language > *cppresult;
  inworld::Voice *arg1 = (inworld::Voice *) 0 ;
  SwigObj* result;

  arg1 = (inworld::Voice *) carg1;
  cppresult = (std::optional< inworld::library::Language > *)& ((arg1)->language);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Voice_new() {
  inworld::Voice *cppresult;
  SwigObj* result;

  cppresult = (inworld::Voice *)new inworld::Voice();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Voice_delete(SwigObj* carg1) {
  inworld::Voice *arg1 = (inworld::Voice *) 0 ;

  arg1 = (inworld::Voice *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_SpeechChunk_waveform_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::SpeechChunk *arg1 = (inworld::SpeechChunk *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;

  arg1 = (inworld::SpeechChunk *) carg1;
  arg2 = (std::vector< float > *) carg2;
  if (arg1) (arg1)->waveform = *arg2;
}


SWIGEXPORTC SwigObj* inworld_SpeechChunk_waveform_get(SwigObj* carg1) {
  std::vector< float > *cppresult;
  inworld::SpeechChunk *arg1 = (inworld::SpeechChunk *) 0 ;
  SwigObj* result;

  arg1 = (inworld::SpeechChunk *) carg1;
  cppresult = (std::vector< float > *)& ((arg1)->waveform);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechChunk_sample_rate_set(SwigObj* carg1, int carg2) {
  inworld::SpeechChunk *arg1 = (inworld::SpeechChunk *) 0 ;
  int arg2 ;

  arg1 = (inworld::SpeechChunk *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->sample_rate = arg2;
}


SWIGEXPORTC int inworld_SpeechChunk_sample_rate_get(SwigObj* carg1) {
  int cppresult;
  inworld::SpeechChunk *arg1 = (inworld::SpeechChunk *) 0 ;
  int result;

  arg1 = (inworld::SpeechChunk *) carg1;
  cppresult = (int) ((arg1)->sample_rate);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechChunk_phoneme_timestamps_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::SpeechChunk *arg1 = (inworld::SpeechChunk *) 0 ;
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *arg2 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) 0 ;

  arg1 = (inworld::SpeechChunk *) carg1;
  arg2 = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *) carg2;
  if (arg1) (arg1)->phoneme_timestamps = *arg2;
}


SWIGEXPORTC SwigObj* inworld_SpeechChunk_phoneme_timestamps_get(SwigObj* carg1) {
  std::vector< inworld::SpeechChunk::PhonemeTimestamp > *cppresult;
  inworld::SpeechChunk *arg1 = (inworld::SpeechChunk *) 0 ;
  SwigObj* result;

  arg1 = (inworld::SpeechChunk *) carg1;
  cppresult = (std::vector< inworld::SpeechChunk::PhonemeTimestamp > *)& ((arg1)->phoneme_timestamps);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SpeechChunk_new() {
  inworld::SpeechChunk *cppresult;
  SwigObj* result;

  cppresult = (inworld::SpeechChunk *)new inworld::SpeechChunk();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechChunk_delete(SwigObj* carg1) {
  inworld::SpeechChunk *arg1 = (inworld::SpeechChunk *) 0 ;

  arg1 = (inworld::SpeechChunk *) carg1;
  delete arg1;
}


SWIGEXPORTC const char * inworld_PhonemeTimestamp_phoneme_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::SpeechChunk::PhonemeTimestamp *arg1 = (inworld::SpeechChunk::PhonemeTimestamp *) 0 ;
  const char * result;

  arg1 = (inworld::SpeechChunk::PhonemeTimestamp *) carg1;
  cppresult = (std::string *) & ((arg1)->phoneme);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC float inworld_PhonemeTimestamp_start_time_sec_get(SwigObj* carg1) {
  float cppresult;
  inworld::SpeechChunk::PhonemeTimestamp *arg1 = (inworld::SpeechChunk::PhonemeTimestamp *) 0 ;
  float result;

  arg1 = (inworld::SpeechChunk::PhonemeTimestamp *) carg1;
  cppresult = (float) ((arg1)->start_time_sec);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_PhonemeTimestamp_new() {
  inworld::SpeechChunk::PhonemeTimestamp *cppresult;
  SwigObj* result;

  cppresult = (inworld::SpeechChunk::PhonemeTimestamp *)new inworld::SpeechChunk::PhonemeTimestamp();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_PhonemeTimestamp_delete(SwigObj* carg1) {
  inworld::SpeechChunk::PhonemeTimestamp *arg1 = (inworld::SpeechChunk::PhonemeTimestamp *) 0 ;

  arg1 = (inworld::SpeechChunk::PhonemeTimestamp *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TTSInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::TTSInterface > *smartarg1 = 0 ;
  inworld::TTSInterface *arg1 = (inworld::TTSInterface *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::TTSInterface > *)carg1;
  arg1 = (inworld::TTSInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_TTSInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::TTSInterface const > *smartarg1 = 0 ;
  inworld::TTSInterface *arg1 = (inworld::TTSInterface *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::TTSInterface > *)carg1;
  arg1 = (inworld::TTSInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_TTSInterface_is_valid__SWIG((inworld::TTSInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSInterface_SynthesizeSpeech_rcinworld_Voice_rcstd_string(SwigObj* carg1, SwigObj* carg2, const char * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::TTSInterface const > *smartarg1 = 0 ;
  std::string temp3 ;
  inworld::TTSInterface *arg1 = (inworld::TTSInterface *) 0 ;
  inworld::Voice *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::TTSInterface > *)carg1;
  arg1 = (inworld::TTSInterface *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (inworld::Voice *) carg2;


  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;

  cppresult = inworld_inworld_TTSInterface_SynthesizeSpeech__SWIG_0((inworld::TTSInterface const *)arg1,(inworld::Voice const &)*arg2,(std::string const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSInterface_SynthesizeSpeech_rcinworld_Voice_rcstd_string_rcstd_string(SwigObj* carg1, SwigObj* carg2, const char * carg3, const char * carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::TTSInterface const > *smartarg1 = 0 ;
  std::string temp3 ;
  std::string temp4 ;
  inworld::TTSInterface *arg1 = (inworld::TTSInterface *) 0 ;
  inworld::Voice *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::TTSInterface > *)carg1;
  arg1 = (inworld::TTSInterface *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (inworld::Voice *) carg2;


  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;


  if (carg4)
  temp4 = carg4;
  arg4 = &temp4;

  cppresult = inworld_inworld_TTSInterface_SynthesizeSpeech__SWIG_1((inworld::TTSInterface const *)arg1,(inworld::Voice const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSInterface_model_properties(SwigObj* carg1) {
  inworld::ModelProperties cppresult;
  std::shared_ptr< inworld::TTSInterface const > *smartarg1 = 0 ;
  inworld::TTSInterface *arg1 = (inworld::TTSInterface *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::TTSInterface > *)carg1;
  arg1 = (inworld::TTSInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::TTSInterface const *)arg1)->model_properties();
  result = (SwigObj*)new inworld::ModelProperties(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_new() {
  std::optional< inworld::Voice > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< inworld::Voice > *)new std::optional< inworld::Voice >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_new_rcinworld_Voice(SwigObj* carg1) {
  std::optional< inworld::Voice > *cppresult;
  inworld::Voice *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::Voice *) carg1;

  cppresult = (std::optional< inworld::Voice > *)new std::optional< inworld::Voice >((inworld::Voice const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_copy(SwigObj* carg1) {
  std::optional< inworld::Voice > *cppresult;
  std::optional< inworld::Voice > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< inworld::Voice > *) carg1;

  cppresult = (std::optional< inworld::Voice > *)new std::optional< inworld::Voice >((std::optional< inworld::Voice > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_Voice_delete(SwigObj* carg1) {
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;

  arg1 = (std::optional< inworld::Voice > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_Voice_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;
  bool result;

  arg1 = (std::optional< inworld::Voice > *) carg1;
  cppresult = (bool)((std::optional< inworld::Voice > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_value(SwigObj* carg1) {
  inworld::Voice *cppresult;
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::Voice > *) carg1;
  cppresult = (inworld::Voice *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_valueConst(SwigObj* carg1) {
  inworld::Voice *cppresult;
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::Voice > *) carg1;
  cppresult = (inworld::Voice *) &((std::optional< inworld::Voice > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::Voice cppresult;
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;
  inworld::Voice *arg2 = 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::Voice > *) carg1;

  arg2 = (inworld::Voice *) carg2;

  cppresult = ((std::optional< inworld::Voice > const *)arg1)->value_or((inworld::Voice const &)*arg2);
  result = (SwigObj*)new inworld::Voice(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_Voice_reset(SwigObj* carg1) {
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;

  arg1 = (std::optional< inworld::Voice > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_get(SwigObj* carg1) {
  inworld::Voice *cppresult;
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::Voice > *) carg1;
  cppresult = (inworld::Voice *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_getConst(SwigObj* carg1) {
  inworld::Voice *cppresult;
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::Voice > *) carg1;
  cppresult = (inworld::Voice *) &((std::optional< inworld::Voice > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Voice_get_value(SwigObj* carg1) {
  inworld::Voice *cppresult;
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::Voice > *) carg1;
  cppresult = (inworld::Voice *) &inworld_std_optional_Sl_inworld_Voice_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_Voice_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::Voice > *arg1 = (std::optional< inworld::Voice > *) 0 ;
  inworld::Voice *arg2 = 0 ;

  arg1 = (std::optional< inworld::Voice > *) carg1;

  arg2 = (inworld::Voice *) carg2;

  inworld_std_optional_Sl_inworld_Voice_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_KeywordGroup_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::KeywordGroup *arg1 = (inworld::KeywordGroup *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::KeywordGroup *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_KeywordGroup_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::KeywordGroup *arg1 = (inworld::KeywordGroup *) 0 ;
  const char * result;

  arg1 = (inworld::KeywordGroup *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_KeywordGroup_keywords_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::KeywordGroup *arg1 = (inworld::KeywordGroup *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;

  arg1 = (inworld::KeywordGroup *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->keywords = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KeywordGroup_keywords_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::KeywordGroup *arg1 = (inworld::KeywordGroup *) 0 ;
  SwigObj* result;

  arg1 = (inworld::KeywordGroup *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->keywords);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KeywordGroup_new() {
  inworld::KeywordGroup *cppresult;
  SwigObj* result;

  cppresult = (inworld::KeywordGroup *)new inworld::KeywordGroup();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KeywordGroup_delete(SwigObj* carg1) {
  inworld::KeywordGroup *arg1 = (inworld::KeywordGroup *) 0 ;

  arg1 = (inworld::KeywordGroup *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KeywordMatch_group_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::KeywordMatch *arg1 = (inworld::KeywordMatch *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::KeywordMatch *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->group_name = *arg2;
}


SWIGEXPORTC const char * inworld_KeywordMatch_group_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::KeywordMatch *arg1 = (inworld::KeywordMatch *) 0 ;
  const char * result;

  arg1 = (inworld::KeywordMatch *) carg1;
  cppresult = (std::string *) & ((arg1)->group_name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_KeywordMatch_keyword_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::KeywordMatch *arg1 = (inworld::KeywordMatch *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::KeywordMatch *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->keyword = *arg2;
}


SWIGEXPORTC const char * inworld_KeywordMatch_keyword_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::KeywordMatch *arg1 = (inworld::KeywordMatch *) 0 ;
  const char * result;

  arg1 = (inworld::KeywordMatch *) carg1;
  cppresult = (std::string *) & ((arg1)->keyword);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatch_new() {
  inworld::KeywordMatch *cppresult;
  SwigObj* result;

  cppresult = (inworld::KeywordMatch *)new inworld::KeywordMatch();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KeywordMatch_delete(SwigObj* carg1) {
  inworld::KeywordMatch *arg1 = (inworld::KeywordMatch *) 0 ;

  arg1 = (inworld::KeywordMatch *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KeywordMatcherResponse_matches_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::KeywordMatcherResponse *arg1 = (inworld::KeywordMatcherResponse *) 0 ;
  std::vector< inworld::KeywordMatch > *arg2 = (std::vector< inworld::KeywordMatch > *) 0 ;

  arg1 = (inworld::KeywordMatcherResponse *) carg1;
  arg2 = (std::vector< inworld::KeywordMatch > *) carg2;
  if (arg1) (arg1)->matches = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherResponse_matches_get(SwigObj* carg1) {
  std::vector< inworld::KeywordMatch > *cppresult;
  inworld::KeywordMatcherResponse *arg1 = (inworld::KeywordMatcherResponse *) 0 ;
  SwigObj* result;

  arg1 = (inworld::KeywordMatcherResponse *) carg1;
  cppresult = (std::vector< inworld::KeywordMatch > *)& ((arg1)->matches);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_KeywordMatcherResponse_HasMatches(SwigObj* carg1) {
  bool cppresult;
  inworld::KeywordMatcherResponse *arg1 = (inworld::KeywordMatcherResponse *) 0 ;
  bool result;

  arg1 = (inworld::KeywordMatcherResponse *) carg1;
  cppresult = (bool)((inworld::KeywordMatcherResponse const *)arg1)->HasMatches();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherResponse_new() {
  inworld::KeywordMatcherResponse *cppresult;
  SwigObj* result;

  cppresult = (inworld::KeywordMatcherResponse *)new inworld::KeywordMatcherResponse();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KeywordMatcherResponse_delete(SwigObj* carg1) {
  inworld::KeywordMatcherResponse *arg1 = (inworld::KeywordMatcherResponse *) 0 ;

  arg1 = (inworld::KeywordMatcherResponse *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KeywordMatcherInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::KeywordMatcherInterface > *smartarg1 = 0 ;
  inworld::KeywordMatcherInterface *arg1 = (inworld::KeywordMatcherInterface *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::KeywordMatcherInterface > *)carg1;
  arg1 = (inworld::KeywordMatcherInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_KeywordMatcherInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::KeywordMatcherInterface const > *smartarg1 = 0 ;
  inworld::KeywordMatcherInterface *arg1 = (inworld::KeywordMatcherInterface *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::KeywordMatcherInterface > *)carg1;
  arg1 = (inworld::KeywordMatcherInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_KeywordMatcherInterface_is_valid__SWIG((inworld::KeywordMatcherInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherInterface_MatchKeywords(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< inworld::KeywordMatcherResponse > cppresult;
  std::shared_ptr< inworld::KeywordMatcherInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::KeywordMatcherInterface *arg1 = (inworld::KeywordMatcherInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::KeywordMatcherInterface > *)carg1;
  arg1 = (inworld::KeywordMatcherInterface *)(smartarg1 ? smartarg1->get() : 0);

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_KeywordMatcherInterface_MatchKeywords__SWIG((inworld::KeywordMatcherInterface const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< inworld::KeywordMatcherResponse >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_BaseData_new() {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *)new std::vector< std::shared_ptr< inworld::graphs::BaseData > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_BaseData_copy(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *)new std::vector< std::shared_ptr< inworld::graphs::BaseData > >((std::vector< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_BaseData_size(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_BaseData_capacity(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_BaseData_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > >::size_type arg2 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  arg2 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_BaseData_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  cppresult = (bool)((std::vector< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_BaseData_clear(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_BaseData_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::BaseData > empty2 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;

  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::BaseData>*)carg2 : &empty2;
  (arg1)->push_back((std::vector< std::shared_ptr< inworld::graphs::BaseData > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_BaseData_get(SwigObj* carg1, int carg2) {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > >::value_type *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::shared_ptr< inworld::graphs::BaseData > >::value_type *) &inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*)(*cppresult ? cppresult : 0);
  return result;
}


SWIGEXPORTC void inworld_vector_BaseData_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::shared_ptr< inworld::graphs::BaseData > empty3 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  arg2 = (int) carg2;

  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::BaseData>*)carg3 : &empty3;
  inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__set__SWIG(arg1,arg2,(std::shared_ptr< inworld::graphs::BaseData > const &)*arg3);
}


SWIGEXPORTC SwigObj* inworld_vector_BaseData_safe_get(SwigObj* carg1, size_t carg2) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  size_t arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  arg2 = (size_t) carg2;
  cppresult = inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__safe_get__SWIG((std::vector< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::BaseData >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_vector_BaseData_delete(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_Text_new() {
  std::vector< std::shared_ptr< inworld::graphs::Text > > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::Text > > *)new std::vector< std::shared_ptr< inworld::graphs::Text > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Text_copy(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Text > > *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::Text > > *)new std::vector< std::shared_ptr< inworld::graphs::Text > >((std::vector< std::shared_ptr< inworld::graphs::Text > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Text_size(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Text > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::Text > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Text_capacity(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Text > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::Text > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Text_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::Text > >::size_type arg2 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  arg2 = (std::vector< std::shared_ptr< inworld::graphs::Text > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_Text_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  bool result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  cppresult = (bool)((std::vector< std::shared_ptr< inworld::graphs::Text > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Text_clear(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_Text_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::Text > empty2 ;
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::Text > >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;

  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::Text>*)carg2 : &empty2;
  (arg1)->push_back((std::vector< std::shared_ptr< inworld::graphs::Text > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_Text_get(SwigObj* carg1, int carg2) {
  std::vector< std::shared_ptr< inworld::graphs::Text > >::value_type *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::shared_ptr< inworld::graphs::Text > >::value_type *) &inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_Text_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*)(*cppresult ? cppresult : 0);
  return result;
}


SWIGEXPORTC void inworld_vector_Text_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::shared_ptr< inworld::graphs::Text > empty3 ;
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< inworld::graphs::Text > >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  arg2 = (int) carg2;

  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Text>*)carg3 : &empty3;
  inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_Text_Sg__Sg__set__SWIG(arg1,arg2,(std::shared_ptr< inworld::graphs::Text > const &)*arg3);
}


SWIGEXPORTC void inworld_vector_Text_delete(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Text > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_ToolData_new() {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *)new std::vector< std::shared_ptr< inworld::graphs::ToolData > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_ToolData_copy(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *)new std::vector< std::shared_ptr< inworld::graphs::ToolData > >((std::vector< std::shared_ptr< inworld::graphs::ToolData > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_ToolData_size(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::ToolData > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_ToolData_capacity(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::ToolData > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_ToolData_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > >::size_type arg2 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;
  arg2 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_ToolData_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;
  bool result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;
  cppresult = (bool)((std::vector< std::shared_ptr< inworld::graphs::ToolData > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_ToolData_clear(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_ToolData_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::ToolData > empty2 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;

  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::ToolData>*)carg2 : &empty2;
  (arg1)->push_back((std::vector< std::shared_ptr< inworld::graphs::ToolData > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_ToolData_get(SwigObj* carg1, int carg2) {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > >::value_type *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolData > >::value_type *) &inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolData_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*)(*cppresult ? cppresult : 0);
  return result;
}


SWIGEXPORTC void inworld_vector_ToolData_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::shared_ptr< inworld::graphs::ToolData > empty3 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;
  arg2 = (int) carg2;

  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::ToolData>*)carg3 : &empty3;
  inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolData_Sg__Sg__set__SWIG(arg1,arg2,(std::shared_ptr< inworld::graphs::ToolData > const &)*arg3);
}


SWIGEXPORTC void inworld_vector_ToolData_delete(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_ToolCallData_new() {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *)new std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_ToolCallData_copy(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *)new std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >((std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_ToolCallData_size(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_ToolCallData_capacity(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_ToolCallData_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::size_type arg2 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;
  arg2 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_ToolCallData_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;
  bool result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;
  cppresult = (bool)((std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_ToolCallData_clear(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_ToolCallData_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::ToolCallData > empty2 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;

  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::ToolCallData>*)carg2 : &empty2;
  (arg1)->push_back((std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_ToolCallData_get(SwigObj* carg1, int carg2) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::value_type *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::value_type *) &inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallData_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*)(*cppresult ? cppresult : 0);
  return result;
}


SWIGEXPORTC void inworld_vector_ToolCallData_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::shared_ptr< inworld::graphs::ToolCallData > empty3 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;
  arg2 = (int) carg2;

  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::ToolCallData>*)carg3 : &empty3;
  inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallData_Sg__Sg__set__SWIG(arg1,arg2,(std::shared_ptr< inworld::graphs::ToolCallData > const &)*arg3);
}


SWIGEXPORTC void inworld_vector_ToolCallData_delete(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_ToolCallResult_new() {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *)new std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_ToolCallResult_copy(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;

  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *)new std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >((std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_ToolCallResult_size(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_ToolCallResult_capacity(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_ToolCallResult_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::size_type arg2 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;
  arg2 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_ToolCallResult_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;
  bool result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;
  cppresult = (bool)((std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_ToolCallResult_clear(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_ToolCallResult_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::ToolCallResult > empty2 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;

  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::ToolCallResult>*)carg2 : &empty2;
  (arg1)->push_back((std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_ToolCallResult_get(SwigObj* carg1, int carg2) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::value_type *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::value_type *) &inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallResult_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*)(*cppresult ? cppresult : 0);
  return result;
}


SWIGEXPORTC void inworld_vector_ToolCallResult_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::shared_ptr< inworld::graphs::ToolCallResult > empty3 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;
  arg2 = (int) carg2;

  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::ToolCallResult>*)carg3 : &empty3;
  inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallResult_Sg__Sg__set__SWIG(arg1,arg2,(std::shared_ptr< inworld::graphs::ToolCallResult > const &)*arg3);
}


SWIGEXPORTC void inworld_vector_ToolCallResult_delete(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Json_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Json > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Json_new_rcstd_shared_ptr_Sl_inworld_graphs_Json_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *cppresult;
  std::shared_ptr< inworld::graphs::Json > empty1 ;
  std::shared_ptr< inworld::graphs::Json > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::Json>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Json > >((std::shared_ptr< inworld::graphs::Json > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Json_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Json > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_Json_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Json_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Json_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Json > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Json >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_Json_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::BaseData > *smartarg1 = 0 ;
  inworld::graphs::BaseData *arg1 = (inworld::graphs::BaseData *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::BaseData > *)carg1;
  arg1 = (inworld::graphs::BaseData *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_BaseData_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::BaseData const > *smartarg1 = 0 ;
  inworld::graphs::BaseData *arg1 = (inworld::graphs::BaseData *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::BaseData > *)carg1;
  arg1 = (inworld::graphs::BaseData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::BaseData const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC bool inworld_BaseData_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::BaseData const > *smartarg1 = 0 ;
  inworld::graphs::BaseData *arg1 = (inworld::graphs::BaseData *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::BaseData > *)carg1;
  arg1 = (inworld::graphs::BaseData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_BaseData_is_valid__SWIG((inworld::graphs::BaseData const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Text_new_std_string(const char * carg1) {
  inworld::graphs::Text *cppresult;
  std::string arg1 ;
  SwigObj* result;


  if (carg1)
  arg1 = carg1;

  cppresult = (inworld::graphs::Text *)new inworld::graphs::Text(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::Text >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC const char * inworld_Text_value(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::Text const > *smartarg1 = 0 ;
  inworld::graphs::Text *arg1 = (inworld::graphs::Text *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Text > *)carg1;
  arg1 = (inworld::graphs::Text *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::Text const *)arg1)->value();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC bool inworld_Text_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::Text const > *smartarg1 = 0 ;
  inworld::graphs::Text *arg1 = (inworld::graphs::Text *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Text > *)carg1;
  arg1 = (inworld::graphs::Text *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_Text_is_valid__SWIG((inworld::graphs::Text const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Text_new_rcstd_string_rcstd_string(const char * carg1, const char * carg2) {
  inworld::graphs::Text *cppresult;
  std::string temp1 ;
  std::string temp2 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (inworld::graphs::Text *)inworld_inworld_graphs_Text_new__SWIG_1((std::string const &)*arg1,(std::string const &)*arg2);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::Text >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::Text > *smartarg1 = 0 ;
  inworld::graphs::Text *arg1 = (inworld::graphs::Text *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::Text > *)carg1;
  arg1 = (inworld::graphs::Text *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_Text_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::Text const > *smartarg1 = 0 ;
  inworld::graphs::Text *arg1 = (inworld::graphs::Text *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Text > *)carg1;
  arg1 = (inworld::graphs::Text *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::Text const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_Audio_new(SwigObj* carg1, int carg2) {
  inworld::graphs::Audio *cppresult;
  std::vector< float > arg1 ;
  int arg2 ;
  SwigObj* result;

  arg1 = *(std::vector< float > *)carg1;
  arg2 = (int) carg2;
  cppresult = (inworld::graphs::Audio *)new inworld::graphs::Audio(SWIG_STD_MOVE(arg1),arg2);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::Audio >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Audio_waveform(SwigObj* carg1) {
  std::vector< float > *cppresult;
  std::shared_ptr< inworld::graphs::Audio const > *smartarg1 = 0 ;
  inworld::graphs::Audio *arg1 = (inworld::graphs::Audio *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Audio > *)carg1;
  arg1 = (inworld::graphs::Audio *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< float > *) &((inworld::graphs::Audio const *)arg1)->waveform();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC int inworld_Audio_sample_rate(SwigObj* carg1) {
  int cppresult;
  std::shared_ptr< inworld::graphs::Audio const > *smartarg1 = 0 ;
  inworld::graphs::Audio *arg1 = (inworld::graphs::Audio *) 0 ;
  int result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Audio > *)carg1;
  arg1 = (inworld::graphs::Audio *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (int)((inworld::graphs::Audio const *)arg1)->sample_rate();
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_Audio_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::Audio const > *smartarg1 = 0 ;
  inworld::graphs::Audio *arg1 = (inworld::graphs::Audio *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Audio > *)carg1;
  arg1 = (inworld::graphs::Audio *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_Audio_is_valid__SWIG((inworld::graphs::Audio const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Audio_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::Audio > *smartarg1 = 0 ;
  inworld::graphs::Audio *arg1 = (inworld::graphs::Audio *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::Audio > *)carg1;
  arg1 = (inworld::graphs::Audio *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_Audio_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::Audio const > *smartarg1 = 0 ;
  inworld::graphs::Audio *arg1 = (inworld::graphs::Audio *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Audio > *)carg1;
  arg1 = (inworld::graphs::Audio *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::Audio const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSOutput_new(const char * carg1, SwigObj* carg2) {
  inworld::graphs::TTSOutput *cppresult;
  std::shared_ptr< inworld::graphs::Audio > empty2 ;
  std::string arg1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Audio > > arg2 ;
  SwigObj* result;


  if (carg1)
  arg1 = carg1;


  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::Audio>*)carg2 : empty2;
  cppresult = (inworld::graphs::TTSOutput *)new inworld::graphs::TTSOutput(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TTSOutput_text_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::TTSOutput *arg1 = (inworld::graphs::TTSOutput *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::graphs::TTSOutput *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->text = *arg2;
}


SWIGEXPORTC const char * inworld_TTSOutput_text_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::TTSOutput *arg1 = (inworld::graphs::TTSOutput *) 0 ;
  const char * result;

  arg1 = (inworld::graphs::TTSOutput *) carg1;
  cppresult = (std::string *) & ((arg1)->text);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TTSOutput_audio_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::TTSOutput *arg1 = (inworld::graphs::TTSOutput *) 0 ;
  std::shared_ptr< inworld::graphs::Audio > *arg2 = (std::shared_ptr< inworld::graphs::Audio > *) 0 ;

  arg1 = (inworld::graphs::TTSOutput *) carg1;
  arg2 = (std::shared_ptr< inworld::graphs::Audio > *) carg2;
  if (arg1) (arg1)->audio = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TTSOutput_audio_get(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::Audio > *cppresult;
  inworld::graphs::TTSOutput *arg1 = (inworld::graphs::TTSOutput *) 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::TTSOutput *) carg1;
  cppresult = (std::shared_ptr< inworld::graphs::Audio > *)& ((arg1)->audio);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSOutput_safe_audio(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Audio > > cppresult;
  inworld::graphs::TTSOutput *arg1 = (inworld::graphs::TTSOutput *) 0 ;
  SwigObj* result;

  arg1 = (inworld::graphs::TTSOutput *) carg1;
  cppresult = inworld_inworld_graphs_TTSOutput_safe_audio__SWIG((inworld::graphs::TTSOutput const *)arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Audio >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_TTSOutput_delete(SwigObj* carg1) {
  inworld::graphs::TTSOutput *arg1 = (inworld::graphs::TTSOutput *) 0 ;

  arg1 = (inworld::graphs::TTSOutput *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_SafetyResult_new(const char * carg1, bool carg2) {
  inworld::graphs::SafetyResult *cppresult;
  std::string arg1 ;
  bool arg2 ;
  SwigObj* result;


  if (carg1)
  arg1 = carg1;

  arg2 = (bool) carg2;
  cppresult = (inworld::graphs::SafetyResult *)new inworld::graphs::SafetyResult(SWIG_STD_MOVE(arg1),arg2);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::SafetyResult >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC bool inworld_SafetyResult_is_safe(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::SafetyResult const > *smartarg1 = 0 ;
  inworld::graphs::SafetyResult *arg1 = (inworld::graphs::SafetyResult *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::SafetyResult > *)carg1;
  arg1 = (inworld::graphs::SafetyResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)((inworld::graphs::SafetyResult const *)arg1)->is_safe();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_SafetyResult_text(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::SafetyResult const > *smartarg1 = 0 ;
  inworld::graphs::SafetyResult *arg1 = (inworld::graphs::SafetyResult *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::SafetyResult > *)carg1;
  arg1 = (inworld::graphs::SafetyResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::SafetyResult const *)arg1)->text();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC bool inworld_SafetyResult_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::SafetyResult const > *smartarg1 = 0 ;
  inworld::graphs::SafetyResult *arg1 = (inworld::graphs::SafetyResult *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::SafetyResult > *)carg1;
  arg1 = (inworld::graphs::SafetyResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_SafetyResult_is_valid__SWIG((inworld::graphs::SafetyResult const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SafetyResult_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::SafetyResult > *smartarg1 = 0 ;
  inworld::graphs::SafetyResult *arg1 = (inworld::graphs::SafetyResult *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyResult > *)carg1;
  arg1 = (inworld::graphs::SafetyResult *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_SafetyResult_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::SafetyResult const > *smartarg1 = 0 ;
  inworld::graphs::SafetyResult *arg1 = (inworld::graphs::SafetyResult *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::SafetyResult > *)carg1;
  arg1 = (inworld::graphs::SafetyResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::SafetyResult const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_MatchedKeywords_new(SwigObj* carg1) {
  inworld::graphs::MatchedKeywords *cppresult;
  std::vector< inworld::KeywordMatch > arg1 ;
  SwigObj* result;

  arg1 = *(std::vector< inworld::KeywordMatch > *)carg1;
  cppresult = (inworld::graphs::MatchedKeywords *)new inworld::graphs::MatchedKeywords(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::MatchedKeywords >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MatchedKeywords_matches(SwigObj* carg1) {
  std::vector< inworld::KeywordMatch > *cppresult;
  std::shared_ptr< inworld::graphs::MatchedKeywords const > *smartarg1 = 0 ;
  inworld::graphs::MatchedKeywords *arg1 = (inworld::graphs::MatchedKeywords *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::MatchedKeywords > *)carg1;
  arg1 = (inworld::graphs::MatchedKeywords *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< inworld::KeywordMatch > *) &((inworld::graphs::MatchedKeywords const *)arg1)->matches();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_MatchedKeywords_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MatchedKeywords const > *smartarg1 = 0 ;
  inworld::graphs::MatchedKeywords *arg1 = (inworld::graphs::MatchedKeywords *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::MatchedKeywords > *)carg1;
  arg1 = (inworld::graphs::MatchedKeywords *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MatchedKeywords_is_valid__SWIG((inworld::graphs::MatchedKeywords const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MatchedKeywords_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MatchedKeywords > *smartarg1 = 0 ;
  inworld::graphs::MatchedKeywords *arg1 = (inworld::graphs::MatchedKeywords *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::MatchedKeywords > *)carg1;
  arg1 = (inworld::graphs::MatchedKeywords *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_MatchedKeywords_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::MatchedKeywords const > *smartarg1 = 0 ;
  inworld::graphs::MatchedKeywords *arg1 = (inworld::graphs::MatchedKeywords *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::MatchedKeywords > *)carg1;
  arg1 = (inworld::graphs::MatchedKeywords *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::MatchedKeywords const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ClassificationResult_new(SwigObj* carg1) {
  inworld::graphs::ClassificationResult *cppresult;
  std::vector< std::string > arg1 ;
  SwigObj* result;

  arg1 = *(std::vector< std::string > *)carg1;
  cppresult = (inworld::graphs::ClassificationResult *)new inworld::graphs::ClassificationResult(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::ClassificationResult >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ClassificationResult_classes(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  std::shared_ptr< inworld::graphs::ClassificationResult const > *smartarg1 = 0 ;
  inworld::graphs::ClassificationResult *arg1 = (inworld::graphs::ClassificationResult *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ClassificationResult > *)carg1;
  arg1 = (inworld::graphs::ClassificationResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< std::string > *) &((inworld::graphs::ClassificationResult const *)arg1)->classes();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ClassificationResult_HasClasses(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::ClassificationResult const > *smartarg1 = 0 ;
  inworld::graphs::ClassificationResult *arg1 = (inworld::graphs::ClassificationResult *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ClassificationResult > *)carg1;
  arg1 = (inworld::graphs::ClassificationResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)((inworld::graphs::ClassificationResult const *)arg1)->HasClasses();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ClassificationResult_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::ClassificationResult const > *smartarg1 = 0 ;
  inworld::graphs::ClassificationResult *arg1 = (inworld::graphs::ClassificationResult *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ClassificationResult > *)carg1;
  arg1 = (inworld::graphs::ClassificationResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_ClassificationResult_is_valid__SWIG((inworld::graphs::ClassificationResult const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ClassificationResult_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::ClassificationResult > *smartarg1 = 0 ;
  inworld::graphs::ClassificationResult *arg1 = (inworld::graphs::ClassificationResult *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::ClassificationResult > *)carg1;
  arg1 = (inworld::graphs::ClassificationResult *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_ClassificationResult_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::ClassificationResult const > *smartarg1 = 0 ;
  inworld::graphs::ClassificationResult *arg1 = (inworld::graphs::ClassificationResult *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ClassificationResult > *)carg1;
  arg1 = (inworld::graphs::ClassificationResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::ClassificationResult const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeRecords_new(SwigObj* carg1) {
  inworld::graphs::KnowledgeRecords *cppresult;
  std::vector< std::string > arg1 ;
  SwigObj* result;

  arg1 = *(std::vector< std::string > *)carg1;
  cppresult = (inworld::graphs::KnowledgeRecords *)new inworld::graphs::KnowledgeRecords(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::KnowledgeRecords >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeRecords_records(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeRecords const > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeRecords *arg1 = (inworld::graphs::KnowledgeRecords *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::KnowledgeRecords > *)carg1;
  arg1 = (inworld::graphs::KnowledgeRecords *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< std::string > *) &((inworld::graphs::KnowledgeRecords const *)arg1)->records();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_KnowledgeRecords_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeRecords const > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeRecords *arg1 = (inworld::graphs::KnowledgeRecords *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::KnowledgeRecords > *)carg1;
  arg1 = (inworld::graphs::KnowledgeRecords *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_KnowledgeRecords_is_valid__SWIG((inworld::graphs::KnowledgeRecords const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeRecords_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::KnowledgeRecords > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeRecords *arg1 = (inworld::graphs::KnowledgeRecords *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeRecords > *)carg1;
  arg1 = (inworld::graphs::KnowledgeRecords *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_KnowledgeRecords_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeRecords const > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeRecords *arg1 = (inworld::graphs::KnowledgeRecords *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::KnowledgeRecords > *)carg1;
  arg1 = (inworld::graphs::KnowledgeRecords *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::KnowledgeRecords const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_Error_new(SwigObj* carg1) {
  inworld::graphs::Error *cppresult;
  absl::Status arg1 ;
  SwigObj* result;

  arg1 = *(absl::Status *)carg1;
  cppresult = (inworld::graphs::Error *)new inworld::graphs::Error(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::Error >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Error_status(SwigObj* carg1) {
  absl::Status *cppresult;
  std::shared_ptr< inworld::graphs::Error const > *smartarg1 = 0 ;
  inworld::graphs::Error *arg1 = (inworld::graphs::Error *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Error > *)carg1;
  arg1 = (inworld::graphs::Error *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (absl::Status *) &((inworld::graphs::Error const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_Error_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::Error const > *smartarg1 = 0 ;
  inworld::graphs::Error *arg1 = (inworld::graphs::Error *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Error > *)carg1;
  arg1 = (inworld::graphs::Error *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_Error_is_valid__SWIG((inworld::graphs::Error const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Error_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::Error > *smartarg1 = 0 ;
  inworld::graphs::Error *arg1 = (inworld::graphs::Error *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::Error > *)carg1;
  arg1 = (inworld::graphs::Error *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_Error_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::Error const > *smartarg1 = 0 ;
  inworld::graphs::Error *arg1 = (inworld::graphs::Error *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Error > *)carg1;
  arg1 = (inworld::graphs::Error *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::Error const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_MatchedIntents_new() {
  inworld::graphs::MatchedIntents *cppresult;
  SwigObj* result;

  cppresult = (inworld::graphs::MatchedIntents *)new inworld::graphs::MatchedIntents();

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::MatchedIntents >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MatchedIntents_new_std_vector_Sl_inworld_IntentMatch_Sg_(SwigObj* carg1) {
  inworld::graphs::MatchedIntents *cppresult;
  std::vector< inworld::IntentMatch > arg1 ;
  SwigObj* result;

  arg1 = *(std::vector< inworld::IntentMatch > *)carg1;
  cppresult = (inworld::graphs::MatchedIntents *)new inworld::graphs::MatchedIntents(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::MatchedIntents >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MatchedIntents_intent_matches(SwigObj* carg1) {
  std::vector< inworld::IntentMatch > *cppresult;
  std::shared_ptr< inworld::graphs::MatchedIntents const > *smartarg1 = 0 ;
  inworld::graphs::MatchedIntents *arg1 = (inworld::graphs::MatchedIntents *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::MatchedIntents > *)carg1;
  arg1 = (inworld::graphs::MatchedIntents *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< inworld::IntentMatch > *) &((inworld::graphs::MatchedIntents const *)arg1)->intent_matches();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_MatchedIntents_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MatchedIntents const > *smartarg1 = 0 ;
  inworld::graphs::MatchedIntents *arg1 = (inworld::graphs::MatchedIntents *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::MatchedIntents > *)carg1;
  arg1 = (inworld::graphs::MatchedIntents *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MatchedIntents_is_valid__SWIG((inworld::graphs::MatchedIntents const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MatchedIntents_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MatchedIntents > *smartarg1 = 0 ;
  inworld::graphs::MatchedIntents *arg1 = (inworld::graphs::MatchedIntents *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::MatchedIntents > *)carg1;
  arg1 = (inworld::graphs::MatchedIntents *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_MatchedIntents_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::MatchedIntents const > *smartarg1 = 0 ;
  inworld::graphs::MatchedIntents *arg1 = (inworld::graphs::MatchedIntents *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::MatchedIntents > *)carg1;
  arg1 = (inworld::graphs::MatchedIntents *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::MatchedIntents const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancement_activated_goals(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancement const > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancement *arg1 = (inworld::graphs::GoalAdvancement *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancement > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancement *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< std::string > *) &((inworld::graphs::GoalAdvancement const *)arg1)->activated_goals();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancement_completed_goals(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancement const > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancement *arg1 = (inworld::graphs::GoalAdvancement *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancement > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancement *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< std::string > *) &((inworld::graphs::GoalAdvancement const *)arg1)->completed_goals();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancement_current_goals(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancement const > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancement *arg1 = (inworld::graphs::GoalAdvancement *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancement > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancement *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< std::string > *) &((inworld::graphs::GoalAdvancement const *)arg1)->current_goals();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_GoalAdvancement_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancement const > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancement *arg1 = (inworld::graphs::GoalAdvancement *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancement > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancement *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_GoalAdvancement_is_valid__SWIG((inworld::graphs::GoalAdvancement const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GoalAdvancement_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::GoalAdvancement > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancement *arg1 = (inworld::graphs::GoalAdvancement *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancement > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancement *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_GoalAdvancement_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancement const > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancement *arg1 = (inworld::graphs::GoalAdvancement *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancement > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancement *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::GoalAdvancement const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC bool inworld_Json_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::Json const > *smartarg1 = 0 ;
  inworld::graphs::Json *arg1 = (inworld::graphs::Json *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Json > *)carg1;
  arg1 = (inworld::graphs::Json *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_Json_is_valid__SWIG((inworld::graphs::Json const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Json_FromString(const char * carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Json > > cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  cppresult = inworld_inworld_graphs_Json_FromString__SWIG((std::string const &)*arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::Json > >(cppresult);
  return result;
}


SWIGEXPORTC const char * inworld_Json_value_as_string(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::Json const > *smartarg1 = 0 ;
  inworld::graphs::Json *arg1 = (inworld::graphs::Json *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Json > *)carg1;
  arg1 = (inworld::graphs::Json *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_Json_value_as_string__SWIG((inworld::graphs::Json const *)arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC void inworld_Json_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::Json > *smartarg1 = 0 ;
  inworld::graphs::Json *arg1 = (inworld::graphs::Json *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::Json > *)carg1;
  arg1 = (inworld::graphs::Json *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_Json_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::Json const > *smartarg1 = 0 ;
  inworld::graphs::Json *arg1 = (inworld::graphs::Json *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Json > *)carg1;
  arg1 = (inworld::graphs::Json *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::Json const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ToolCallData_new(SwigObj* carg1) {
  inworld::graphs::ToolCallData *cppresult;
  inworld::ToolCall arg1 ;
  SwigObj* result;

  arg1 = *(inworld::ToolCall *)carg1;
  cppresult = (inworld::graphs::ToolCallData *)new inworld::graphs::ToolCallData(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::ToolCallData >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ToolCallData_tool_call(SwigObj* carg1) {
  inworld::ToolCall *cppresult;
  std::shared_ptr< inworld::graphs::ToolCallData const > *smartarg1 = 0 ;
  inworld::graphs::ToolCallData *arg1 = (inworld::graphs::ToolCallData *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolCallData > *)carg1;
  arg1 = (inworld::graphs::ToolCallData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (inworld::ToolCall *) &((inworld::graphs::ToolCallData const *)arg1)->tool_call();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ToolCallData_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::ToolCallData const > *smartarg1 = 0 ;
  inworld::graphs::ToolCallData *arg1 = (inworld::graphs::ToolCallData *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolCallData > *)carg1;
  arg1 = (inworld::graphs::ToolCallData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_ToolCallData_is_valid__SWIG((inworld::graphs::ToolCallData const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ToolCallData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::ToolCallData > *smartarg1 = 0 ;
  inworld::graphs::ToolCallData *arg1 = (inworld::graphs::ToolCallData *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::ToolCallData > *)carg1;
  arg1 = (inworld::graphs::ToolCallData *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_ToolCallData_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::ToolCallData const > *smartarg1 = 0 ;
  inworld::graphs::ToolCallData *arg1 = (inworld::graphs::ToolCallData *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolCallData > *)carg1;
  arg1 = (inworld::graphs::ToolCallData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::ToolCallData const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC bool inworld_ListToolCallData_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::ListToolCallData const > *smartarg1 = 0 ;
  inworld::graphs::ListToolCallData *arg1 = (inworld::graphs::ListToolCallData *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolCallData > *)carg1;
  arg1 = (inworld::graphs::ListToolCallData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_ListToolCallData_is_valid__SWIG((inworld::graphs::ListToolCallData const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ListToolCallData_new_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallData_Sg__Sg_(SwigObj* carg1) {
  inworld::graphs::ListToolCallData *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > arg1 ;
  SwigObj* result;

  arg1 = *(std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > *)carg1;
  cppresult = (inworld::graphs::ListToolCallData *)inworld_inworld_graphs_ListToolCallData_new__SWIG_0(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::ListToolCallData >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ListToolCallData_tool_calls_swig(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallData > > cppresult;
  std::shared_ptr< inworld::graphs::ListToolCallData const > *smartarg1 = 0 ;
  inworld::graphs::ListToolCallData *arg1 = (inworld::graphs::ListToolCallData *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolCallData > *)carg1;
  arg1 = (inworld::graphs::ListToolCallData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_ListToolCallData_tool_calls_swig__SWIG((inworld::graphs::ListToolCallData const *)arg1);
  result = (SwigObj*)new std::vector< std::shared_ptr< inworld::graphs::ToolCallData > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ListToolCallData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::ListToolCallData > *smartarg1 = 0 ;
  inworld::graphs::ListToolCallData *arg1 = (inworld::graphs::ListToolCallData *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::ListToolCallData > *)carg1;
  arg1 = (inworld::graphs::ListToolCallData *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_ListToolCallData_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::ListToolCallData const > *smartarg1 = 0 ;
  inworld::graphs::ListToolCallData *arg1 = (inworld::graphs::ListToolCallData *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolCallData > *)carg1;
  arg1 = (inworld::graphs::ListToolCallData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::ListToolCallData const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ToolData_new(SwigObj* carg1) {
  inworld::graphs::ToolData *cppresult;
  inworld::Tool arg1 ;
  SwigObj* result;

  arg1 = *(inworld::Tool *)carg1;
  cppresult = (inworld::graphs::ToolData *)new inworld::graphs::ToolData(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::ToolData >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ToolData_tool(SwigObj* carg1) {
  inworld::Tool *cppresult;
  std::shared_ptr< inworld::graphs::ToolData const > *smartarg1 = 0 ;
  inworld::graphs::ToolData *arg1 = (inworld::graphs::ToolData *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolData > *)carg1;
  arg1 = (inworld::graphs::ToolData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (inworld::Tool *) &((inworld::graphs::ToolData const *)arg1)->tool();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ToolData_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::ToolData const > *smartarg1 = 0 ;
  inworld::graphs::ToolData *arg1 = (inworld::graphs::ToolData *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolData > *)carg1;
  arg1 = (inworld::graphs::ToolData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_ToolData_is_valid__SWIG((inworld::graphs::ToolData const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ToolData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::ToolData > *smartarg1 = 0 ;
  inworld::graphs::ToolData *arg1 = (inworld::graphs::ToolData *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::ToolData > *)carg1;
  arg1 = (inworld::graphs::ToolData *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_ToolData_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::ToolData const > *smartarg1 = 0 ;
  inworld::graphs::ToolData *arg1 = (inworld::graphs::ToolData *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolData > *)carg1;
  arg1 = (inworld::graphs::ToolData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::ToolData const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC bool inworld_ListToolsData_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::ListToolsData const > *smartarg1 = 0 ;
  inworld::graphs::ListToolsData *arg1 = (inworld::graphs::ListToolsData *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolsData > *)carg1;
  arg1 = (inworld::graphs::ListToolsData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_ListToolsData_is_valid__SWIG((inworld::graphs::ListToolsData const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ListToolsData_new_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolData_Sg__Sg_(SwigObj* carg1) {
  inworld::graphs::ListToolsData *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > arg1 ;
  SwigObj* result;

  arg1 = *(std::vector< std::shared_ptr< inworld::graphs::ToolData > > *)carg1;
  cppresult = (inworld::graphs::ListToolsData *)inworld_inworld_graphs_ListToolsData_new__SWIG_0(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::ListToolsData >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ListToolsData_list_tools_swig(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolData > > cppresult;
  std::shared_ptr< inworld::graphs::ListToolsData const > *smartarg1 = 0 ;
  inworld::graphs::ListToolsData *arg1 = (inworld::graphs::ListToolsData *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolsData > *)carg1;
  arg1 = (inworld::graphs::ListToolsData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_ListToolsData_list_tools_swig__SWIG((inworld::graphs::ListToolsData const *)arg1);
  result = (SwigObj*)new std::vector< std::shared_ptr< inworld::graphs::ToolData > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ListToolsData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::ListToolsData > *smartarg1 = 0 ;
  inworld::graphs::ListToolsData *arg1 = (inworld::graphs::ListToolsData *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::ListToolsData > *)carg1;
  arg1 = (inworld::graphs::ListToolsData *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_ListToolsData_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::ListToolsData const > *smartarg1 = 0 ;
  inworld::graphs::ListToolsData *arg1 = (inworld::graphs::ListToolsData *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolsData > *)carg1;
  arg1 = (inworld::graphs::ListToolsData *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::ListToolsData const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequest_new_std_vector_Sl_inworld_Message_Sg__std_vector_Sl_inworld_Tool_Sg__std_optional_Sl_inworld_ToolChoice_Sg__eResponseFormat(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, int carg4) {
  inworld::graphs::LLMChatRequest *cppresult;
  std::vector< inworld::Message > arg1 ;
  std::vector< inworld::Tool > arg2 ;
  std::optional< inworld::ToolChoice > arg3 ;
  inworld::ResponseFormat arg4 ;
  SwigObj* result;

  arg1 = *(std::vector< inworld::Message > *)carg1;
  arg2 = *(std::vector< inworld::Tool > *)carg2;
  arg3 = *(std::optional< inworld::ToolChoice > *)carg3;
  arg4 = (inworld::ResponseFormat) carg4;
  cppresult = (inworld::graphs::LLMChatRequest *)new inworld::graphs::LLMChatRequest(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMChatRequest >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequest_new_std_vector_Sl_inworld_Message_Sg__std_vector_Sl_inworld_Tool_Sg__std_optional_Sl_inworld_ToolChoice_Sg_(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  inworld::graphs::LLMChatRequest *cppresult;
  std::vector< inworld::Message > arg1 ;
  std::vector< inworld::Tool > arg2 ;
  std::optional< inworld::ToolChoice > arg3 ;
  SwigObj* result;

  arg1 = *(std::vector< inworld::Message > *)carg1;
  arg2 = *(std::vector< inworld::Tool > *)carg2;
  arg3 = *(std::optional< inworld::ToolChoice > *)carg3;
  cppresult = (inworld::graphs::LLMChatRequest *)new inworld::graphs::LLMChatRequest(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMChatRequest >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequest_new_std_vector_Sl_inworld_Message_Sg__std_vector_Sl_inworld_Tool_Sg_(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::LLMChatRequest *cppresult;
  std::vector< inworld::Message > arg1 ;
  std::vector< inworld::Tool > arg2 ;
  SwigObj* result;

  arg1 = *(std::vector< inworld::Message > *)carg1;
  arg2 = *(std::vector< inworld::Tool > *)carg2;
  cppresult = (inworld::graphs::LLMChatRequest *)new inworld::graphs::LLMChatRequest(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMChatRequest >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequest_new_std_vector_Sl_inworld_Message_Sg_(SwigObj* carg1) {
  inworld::graphs::LLMChatRequest *cppresult;
  std::vector< inworld::Message > arg1 ;
  SwigObj* result;

  arg1 = *(std::vector< inworld::Message > *)carg1;
  cppresult = (inworld::graphs::LLMChatRequest *)new inworld::graphs::LLMChatRequest(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMChatRequest >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequest_messages(SwigObj* carg1) {
  std::vector< inworld::Message > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequest const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequest *arg1 = (inworld::graphs::LLMChatRequest *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequest > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< inworld::Message > *) &((inworld::graphs::LLMChatRequest const *)arg1)->messages();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequest_tools(SwigObj* carg1) {
  std::vector< inworld::Tool > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequest const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequest *arg1 = (inworld::graphs::LLMChatRequest *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequest > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< inworld::Tool > *) &((inworld::graphs::LLMChatRequest const *)arg1)->tools();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequest_tool_choice(SwigObj* carg1) {
  std::optional< inworld::ToolChoice > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequest const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequest *arg1 = (inworld::graphs::LLMChatRequest *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequest > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::optional< inworld::ToolChoice > *) &((inworld::graphs::LLMChatRequest const *)arg1)->tool_choice();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC int inworld_LLMChatRequest_response_format(SwigObj* carg1) {
  inworld::ResponseFormat cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequest const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequest *arg1 = (inworld::graphs::LLMChatRequest *) 0 ;
  int result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequest > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (inworld::ResponseFormat)((inworld::graphs::LLMChatRequest const *)arg1)->response_format();
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMChatRequest_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequest const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequest *arg1 = (inworld::graphs::LLMChatRequest *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequest > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMChatRequest_is_valid__SWIG((inworld::graphs::LLMChatRequest const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMChatRequest_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMChatRequest > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequest *arg1 = (inworld::graphs::LLMChatRequest *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequest > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequest *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_LLMChatRequest_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequest const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequest *arg1 = (inworld::graphs::LLMChatRequest *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequest > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::LLMChatRequest const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatResponse_new(SwigObj* carg1) {
  inworld::graphs::LLMChatResponse *cppresult;
  inworld::Content arg1 ;
  SwigObj* result;

  arg1 = *(inworld::Content *)carg1;
  cppresult = (inworld::graphs::LLMChatResponse *)new inworld::graphs::LLMChatResponse(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMChatResponse >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC bool inworld_LLMChatResponse_is_streaming(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatResponse *arg1 = (inworld::graphs::LLMChatResponse *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatResponse > *)carg1;
  arg1 = (inworld::graphs::LLMChatResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)((inworld::graphs::LLMChatResponse const *)arg1)->is_streaming();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMChatResponse_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatResponse *arg1 = (inworld::graphs::LLMChatResponse *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatResponse > *)carg1;
  arg1 = (inworld::graphs::LLMChatResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMChatResponse_is_valid__SWIG((inworld::graphs::LLMChatResponse const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMChatResponse_has_complete_content(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatResponse *arg1 = (inworld::graphs::LLMChatResponse *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatResponse > *)carg1;
  arg1 = (inworld::graphs::LLMChatResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMChatResponse_has_complete_content__SWIG((inworld::graphs::LLMChatResponse const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatResponse_get_response_content(SwigObj* carg1) {
  inworld::Content cppresult;
  std::shared_ptr< inworld::graphs::LLMChatResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatResponse *arg1 = (inworld::graphs::LLMChatResponse *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatResponse > *)carg1;
  arg1 = (inworld::graphs::LLMChatResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_LLMChatResponse_get_response_content__SWIG((inworld::graphs::LLMChatResponse const *)arg1);
  result = (SwigObj*)new inworld::Content(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatResponse_get_response_stream(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::graphs::LLMChatResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatResponse *arg1 = (inworld::graphs::LLMChatResponse *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatResponse > *)carg1;
  arg1 = (inworld::graphs::LLMChatResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_LLMChatResponse_get_response_stream__SWIG((inworld::graphs::LLMChatResponse const *)arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< inworld::Content > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_LLMChatResponse_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMChatResponse > *smartarg1 = 0 ;
  inworld::graphs::LLMChatResponse *arg1 = (inworld::graphs::LLMChatResponse *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatResponse > *)carg1;
  arg1 = (inworld::graphs::LLMChatResponse *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_LLMChatResponse_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::LLMChatResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatResponse *arg1 = (inworld::graphs::LLMChatResponse *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatResponse > *)carg1;
  arg1 = (inworld::graphs::LLMChatResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::LLMChatResponse const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMCompletionResponse_new(const char * carg1) {
  inworld::graphs::LLMCompletionResponse *cppresult;
  std::string arg1 ;
  SwigObj* result;


  if (carg1)
  arg1 = carg1;

  cppresult = (inworld::graphs::LLMCompletionResponse *)new inworld::graphs::LLMCompletionResponse(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMCompletionResponse >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC bool inworld_LLMCompletionResponse_is_streaming(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionResponse *arg1 = (inworld::graphs::LLMCompletionResponse *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionResponse > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)((inworld::graphs::LLMCompletionResponse const *)arg1)->is_streaming();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMCompletionResponse_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionResponse *arg1 = (inworld::graphs::LLMCompletionResponse *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionResponse > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMCompletionResponse_is_valid__SWIG((inworld::graphs::LLMCompletionResponse const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMCompletionResponse_has_complete_content(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionResponse *arg1 = (inworld::graphs::LLMCompletionResponse *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionResponse > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMCompletionResponse_has_complete_content__SWIG((inworld::graphs::LLMCompletionResponse const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_LLMCompletionResponse_get_content_text(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionResponse *arg1 = (inworld::graphs::LLMCompletionResponse *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionResponse > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_LLMCompletionResponse_get_content_text__SWIG((inworld::graphs::LLMCompletionResponse const *)arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMCompletionResponse_get_input_stream(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionResponse *arg1 = (inworld::graphs::LLMCompletionResponse *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionResponse > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_LLMCompletionResponse_get_input_stream__SWIG((inworld::graphs::LLMCompletionResponse const *)arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< std::string > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_LLMCompletionResponse_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMCompletionResponse > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionResponse *arg1 = (inworld::graphs::LLMCompletionResponse *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionResponse > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionResponse *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_LLMCompletionResponse_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionResponse const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionResponse *arg1 = (inworld::graphs::LLMCompletionResponse *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionResponse > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionResponse *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::LLMCompletionResponse const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_ToolCallResult_new(const char * carg1, const char * carg2) {
  inworld::graphs::ToolCallResult *cppresult;
  std::string arg1 ;
  std::string arg2 ;
  SwigObj* result;


  if (carg1)
  arg1 = carg1;


  if (carg2)
  arg2 = carg2;

  cppresult = (inworld::graphs::ToolCallResult *)new inworld::graphs::ToolCallResult(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::ToolCallResult >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC const char * inworld_ToolCallResult_tool_call_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::ToolCallResult const > *smartarg1 = 0 ;
  inworld::graphs::ToolCallResult *arg1 = (inworld::graphs::ToolCallResult *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolCallResult > *)carg1;
  arg1 = (inworld::graphs::ToolCallResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::ToolCallResult const *)arg1)->tool_call_id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC const char * inworld_ToolCallResult_result(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::ToolCallResult const > *smartarg1 = 0 ;
  inworld::graphs::ToolCallResult *arg1 = (inworld::graphs::ToolCallResult *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolCallResult > *)carg1;
  arg1 = (inworld::graphs::ToolCallResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::ToolCallResult const *)arg1)->result();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC bool inworld_ToolCallResult_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::ToolCallResult const > *smartarg1 = 0 ;
  inworld::graphs::ToolCallResult *arg1 = (inworld::graphs::ToolCallResult *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolCallResult > *)carg1;
  arg1 = (inworld::graphs::ToolCallResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_ToolCallResult_is_valid__SWIG((inworld::graphs::ToolCallResult const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ToolCallResult_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::ToolCallResult > *smartarg1 = 0 ;
  inworld::graphs::ToolCallResult *arg1 = (inworld::graphs::ToolCallResult *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::ToolCallResult > *)carg1;
  arg1 = (inworld::graphs::ToolCallResult *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_ToolCallResult_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::ToolCallResult const > *smartarg1 = 0 ;
  inworld::graphs::ToolCallResult *arg1 = (inworld::graphs::ToolCallResult *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ToolCallResult > *)carg1;
  arg1 = (inworld::graphs::ToolCallResult *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::ToolCallResult const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC bool inworld_ListToolCallsResults_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::ListToolCallsResults const > *smartarg1 = 0 ;
  inworld::graphs::ListToolCallsResults *arg1 = (inworld::graphs::ListToolCallsResults *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolCallsResults > *)carg1;
  arg1 = (inworld::graphs::ListToolCallsResults *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_ListToolCallsResults_is_valid__SWIG((inworld::graphs::ListToolCallsResults const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ListToolCallsResults_new_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_ToolCallResult_Sg__Sg_(SwigObj* carg1) {
  inworld::graphs::ListToolCallsResults *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > arg1 ;
  SwigObj* result;

  arg1 = *(std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > *)carg1;
  cppresult = (inworld::graphs::ListToolCallsResults *)inworld_inworld_graphs_ListToolCallsResults_new__SWIG_0(SWIG_STD_MOVE(arg1));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::ListToolCallsResults >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ListToolCallsResults_tool_call_results_swig(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > > cppresult;
  std::shared_ptr< inworld::graphs::ListToolCallsResults const > *smartarg1 = 0 ;
  inworld::graphs::ListToolCallsResults *arg1 = (inworld::graphs::ListToolCallsResults *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolCallsResults > *)carg1;
  arg1 = (inworld::graphs::ListToolCallsResults *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_ListToolCallsResults_tool_call_results_swig__SWIG((inworld::graphs::ListToolCallsResults const *)arg1);
  result = (SwigObj*)new std::vector< std::shared_ptr< inworld::graphs::ToolCallResult > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ListToolCallsResults_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::ListToolCallsResults > *smartarg1 = 0 ;
  inworld::graphs::ListToolCallsResults *arg1 = (inworld::graphs::ListToolCallsResults *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::ListToolCallsResults > *)carg1;
  arg1 = (inworld::graphs::ListToolCallsResults *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_ListToolCallsResults_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::ListToolCallsResults const > *smartarg1 = 0 ;
  inworld::graphs::ListToolCallsResults *arg1 = (inworld::graphs::ListToolCallsResults *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::ListToolCallsResults > *)carg1;
  arg1 = (inworld::graphs::ListToolCallsResults *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::ListToolCallsResults const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSRequest_voice(SwigObj* carg1) {
  std::optional< inworld::Voice > *cppresult;
  std::shared_ptr< inworld::graphs::TTSRequest const > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::optional< inworld::Voice > *) &((inworld::graphs::TTSRequest const *)arg1)->voice();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_TTSRequest_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TTSRequest const > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_TTSRequest_is_valid__SWIG((inworld::graphs::TTSRequest const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSRequest_new_std_shared_ptr_Sl_inworld_graphs_Text_Sg__std_optional_Sl_inworld_Voice_Sg_(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::TTSRequest *cppresult;
  std::shared_ptr< inworld::graphs::Text > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Text > > arg1 ;
  std::optional< inworld::Voice > arg2 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::Text>*)carg1 : empty1;
  arg2 = *(std::optional< inworld::Voice > *)carg2;
  cppresult = (inworld::graphs::TTSRequest *)inworld_inworld_graphs_TTSRequest_new__SWIG_0(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::TTSRequest >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSRequest_new_rcstd_string_std_optional_Sl_inworld_Voice_Sg_(const char * carg1, SwigObj* carg2) {
  inworld::graphs::TTSRequest *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  std::optional< inworld::Voice > arg2 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = *(std::optional< inworld::Voice > *)carg2;
  cppresult = (inworld::graphs::TTSRequest *)inworld_inworld_graphs_TTSRequest_new__SWIG_1((std::string const &)*arg1,SWIG_STD_MOVE(arg2));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::TTSRequest >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSRequest_new_std_shared_ptr_Sl_inworld_graphs_DataStream_Sl_std_string_Sg__Sg__std_optional_Sl_inworld_Voice_Sg_(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::TTSRequest *cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::DataStream< std::string > > > arg1 ;
  std::optional< inworld::Voice > arg2 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::DataStream<std::string>>*)carg1 : empty1;
  arg2 = *(std::optional< inworld::Voice > *)carg2;
  cppresult = (inworld::graphs::TTSRequest *)inworld_inworld_graphs_TTSRequest_new__SWIG_2(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::TTSRequest >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC bool inworld_TTSRequest_has_text_content(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TTSRequest const > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_TTSRequest_has_text_content__SWIG((inworld::graphs::TTSRequest const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_TTSRequest_has_stream_content(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TTSRequest const > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_TTSRequest_has_stream_content__SWIG((inworld::graphs::TTSRequest const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSRequest_get_text_content(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Text > > cppresult;
  std::shared_ptr< inworld::graphs::TTSRequest const > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_TTSRequest_get_text_content__SWIG((inworld::graphs::TTSRequest const *)arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Text >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSRequest_get_content_stream(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::graphs::TTSRequest const > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_TTSRequest_get_content_stream__SWIG((inworld::graphs::TTSRequest const *)arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< std::string > >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSRequest_get_voice(SwigObj* carg1) {
  std::optional< inworld::Voice > cppresult;
  std::shared_ptr< inworld::graphs::TTSRequest const > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_TTSRequest_get_voice__SWIG((inworld::graphs::TTSRequest const *)arg1);
  result = (SwigObj*)new std::optional< inworld::Voice >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TTSRequest_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TTSRequest > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TTSRequest_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::TTSRequest const > *smartarg1 = 0 ;
  inworld::graphs::TTSRequest *arg1 = (inworld::graphs::TTSRequest *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSRequest > *)carg1;
  arg1 = (inworld::graphs::TTSRequest *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::TTSRequest const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomDataToJsonExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomDataToJsonExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomDataToJsonExecutor *)new inworld::swig_helpers::CustomDataToJsonExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomDataToJsonExecutor_SetNextOutput(const char * carg1) {
  std::string temp1 ;
  std::string *arg1 = 0 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  inworld::swig_helpers::CustomDataToJsonExecutor::SetNextOutput((std::string const &)*arg1);
}


SWIGEXPORTC void inworld_CustomDataToJsonExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomDataToJsonExecutor *arg1 = (inworld::swig_helpers::CustomDataToJsonExecutor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomDataToJsonExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomDataDestructor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomDataDestructor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomDataDestructor *)new inworld::swig_helpers::CustomDataDestructor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomDataDestructor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomDataDestructor *arg1 = (inworld::swig_helpers::CustomDataDestructor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomDataDestructor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomDataWrapper_new(const char * carg1, void * carg2, SwigObj* carg3, SwigObj* carg4) {
  inworld::swig_helpers::CustomDataWrapper *cppresult;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  inworld::swig_helpers::CustomDataToJsonExecutor *arg3 = 0 ;
  inworld::swig_helpers::CustomDataDestructor *arg4 = 0 ;
  SwigObj* result;

  arg1 = (char *) carg1;
  arg2 = (void *) carg2;

  arg3 = (inworld::swig_helpers::CustomDataToJsonExecutor *) carg3;


  arg4 = (inworld::swig_helpers::CustomDataDestructor *) carg4;

  cppresult = (inworld::swig_helpers::CustomDataWrapper *)new inworld::swig_helpers::CustomDataWrapper((char const *)arg1,arg2,(inworld::swig_helpers::CustomDataToJsonExecutor const &)*arg3,(inworld::swig_helpers::CustomDataDestructor const &)*arg4);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomDataWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_CustomDataWrapper_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::CustomDataWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomDataWrapper *arg1 = (inworld::swig_helpers::CustomDataWrapper *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomDataWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomDataWrapper *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_CustomDataWrapper_type_id(SwigObj* carg1) {
  char *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomDataWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomDataWrapper *arg1 = (inworld::swig_helpers::CustomDataWrapper *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomDataWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomDataWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (char *)((inworld::swig_helpers::CustomDataWrapper const *)arg1)->type_id();
  result = (const char *)cppresult;
  return result;
}


SWIGEXPORTC void * inworld_CustomDataWrapper_value(SwigObj* carg1) {
  void *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomDataWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomDataWrapper *arg1 = (inworld::swig_helpers::CustomDataWrapper *) 0 ;
  void * result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomDataWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomDataWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (void *)((inworld::swig_helpers::CustomDataWrapper const *)arg1)->value();
  result = (void *)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_CustomDataWrapper_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomDataWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomDataWrapper *arg1 = (inworld::swig_helpers::CustomDataWrapper *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomDataWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomDataWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_swig_helpers_CustomDataWrapper_is_valid__SWIG((inworld::swig_helpers::CustomDataWrapper const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_CustomDataWrapper_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomDataWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomDataWrapper *arg1 = (inworld::swig_helpers::CustomDataWrapper *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomDataWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomDataWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::swig_helpers::CustomDataWrapper const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_Error(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Error > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::Error >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Error >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_Text(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Text > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::Text >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Text >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_Audio(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Audio > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::Audio >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Audio >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_MatchedIntents(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MatchedIntents > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::MatchedIntents >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MatchedIntents >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_MatchedKeywords(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MatchedKeywords > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::MatchedKeywords >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MatchedKeywords >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_ClassificationResult(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ClassificationResult > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::ClassificationResult >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::ClassificationResult >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_GoalAdvancement(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::GoalAdvancement > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::GoalAdvancement >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::GoalAdvancement >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_KnowledgeRecords(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::KnowledgeRecords > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::KnowledgeRecords >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::KnowledgeRecords >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_Json(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Json > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::Json >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Json >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_MemoryState(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MemoryState > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::MemoryState >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MemoryState >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_LLMChatRequest(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMChatRequest > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::LLMChatRequest >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMChatRequest >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_LLMChatResponse(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMChatResponse > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::LLMChatResponse >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMChatResponse >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_LLMCompletionResponse(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::LLMCompletionResponse >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMCompletionResponse >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_TTSRequest(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::TTSRequest > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::TTSRequest >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::TTSRequest >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_CustomDataWrapper(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::CustomDataWrapper > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::swig_helpers::CustomDataWrapper >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::CustomDataWrapper >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_ToolCallData(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ToolCallData > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::ToolCallData >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::ToolCallData >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_ToolData(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ToolData > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::ToolData >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::ToolData >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_ListToolsData(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ListToolsData > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::ListToolsData >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::ListToolsData >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_ListToolCallData(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ListToolCallData > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::ListToolCallData >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::ListToolCallData >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_ToolCallResult(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ToolCallResult > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::ToolCallResult >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::ToolCallResult >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_ListToolCallsResults(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ListToolCallsResults > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1;
  cppresult = BaseDataAs< inworld::graphs::ListToolCallsResults >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::ListToolCallsResults >(cppresult) : 0);
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_BaseData_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_BaseData_new_rcstd_shared_ptr_Sl_inworld_graphs_BaseData_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  std::shared_ptr< inworld::graphs::BaseData > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::BaseData>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >((std::shared_ptr< inworld::graphs::BaseData > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_BaseData_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_BaseData_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_BaseData_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_BaseData_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::BaseData >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_BaseData_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Node_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::Node > *smartarg1 = 0 ;
  inworld::graphs::Node *arg1 = (inworld::graphs::Node *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::Node > *)carg1;
  arg1 = (inworld::graphs::Node *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_Node_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::Node const > *smartarg1 = 0 ;
  inworld::graphs::Node *arg1 = (inworld::graphs::Node *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Node > *)carg1;
  arg1 = (inworld::graphs::Node *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::Node const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_Node_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::graphs::Node const > *smartarg1 = 0 ;
  inworld::graphs::Node *arg1 = (inworld::graphs::Node *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Node > *)carg1;
  arg1 = (inworld::graphs::Node *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (inworld::graphs::ProcessContext *) carg2;


  arg3 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;

  try {
    cppresult = ((inworld::graphs::Node const *)arg1)->Process(*arg2,(std::vector< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_Node_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::Node const > *smartarg1 = 0 ;
  inworld::graphs::Node *arg1 = (inworld::graphs::Node *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::Node > *)carg1;
  arg1 = (inworld::graphs::Node *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_Node_is_valid__SWIG((inworld::graphs::Node const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TypedNodeBase_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNodeBase > *smartarg1 = 0 ;
  inworld::graphs::TypedNodeBase *arg1 = (inworld::graphs::TypedNodeBase *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNodeBase > *)carg1;
  arg1 = (inworld::graphs::TypedNodeBase *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_TypedNodeBase_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TypedNodeBase const > *smartarg1 = 0 ;
  inworld::graphs::TypedNodeBase *arg1 = (inworld::graphs::TypedNodeBase *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNodeBase > *)carg1;
  arg1 = (inworld::graphs::TypedNodeBase *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_TypedNodeBase_is_valid__SWIG((inworld::graphs::TypedNodeBase const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_TypedNodeBase_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNodeBase const > *smartarg1 = 0 ;
  inworld::graphs::TypedNodeBase *arg1 = (inworld::graphs::TypedNodeBase *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNodeBase > *)carg1;
  arg1 = (inworld::graphs::TypedNodeBase *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNodeBase const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_TypedNodeBase_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::graphs::TypedNodeBase const > *smartarg1 = 0 ;
  inworld::graphs::TypedNodeBase *arg1 = (inworld::graphs::TypedNodeBase *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNodeBase > *)carg1;
  arg1 = (inworld::graphs::TypedNodeBase *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (inworld::graphs::ProcessContext *) carg2;


  arg3 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;

  cppresult = ((inworld::graphs::TypedNodeBase const *)arg1)->Process(*arg2,(std::vector< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeProcessExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomNodeProcessExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomNodeProcessExecutor *)new inworld::swig_helpers::CustomNodeProcessExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeProcessExecutor_GetLastInputs() {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  SwigObj* result;

  cppresult = inworld::swig_helpers::CustomNodeProcessExecutor::GetLastInputs();
  result = (SwigObj*)new std::vector< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeProcessExecutor_GetLastContext() {
  inworld::graphs::ProcessContext *cppresult;
  SwigObj* result;

  cppresult = (inworld::graphs::ProcessContext *) &inworld::swig_helpers::CustomNodeProcessExecutor::GetLastContext();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomNodeProcessExecutor_SetLastOutput(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;

  arg1 = *(absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)carg1;
  inworld::swig_helpers::CustomNodeProcessExecutor::SetLastOutput(SWIG_STD_MOVE(arg1));
}


SWIGEXPORTC void inworld_CustomNodeProcessExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomNodeProcessExecutor *arg1 = (inworld::swig_helpers::CustomNodeProcessExecutor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomNodeProcessExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeThreadedProcessExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomNodeThreadedProcessExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomNodeThreadedProcessExecutor *)new inworld::swig_helpers::CustomNodeThreadedProcessExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeThreadedProcessExecutor_GetInputs(int carg1) {
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::CustomNodeThreadedProcessExecutor::GetInputs(arg1);
  result = (SwigObj*)new std::vector< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeThreadedProcessExecutor_GetContext(int carg1) {
  inworld::graphs::ProcessContext *cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = (inworld::graphs::ProcessContext *) &inworld::swig_helpers::CustomNodeThreadedProcessExecutor::GetContext(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomNodeThreadedProcessExecutor_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)carg2;
  inworld::swig_helpers::CustomNodeThreadedProcessExecutor::SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_CustomNodeThreadedProcessExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomNodeThreadedProcessExecutor *arg1 = (inworld::swig_helpers::CustomNodeThreadedProcessExecutor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomNodeThreadedProcessExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeDestructor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomNodeDestructor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomNodeDestructor *)new inworld::swig_helpers::CustomNodeDestructor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomNodeDestructor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomNodeDestructor *arg1 = (inworld::swig_helpers::CustomNodeDestructor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomNodeDestructor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_new_rcstd_string_rcinworld_swig_helpers_CustomNodeProcessExecutor(const char * carg1, SwigObj* carg2) {
  inworld::swig_helpers::CustomNodeWrapper *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  inworld::swig_helpers::CustomNodeProcessExecutor *arg2 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = (inworld::swig_helpers::CustomNodeProcessExecutor *) carg2;

  cppresult = (inworld::swig_helpers::CustomNodeWrapper *)new inworld::swig_helpers::CustomNodeWrapper((std::string const &)*arg1,(inworld::swig_helpers::CustomNodeProcessExecutor const &)*arg2);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_new_rcstd_string_rcinworld_swig_helpers_CustomNodeThreadedProcessExecutor(const char * carg1, SwigObj* carg2) {
  inworld::swig_helpers::CustomNodeWrapper *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  inworld::swig_helpers::CustomNodeThreadedProcessExecutor *arg2 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = (inworld::swig_helpers::CustomNodeThreadedProcessExecutor *) carg2;

  cppresult = (inworld::swig_helpers::CustomNodeWrapper *)new inworld::swig_helpers::CustomNodeWrapper((std::string const &)*arg1,(inworld::swig_helpers::CustomNodeThreadedProcessExecutor const &)*arg2);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_new_rcstd_string_rcinworld_swig_helpers_CustomNodeProcessExecutor_rcinworld_swig_helpers_CustomNodeDestructor(const char * carg1, SwigObj* carg2, SwigObj* carg3) {
  inworld::swig_helpers::CustomNodeWrapper *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  inworld::swig_helpers::CustomNodeProcessExecutor *arg2 = 0 ;
  inworld::swig_helpers::CustomNodeDestructor *arg3 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = (inworld::swig_helpers::CustomNodeProcessExecutor *) carg2;


  arg3 = (inworld::swig_helpers::CustomNodeDestructor *) carg3;

  cppresult = (inworld::swig_helpers::CustomNodeWrapper *)new inworld::swig_helpers::CustomNodeWrapper((std::string const &)*arg1,(inworld::swig_helpers::CustomNodeProcessExecutor const &)*arg2,(inworld::swig_helpers::CustomNodeDestructor const &)*arg3);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_new_rcstd_string_rcinworld_swig_helpers_CustomNodeThreadedProcessExecutor_rcinworld_swig_helpers_CustomNodeDestructor(const char * carg1, SwigObj* carg2, SwigObj* carg3) {
  inworld::swig_helpers::CustomNodeWrapper *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  inworld::swig_helpers::CustomNodeThreadedProcessExecutor *arg2 = 0 ;
  inworld::swig_helpers::CustomNodeDestructor *arg3 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = (inworld::swig_helpers::CustomNodeThreadedProcessExecutor *) carg2;


  arg3 = (inworld::swig_helpers::CustomNodeDestructor *) carg3;

  cppresult = (inworld::swig_helpers::CustomNodeWrapper *)new inworld::swig_helpers::CustomNodeWrapper((std::string const &)*arg1,(inworld::swig_helpers::CustomNodeThreadedProcessExecutor const &)*arg2,(inworld::swig_helpers::CustomNodeDestructor const &)*arg3);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_new_rcstd_string_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg__rcinworld_swig_helpers_CustomNodeProcessExecutor(const char * carg1, SwigObj* carg2, SwigObj* carg3) {
  inworld::swig_helpers::CustomNodeWrapper *cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *arg2 = 0 ;
  inworld::swig_helpers::CustomNodeProcessExecutor *arg3 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg2 : &empty2;

  arg3 = (inworld::swig_helpers::CustomNodeProcessExecutor *) carg3;

  cppresult = (inworld::swig_helpers::CustomNodeWrapper *)new inworld::swig_helpers::CustomNodeWrapper((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &)*arg2,(inworld::swig_helpers::CustomNodeProcessExecutor const &)*arg3);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_new_rcstd_string_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg__rcinworld_swig_helpers_CustomNodeThreadedProcessExecutor(const char * carg1, SwigObj* carg2, SwigObj* carg3) {
  inworld::swig_helpers::CustomNodeWrapper *cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *arg2 = 0 ;
  inworld::swig_helpers::CustomNodeThreadedProcessExecutor *arg3 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg2 : &empty2;

  arg3 = (inworld::swig_helpers::CustomNodeThreadedProcessExecutor *) carg3;

  cppresult = (inworld::swig_helpers::CustomNodeWrapper *)new inworld::swig_helpers::CustomNodeWrapper((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &)*arg2,(inworld::swig_helpers::CustomNodeThreadedProcessExecutor const &)*arg3);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_new_rcstd_string_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg__rcinworld_swig_helpers_CustomNodeProcessExecutor_rcinworld_swig_helpers_CustomNodeDestructor(const char * carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  inworld::swig_helpers::CustomNodeWrapper *cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *arg2 = 0 ;
  inworld::swig_helpers::CustomNodeProcessExecutor *arg3 = 0 ;
  inworld::swig_helpers::CustomNodeDestructor *arg4 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg2 : &empty2;

  arg3 = (inworld::swig_helpers::CustomNodeProcessExecutor *) carg3;


  arg4 = (inworld::swig_helpers::CustomNodeDestructor *) carg4;

  cppresult = (inworld::swig_helpers::CustomNodeWrapper *)new inworld::swig_helpers::CustomNodeWrapper((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &)*arg2,(inworld::swig_helpers::CustomNodeProcessExecutor const &)*arg3,(inworld::swig_helpers::CustomNodeDestructor const &)*arg4);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_new_rcstd_string_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg__rcinworld_swig_helpers_CustomNodeThreadedProcessExecutor_rcinworld_swig_helpers_CustomNodeDestructor(const char * carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  inworld::swig_helpers::CustomNodeWrapper *cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *arg2 = 0 ;
  inworld::swig_helpers::CustomNodeThreadedProcessExecutor *arg3 = 0 ;
  inworld::swig_helpers::CustomNodeDestructor *arg4 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg2 : &empty2;

  arg3 = (inworld::swig_helpers::CustomNodeThreadedProcessExecutor *) carg3;


  arg4 = (inworld::swig_helpers::CustomNodeDestructor *) carg4;

  cppresult = (inworld::swig_helpers::CustomNodeWrapper *)new inworld::swig_helpers::CustomNodeWrapper((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &)*arg2,(inworld::swig_helpers::CustomNodeThreadedProcessExecutor const &)*arg3,(inworld::swig_helpers::CustomNodeDestructor const &)*arg4);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_CustomNodeWrapper_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomNodeWrapper *arg1 = (inworld::swig_helpers::CustomNodeWrapper *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomNodeWrapper *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeWrapper_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomNodeWrapper *arg1 = (inworld::swig_helpers::CustomNodeWrapper *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomNodeWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomNodeWrapper *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (inworld::graphs::ProcessContext *) carg2;


  arg3 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;

  try {
    cppresult = ((inworld::swig_helpers::CustomNodeWrapper const *)arg1)->Process(*arg2,(std::vector< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_CustomNodeWrapper_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomNodeWrapper *arg1 = (inworld::swig_helpers::CustomNodeWrapper *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomNodeWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomNodeWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_swig_helpers_CustomNodeWrapper_is_valid__SWIG((inworld::swig_helpers::CustomNodeWrapper const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_CustomNodeWrapper_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomNodeWrapper *arg1 = (inworld::swig_helpers::CustomNodeWrapper *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomNodeWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomNodeWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::swig_helpers::CustomNodeWrapper const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_Text_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Text > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_Text_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Text > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Text > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_Text_Audio_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Audio > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Audio > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Audio > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Audio> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Audio> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_Text_Audio_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Audio > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Audio > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Audio > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Audio> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Audio> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Audio > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_BaseData_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::Text > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::BaseData,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::BaseData,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_BaseData_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::Text > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::BaseData,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::BaseData,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::Text > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_TTSOutputStream_Text_DataStream_String_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::DataStream<inworld::graphs::TTSOutput>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::DataStream<inworld::graphs::TTSOutput>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_TTSOutputStream_Text_DataStream_String_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::DataStream<inworld::graphs::TTSOutput>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::DataStream<inworld::graphs::TTSOutput>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_DataStream_TTSOutput_Variant_Text_DataStream_String_TTSRequest_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::DataStream<inworld::graphs::TTSOutput>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::TTSRequest>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::DataStream<inworld::graphs::TTSOutput>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::TTSRequest>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_DataStream_TTSOutput_Variant_Text_DataStream_String_TTSRequest_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::DataStream<inworld::graphs::TTSOutput>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::TTSRequest>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::DataStream<inworld::graphs::TTSOutput>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::TTSRequest>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::DataStream< inworld::graphs::TTSOutput >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_GoalAdvancement_EventHistory_Json_Text_Text_Text_Text_MatchedIntents_Text_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text >,std::optional< inworld::graphs::Text > > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text >,std::optional< inworld::graphs::Text > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text >,std::optional< inworld::graphs::Text > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant<inworld::graphs::MatchedIntents,inworld::graphs::Text>,std::optional<inworld::graphs::Text>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant<inworld::graphs::MatchedIntents,inworld::graphs::Text>,std::optional<inworld::graphs::Text>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_GoalAdvancement_EventHistory_Json_Text_Text_Text_Text_MatchedIntents_Text_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text >,std::optional< inworld::graphs::Text > > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text >,std::optional< inworld::graphs::Text > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text >,std::optional< inworld::graphs::Text > > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant<inworld::graphs::MatchedIntents,inworld::graphs::Text>,std::optional<inworld::graphs::Text>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant<inworld::graphs::MatchedIntents,inworld::graphs::Text>,std::optional<inworld::graphs::Text>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::GoalAdvancement,inworld::graphs::EventHistory,inworld::graphs::Json,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text >,std::optional< inworld::graphs::Text > > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_KnowledgeRecords_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_KnowledgeRecords_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_Text_Variant_Text_DataStream_String_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_Text_Variant_Text_DataStream_String_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_DataStream_String_Variant_Text_DataStream_String_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::DataStream<std::string>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::DataStream<std::string>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_DataStream_String_Variant_Text_DataStream_String_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::DataStream<std::string>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::DataStream<std::string>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string > > > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_BaseData_LLMChatRequest_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::LLMChatRequest > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::LLMChatRequest > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::LLMChatRequest > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::BaseData,inworld::graphs::LLMChatRequest> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::BaseData,inworld::graphs::LLMChatRequest> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_BaseData_LLMChatRequest_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::LLMChatRequest > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::LLMChatRequest > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::LLMChatRequest > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::BaseData,inworld::graphs::LLMChatRequest> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::BaseData,inworld::graphs::LLMChatRequest> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::BaseData,inworld::graphs::LLMChatRequest > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_Text_Variant_Audio_DataStream_AudioChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Audio,inworld::graphs::DataStream<inworld::AudioChunk>>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Audio,inworld::graphs::DataStream<inworld::AudioChunk>>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_Text_Variant_Audio_DataStream_AudioChunk_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Audio,inworld::graphs::DataStream<inworld::AudioChunk>>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Audio,inworld::graphs::DataStream<inworld::AudioChunk>>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_Text_Variant_Text_DataStream_String_LLMCompletionResponse_LLMChatResponse_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_Text_Variant_Text_DataStream_String_LLMCompletionResponse_LLMChatResponse_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::Text,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TypedNode_DataStream_String_Variant_Text_DataStream_String_LLMCompletionResponse_LLMChatResponse_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::DataStream<std::string>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::DataStream<std::string>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_DataStream_String_Variant_Text_DataStream_String_LLMCompletionResponse_LLMChatResponse_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::DataStream<std::string>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse>> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::DataStream<std::string>,std::variant<inworld::graphs::Text,inworld::graphs::DataStream<std::string>,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::DataStream< std::string >,std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > const *)arg1)->id();

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_new() {
  std::optional< inworld::BatchProcessingOptions > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< inworld::BatchProcessingOptions > *)new std::optional< inworld::BatchProcessingOptions >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_new_rcinworld_BatchProcessingOptions(SwigObj* carg1) {
  std::optional< inworld::BatchProcessingOptions > *cppresult;
  inworld::BatchProcessingOptions *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::BatchProcessingOptions *) carg1;

  cppresult = (std::optional< inworld::BatchProcessingOptions > *)new std::optional< inworld::BatchProcessingOptions >((inworld::BatchProcessingOptions const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_copy(SwigObj* carg1) {
  std::optional< inworld::BatchProcessingOptions > *cppresult;
  std::optional< inworld::BatchProcessingOptions > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;

  cppresult = (std::optional< inworld::BatchProcessingOptions > *)new std::optional< inworld::BatchProcessingOptions >((std::optional< inworld::BatchProcessingOptions > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_BatchProcessingOptions_delete(SwigObj* carg1) {
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_BatchProcessingOptions_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;
  bool result;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;
  cppresult = (bool)((std::optional< inworld::BatchProcessingOptions > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_value(SwigObj* carg1) {
  inworld::BatchProcessingOptions *cppresult;
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;
  cppresult = (inworld::BatchProcessingOptions *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_valueConst(SwigObj* carg1) {
  inworld::BatchProcessingOptions *cppresult;
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;
  cppresult = (inworld::BatchProcessingOptions *) &((std::optional< inworld::BatchProcessingOptions > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::BatchProcessingOptions cppresult;
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;
  inworld::BatchProcessingOptions *arg2 = 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;

  arg2 = (inworld::BatchProcessingOptions *) carg2;

  cppresult = ((std::optional< inworld::BatchProcessingOptions > const *)arg1)->value_or((inworld::BatchProcessingOptions const &)*arg2);
  result = (SwigObj*)new inworld::BatchProcessingOptions(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_BatchProcessingOptions_reset(SwigObj* carg1) {
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_get(SwigObj* carg1) {
  inworld::BatchProcessingOptions *cppresult;
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;
  cppresult = (inworld::BatchProcessingOptions *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_getConst(SwigObj* carg1) {
  inworld::BatchProcessingOptions *cppresult;
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;
  cppresult = (inworld::BatchProcessingOptions *) &((std::optional< inworld::BatchProcessingOptions > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_BatchProcessingOptions_get_value(SwigObj* carg1) {
  inworld::BatchProcessingOptions *cppresult;
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;
  cppresult = (inworld::BatchProcessingOptions *) &inworld_std_optional_Sl_inworld_BatchProcessingOptions_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_BatchProcessingOptions_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::BatchProcessingOptions > *arg1 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;
  inworld::BatchProcessingOptions *arg2 = 0 ;

  arg1 = (std::optional< inworld::BatchProcessingOptions > *) carg1;

  arg2 = (inworld::BatchProcessingOptions *) carg2;

  inworld_std_optional_Sl_inworld_BatchProcessingOptions_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_Span_SetAttribute_rcstd_string_rcstd_string(SwigObj* carg1, const char * carg2, const char * carg3) {
  std::string temp2 ;
  std::string temp3 ;
  inworld::telemetry::Span *arg1 = (inworld::telemetry::Span *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;

  arg1 = (inworld::telemetry::Span *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;

  (arg1)->SetAttribute((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORTC void inworld_Span_SetAttribute_rcstd_string_rcstd_vector_Sl_std_string_Sg_(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  std::string temp2 ;
  inworld::telemetry::Span *arg1 = (inworld::telemetry::Span *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;

  arg1 = (inworld::telemetry::Span *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (std::vector< std::string > *) carg3;

  (arg1)->SetAttribute((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
}


SWIGEXPORTC void inworld_Span_SetOK(SwigObj* carg1) {
  inworld::telemetry::Span *arg1 = (inworld::telemetry::Span *) 0 ;

  arg1 = (inworld::telemetry::Span *) carg1;
  (arg1)->SetOK();
}


SWIGEXPORTC void inworld_Span_SetError(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::telemetry::Span *arg1 = (inworld::telemetry::Span *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::telemetry::Span *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  (arg1)->SetError((std::string const &)*arg2);
}


SWIGEXPORTC void inworld_Span_End(SwigObj* carg1) {
  inworld::telemetry::Span *arg1 = (inworld::telemetry::Span *) 0 ;

  arg1 = (inworld::telemetry::Span *) carg1;
  (arg1)->End();
}


SWIGEXPORTC void inworld_Span_delete(SwigObj* carg1) {
  inworld::telemetry::Span *arg1 = (inworld::telemetry::Span *) 0 ;

  arg1 = (inworld::telemetry::Span *) carg1;
  delete arg1;
}


SWIGEXPORTC const char * inworld_GenerateExecutionId() {
  std::string cppresult;
  const char * result;

  cppresult = GenerateExecutionId();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_StartSpan_rcstd_string(const char * carg1) {
  inworld::telemetry::Span cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  cppresult = StartSpan((std::string const &)*arg1);
  result = (SwigObj*)new inworld::telemetry::Span(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_StartSpan_rcstd_string_rcstd_map_Sl_std_string_Sc_std_string_Sg_(const char * carg1, SwigObj* carg2) {
  inworld::telemetry::Span cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;

  cppresult = StartSpan((std::string const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
  result = (SwigObj*)new inworld::telemetry::Span(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_StartSpan_rcstd_string_rstd_map_Sl_std_string_Sc_std_string_Sg__rcstd_vector_Sl_inworld_telemetry_Span_Sg__rcinworld_telemetry_Span(const char * carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  inworld::telemetry::Span cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  std::vector< inworld::telemetry::Span > *arg3 = 0 ;
  inworld::telemetry::Span *arg4 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;


  arg3 = (std::vector< inworld::telemetry::Span > *) carg3;


  arg4 = (inworld::telemetry::Span *) carg4;

  cppresult = StartSpan((std::string const &)*arg1,*arg2,(std::vector< inworld::telemetry::Span > const &)*arg3,(inworld::telemetry::Span const &)*arg4);
  result = (SwigObj*)new inworld::telemetry::Span(cppresult);
  return result;
}


SWIGEXPORTC void inworld_BatchProcessingOptions_max_queue_size_set(SwigObj* carg1, size_t carg2) {
  inworld::BatchProcessingOptions *arg1 = (inworld::BatchProcessingOptions *) 0 ;
  std::size_t arg2 ;

  arg1 = (inworld::BatchProcessingOptions *) carg1;
  arg2 = (std::size_t) carg2;
  if (arg1) (arg1)->max_queue_size = arg2;
}


SWIGEXPORTC size_t inworld_BatchProcessingOptions_max_queue_size_get(SwigObj* carg1) {
  std::size_t cppresult;
  inworld::BatchProcessingOptions *arg1 = (inworld::BatchProcessingOptions *) 0 ;
  size_t result;

  arg1 = (inworld::BatchProcessingOptions *) carg1;
  cppresult =  ((arg1)->max_queue_size);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_BatchProcessingOptions_max_export_batch_size_set(SwigObj* carg1, size_t carg2) {
  inworld::BatchProcessingOptions *arg1 = (inworld::BatchProcessingOptions *) 0 ;
  std::size_t arg2 ;

  arg1 = (inworld::BatchProcessingOptions *) carg1;
  arg2 = (std::size_t) carg2;
  if (arg1) (arg1)->max_export_batch_size = arg2;
}


SWIGEXPORTC size_t inworld_BatchProcessingOptions_max_export_batch_size_get(SwigObj* carg1) {
  std::size_t cppresult;
  inworld::BatchProcessingOptions *arg1 = (inworld::BatchProcessingOptions *) 0 ;
  size_t result;

  arg1 = (inworld::BatchProcessingOptions *) carg1;
  cppresult =  ((arg1)->max_export_batch_size);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BatchProcessingOptions_new() {
  inworld::BatchProcessingOptions *cppresult;
  SwigObj* result;

  cppresult = (inworld::BatchProcessingOptions *)new inworld::BatchProcessingOptions();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_BatchProcessingOptions_delete(SwigObj* carg1) {
  inworld::BatchProcessingOptions *arg1 = (inworld::BatchProcessingOptions *) 0 ;

  arg1 = (inworld::BatchProcessingOptions *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TracerConfig_sampling_rate_set(SwigObj* carg1, double carg2) {
  inworld::TracerConfig *arg1 = (inworld::TracerConfig *) 0 ;
  double arg2 ;

  arg1 = (inworld::TracerConfig *) carg1;
  arg2 = (double) carg2;
  if (arg1) (arg1)->sampling_rate = arg2;
}


SWIGEXPORTC double inworld_TracerConfig_sampling_rate_get(SwigObj* carg1) {
  double cppresult;
  inworld::TracerConfig *arg1 = (inworld::TracerConfig *) 0 ;
  double result;

  arg1 = (inworld::TracerConfig *) carg1;
  cppresult = (double) ((arg1)->sampling_rate);
  result = (double)cppresult;
  return result;
}


SWIGEXPORTC void inworld_TracerConfig_batch_processing_opts_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::TracerConfig *arg1 = (inworld::TracerConfig *) 0 ;
  std::optional< inworld::BatchProcessingOptions > *arg2 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;

  arg1 = (inworld::TracerConfig *) carg1;
  arg2 = (std::optional< inworld::BatchProcessingOptions > *) carg2;
  if (arg1) (arg1)->batch_processing_opts = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TracerConfig_batch_processing_opts_get(SwigObj* carg1) {
  std::optional< inworld::BatchProcessingOptions > *cppresult;
  inworld::TracerConfig *arg1 = (inworld::TracerConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TracerConfig *) carg1;
  cppresult = (std::optional< inworld::BatchProcessingOptions > *)& ((arg1)->batch_processing_opts);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TracerConfig_new() {
  inworld::TracerConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::TracerConfig *)new inworld::TracerConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TracerConfig_delete(SwigObj* carg1) {
  inworld::TracerConfig *arg1 = (inworld::TracerConfig *) 0 ;

  arg1 = (inworld::TracerConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LoggerConfig_log_level_set(SwigObj* carg1, int carg2) {
  inworld::LoggerConfig *arg1 = (inworld::LoggerConfig *) 0 ;
  enum inworld::LogLevel arg2 ;

  arg1 = (inworld::LoggerConfig *) carg1;
  arg2 = (enum inworld::LogLevel) carg2;
  if (arg1) (arg1)->log_level = arg2;
}


SWIGEXPORTC int inworld_LoggerConfig_log_level_get(SwigObj* carg1) {
  enum inworld::LogLevel cppresult;
  inworld::LoggerConfig *arg1 = (inworld::LoggerConfig *) 0 ;
  int result;

  arg1 = (inworld::LoggerConfig *) carg1;
  cppresult = (enum inworld::LogLevel) ((arg1)->log_level);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LoggerConfig_sink_absl_logs_set(SwigObj* carg1, bool carg2) {
  inworld::LoggerConfig *arg1 = (inworld::LoggerConfig *) 0 ;
  bool arg2 ;

  arg1 = (inworld::LoggerConfig *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->sink_absl_logs = arg2;
}


SWIGEXPORTC bool inworld_LoggerConfig_sink_absl_logs_get(SwigObj* carg1) {
  bool cppresult;
  inworld::LoggerConfig *arg1 = (inworld::LoggerConfig *) 0 ;
  bool result;

  arg1 = (inworld::LoggerConfig *) carg1;
  cppresult = (bool) ((arg1)->sink_absl_logs);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LoggerConfig_batch_processing_opts_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LoggerConfig *arg1 = (inworld::LoggerConfig *) 0 ;
  std::optional< inworld::BatchProcessingOptions > *arg2 = (std::optional< inworld::BatchProcessingOptions > *) 0 ;

  arg1 = (inworld::LoggerConfig *) carg1;
  arg2 = (std::optional< inworld::BatchProcessingOptions > *) carg2;
  if (arg1) (arg1)->batch_processing_opts = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LoggerConfig_batch_processing_opts_get(SwigObj* carg1) {
  std::optional< inworld::BatchProcessingOptions > *cppresult;
  inworld::LoggerConfig *arg1 = (inworld::LoggerConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::LoggerConfig *) carg1;
  cppresult = (std::optional< inworld::BatchProcessingOptions > *)& ((arg1)->batch_processing_opts);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LoggerConfig_new() {
  inworld::LoggerConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::LoggerConfig *)new inworld::LoggerConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LoggerConfig_delete(SwigObj* carg1) {
  inworld::LoggerConfig *arg1 = (inworld::LoggerConfig *) 0 ;

  arg1 = (inworld::LoggerConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MetricConfig_metric_type_set(SwigObj* carg1, int carg2) {
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;
  enum inworld::MetricConfig::MetricType arg2 ;

  arg1 = (inworld::MetricConfig *) carg1;
  arg2 = (enum inworld::MetricConfig::MetricType) carg2;
  if (arg1) (arg1)->metric_type = arg2;
}


SWIGEXPORTC int inworld_MetricConfig_metric_type_get(SwigObj* carg1) {
  enum inworld::MetricConfig::MetricType cppresult;
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;
  int result;

  arg1 = (inworld::MetricConfig *) carg1;
  cppresult = (enum inworld::MetricConfig::MetricType) ((arg1)->metric_type);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MetricConfig_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::MetricConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_MetricConfig_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;
  const char * result;

  arg1 = (inworld::MetricConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_MetricConfig_description_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::MetricConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORTC const char * inworld_MetricConfig_description_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;
  const char * result;

  arg1 = (inworld::MetricConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->description);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_MetricConfig_unit_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::MetricConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->unit = *arg2;
}


SWIGEXPORTC const char * inworld_MetricConfig_unit_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;
  const char * result;

  arg1 = (inworld::MetricConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->unit);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_MetricConfig_new() {
  inworld::MetricConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::MetricConfig *)new inworld::MetricConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MetricConfig_delete(SwigObj* carg1) {
  inworld::MetricConfig *arg1 = (inworld::MetricConfig *) 0 ;

  arg1 = (inworld::MetricConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TelemetryConfig_tracer_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  inworld::TracerConfig *arg2 = (inworld::TracerConfig *) 0 ;

  arg1 = (inworld::TelemetryConfig *) carg1;
  arg2 = (inworld::TracerConfig *) carg2;
  if (arg1) (arg1)->tracer = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfig_tracer_get(SwigObj* carg1) {
  inworld::TracerConfig *cppresult;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfig *) carg1;
  cppresult = (inworld::TracerConfig *)& ((arg1)->tracer);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TelemetryConfig_logger_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  inworld::LoggerConfig *arg2 = (inworld::LoggerConfig *) 0 ;

  arg1 = (inworld::TelemetryConfig *) carg1;
  arg2 = (inworld::LoggerConfig *) carg2;
  if (arg1) (arg1)->logger = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfig_logger_get(SwigObj* carg1) {
  inworld::LoggerConfig *cppresult;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfig *) carg1;
  cppresult = (inworld::LoggerConfig *)& ((arg1)->logger);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TelemetryConfig_service_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::TelemetryConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->service_name = *arg2;
}


SWIGEXPORTC const char * inworld_TelemetryConfig_service_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  const char * result;

  arg1 = (inworld::TelemetryConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->service_name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TelemetryConfig_service_version_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::TelemetryConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->service_version = *arg2;
}


SWIGEXPORTC const char * inworld_TelemetryConfig_service_version_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  const char * result;

  arg1 = (inworld::TelemetryConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->service_version);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TelemetryConfig_endpoint_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::TelemetryConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->endpoint = *arg2;
}


SWIGEXPORTC const char * inworld_TelemetryConfig_endpoint_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  const char * result;

  arg1 = (inworld::TelemetryConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->endpoint);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TelemetryConfig_api_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::TelemetryConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->api_key = *arg2;
}


SWIGEXPORTC const char * inworld_TelemetryConfig_api_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  const char * result;

  arg1 = (inworld::TelemetryConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->api_key);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_TelemetryConfig_exporter_type_set(SwigObj* carg1, int carg2) {
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  enum inworld::ExporterType arg2 ;

  arg1 = (inworld::TelemetryConfig *) carg1;
  arg2 = (enum inworld::ExporterType) carg2;
  if (arg1) (arg1)->exporter_type = arg2;
}


SWIGEXPORTC int inworld_TelemetryConfig_exporter_type_get(SwigObj* carg1) {
  enum inworld::ExporterType cppresult;
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;
  int result;

  arg1 = (inworld::TelemetryConfig *) carg1;
  cppresult = (enum inworld::ExporterType) ((arg1)->exporter_type);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfig_new() {
  inworld::TelemetryConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::TelemetryConfig *)new inworld::TelemetryConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TelemetryConfig_delete(SwigObj* carg1) {
  inworld::TelemetryConfig *arg1 = (inworld::TelemetryConfig *) 0 ;

  arg1 = (inworld::TelemetryConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_new() {
  inworld::TelemetryConfigBuilder *cppresult;
  SwigObj* result;

  cppresult = (inworld::TelemetryConfigBuilder *)new inworld::TelemetryConfigBuilder();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_SetServiceName(SwigObj* carg1, const char * carg2) {
  inworld::TelemetryConfigBuilder *cppresult;
  std::string temp2 ;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (inworld::TelemetryConfigBuilder *) &(arg1)->SetServiceName((std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_SetServiceVersion(SwigObj* carg1, const char * carg2) {
  inworld::TelemetryConfigBuilder *cppresult;
  std::string temp2 ;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (inworld::TelemetryConfigBuilder *) &(arg1)->SetServiceVersion((std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_SetExporterType(SwigObj* carg1, int carg2) {
  inworld::TelemetryConfigBuilder *cppresult;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  inworld::ExporterType arg2 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;
  arg2 = (inworld::ExporterType) carg2;
  cppresult = (inworld::TelemetryConfigBuilder *) &(arg1)->SetExporterType(arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_SetEndpoint(SwigObj* carg1, const char * carg2) {
  inworld::TelemetryConfigBuilder *cppresult;
  std::string temp2 ;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (inworld::TelemetryConfigBuilder *) &(arg1)->SetEndpoint((std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_SetApiKey(SwigObj* carg1, const char * carg2) {
  inworld::TelemetryConfigBuilder *cppresult;
  std::string temp2 ;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (inworld::TelemetryConfigBuilder *) &(arg1)->SetApiKey((std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_SetSinkAbslLogs(SwigObj* carg1, bool carg2) {
  inworld::TelemetryConfigBuilder *cppresult;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  bool arg2 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;
  arg2 = (bool) carg2;
  cppresult = (inworld::TelemetryConfigBuilder *) &(arg1)->SetSinkAbslLogs(arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_SetSamplingRate(SwigObj* carg1, double carg2) {
  inworld::TelemetryConfigBuilder *cppresult;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  double arg2 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;
  arg2 = (double) carg2;
  cppresult = (inworld::TelemetryConfigBuilder *) &(arg1)->SetSamplingRate(arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_SetLogLevel(SwigObj* carg1, int carg2) {
  inworld::TelemetryConfigBuilder *cppresult;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  inworld::LogLevel arg2 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;
  arg2 = (inworld::LogLevel) carg2;
  cppresult = (inworld::TelemetryConfigBuilder *) &(arg1)->SetLogLevel(arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TelemetryConfigBuilder_Build(SwigObj* carg1) {
  inworld::TelemetryConfig cppresult;
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;
  cppresult = ((inworld::TelemetryConfigBuilder const *)arg1)->Build();
  result = (SwigObj*)new inworld::TelemetryConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TelemetryConfigBuilder_delete(SwigObj* carg1) {
  inworld::TelemetryConfigBuilder *arg1 = (inworld::TelemetryConfigBuilder *) 0 ;

  arg1 = (inworld::TelemetryConfigBuilder *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ConfigureTelemetry_rcinworld_TelemetryConfig(SwigObj* carg1) {
  inworld::TelemetryConfig *arg1 = 0 ;


  arg1 = (inworld::TelemetryConfig *) carg1;

  inworld::ConfigureTelemetry((inworld::TelemetryConfig const &)*arg1);
}


SWIGEXPORTC void inworld_ConfigureTelemetry_rcstd_string_rcstd_string(const char * carg1, const char * carg2) {
  std::string temp1 ;
  std::string temp2 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;


  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  inworld::ConfigureTelemetry((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ShutdownTelemetry() {
  inworld::ShutdownTelemetry();
}


SWIGEXPORTC void inworld_ConfigureMetric(SwigObj* carg1) {
  inworld::MetricConfig *arg1 = 0 ;


  arg1 = (inworld::MetricConfig *) carg1;

  inworld::ConfigureMetric((inworld::MetricConfig const &)*arg1);
}


SWIGEXPORTC void inworld_RecordCounterUInt_rcstd_string_unsigned_SS_long_SS_long_rcstd_map_Sl_std_string_Sc_std_string_Sg_(const char * carg1, unsigned long long carg2, SwigObj* carg3) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  uint64_t arg2 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (uint64_t) carg2;

  arg3 = (std::map< std::string,std::string,std::less< std::string > > *) carg3;

  inworld::RecordCounterUInt((std::string const &)*arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORTC void inworld_RecordCounterUInt_rcstd_string_unsigned_SS_long_SS_long(const char * carg1, unsigned long long carg2) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  uint64_t arg2 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (uint64_t) carg2;
  inworld::RecordCounterUInt((std::string const &)*arg1,arg2);
}


SWIGEXPORTC void inworld_RecordCounterDouble_rcstd_string_d_rcstd_map_Sl_std_string_Sc_std_string_Sg_(const char * carg1, double carg2, SwigObj* carg3) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (double) carg2;

  arg3 = (std::map< std::string,std::string,std::less< std::string > > *) carg3;

  inworld::RecordCounterDouble((std::string const &)*arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORTC void inworld_RecordCounterDouble_rcstd_string_d(const char * carg1, double carg2) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  double arg2 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (double) carg2;
  inworld::RecordCounterDouble((std::string const &)*arg1,arg2);
}


SWIGEXPORTC void inworld_RecordGaugeInt_rcstd_string_long_SS_long_rcstd_map_Sl_std_string_Sc_std_string_Sg_(const char * carg1, long long carg2, SwigObj* carg3) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  int64_t arg2 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (int64_t) carg2;

  arg3 = (std::map< std::string,std::string,std::less< std::string > > *) carg3;

  inworld::RecordGaugeInt((std::string const &)*arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORTC void inworld_RecordGaugeInt_rcstd_string_long_SS_long(const char * carg1, long long carg2) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  int64_t arg2 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (int64_t) carg2;
  inworld::RecordGaugeInt((std::string const &)*arg1,arg2);
}


SWIGEXPORTC void inworld_RecordGaugeDouble_rcstd_string_d_rcstd_map_Sl_std_string_Sc_std_string_Sg_(const char * carg1, double carg2, SwigObj* carg3) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (double) carg2;

  arg3 = (std::map< std::string,std::string,std::less< std::string > > *) carg3;

  inworld::RecordGaugeDouble((std::string const &)*arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORTC void inworld_RecordGaugeDouble_rcstd_string_d(const char * carg1, double carg2) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  double arg2 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (double) carg2;
  inworld::RecordGaugeDouble((std::string const &)*arg1,arg2);
}


SWIGEXPORTC void inworld_RecordHistogramUInt_rcstd_string_unsigned_SS_long_SS_long_rcstd_map_Sl_std_string_Sc_std_string_Sg_(const char * carg1, unsigned long long carg2, SwigObj* carg3) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  uint64_t arg2 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (uint64_t) carg2;

  arg3 = (std::map< std::string,std::string,std::less< std::string > > *) carg3;

  inworld::RecordHistogramUInt((std::string const &)*arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORTC void inworld_RecordHistogramUInt_rcstd_string_unsigned_SS_long_SS_long(const char * carg1, unsigned long long carg2) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  uint64_t arg2 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (uint64_t) carg2;
  inworld::RecordHistogramUInt((std::string const &)*arg1,arg2);
}


SWIGEXPORTC void inworld_RecordHistogramDouble_rcstd_string_d_rcstd_map_Sl_std_string_Sc_std_string_Sg_(const char * carg1, double carg2, SwigObj* carg3) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (double) carg2;

  arg3 = (std::map< std::string,std::string,std::less< std::string > > *) carg3;

  inworld::RecordHistogramDouble((std::string const &)*arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORTC void inworld_RecordHistogramDouble_rcstd_string_d(const char * carg1, double carg2) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  double arg2 ;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  arg2 = (double) carg2;
  inworld::RecordHistogramDouble((std::string const &)*arg1,arg2);
}


SWIGEXPORTC void inworld_LogMessage_eLogLevel_rcstd_string_rcstd_map_Sl_std_string_Sc_std_string_Sg_(int carg1, const char * carg2, SwigObj* carg3) {
  std::string temp2 ;
  inworld::LogLevel arg1 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;

  arg1 = (inworld::LogLevel) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (std::map< std::string,std::string,std::less< std::string > > *) carg3;

  inworld::LogMessage(arg1,(std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORTC void inworld_LogMessage_eLogLevel_rcstd_string(int carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LogLevel arg1 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::LogLevel) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  inworld::LogMessage(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_LogMessage_eLogLevel_rcstd_string_std_shared_ptr_Sl_inworld_graphs_ProcessContext_Sg__rcstd_map_Sl_std_string_Sc_std_string_Sg_(int carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  std::string temp2 ;
  std::shared_ptr< inworld::graphs::ProcessContext > empty3 ;
  inworld::LogLevel arg1 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ProcessContext > > arg3 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;

  arg1 = (inworld::LogLevel) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = carg3 ? *(std::shared_ptr< inworld::graphs::ProcessContext>*)carg3 : empty3;

  arg4 = (std::map< std::string,std::string,std::less< std::string > > *) carg4;

  inworld::LogMessage(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3),(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
}


SWIGEXPORTC void inworld_LogMessage_eLogLevel_rcstd_string_std_shared_ptr_Sl_inworld_graphs_ProcessContext_Sg_(int carg1, const char * carg2, SwigObj* carg3) {
  std::string temp2 ;
  std::shared_ptr< inworld::graphs::ProcessContext > empty3 ;
  inworld::LogLevel arg1 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ProcessContext > > arg3 ;

  arg1 = (inworld::LogLevel) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = carg3 ? *(std::shared_ptr< inworld::graphs::ProcessContext>*)carg3 : empty3;
  inworld::LogMessage(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORTC SwigObj* inworld_vector_TelemetrySpan_new() {
  std::vector< inworld::telemetry::Span > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::telemetry::Span > *)new std::vector< inworld::telemetry::Span >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_TelemetrySpan_copy(SwigObj* carg1) {
  std::vector< inworld::telemetry::Span > *cppresult;
  std::vector< inworld::telemetry::Span > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;

  cppresult = (std::vector< inworld::telemetry::Span > *)new std::vector< inworld::telemetry::Span >((std::vector< inworld::telemetry::Span > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_TelemetrySpan_size(SwigObj* carg1) {
  std::vector< inworld::telemetry::Span >::size_type cppresult;
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;
  cppresult = ((std::vector< inworld::telemetry::Span > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_TelemetrySpan_capacity(SwigObj* carg1) {
  std::vector< inworld::telemetry::Span >::size_type cppresult;
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;
  cppresult = ((std::vector< inworld::telemetry::Span > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_TelemetrySpan_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;
  std::vector< inworld::telemetry::Span >::size_type arg2 ;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;
  arg2 = (std::vector< inworld::telemetry::Span >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_TelemetrySpan_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;
  cppresult = (bool)((std::vector< inworld::telemetry::Span > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_TelemetrySpan_clear(SwigObj* carg1) {
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_TelemetrySpan_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;
  std::vector< inworld::telemetry::Span >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;

  arg2 = (std::vector< inworld::telemetry::Span >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::telemetry::Span >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_TelemetrySpan_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::telemetry::Span >::value_type *cppresult;
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::telemetry::Span >::value_type *) &inworld_std_vector_Sl_inworld_telemetry_Span_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_TelemetrySpan_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;
  int arg2 ;
  std::vector< inworld::telemetry::Span >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::telemetry::Span >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_telemetry_Span_Sg__set__SWIG(arg1,arg2,(inworld::telemetry::Span const &)*arg3);
}


SWIGEXPORTC void inworld_vector_TelemetrySpan_delete(SwigObj* carg1) {
  std::vector< inworld::telemetry::Span > *arg1 = (std::vector< inworld::telemetry::Span > *) 0 ;

  arg1 = (std::vector< inworld::telemetry::Span > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_Edge_new() {
  std::vector< inworld::graphs::Edge > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< inworld::graphs::Edge > *)new std::vector< inworld::graphs::Edge >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Edge_copy(SwigObj* carg1) {
  std::vector< inworld::graphs::Edge > *cppresult;
  std::vector< inworld::graphs::Edge > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;

  cppresult = (std::vector< inworld::graphs::Edge > *)new std::vector< inworld::graphs::Edge >((std::vector< inworld::graphs::Edge > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Edge_size(SwigObj* carg1) {
  std::vector< inworld::graphs::Edge >::size_type cppresult;
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;
  cppresult = ((std::vector< inworld::graphs::Edge > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Edge_capacity(SwigObj* carg1) {
  std::vector< inworld::graphs::Edge >::size_type cppresult;
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;
  size_t result;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;
  cppresult = ((std::vector< inworld::graphs::Edge > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Edge_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;
  std::vector< inworld::graphs::Edge >::size_type arg2 ;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;
  arg2 = (std::vector< inworld::graphs::Edge >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_Edge_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;
  bool result;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;
  cppresult = (bool)((std::vector< inworld::graphs::Edge > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Edge_clear(SwigObj* carg1) {
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_Edge_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;
  std::vector< inworld::graphs::Edge >::value_type *arg2 = 0 ;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;

  arg2 = (std::vector< inworld::graphs::Edge >::value_type *) carg2;

  (arg1)->push_back((std::vector< inworld::graphs::Edge >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_Edge_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::graphs::Edge >::value_type *cppresult;
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::graphs::Edge >::value_type *) &inworld_std_vector_Sl_inworld_graphs_Edge_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Edge_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;
  int arg2 ;
  std::vector< inworld::graphs::Edge >::value_type *arg3 = 0 ;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;
  arg2 = (int) carg2;

  arg3 = (std::vector< inworld::graphs::Edge >::value_type *) carg3;

  inworld_std_vector_Sl_inworld_graphs_Edge_Sg__set__SWIG(arg1,arg2,(inworld::graphs::Edge const &)*arg3);
}


SWIGEXPORTC void inworld_vector_Edge_delete(SwigObj* carg1) {
  std::vector< inworld::graphs::Edge > *arg1 = (std::vector< inworld::graphs::Edge > *) 0 ;

  arg1 = (std::vector< inworld::graphs::Edge > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_char_new() {
  std::vector< char > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< char > *)new std::vector< char >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_char_copy(SwigObj* carg1) {
  std::vector< char > *cppresult;
  std::vector< char > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< char > *) carg1;

  cppresult = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_char_size(SwigObj* carg1) {
  std::vector< char >::size_type cppresult;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t result;

  arg1 = (std::vector< char > *) carg1;
  cppresult = ((std::vector< char > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_char_capacity(SwigObj* carg1) {
  std::vector< char >::size_type cppresult;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t result;

  arg1 = (std::vector< char > *) carg1;
  cppresult = ((std::vector< char > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_char_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;

  arg1 = (std::vector< char > *) carg1;
  arg2 = (std::vector< char >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_char_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;

  arg1 = (std::vector< char > *) carg1;
  cppresult = (bool)((std::vector< char > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_char_clear(SwigObj* carg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;

  arg1 = (std::vector< char > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_char_push_back(SwigObj* carg1, char carg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;

  arg1 = (std::vector< char > *) carg1;
  arg2 = &carg2;
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
}


SWIGEXPORTC char inworld_vector_char_get(SwigObj* carg1, int carg2) {
  std::vector< char >::value_type *cppresult;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char result;

  arg1 = (std::vector< char > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< char >::value_type *) &inworld_std_vector_Sl_char_Sg__get__SWIG(arg1,arg2);
  result = (char)*cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_char_set(SwigObj* carg1, int carg2, char carg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;

  arg1 = (std::vector< char > *) carg1;
  arg2 = (int) carg2;
  arg3 = &carg3;
  inworld_std_vector_Sl_char_Sg__set__SWIG(arg1,arg2,(char const &)*arg3);
}


SWIGEXPORTC void inworld_vector_char_delete(SwigObj* carg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;

  arg1 = (std::vector< char > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_memcpy_to_vector_char(const char * carg1, size_t carg2) {
  std::vector< char > cppresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  SwigObj* result;

  arg1 = (char *) carg1;
  arg2 = (size_t) carg2;
  cppresult = memcpy_to_vector< char >((char const *)arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new std::vector< char >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_float_new() {
  std::vector< float > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< float > *)new std::vector< float >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_float_copy(SwigObj* carg1) {
  std::vector< float > *cppresult;
  std::vector< float > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< float > *) carg1;

  cppresult = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_float_size(SwigObj* carg1) {
  std::vector< float >::size_type cppresult;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;

  arg1 = (std::vector< float > *) carg1;
  cppresult = ((std::vector< float > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_float_capacity(SwigObj* carg1) {
  std::vector< float >::size_type cppresult;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;

  arg1 = (std::vector< float > *) carg1;
  cppresult = ((std::vector< float > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_float_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;

  arg1 = (std::vector< float > *) carg1;
  arg2 = (std::vector< float >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_float_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;

  arg1 = (std::vector< float > *) carg1;
  cppresult = (bool)((std::vector< float > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_float_clear(SwigObj* carg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;

  arg1 = (std::vector< float > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_float_push_back(SwigObj* carg1, float carg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;

  arg1 = (std::vector< float > *) carg1;
  arg2 = &carg2;
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
}


SWIGEXPORTC float inworld_vector_float_get(SwigObj* carg1, int carg2) {
  std::vector< float >::value_type *cppresult;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;

  arg1 = (std::vector< float > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< float >::value_type *) &inworld_std_vector_Sl_float_Sg__get__SWIG(arg1,arg2);
  result = (float)*cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_float_set(SwigObj* carg1, int carg2, float carg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;

  arg1 = (std::vector< float > *) carg1;
  arg2 = (int) carg2;
  arg3 = &carg3;
  inworld_std_vector_Sl_float_Sg__set__SWIG(arg1,arg2,(float const &)*arg3);
}


SWIGEXPORTC void inworld_vector_float_delete(SwigObj* carg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;

  arg1 = (std::vector< float > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_memcpy_to_vector_float(const float * carg1, size_t carg2) {
  std::vector< float > cppresult;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  SwigObj* result;

  arg1 = (float *) carg1;
  arg2 = (size_t) carg2;
  cppresult = memcpy_to_vector< float >((float const *)arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new std::vector< float >(cppresult);
  return result;
}


SWIGEXPORTC const char * inworld_DeviceInfo_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::DeviceInfo *arg1 = (inworld::DeviceInfo *) 0 ;
  const char * result;

  arg1 = (inworld::DeviceInfo *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC unsigned long long inworld_DeviceInfo_free_memory_bytes_get(SwigObj* carg1) {
  unsigned long long cppresult;
  inworld::DeviceInfo *arg1 = (inworld::DeviceInfo *) 0 ;
  unsigned long long result;

  arg1 = (inworld::DeviceInfo *) carg1;
  cppresult = (unsigned long long) ((arg1)->free_memory_bytes);
  result = (unsigned long long)cppresult;
  return result;
}


SWIGEXPORTC unsigned long long inworld_DeviceInfo_total_memory_bytes_get(SwigObj* carg1) {
  unsigned long long cppresult;
  inworld::DeviceInfo *arg1 = (inworld::DeviceInfo *) 0 ;
  unsigned long long result;

  arg1 = (inworld::DeviceInfo *) carg1;
  cppresult = (unsigned long long) ((arg1)->total_memory_bytes);
  result = (unsigned long long)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DeviceInfo_new() {
  inworld::DeviceInfo *cppresult;
  SwigObj* result;

  cppresult = (inworld::DeviceInfo *)new inworld::DeviceInfo();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_DeviceInfo_delete(SwigObj* carg1) {
  inworld::DeviceInfo *arg1 = (inworld::DeviceInfo *) 0 ;

  arg1 = (inworld::DeviceInfo *) carg1;
  delete arg1;
}


SWIGEXPORTC int inworld_Device_type(SwigObj* carg1) {
  inworld::DeviceType cppresult;
  inworld::Device *arg1 = (inworld::Device *) 0 ;
  int result;

  arg1 = (inworld::Device *) carg1;
  cppresult = (inworld::DeviceType)((inworld::Device const *)arg1)->type();
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC signed char inworld_Device_index(SwigObj* carg1) {
  inworld::DeviceIndex cppresult;
  inworld::Device *arg1 = (inworld::Device *) 0 ;
  signed char result;

  arg1 = (inworld::Device *) carg1;
  cppresult = (inworld::DeviceIndex)((inworld::Device const *)arg1)->index();
  result = (signed char)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Device_info(SwigObj* carg1) {
  inworld::DeviceInfo cppresult;
  inworld::Device *arg1 = (inworld::Device *) 0 ;
  SwigObj* result;

  arg1 = (inworld::Device *) carg1;
  cppresult = ((inworld::Device const *)arg1)->info();
  result = (SwigObj*)new inworld::DeviceInfo(cppresult);
  return result;
}


SWIGEXPORTC void inworld_Device_delete(SwigObj* carg1) {
  inworld::Device *arg1 = (inworld::Device *) 0 ;

  arg1 = (inworld::Device *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_DeviceRegistry_delete(SwigObj* carg1) {
  inworld::DeviceRegistry *arg1 = (inworld::DeviceRegistry *) 0 ;

  arg1 = (inworld::DeviceRegistry *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_DeviceRegistry_GetInstance() {
  inworld::DeviceRegistry *cppresult;
  SwigObj* result;

  cppresult = (inworld::DeviceRegistry *) &inworld::DeviceRegistry::GetInstance();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DeviceRegistry_GetAvailableDevices(SwigObj* carg1) {
  std::vector< inworld::Device > cppresult;
  inworld::DeviceRegistry *arg1 = (inworld::DeviceRegistry *) 0 ;
  SwigObj* result;

  arg1 = (inworld::DeviceRegistry *) carg1;
  cppresult = inworld_inworld_DeviceRegistry_GetAvailableDevices__SWIG((inworld::DeviceRegistry const *)arg1);
  result = (SwigObj*)new std::vector< inworld::Device >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_AgentSpeech_agent_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::AgentSpeech *arg1 = (inworld::AgentSpeech *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::AgentSpeech *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->agent_name = *arg2;
}


SWIGEXPORTC const char * inworld_AgentSpeech_agent_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::AgentSpeech *arg1 = (inworld::AgentSpeech *) 0 ;
  const char * result;

  arg1 = (inworld::AgentSpeech *) carg1;
  cppresult = (std::string *) & ((arg1)->agent_name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_AgentSpeech_utterance_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::AgentSpeech *arg1 = (inworld::AgentSpeech *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::AgentSpeech *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->utterance = *arg2;
}


SWIGEXPORTC const char * inworld_AgentSpeech_utterance_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::AgentSpeech *arg1 = (inworld::AgentSpeech *) 0 ;
  const char * result;

  arg1 = (inworld::AgentSpeech *) carg1;
  cppresult = (std::string *) & ((arg1)->utterance);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_AgentSpeech_delete(SwigObj* carg1) {
  inworld::AgentSpeech *arg1 = (inworld::AgentSpeech *) 0 ;

  arg1 = (inworld::AgentSpeech *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_AgentAction_agent_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::AgentAction *arg1 = (inworld::AgentAction *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::AgentAction *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->agent_name = *arg2;
}


SWIGEXPORTC const char * inworld_AgentAction_agent_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::AgentAction *arg1 = (inworld::AgentAction *) 0 ;
  const char * result;

  arg1 = (inworld::AgentAction *) carg1;
  cppresult = (std::string *) & ((arg1)->agent_name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_AgentAction_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::AgentAction *arg1 = (inworld::AgentAction *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::AgentAction *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_AgentAction_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::AgentAction *arg1 = (inworld::AgentAction *) 0 ;
  const char * result;

  arg1 = (inworld::AgentAction *) carg1;
  cppresult = (std::string *) & ((arg1)->name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_AgentAction_set_parameter(SwigObj* carg1, const char * carg2, const char * carg3) {
  std::string temp2 ;
  std::string temp3 ;
  inworld::AgentAction *arg1 = (inworld::AgentAction *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;

  arg1 = (inworld::AgentAction *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;

  inworld_inworld_AgentAction_set_parameter__SWIG(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORTC bool inworld_AgentAction_contains_parameter(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  inworld::AgentAction *arg1 = (inworld::AgentAction *) 0 ;
  std::string *arg2 = 0 ;
  bool result;

  arg1 = (inworld::AgentAction *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (bool)inworld_inworld_AgentAction_contains_parameter__SWIG((inworld::AgentAction const *)arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_AgentAction_get_parameter(SwigObj* carg1, const char * carg2) {
  std::string *cppresult;
  std::string temp2 ;
  inworld::AgentAction *arg1 = (inworld::AgentAction *) 0 ;
  std::string *arg2 = 0 ;
  const char * result;

  arg1 = (inworld::AgentAction *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (std::string *) &inworld_inworld_AgentAction_get_parameter__SWIG((inworld::AgentAction const *)arg1,(std::string const &)*arg2);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_AgentAction_delete(SwigObj* carg1) {
  inworld::AgentAction *arg1 = (inworld::AgentAction *) 0 ;

  arg1 = (inworld::AgentAction *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_Event_speech(SwigObj* carg1) {
  inworld::AgentSpeech *cppresult;
  inworld::Event *arg1 = (inworld::Event *) 0 ;
  SwigObj* result;

  arg1 = (inworld::Event *) carg1;
  cppresult = (inworld::AgentSpeech *)inworld_inworld_Event_speech__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Event_action(SwigObj* carg1) {
  inworld::AgentAction *cppresult;
  inworld::Event *arg1 = (inworld::Event *) 0 ;
  SwigObj* result;

  arg1 = (inworld::Event *) carg1;
  cppresult = (inworld::AgentAction *)inworld_inworld_Event_action__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_Event_is_valid(SwigObj* carg1) {
  bool cppresult;
  inworld::Event *arg1 = (inworld::Event *) 0 ;
  bool result;

  arg1 = (inworld::Event *) carg1;
  cppresult = (bool)inworld_inworld_Event_is_valid__SWIG((inworld::Event const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Event_new() {
  inworld::Event *cppresult;
  SwigObj* result;

  cppresult = (inworld::Event *)new inworld::Event();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Event_delete(SwigObj* carg1) {
  inworld::Event *arg1 = (inworld::Event *) 0 ;

  arg1 = (inworld::Event *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_EmojiRemover_Create(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  cppresult = inworld::EmojiRemover::Create(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::EmojiRemover > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_EmojiRemover_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::EmojiRemover > *smartarg1 = 0 ;
  inworld::EmojiRemover *arg1 = (inworld::EmojiRemover *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::EmojiRemover > *)carg1;
  arg1 = (inworld::EmojiRemover *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_EmojiRemover_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::EmojiRemover > *smartarg1 = 0 ;
  inworld::EmojiRemover *arg1 = (inworld::EmojiRemover *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::EmojiRemover > *)carg1;
  arg1 = (inworld::EmojiRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_EmojiRemover_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::EmojiRemover > *smartarg1 = 0 ;
  inworld::EmojiRemover *arg1 = (inworld::EmojiRemover *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::EmojiRemover > *)carg1;
  arg1 = (inworld::EmojiRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_EmojiRemover_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::EmojiRemover const > *smartarg1 = 0 ;
  inworld::EmojiRemover *arg1 = (inworld::EmojiRemover *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::EmojiRemover > *)carg1;
  arg1 = (inworld::EmojiRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_EmojiRemover_is_valid__SWIG((inworld::EmojiRemover const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SentenceStream_Create(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::SentenceStream > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  cppresult = inworld::SentenceStream::Create(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::SentenceStream > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_SentenceStream_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::SentenceStream > *smartarg1 = 0 ;
  inworld::SentenceStream *arg1 = (inworld::SentenceStream *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::SentenceStream > *)carg1;
  arg1 = (inworld::SentenceStream *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_SentenceStream_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::SentenceStream > *smartarg1 = 0 ;
  inworld::SentenceStream *arg1 = (inworld::SentenceStream *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::SentenceStream > *)carg1;
  arg1 = (inworld::SentenceStream *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SentenceStream_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::SentenceStream > *smartarg1 = 0 ;
  inworld::SentenceStream *arg1 = (inworld::SentenceStream *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::SentenceStream > *)carg1;
  arg1 = (inworld::SentenceStream *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_SentenceStream_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::SentenceStream const > *smartarg1 = 0 ;
  inworld::SentenceStream *arg1 = (inworld::SentenceStream *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::SentenceStream > *)carg1;
  arg1 = (inworld::SentenceStream *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_SentenceStream_is_valid__SWIG((inworld::SentenceStream const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ContentToStringStream_Create(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  cppresult = inworld::ContentToStringStream::Create(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::ContentToStringStream > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ContentToStringStream_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::ContentToStringStream > *smartarg1 = 0 ;
  inworld::ContentToStringStream *arg1 = (inworld::ContentToStringStream *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::ContentToStringStream > *)carg1;
  arg1 = (inworld::ContentToStringStream *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_ContentToStringStream_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::ContentToStringStream > *smartarg1 = 0 ;
  inworld::ContentToStringStream *arg1 = (inworld::ContentToStringStream *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::ContentToStringStream > *)carg1;
  arg1 = (inworld::ContentToStringStream *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_ContentToStringStream_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::ContentToStringStream > *smartarg1 = 0 ;
  inworld::ContentToStringStream *arg1 = (inworld::ContentToStringStream *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::ContentToStringStream > *)carg1;
  arg1 = (inworld::ContentToStringStream *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ContentToStringStream_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::ContentToStringStream const > *smartarg1 = 0 ;
  inworld::ContentToStringStream *arg1 = (inworld::ContentToStringStream *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::ContentToStringStream > *)carg1;
  arg1 = (inworld::ContentToStringStream *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_ContentToStringStream_is_valid__SWIG((inworld::ContentToStringStream const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SubstringRemover_Create(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  std::vector< std::string > *arg2 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (std::vector< std::string > *) carg2;

  cppresult = inworld::SubstringRemover::Create(SWIG_STD_MOVE(arg1),(std::vector< std::string > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::SubstringRemover > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_SubstringRemover_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::SubstringRemover > *smartarg1 = 0 ;
  inworld::SubstringRemover *arg1 = (inworld::SubstringRemover *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::SubstringRemover > *)carg1;
  arg1 = (inworld::SubstringRemover *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_SubstringRemover_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::SubstringRemover > *smartarg1 = 0 ;
  inworld::SubstringRemover *arg1 = (inworld::SubstringRemover *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::SubstringRemover > *)carg1;
  arg1 = (inworld::SubstringRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SubstringRemover_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::SubstringRemover > *smartarg1 = 0 ;
  inworld::SubstringRemover *arg1 = (inworld::SubstringRemover *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::SubstringRemover > *)carg1;
  arg1 = (inworld::SubstringRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_SubstringRemover_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::SubstringRemover const > *smartarg1 = 0 ;
  inworld::SubstringRemover *arg1 = (inworld::SubstringRemover *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::SubstringRemover > *)carg1;
  arg1 = (inworld::SubstringRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_SubstringRemover_is_valid__SWIG((inworld::SubstringRemover const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextInBracketsRemover_Create(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  cppresult = inworld::TextInBracketsRemover::Create(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TextInBracketsRemover > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TextInBracketsRemover_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::TextInBracketsRemover > *smartarg1 = 0 ;
  inworld::TextInBracketsRemover *arg1 = (inworld::TextInBracketsRemover *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::TextInBracketsRemover > *)carg1;
  arg1 = (inworld::TextInBracketsRemover *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_TextInBracketsRemover_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::TextInBracketsRemover > *smartarg1 = 0 ;
  inworld::TextInBracketsRemover *arg1 = (inworld::TextInBracketsRemover *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::TextInBracketsRemover > *)carg1;
  arg1 = (inworld::TextInBracketsRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextInBracketsRemover_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::TextInBracketsRemover > *smartarg1 = 0 ;
  inworld::TextInBracketsRemover *arg1 = (inworld::TextInBracketsRemover *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::TextInBracketsRemover > *)carg1;
  arg1 = (inworld::TextInBracketsRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TextInBracketsRemover_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::TextInBracketsRemover const > *smartarg1 = 0 ;
  inworld::TextInBracketsRemover *arg1 = (inworld::TextInBracketsRemover *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::TextInBracketsRemover > *)carg1;
  arg1 = (inworld::TextInBracketsRemover *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_TextInBracketsRemover_is_valid__SWIG((inworld::TextInBracketsRemover const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamDestructor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamDestructor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamDestructor *)new inworld::swig_helpers::TransformationStreamDestructor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamDestructor_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamDestructor *arg1 = (inworld::swig_helpers::TransformationStreamDestructor *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamDestructor *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TransformationStream_BaseData_To_string_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_string_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_BaseData_To_string_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_string_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_string_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_string_GetInput(int carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_string_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::string > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::string > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::string >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_BaseData_To_Content_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_Content_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_BaseData_To_Content_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_Content_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_Content_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_Content_GetInput(int carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_Content_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::Content > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::Content > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_BaseData_To_SpeechChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_SpeechChunk_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_BaseData_To_SpeechChunk_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_SpeechChunk_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_SpeechChunk_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_SpeechChunk_GetInput(int carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_SpeechChunk_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::SpeechChunk > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::SpeechChunk > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_BaseData_To_TTSOutput_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_TTSOutput_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_BaseData_To_TTSOutput_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_TTSOutput_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_TTSOutput_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_TTSOutput_GetInput(int carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_TTSOutput_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::graphs::TTSOutput > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::graphs::TTSOutput > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_BaseData_To_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_BaseData_To_BaseData_Read(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_BaseData_To_BaseData_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::shared_ptr<inworld::graphs::BaseData>,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_BaseData_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_BaseData_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_BaseData_GetInput(int carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_BaseData_To_BaseData_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::shared_ptr< inworld::graphs::BaseData >,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_string_To_Content_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::Content > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_Content_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::Content > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_string_To_Content_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_Content_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_Content_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_Content_GetInput(int carg1) {
  absl::StatusOr< std::string > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_Content_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::Content > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::Content > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_string_To_SpeechChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_SpeechChunk_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_string_To_SpeechChunk_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_SpeechChunk_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_SpeechChunk_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_SpeechChunk_GetInput(int carg1) {
  absl::StatusOr< std::string > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_SpeechChunk_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::SpeechChunk > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::SpeechChunk > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_string_To_TTSOutput_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_TTSOutput_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_string_To_TTSOutput_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_TTSOutput_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_TTSOutput_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_TTSOutput_GetInput(int carg1) {
  absl::StatusOr< std::string > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_TTSOutput_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::graphs::TTSOutput > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::graphs::TTSOutput > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_string_To_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_BaseData_Read(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_string_To_BaseData_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_BaseData_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_BaseData_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_BaseData_GetInput(int carg1) {
  absl::StatusOr< std::string > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_BaseData_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_string_To_string_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,std::string > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_std_string_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< std::string,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< std::string,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_string_To_string_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,std::string > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_string_To_string_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< std::string,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< std::string,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< std::string,std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<std::string,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<std::string,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_string_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_string_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_string_To_string_GetInput(int carg1) {
  absl::StatusOr< std::string > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_string_To_string_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::string > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::string > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< std::string,std::string >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_Content_To_string_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,std::string > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_string_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,std::string > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_Content_To_string_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_string_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_string_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_string_GetInput(int carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_string_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::string > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::string > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::string >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_Content_To_SpeechChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_SpeechChunk_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_Content_To_SpeechChunk_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_SpeechChunk_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_SpeechChunk_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_SpeechChunk_GetInput(int carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_SpeechChunk_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::SpeechChunk > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::SpeechChunk > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_Content_To_TTSOutput_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_TTSOutput_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_Content_To_TTSOutput_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_TTSOutput_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_TTSOutput_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_TTSOutput_GetInput(int carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_TTSOutput_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::graphs::TTSOutput > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::graphs::TTSOutput > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_Content_To_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_BaseData_Read(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_Content_To_BaseData_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_BaseData_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_BaseData_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_BaseData_GetInput(int carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_BaseData_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_Content_To_Content_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_Content_Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_Content_To_Content_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_Content_To_Content_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::Content,inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::Content,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::Content,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_Content_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_Content_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_Content_To_Content_GetInput(int carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_Content_To_Content_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::Content > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::Content > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::Content,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_SpeechChunk_To_string_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_string_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_SpeechChunk_To_string_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_string_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_string_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_string_GetInput(int carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_string_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::string > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::string > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::string >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_SpeechChunk_To_Content_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_Content_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_SpeechChunk_To_Content_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_Content_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_Content_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_Content_GetInput(int carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_Content_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::Content > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::Content > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_SpeechChunk_To_TTSOutput_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_TTSOutput_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_SpeechChunk_To_TTSOutput_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_TTSOutput_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_TTSOutput_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_TTSOutput_GetInput(int carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_TTSOutput_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::graphs::TTSOutput > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::graphs::TTSOutput > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_SpeechChunk_To_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_BaseData_Read(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_SpeechChunk_To_BaseData_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_BaseData_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_BaseData_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_BaseData_GetInput(int carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_BaseData_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_SpeechChunk_To_SpeechChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_SpeechChunk_Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_SpeechChunk_To_SpeechChunk_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_SpeechChunk_To_SpeechChunk_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::SpeechChunk,inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::SpeechChunk,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_SpeechChunk_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_SpeechChunk_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_SpeechChunk_GetInput(int carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_SpeechChunk_To_SpeechChunk_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::SpeechChunk > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::SpeechChunk > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::SpeechChunk,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_TTSOutput_To_string_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_std_string_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_string_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_string_Read(SwigObj* carg1) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_TTSOutput_To_string_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::string > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::string> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_string_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_string_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_string_GetInput(int carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_string_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::string > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::string > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::string >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_TTSOutput_To_Content_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_inworld_Content_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_Content_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::Content > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_Content_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_TTSOutput_To_Content_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::Content > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::Content> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_Content_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_Content_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_Content_GetInput(int carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_Content_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::Content > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::Content > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_TTSOutput_To_SpeechChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_inworld_SpeechChunk_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_SpeechChunk_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_SpeechChunk_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_TTSOutput_To_SpeechChunk_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::SpeechChunk > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_SpeechChunk_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_SpeechChunk_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_SpeechChunk_GetInput(int carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_SpeechChunk_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::SpeechChunk > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::SpeechChunk > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_TTSOutput_To_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_BaseData_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_BaseData_Read(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_TTSOutput_To_BaseData_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_BaseData_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_BaseData_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_BaseData_GetInput(int carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_BaseData_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_TransformationStream_TTSOutput_To_TTSOutput_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg3 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamDestructor *) carg3;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__rcinworld_swig_helpers_TransformationStreamThreadedTransformExecutor_Sl_inworld_graphs_TTSOutput_Sc_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamThreadedFilterExecutor_Sl_inworld_graphs_TTSOutput_Sg__rcinworld_swig_helpers_TransformationStreamDestructor(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *arg2 = 0 ;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *arg3 = 0 ;
  inworld::swig_helpers::TransformationStreamDestructor *arg4 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;

  arg2 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *) carg2;


  arg3 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *) carg3;


  arg4 = (inworld::swig_helpers::TransformationStreamDestructor *) carg4;

  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),(inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > const &)*arg2,(inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > const &)*arg3,(inworld::swig_helpers::TransformationStreamDestructor const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv(SwigObj* carg1, void * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_TTSOutput_Create_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__pv_pv(SwigObj* carg1, void * carg2, void * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;


  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1;
  arg2 = (void *) carg2;
  arg3 = (void *) carg3;
  cppresult = inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR Create(SWIG_STD_MOVE(arg1),arg2,arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStream_TTSOutput_To_TTSOutput_Read(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (arg1)->Read();
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TransformationStream_TTSOutput_To_TTSOutput_HasNext(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStream< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::swig_helpers::TransformationStream<inworld::graphs::TTSOutput,inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)(arg1)->HasNext();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_TTSOutput_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *)new inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_TTSOutput_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_TTSOutput_GetInput(int carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedTransformExecutor_TTSOutput_To_TTSOutput_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< inworld::graphs::TTSOutput > arg2 ;

  arg1 = (int) carg1;
  arg2 = *(absl::StatusOr< inworld::graphs::TTSOutput > *)carg2;
  inworld::swig_helpers::TransformationStreamThreadedTransformExecutor< inworld::graphs::TTSOutput,inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_BaseData_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *)new inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_BaseData_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_BaseData_GetInput(int carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_BaseData_SetOutput(int carg1, bool carg2) {
  int arg1 ;
  bool arg2 ;

  arg1 = (int) carg1;
  arg2 = (bool) carg2;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::shared_ptr< inworld::graphs::BaseData > >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,arg2);
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_string_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *)new inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_string_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_string_GetInput(int carg1) {
  absl::StatusOr< std::string > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_string_SetOutput(int carg1, bool carg2) {
  int arg1 ;
  bool arg2 ;

  arg1 = (int) carg1;
  arg2 = (bool) carg2;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< std::string >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,arg2);
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_Content_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *)new inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_Content_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_Content_GetInput(int carg1) {
  absl::StatusOr< inworld::Content > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::Content >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_Content_SetOutput(int carg1, bool carg2) {
  int arg1 ;
  bool arg2 ;

  arg1 = (int) carg1;
  arg2 = (bool) carg2;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::Content >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,arg2);
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_SpeechChunk_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *)new inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_SpeechChunk_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_SpeechChunk_GetInput(int carg1) {
  absl::StatusOr< inworld::SpeechChunk > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::SpeechChunk >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_SpeechChunk_SetOutput(int carg1, bool carg2) {
  int arg1 ;
  bool arg2 ;

  arg1 = (int) carg1;
  arg2 = (bool) carg2;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::SpeechChunk >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,arg2);
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_TTSOutput_new(void * carg1, void * carg2) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *)new inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_TTSOutput_delete(SwigObj* carg1) {
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *) 0 ;

  arg1 = (inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TransformationStreamThreadedFilterExecutor_TTSOutput_GetInput(int carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR GetInput(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::TTSOutput >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TransformationStreamThreadedFilterExecutor_TTSOutput_SetOutput(int carg1, bool carg2) {
  int arg1 ;
  bool arg2 ;

  arg1 = (int) carg1;
  arg2 = (bool) carg2;
  inworld::swig_helpers::TransformationStreamThreadedFilterExecutor< inworld::graphs::TTSOutput >::SWIGTEMPLATEDISAMBIGUATOR SetOutput(arg1,arg2);
}


SWIGEXPORTC SwigObj* inworld_InitializeRegistries() {
  absl::Status cppresult;
  SwigObj* result;

  cppresult = inworld::InitializeRegistries();
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPClientInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPClientInterface_new_rcstd_shared_ptr_Sl_inworld_graphs_MCPClientInterface_SS_const_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *cppresult;
  std::shared_ptr< inworld::graphs::MCPClientInterface const > empty1 ;
  std::shared_ptr< inworld::graphs::MCPClientInterface const > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr<const inworld::graphs::MCPClientInterface>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > >((std::shared_ptr< inworld::graphs::MCPClientInterface const > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPClientInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_MCPClientInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPClientInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPClientInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MCPClientInterface const > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MCPClientInterface const >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_MCPClientInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_GetInstance() {
  inworld::ComponentRegistry *cppresult;
  SwigObj* result;

  cppresult = (inworld::ComponentRegistry *) &inworld::ComponentRegistry::GetInstance();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ComponentRegistry_IsComponentRegistered(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  bool result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (bool)(arg1)->IsComponentRegistered((std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_UnregisterComponent(SwigObj* carg1, const char * carg2) {
  absl::Status cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = (arg1)->UnregisterComponent((std::string const &)*arg2);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ComponentRegistry_Clear(SwigObj* carg1) {
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;

  arg1 = (inworld::ComponentRegistry *) carg1;
  (arg1)->Clear();
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_LLMInterface_rcstd_string_rcinworld_CreationContext_rcinworld_LocalLLMConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::LocalLLMConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::LocalLLMConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_LLMInterface__SWIG_0(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::LocalLLMConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_LLMInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteLLMConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::RemoteLLMConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::RemoteLLMConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_LLMInterface__SWIG_1(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::RemoteLLMConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_LLMRouting(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::LLMRoutingCreationConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::LLMRoutingCreationConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_LLMRouting__SWIG(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::LLMRoutingCreationConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_STTInterface_rcstd_string_rcinworld_CreationContext_rcinworld_LocalSTTConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::LocalSTTConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::LocalSTTConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_STTInterface__SWIG_0(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::LocalSTTConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_STTInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteSTTConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::RemoteSTTConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::RemoteSTTConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_STTInterface__SWIG_1(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::RemoteSTTConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_TTSInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::RemoteTTSConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::RemoteTTSConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_TTSInterface__SWIG(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::RemoteTTSConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_TextEmbedderInterface_rcstd_string_rcinworld_CreationContext_rcinworld_LocalTextEmbedderConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::LocalTextEmbedderConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::LocalTextEmbedderConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_TextEmbedderInterface__SWIG_0(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::LocalTextEmbedderConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_TextEmbedderInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteTextEmbedderConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::RemoteTextEmbedderConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::RemoteTextEmbedderConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_TextEmbedderInterface__SWIG_1(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::RemoteTextEmbedderConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_KnowledgeInterface_rcstd_string_rcinworld_CreationContext_rcinworld_LocalKnowledgeConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::LocalKnowledgeConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::LocalKnowledgeConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_KnowledgeInterface__SWIG_0(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::LocalKnowledgeConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_KnowledgeInterface_rcstd_string_rcinworld_CreationContext_rcinworld_RemoteKnowledgeConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::RemoteKnowledgeConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::RemoteKnowledgeConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_KnowledgeInterface__SWIG_1(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::RemoteKnowledgeConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_CreateComponent_MCPClientInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::CreationContext *arg3 = 0 ;
  inworld::graphs::MCPClientCreationConfig *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::CreationContext *) carg3;


  arg4 = (inworld::graphs::MCPClientCreationConfig *) carg4;

  cppresult = inworld_inworld_ComponentRegistry_CreateComponent_MCPClientInterface__SWIG(arg1,(std::string const &)*arg2,(inworld::CreationContext const &)*arg3,(inworld::graphs::MCPClientCreationConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_RegisterCustomEdgeCondition_rcstd_string_rcinworld_swig_helpers_EdgeConditionExecutor(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::swig_helpers::EdgeConditionExecutor *arg3 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::swig_helpers::EdgeConditionExecutor *) carg3;

  cppresult = inworld_inworld_ComponentRegistry_RegisterCustomEdgeCondition__SWIG_0(arg1,(std::string const &)*arg2,(inworld::swig_helpers::EdgeConditionExecutor const &)*arg3);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_RegisterCustomEdgeCondition_rcstd_string_rcinworld_swig_helpers_EdgeConditionThreadedExecutor(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::swig_helpers::EdgeConditionThreadedExecutor *arg3 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::swig_helpers::EdgeConditionThreadedExecutor *) carg3;

  cppresult = inworld_inworld_ComponentRegistry_RegisterCustomEdgeCondition__SWIG_1(arg1,(std::string const &)*arg2,(inworld::swig_helpers::EdgeConditionThreadedExecutor const &)*arg3);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_RegisterCustomNode(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  inworld::swig_helpers::CustomNodeThreadedCreateExecutor *arg3 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (inworld::swig_helpers::CustomNodeThreadedCreateExecutor *) carg3;

  cppresult = inworld_inworld_ComponentRegistry_RegisterCustomNode__SWIG(arg1,(std::string const &)*arg2,(inworld::swig_helpers::CustomNodeThreadedCreateExecutor const &)*arg3);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_RegisterEdgeConditionCallback(SwigObj* carg1, const char * carg2, void * carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  arg3 = (void *) carg3;
  cppresult = inworld_inworld_ComponentRegistry_RegisterEdgeConditionCallback__SWIG(arg1,(std::string const &)*arg2,arg3);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentRegistry_RegisterCallbackNode(SwigObj* carg1, const char * carg2, void * carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  inworld::ComponentRegistry *arg1 = (inworld::ComponentRegistry *) 0 ;
  std::string *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentRegistry *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  arg3 = (void *) carg3;
  cppresult = inworld_inworld_ComponentRegistry_RegisterCallbackNode__SWIG(arg1,(std::string const &)*arg2,arg3);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_new() {
  inworld::ComponentStore *cppresult;
  SwigObj* result;

  cppresult = (inworld::ComponentStore *)new inworld::ComponentStore();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_new_rcstd_string(const char * carg1) {
  inworld::ComponentStore *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  cppresult = (inworld::ComponentStore *)new inworld::ComponentStore((std::string const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ComponentStore_Clear(SwigObj* carg1) {
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;

  arg1 = (inworld::ComponentStore *) carg1;
  (arg1)->Clear();
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_GoalAdvancementNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_GoalAdvancementNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_IntentNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_IntentNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_KeywordMatcherNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_KeywordMatcherNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_KnowledgeNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_KnowledgeNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_LLMChatNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_LLMChatNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_LLMChatRequestBuilderNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_LLMChatRequestBuilderNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_LLMCompletionNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_LLMCompletionNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_LLMPromptBuilderNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_LLMPromptBuilderNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_MemoryUpdateNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_MemoryUpdateNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_MemoryRetrieveNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_MemoryRetrieveNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_RandomCannedTextNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_RandomCannedTextNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_SafetyCheckerNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_SafetyCheckerNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_STTNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_STTNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_TextAggregatorNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_TextAggregatorNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_TextChunkingNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_TextChunkingNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_TTSNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_TTSNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_MCPListToolsNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_MCPListToolsNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_MCPCallToolNode(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_MCPCallToolNode__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_LLMInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_LLMInterface__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_STTInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_STTInterface__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_TTSInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_TTSInterface__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_TextEmbedderInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_TextEmbedderInterface__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_KnowledgeInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_KnowledgeInterface__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_GetComponent_MCPClientInterface(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > cppresult;
  std::string temp2 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = inworld_inworld_ComponentStore_GetComponent_MCPClientInterface__SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_AddComponent_LLMInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::LLMInterface > empty3 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::LLMInterface > > arg3 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = carg3 ? *(std::shared_ptr< inworld::LLMInterface>*)carg3 : empty3;
  cppresult = inworld_inworld_ComponentStore_AddComponent_LLMInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_AddComponent_STTInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::STTInterface > empty3 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::STTInterface > > arg3 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = carg3 ? *(std::shared_ptr< inworld::STTInterface>*)carg3 : empty3;
  cppresult = inworld_inworld_ComponentStore_AddComponent_STTInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_AddComponent_TTSInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::TTSInterface > empty3 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TTSInterface > > arg3 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = carg3 ? *(std::shared_ptr< inworld::TTSInterface>*)carg3 : empty3;
  cppresult = inworld_inworld_ComponentStore_AddComponent_TTSInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_AddComponent_TextEmbedderInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::TextEmbedderInterface > empty3 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface > > arg3 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = carg3 ? *(std::shared_ptr< inworld::TextEmbedderInterface>*)carg3 : empty3;
  cppresult = inworld_inworld_ComponentStore_AddComponent_TextEmbedderInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_AddComponent_KnowledgeInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::KnowledgeInterface > empty3 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::KnowledgeInterface > > arg3 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = carg3 ? *(std::shared_ptr< inworld::KnowledgeInterface>*)carg3 : empty3;
  cppresult = inworld_inworld_ComponentStore_AddComponent_KnowledgeInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ComponentStore_AddComponent_MCPClientInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::graphs::MCPClientInterface const > empty3 ;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MCPClientInterface const > > arg3 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = carg3 ? *(std::shared_ptr<const inworld::graphs::MCPClientInterface>*)carg3 : empty3;
  cppresult = inworld_inworld_ComponentStore_AddComponent_MCPClientInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ComponentStore_delete(SwigObj* carg1) {
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;

  arg1 = (inworld::ComponentStore *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CreationContext_new(SwigObj* carg1) {
  inworld::CreationContext *cppresult;
  inworld::ComponentStore *arg1 = (inworld::ComponentStore *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ComponentStore *) carg1;
  cppresult = (inworld::CreationContext *)new inworld::CreationContext(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CreationContext_delete(SwigObj* carg1) {
  inworld::CreationContext *arg1 = (inworld::CreationContext *) 0 ;

  arg1 = (inworld::CreationContext *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomConfigWrapper_new() {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomConfigWrapper_new_rcstd_shared_ptr_Sl_inworld_swig_helpers_CustomConfigWrapper_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > empty1 ;
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >((std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomConfigWrapper_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_CustomConfigWrapper_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomConfigWrapper_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomConfigWrapper_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_CustomConfigWrapper_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomExecutionConfigWrapper_new() {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomExecutionConfigWrapper_new_rcstd_shared_ptr_Sl_inworld_swig_helpers_CustomExecutionConfigWrapper_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > empty1 ;
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *arg1 = 0 ;
  SwigObj* result;


  arg1 = carg1 ? (std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper>*)carg1 : &empty1;
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > >((std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomExecutionConfigWrapper_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_CustomExecutionConfigWrapper_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomExecutionConfigWrapper_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomExecutionConfigWrapper_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_CustomExecutionConfigWrapper_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) 0 ;

  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_CustomConfigWrapper_new() {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *cppresult;
  SwigObj* result;

  cppresult = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *)new std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_CustomConfigWrapper_copy(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *cppresult;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;

  cppresult = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *)new std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >((std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_CustomConfigWrapper_size(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_CustomConfigWrapper_capacity(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  size_t result;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_CustomConfigWrapper_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::size_type arg2 ;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  arg2 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_CustomConfigWrapper_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  bool result;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  cppresult = (bool)((std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_CustomConfigWrapper_clear(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_CustomConfigWrapper_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > empty2 ;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::value_type *arg2 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;

  arg2 = carg2 ? (std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper>*)carg2 : &empty2;
  (arg1)->push_back((std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_CustomConfigWrapper_get(SwigObj* carg1, int carg2) {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::value_type *cppresult;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  int arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::value_type *) &inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_swig_helpers_CustomConfigWrapper_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*)(*cppresult ? cppresult : 0);
  return result;
}


SWIGEXPORTC void inworld_vector_CustomConfigWrapper_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > empty3 ;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >::value_type *arg3 = 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  arg2 = (int) carg2;

  arg3 = carg3 ? (std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper>*)carg3 : &empty3;
  inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_swig_helpers_CustomConfigWrapper_Sg__Sg__set__SWIG(arg1,arg2,(std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > const &)*arg3);
}


SWIGEXPORTC SwigObj* inworld_vector_CustomConfigWrapper_safe_get(SwigObj* carg1, size_t carg2) {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > cppresult;
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;
  size_t arg2 ;
  SwigObj* result;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  arg2 = (size_t) carg2;
  cppresult = inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_swig_helpers_CustomConfigWrapper_Sg__Sg__safe_get__SWIG((std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const *)arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_vector_CustomConfigWrapper_delete(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) 0 ;

  arg1 = (std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_ConfigRegistry_GetInstance() {
  inworld::ConfigRegistry *cppresult;
  SwigObj* result;

  cppresult = (inworld::ConfigRegistry *) &inworld::ConfigRegistry::GetInstance();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigRegistry_RegisterCustomConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::Status cppresult;
  inworld::ConfigRegistry *arg1 = (inworld::ConfigRegistry *) 0 ;
  char *arg2 = (char *) 0 ;
  inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor *arg3 = 0 ;
  inworld::swig_helpers::CustomConfigThreadedSerializeExecutor *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ConfigRegistry *) carg1;
  arg2 = (char *) carg2;

  arg3 = (inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor *) carg3;


  arg4 = (inworld::swig_helpers::CustomConfigThreadedSerializeExecutor *) carg4;

  cppresult = inworld_inworld_ConfigRegistry_RegisterCustomConfig__SWIG(arg1,(char const *)arg2,(inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor const &)*arg3,(inworld::swig_helpers::CustomConfigThreadedSerializeExecutor const &)*arg4);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigRegistry_RegisterCustomExecutionConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::Status cppresult;
  inworld::ConfigRegistry *arg1 = (inworld::ConfigRegistry *) 0 ;
  char *arg2 = (char *) 0 ;
  inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor *arg3 = 0 ;
  inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor *arg4 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ConfigRegistry *) carg1;
  arg2 = (char *) carg2;

  arg3 = (inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor *) carg3;


  arg4 = (inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor *) carg4;

  cppresult = inworld_inworld_ConfigRegistry_RegisterCustomExecutionConfig__SWIG(arg1,(char const *)arg2,(inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor const &)*arg3,(inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor const &)*arg4);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigRegistry_DeserializeCustomConfig(SwigObj* carg1, const char * carg2, const char * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > cppresult;
  inworld::ConfigRegistry *arg1 = (inworld::ConfigRegistry *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ConfigRegistry *) carg1;
  arg2 = (char *) carg2;
  arg3 = (char *) carg3;
  cppresult = inworld_inworld_ConfigRegistry_DeserializeCustomConfig__SWIG(arg1,(char const *)arg2,(char const *)arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigRegistry_SerializeCustomConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > empty3 ;
  inworld::ConfigRegistry *arg1 = (inworld::ConfigRegistry *) 0 ;
  char *arg2 = (char *) 0 ;
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > *arg3 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ConfigRegistry *) carg1;
  arg2 = (char *) carg2;

  arg3 = carg3 ? (std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper>*)carg3 : &empty3;
  cppresult = inworld_inworld_ConfigRegistry_SerializeCustomConfig__SWIG(arg1,(char const *)arg2,(std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigRegistry_DeserializeCustomExecutionConfig(SwigObj* carg1, const char * carg2, const char * carg3) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > cppresult;
  inworld::ConfigRegistry *arg1 = (inworld::ConfigRegistry *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigObj* result;

  arg1 = (inworld::ConfigRegistry *) carg1;
  arg2 = (char *) carg2;
  arg3 = (char *) carg3;
  cppresult = inworld_inworld_ConfigRegistry_DeserializeCustomExecutionConfig__SWIG(arg1,(char const *)arg2,(char const *)arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigRegistry_SerializeCustomExecutionConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > empty3 ;
  inworld::ConfigRegistry *arg1 = (inworld::ConfigRegistry *) 0 ;
  char *arg2 = (char *) 0 ;
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *arg3 = 0 ;
  SwigObj* result;

  arg1 = (inworld::ConfigRegistry *) carg1;
  arg2 = (char *) carg2;

  arg3 = carg3 ? (std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper>*)carg3 : &empty3;
  cppresult = inworld_inworld_ConfigRegistry_SerializeCustomExecutionConfig__SWIG(arg1,(char const *)arg2,(std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigWrapperDestructor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::ConfigWrapperDestructor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::ConfigWrapperDestructor *)new inworld::swig_helpers::ConfigWrapperDestructor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ConfigWrapperDestructor_delete(SwigObj* carg1) {
  inworld::swig_helpers::ConfigWrapperDestructor *arg1 = (inworld::swig_helpers::ConfigWrapperDestructor *) 0 ;

  arg1 = (inworld::swig_helpers::ConfigWrapperDestructor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomConfigWrapper_new(const char * carg1, void * carg2, SwigObj* carg3) {
  inworld::swig_helpers::CustomConfigWrapper *cppresult;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  inworld::swig_helpers::ConfigWrapperDestructor *arg3 = 0 ;
  SwigObj* result;

  arg1 = (char *) carg1;
  arg2 = (void *) carg2;

  arg3 = (inworld::swig_helpers::ConfigWrapperDestructor *) carg3;

  cppresult = (inworld::swig_helpers::CustomConfigWrapper *)new inworld::swig_helpers::CustomConfigWrapper((char const *)arg1,arg2,(inworld::swig_helpers::ConfigWrapperDestructor const &)*arg3);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_CustomConfigWrapper_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomConfigWrapper *arg1 = (inworld::swig_helpers::CustomConfigWrapper *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_CustomConfigWrapper_type_id(SwigObj* carg1) {
  char *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomConfigWrapper *arg1 = (inworld::swig_helpers::CustomConfigWrapper *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (char *)((inworld::swig_helpers::CustomConfigWrapper const *)arg1)->type_id();
  result = (const char *)cppresult;
  return result;
}


SWIGEXPORTC void * inworld_CustomConfigWrapper_value(SwigObj* carg1) {
  void *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomConfigWrapper *arg1 = (inworld::swig_helpers::CustomConfigWrapper *) 0 ;
  void * result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (void *)((inworld::swig_helpers::CustomConfigWrapper const *)arg1)->value();
  result = (void *)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomExecutionConfigWrapper_new(const char * carg1, void * carg2, bool carg3, SwigObj* carg4) {
  inworld::swig_helpers::CustomExecutionConfigWrapper *cppresult;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  bool arg3 ;
  inworld::swig_helpers::ConfigWrapperDestructor *arg4 = 0 ;
  SwigObj* result;

  arg1 = (char *) carg1;
  arg2 = (void *) carg2;
  arg3 = (bool) carg3;

  arg4 = (inworld::swig_helpers::ConfigWrapperDestructor *) carg4;

  cppresult = (inworld::swig_helpers::CustomExecutionConfigWrapper *)new inworld::swig_helpers::CustomExecutionConfigWrapper((char const *)arg1,arg2,arg3,(inworld::swig_helpers::ConfigWrapperDestructor const &)*arg4);

  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_CustomExecutionConfigWrapper_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomExecutionConfigWrapper *arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_CustomExecutionConfigWrapper_type_id(SwigObj* carg1) {
  char *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomExecutionConfigWrapper *arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *) 0 ;
  const char * result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomExecutionConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (char *)((inworld::swig_helpers::CustomExecutionConfigWrapper const *)arg1)->type_id();
  result = (const char *)cppresult;
  return result;
}


SWIGEXPORTC void * inworld_CustomExecutionConfigWrapper_value(SwigObj* carg1) {
  void *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper const > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomExecutionConfigWrapper *arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *) 0 ;
  void * result;


  smartarg1 = (std::shared_ptr<const inworld::swig_helpers::CustomExecutionConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (void *)((inworld::swig_helpers::CustomExecutionConfigWrapper const *)arg1)->value();
  result = (void *)cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomExecutionConfigWrapper_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomExecutionConfigWrapper *arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *) 0 ;
  bool arg2 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_CustomExecutionConfigWrapper_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomExecutionConfigWrapper *arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomExecutionConfigWrapper_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomExecutionConfigWrapper *arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_CustomExecutionConfigWrapper_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *smartarg1 = 0 ;
  inworld::swig_helpers::CustomExecutionConfigWrapper *arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *) 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > *)carg1;
  arg1 = (inworld::swig_helpers::CustomExecutionConfigWrapper *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomConfigThreadedSerializeExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomConfigThreadedSerializeExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomConfigThreadedSerializeExecutor *)new inworld::swig_helpers::CustomConfigThreadedSerializeExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomConfigThreadedSerializeExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomConfigThreadedSerializeExecutor *arg1 = (inworld::swig_helpers::CustomConfigThreadedSerializeExecutor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomConfigThreadedSerializeExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomConfigThreadedSerializeExecutor_GetInput(int carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::CustomConfigThreadedSerializeExecutor::GetInput(arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_CustomConfigThreadedSerializeExecutor_SetOutput(int carg1, const char * carg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;

  arg1 = (int) carg1;
  arg2 = (char *) carg2;
  inworld::swig_helpers::CustomConfigThreadedSerializeExecutor::SetOutput(arg1,(char const *)arg2);
}


SWIGEXPORTC SwigObj* inworld_CustomConfigThreadedDeserializeExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor *)new inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomConfigThreadedDeserializeExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor *arg1 = (inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC const char * inworld_CustomConfigThreadedDeserializeExecutor_GetInput(int carg1) {
  std::string cppresult;
  int arg1 ;
  const char * result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor::GetInput(arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC void inworld_CustomConfigThreadedDeserializeExecutor_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *arg2 = 0 ;

  arg1 = (int) carg1;

  arg2 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > *) carg2;

  inworld::swig_helpers::CustomConfigThreadedDeserializeExecutor::SetOutput(arg1,(absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_CustomExecutionConfigThreadedSerializeExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor *)new inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomExecutionConfigThreadedSerializeExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor *arg1 = (inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomExecutionConfigThreadedSerializeExecutor_GetInput(int carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > cppresult;
  int arg1 ;
  SwigObj* result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor::GetInput(arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper >(cppresult) : 0);
  return result;
}


SWIGEXPORTC void inworld_CustomExecutionConfigThreadedSerializeExecutor_SetOutput(int carg1, const char * carg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;

  arg1 = (int) carg1;
  arg2 = (char *) carg2;
  inworld::swig_helpers::CustomExecutionConfigThreadedSerializeExecutor::SetOutput(arg1,(char const *)arg2);
}


SWIGEXPORTC SwigObj* inworld_CustomExecutionConfigThreadedDeserializeExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;

  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor *)new inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomExecutionConfigThreadedDeserializeExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor *arg1 = (inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor *) 0 ;

  arg1 = (inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC const char * inworld_CustomExecutionConfigThreadedDeserializeExecutor_GetInput(int carg1) {
  std::string cppresult;
  int arg1 ;
  const char * result;

  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor::GetInput(arg1);

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC void inworld_CustomExecutionConfigThreadedDeserializeExecutor_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *arg2 = 0 ;

  arg1 = (int) carg1;

  arg2 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > *) carg2;

  inworld::swig_helpers::CustomExecutionConfigThreadedDeserializeExecutor::SetOutput(arg1,(absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomExecutionConfigWrapper > > const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_new() {
  std::optional< inworld::LocalTextEmbedderConfig > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< inworld::LocalTextEmbedderConfig > *)new std::optional< inworld::LocalTextEmbedderConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_new_rcinworld_LocalTextEmbedderConfig(SwigObj* carg1) {
  std::optional< inworld::LocalTextEmbedderConfig > *cppresult;
  inworld::LocalTextEmbedderConfig *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::LocalTextEmbedderConfig *) carg1;

  cppresult = (std::optional< inworld::LocalTextEmbedderConfig > *)new std::optional< inworld::LocalTextEmbedderConfig >((inworld::LocalTextEmbedderConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_copy(SwigObj* carg1) {
  std::optional< inworld::LocalTextEmbedderConfig > *cppresult;
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;

  cppresult = (std::optional< inworld::LocalTextEmbedderConfig > *)new std::optional< inworld::LocalTextEmbedderConfig >((std::optional< inworld::LocalTextEmbedderConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LocalTextEmbedderConfig_delete(SwigObj* carg1) {
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_LocalTextEmbedderConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;
  bool result;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::LocalTextEmbedderConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_value(SwigObj* carg1) {
  inworld::LocalTextEmbedderConfig *cppresult;
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;
  cppresult = (inworld::LocalTextEmbedderConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_valueConst(SwigObj* carg1) {
  inworld::LocalTextEmbedderConfig *cppresult;
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;
  cppresult = (inworld::LocalTextEmbedderConfig *) &((std::optional< inworld::LocalTextEmbedderConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalTextEmbedderConfig cppresult;
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;
  inworld::LocalTextEmbedderConfig *arg2 = 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;

  arg2 = (inworld::LocalTextEmbedderConfig *) carg2;

  cppresult = ((std::optional< inworld::LocalTextEmbedderConfig > const *)arg1)->value_or((inworld::LocalTextEmbedderConfig const &)*arg2);
  result = (SwigObj*)new inworld::LocalTextEmbedderConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_LocalTextEmbedderConfig_reset(SwigObj* carg1) {
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_get(SwigObj* carg1) {
  inworld::LocalTextEmbedderConfig *cppresult;
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;
  cppresult = (inworld::LocalTextEmbedderConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_getConst(SwigObj* carg1) {
  inworld::LocalTextEmbedderConfig *cppresult;
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;
  cppresult = (inworld::LocalTextEmbedderConfig *) &((std::optional< inworld::LocalTextEmbedderConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalTextEmbedderConfig_get_value(SwigObj* carg1) {
  inworld::LocalTextEmbedderConfig *cppresult;
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;
  cppresult = (inworld::LocalTextEmbedderConfig *) &inworld_std_optional_Sl_inworld_LocalTextEmbedderConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LocalTextEmbedderConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::LocalTextEmbedderConfig > *arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) 0 ;
  inworld::LocalTextEmbedderConfig *arg2 = 0 ;

  arg1 = (std::optional< inworld::LocalTextEmbedderConfig > *) carg1;

  arg2 = (inworld::LocalTextEmbedderConfig *) carg2;

  inworld_std_optional_Sl_inworld_LocalTextEmbedderConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_new() {
  std::optional< inworld::RemoteTextEmbedderConfig > *cppresult;
  SwigObj* result;

  cppresult = (std::optional< inworld::RemoteTextEmbedderConfig > *)new std::optional< inworld::RemoteTextEmbedderConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_new_rcinworld_RemoteTextEmbedderConfig(SwigObj* carg1) {
  std::optional< inworld::RemoteTextEmbedderConfig > *cppresult;
  inworld::RemoteTextEmbedderConfig *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::RemoteTextEmbedderConfig *) carg1;

  cppresult = (std::optional< inworld::RemoteTextEmbedderConfig > *)new std::optional< inworld::RemoteTextEmbedderConfig >((inworld::RemoteTextEmbedderConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_copy(SwigObj* carg1) {
  std::optional< inworld::RemoteTextEmbedderConfig > *cppresult;
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = 0 ;
  SwigObj* result;


  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;

  cppresult = (std::optional< inworld::RemoteTextEmbedderConfig > *)new std::optional< inworld::RemoteTextEmbedderConfig >((std::optional< inworld::RemoteTextEmbedderConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteTextEmbedderConfig_delete(SwigObj* carg1) {
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_RemoteTextEmbedderConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;
  bool result;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::RemoteTextEmbedderConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_value(SwigObj* carg1) {
  inworld::RemoteTextEmbedderConfig *cppresult;
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;
  cppresult = (inworld::RemoteTextEmbedderConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_valueConst(SwigObj* carg1) {
  inworld::RemoteTextEmbedderConfig *cppresult;
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;
  cppresult = (inworld::RemoteTextEmbedderConfig *) &((std::optional< inworld::RemoteTextEmbedderConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteTextEmbedderConfig cppresult;
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;
  inworld::RemoteTextEmbedderConfig *arg2 = 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;

  arg2 = (inworld::RemoteTextEmbedderConfig *) carg2;

  cppresult = ((std::optional< inworld::RemoteTextEmbedderConfig > const *)arg1)->value_or((inworld::RemoteTextEmbedderConfig const &)*arg2);
  result = (SwigObj*)new inworld::RemoteTextEmbedderConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteTextEmbedderConfig_reset(SwigObj* carg1) {
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_get(SwigObj* carg1) {
  inworld::RemoteTextEmbedderConfig *cppresult;
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;
  cppresult = (inworld::RemoteTextEmbedderConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_getConst(SwigObj* carg1) {
  inworld::RemoteTextEmbedderConfig *cppresult;
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;
  cppresult = (inworld::RemoteTextEmbedderConfig *) &((std::optional< inworld::RemoteTextEmbedderConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTextEmbedderConfig_get_value(SwigObj* carg1) {
  inworld::RemoteTextEmbedderConfig *cppresult;
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;
  SwigObj* result;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;
  cppresult = (inworld::RemoteTextEmbedderConfig *) &inworld_std_optional_Sl_inworld_RemoteTextEmbedderConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteTextEmbedderConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::RemoteTextEmbedderConfig > *arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) 0 ;
  inworld::RemoteTextEmbedderConfig *arg2 = 0 ;

  arg1 = (std::optional< inworld::RemoteTextEmbedderConfig > *) carg1;

  arg2 = (inworld::RemoteTextEmbedderConfig *) carg2;

  inworld_std_optional_Sl_inworld_RemoteTextEmbedderConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_LocalTextEmbedderConfig_model_path_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LocalTextEmbedderConfig *arg1 = (inworld::LocalTextEmbedderConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::LocalTextEmbedderConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->model_path = *arg2;
}


SWIGEXPORTC const char * inworld_LocalTextEmbedderConfig_model_path_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::LocalTextEmbedderConfig *arg1 = (inworld::LocalTextEmbedderConfig *) 0 ;
  const char * result;

  arg1 = (inworld::LocalTextEmbedderConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->model_path);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_LocalTextEmbedderConfig_device_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalTextEmbedderConfig *arg1 = (inworld::LocalTextEmbedderConfig *) 0 ;
  inworld::Device *arg2 = (inworld::Device *) 0 ;

  arg1 = (inworld::LocalTextEmbedderConfig *) carg1;
  arg2 = (inworld::Device *) carg2;
  if (arg1) (arg1)->device = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LocalTextEmbedderConfig_device_get(SwigObj* carg1) {
  inworld::Device *cppresult;
  inworld::LocalTextEmbedderConfig *arg1 = (inworld::LocalTextEmbedderConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::LocalTextEmbedderConfig *) carg1;
  cppresult = (inworld::Device *)& ((arg1)->device);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LocalTextEmbedderConfig_new() {
  inworld::LocalTextEmbedderConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::LocalTextEmbedderConfig *)new inworld::LocalTextEmbedderConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalTextEmbedderConfig_delete(SwigObj* carg1) {
  inworld::LocalTextEmbedderConfig *arg1 = (inworld::LocalTextEmbedderConfig *) 0 ;

  arg1 = (inworld::LocalTextEmbedderConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_RemoteTextEmbedderConfig_provider_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteTextEmbedderConfig *arg1 = (inworld::RemoteTextEmbedderConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::RemoteTextEmbedderConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->provider = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteTextEmbedderConfig_provider_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteTextEmbedderConfig *arg1 = (inworld::RemoteTextEmbedderConfig *) 0 ;
  const char * result;

  arg1 = (inworld::RemoteTextEmbedderConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->provider);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_RemoteTextEmbedderConfig_model_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteTextEmbedderConfig *arg1 = (inworld::RemoteTextEmbedderConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::RemoteTextEmbedderConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->model_name = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteTextEmbedderConfig_model_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteTextEmbedderConfig *arg1 = (inworld::RemoteTextEmbedderConfig *) 0 ;
  const char * result;

  arg1 = (inworld::RemoteTextEmbedderConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->model_name);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_RemoteTextEmbedderConfig_api_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteTextEmbedderConfig *arg1 = (inworld::RemoteTextEmbedderConfig *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::RemoteTextEmbedderConfig *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->api_key = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteTextEmbedderConfig_api_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteTextEmbedderConfig *arg1 = (inworld::RemoteTextEmbedderConfig *) 0 ;
  const char * result;

  arg1 = (inworld::RemoteTextEmbedderConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->api_key);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_RemoteTextEmbedderConfig_new() {
  inworld::RemoteTextEmbedderConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::RemoteTextEmbedderConfig *)new inworld::RemoteTextEmbedderConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RemoteTextEmbedderConfig_delete(SwigObj* carg1) {
  inworld::RemoteTextEmbedderConfig *arg1 = (inworld::RemoteTextEmbedderConfig *) 0 ;

  arg1 = (inworld::RemoteTextEmbedderConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_TextEmbedderCreationConfig_has_local_config(SwigObj* carg1) {
  bool cppresult;
  inworld::TextEmbedderCreationConfig *arg1 = (inworld::TextEmbedderCreationConfig *) 0 ;
  bool result;

  arg1 = (inworld::TextEmbedderCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_TextEmbedderCreationConfig_has_local_config__SWIG((inworld::TextEmbedderCreationConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_TextEmbedderCreationConfig_has_remote_config(SwigObj* carg1) {
  bool cppresult;
  inworld::TextEmbedderCreationConfig *arg1 = (inworld::TextEmbedderCreationConfig *) 0 ;
  bool result;

  arg1 = (inworld::TextEmbedderCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_TextEmbedderCreationConfig_has_remote_config__SWIG((inworld::TextEmbedderCreationConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextEmbedderCreationConfig_get_local_config(SwigObj* carg1) {
  std::optional< inworld::LocalTextEmbedderConfig > cppresult;
  inworld::TextEmbedderCreationConfig *arg1 = (inworld::TextEmbedderCreationConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TextEmbedderCreationConfig *) carg1;
  cppresult = inworld_inworld_TextEmbedderCreationConfig_get_local_config__SWIG((inworld::TextEmbedderCreationConfig const *)arg1);
  result = (SwigObj*)new std::optional< inworld::LocalTextEmbedderConfig >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextEmbedderCreationConfig_get_remote_config(SwigObj* carg1) {
  std::optional< inworld::RemoteTextEmbedderConfig > cppresult;
  inworld::TextEmbedderCreationConfig *arg1 = (inworld::TextEmbedderCreationConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::TextEmbedderCreationConfig *) carg1;
  cppresult = inworld_inworld_TextEmbedderCreationConfig_get_remote_config__SWIG((inworld::TextEmbedderCreationConfig const *)arg1);
  result = (SwigObj*)new std::optional< inworld::RemoteTextEmbedderConfig >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TextEmbedderCreationConfig_set_local_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::TextEmbedderCreationConfig *arg1 = (inworld::TextEmbedderCreationConfig *) 0 ;
  inworld::LocalTextEmbedderConfig *arg2 = 0 ;

  arg1 = (inworld::TextEmbedderCreationConfig *) carg1;

  arg2 = (inworld::LocalTextEmbedderConfig *) carg2;

  inworld_inworld_TextEmbedderCreationConfig_set_local_config__SWIG(arg1,(inworld::LocalTextEmbedderConfig const &)*arg2);
}


SWIGEXPORTC void inworld_TextEmbedderCreationConfig_set_remote_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::TextEmbedderCreationConfig *arg1 = (inworld::TextEmbedderCreationConfig *) 0 ;
  inworld::RemoteTextEmbedderConfig *arg2 = 0 ;

  arg1 = (inworld::TextEmbedderCreationConfig *) carg1;

  arg2 = (inworld::RemoteTextEmbedderConfig *) carg2;

  inworld_inworld_TextEmbedderCreationConfig_set_remote_config__SWIG(arg1,(inworld::RemoteTextEmbedderConfig const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_TextEmbedderCreationConfig_new() {
  inworld::TextEmbedderCreationConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::TextEmbedderCreationConfig *)new inworld::TextEmbedderCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextEmbedderCreationConfig_delete(SwigObj* carg1) {
  inworld::TextEmbedderCreationConfig *arg1 = (inworld::TextEmbedderCreationConfig *) 0 ;

  arg1 = (inworld::TextEmbedderCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TextEmbedderFactory_delete(SwigObj* carg1) {
  inworld::TextEmbedderFactory *arg1 = (inworld::TextEmbedderFactory *) 0 ;

  arg1 = (inworld::TextEmbedderFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TextEmbedderFactory_CreateTextEmbedder(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > > cppresult;
  inworld::TextEmbedderFactory *arg1 = (inworld::TextEmbedderFactory *) 0 ;
  inworld::TextEmbedderCreationConfig *arg2 = 0 ;
  SwigObj* result;

  arg1 = (inworld::TextEmbedderFactory *) carg1;

  arg2 = (inworld::TextEmbedderCreationConfig *) carg2;

  cppresult = inworld_inworld_TextEmbedderFactory_CreateTextEmbedder__SWIG((inworld::TextEmbedderFactory const *)arg1,(inworld::TextEmbedderCreationConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TextEmbedderInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextEmbedderFactory_new() {
  inworld::TextEmbedderFactory *cppresult;
  SwigObj* result;

  cppresult = (inworld::TextEmbedderFactory *)new inworld::TextEmbedderFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeRecord_text_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::KnowledgeRecord *arg1 = (inworld::KnowledgeRecord *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::KnowledgeRecord *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->text = *arg2;
}


SWIGEXPORTC const char * inworld_KnowledgeRecord_text_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::KnowledgeRecord *arg1 = (inworld::KnowledgeRecord *) 0 ;
  const char * result;

  arg1 = (inworld::KnowledgeRecord *) carg1;
  cppresult = (std::string *) & ((arg1)->text);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_KnowledgeRecord_embedding_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::KnowledgeRecord *arg1 = (inworld::KnowledgeRecord *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;

  arg1 = (inworld::KnowledgeRecord *) carg1;
  arg2 = (std::vector< float > *) carg2;
  if (arg1) (arg1)->embedding = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeRecord_embedding_get(SwigObj* carg1) {
  std::vector< float > *cppresult;
  inworld::KnowledgeRecord *arg1 = (inworld::KnowledgeRecord *) 0 ;
  SwigObj* result;

  arg1 = (inworld::KnowledgeRecord *) carg1;
  cppresult = (std::vector< float > *)& ((arg1)->embedding);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeRecord_metadata_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::KnowledgeRecord *arg1 = (inworld::KnowledgeRecord *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;

  arg1 = (inworld::KnowledgeRecord *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->metadata = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeRecord_metadata_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::KnowledgeRecord *arg1 = (inworld::KnowledgeRecord *) 0 ;
  SwigObj* result;

  arg1 = (inworld::KnowledgeRecord *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->metadata);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeRecord_new() {
  inworld::KnowledgeRecord *cppresult;
  SwigObj* result;

  cppresult = (inworld::KnowledgeRecord *)new inworld::KnowledgeRecord();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeRecord_delete(SwigObj* carg1) {
  inworld::KnowledgeRecord *arg1 = (inworld::KnowledgeRecord *) 0 ;

  arg1 = (inworld::KnowledgeRecord *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KnowledgeCollection_knowledge_records_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::KnowledgeCollection *arg1 = (inworld::KnowledgeCollection *) 0 ;
  std::vector< inworld::KnowledgeRecord > *arg2 = (std::vector< inworld::KnowledgeRecord > *) 0 ;

  arg1 = (inworld::KnowledgeCollection *) carg1;
  arg2 = (std::vector< inworld::KnowledgeRecord > *) carg2;
  if (arg1) (arg1)->knowledge_records = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCollection_knowledge_records_get(SwigObj* carg1) {
  std::vector< inworld::KnowledgeRecord > *cppresult;
  inworld::KnowledgeCollection *arg1 = (inworld::KnowledgeCollection *) 0 ;
  SwigObj* result;

  arg1 = (inworld::KnowledgeCollection *) carg1;
  cppresult = (std::vector< inworld::KnowledgeRecord > *)& ((arg1)->knowledge_records);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCollection_new() {
  inworld::KnowledgeCollection *cppresult;
  SwigObj* result;

  cppresult = (inworld::KnowledgeCollection *)new inworld::KnowledgeCollection();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeCollection_delete(SwigObj* carg1) {
  inworld::KnowledgeCollection *arg1 = (inworld::KnowledgeCollection *) 0 ;

  arg1 = (inworld::KnowledgeCollection *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_RetrievalConfig_threshold_set(SwigObj* carg1, float carg2) {
  inworld::RetrievalConfig *arg1 = (inworld::RetrievalConfig *) 0 ;
  float arg2 ;

  arg1 = (inworld::RetrievalConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORTC float inworld_RetrievalConfig_threshold_get(SwigObj* carg1) {
  float cppresult;
  inworld::RetrievalConfig *arg1 = (inworld::RetrievalConfig *) 0 ;
  float result;

  arg1 = (inworld::RetrievalConfig *) carg1;
  cppresult = (float) ((arg1)->threshold);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_RetrievalConfig_top_k_set(SwigObj* carg1, int carg2) {
  inworld::RetrievalConfig *arg1 = (inworld::RetrievalConfig *) 0 ;
  int arg2 ;

  arg1 = (inworld::RetrievalConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->top_k = arg2;
}


SWIGEXPORTC int inworld_RetrievalConfig_top_k_get(SwigObj* carg1) {
  int cppresult;
  inworld::RetrievalConfig *arg1 = (inworld::RetrievalConfig *) 0 ;
  int result;

  arg1 = (inworld::RetrievalConfig *) carg1;
  cppresult = (int) ((arg1)->top_k);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RetrievalConfig_new() {
  inworld::RetrievalConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::RetrievalConfig *)new inworld::RetrievalConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RetrievalConfig_delete(SwigObj* carg1) {
  inworld::RetrievalConfig *arg1 = (inworld::RetrievalConfig *) 0 ;

  arg1 = (inworld::RetrievalConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KnowledgeRetrieverInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::KnowledgeRetrieverInterface > *smartarg1 = 0 ;
  inworld::KnowledgeRetrieverInterface *arg1 = (inworld::KnowledgeRetrieverInterface *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::KnowledgeRetrieverInterface > *)carg1;
  arg1 = (inworld::KnowledgeRetrieverInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_KnowledgeRetrieverInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::KnowledgeRetrieverInterface const > *smartarg1 = 0 ;
  inworld::KnowledgeRetrieverInterface *arg1 = (inworld::KnowledgeRetrieverInterface *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::KnowledgeRetrieverInterface > *)carg1;
  arg1 = (inworld::KnowledgeRetrieverInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_KnowledgeRetrieverInterface_is_valid__SWIG((inworld::KnowledgeRetrieverInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeRetrieverInterface_RetrieveKnowledge(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::vector< std::string > > cppresult;
  std::shared_ptr< inworld::KnowledgeRetrieverInterface const > *smartarg1 = 0 ;
  inworld::KnowledgeRetrieverInterface *arg1 = (inworld::KnowledgeRetrieverInterface *) 0 ;
  inworld::RetrievalConfig *arg2 = 0 ;
  std::vector< inworld::KnowledgeCollection > *arg3 = 0 ;
  std::vector< inworld::Event > *arg4 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::KnowledgeRetrieverInterface > *)carg1;
  arg1 = (inworld::KnowledgeRetrieverInterface *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (inworld::RetrievalConfig *) carg2;


  arg3 = (std::vector< inworld::KnowledgeCollection > *) carg3;


  arg4 = (std::vector< inworld::Event > *) carg4;

  cppresult = inworld_inworld_KnowledgeRetrieverInterface_RetrieveKnowledge__SWIG((inworld::KnowledgeRetrieverInterface const *)arg1,(inworld::RetrievalConfig const &)*arg2,(std::vector< inworld::KnowledgeCollection > const &)*arg3,(std::vector< inworld::Event > const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::vector< std::string > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_File_content_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::File *arg1 = (inworld::File *) 0 ;
  inworld::File::Content *arg2 = (inworld::File::Content *) 0 ;

  arg1 = (inworld::File *) carg1;
  arg2 = (inworld::File::Content *) carg2;
  if (arg1) (arg1)->content = *arg2;
}


SWIGEXPORTC SwigObj* inworld_File_content_get(SwigObj* carg1) {
  inworld::File::Content *cppresult;
  inworld::File *arg1 = (inworld::File *) 0 ;
  SwigObj* result;

  arg1 = (inworld::File *) carg1;
  cppresult = (inworld::File::Content *)& ((arg1)->content);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_File_type_set(SwigObj* carg1, int carg2) {
  inworld::File *arg1 = (inworld::File *) 0 ;
  enum inworld::File::Type arg2 ;

  arg1 = (inworld::File *) carg1;
  arg2 = (enum inworld::File::Type) carg2;
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORTC int inworld_File_type_get(SwigObj* carg1) {
  enum inworld::File::Type cppresult;
  inworld::File *arg1 = (inworld::File *) 0 ;
  int result;

  arg1 = (inworld::File *) carg1;
  cppresult = (enum inworld::File::Type) ((arg1)->type);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_File_new() {
  inworld::File *cppresult;
  SwigObj* result;

  cppresult = (inworld::File *)new inworld::File();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_File_delete(SwigObj* carg1) {
  inworld::File *arg1 = (inworld::File *) 0 ;

  arg1 = (inworld::File *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_FileContent_bytes_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::File::Content *arg1 = (inworld::File::Content *) 0 ;
  std::vector< char > *arg2 = (std::vector< char > *) 0 ;

  arg1 = (inworld::File::Content *) carg1;
  arg2 = (std::vector< char > *) carg2;
  if (arg1) (arg1)->bytes = *arg2;
}


SWIGEXPORTC SwigObj* inworld_FileContent_bytes_get(SwigObj* carg1) {
  std::vector< char > *cppresult;
  inworld::File::Content *arg1 = (inworld::File::Content *) 0 ;
  SwigObj* result;

  arg1 = (inworld::File::Content *) carg1;
  cppresult = (std::vector< char > *)& ((arg1)->bytes);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_FileContent_new() {
  inworld::File::Content *cppresult;
  SwigObj* result;

  cppresult = (inworld::File::Content *)new inworld::File::Content();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_FileContent_delete(SwigObj* carg1) {
  inworld::File::Content *arg1 = (inworld::File::Content *) 0 ;

  arg1 = (inworld::File::Content *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ParsingConfig_max_chars_per_chunk_set(SwigObj* carg1, int carg2) {
  inworld::ParsingConfig *arg1 = (inworld::ParsingConfig *) 0 ;
  int arg2 ;

  arg1 = (inworld::ParsingConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_chars_per_chunk = arg2;
}


SWIGEXPORTC int inworld_ParsingConfig_max_chars_per_chunk_get(SwigObj* carg1) {
  int cppresult;
  inworld::ParsingConfig *arg1 = (inworld::ParsingConfig *) 0 ;
  int result;

  arg1 = (inworld::ParsingConfig *) carg1;
  cppresult = (int) ((arg1)->max_chars_per_chunk);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_ParsingConfig_max_chunks_per_document_set(SwigObj* carg1, int carg2) {
  inworld::ParsingConfig *arg1 = (inworld::ParsingConfig *) 0 ;
  int arg2 ;

  arg1 = (inworld::ParsingConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_chunks_per_document = arg2;
}


SWIGEXPORTC int inworld_ParsingConfig_max_chunks_per_document_get(SwigObj* carg1) {
  int cppresult;
  inworld::ParsingConfig *arg1 = (inworld::ParsingConfig *) 0 ;
  int result;

  arg1 = (inworld::ParsingConfig *) carg1;
  cppresult = (int) ((arg1)->max_chunks_per_document);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ParsingConfig_new() {
  inworld::ParsingConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::ParsingConfig *)new inworld::ParsingConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ParsingConfig_delete(SwigObj* carg1) {
  inworld::ParsingConfig *arg1 = (inworld::ParsingConfig *) 0 ;

  arg1 = (inworld::ParsingConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KnowledgeCompileConfig_parsing_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::KnowledgeCompileConfig *arg1 = (inworld::KnowledgeCompileConfig *) 0 ;
  inworld::ParsingConfig *arg2 = (inworld::ParsingConfig *) 0 ;

  arg1 = (inworld::KnowledgeCompileConfig *) carg1;
  arg2 = (inworld::ParsingConfig *) carg2;
  if (arg1) (arg1)->parsing_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCompileConfig_parsing_config_get(SwigObj* carg1) {
  inworld::ParsingConfig *cppresult;
  inworld::KnowledgeCompileConfig *arg1 = (inworld::KnowledgeCompileConfig *) 0 ;
  SwigObj* result;

  arg1 = (inworld::KnowledgeCompileConfig *) carg1;
  cppresult = (inworld::ParsingConfig *)& ((arg1)->parsing_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCompileConfig_new() {
  inworld::KnowledgeCompileConfig *cppresult;
  SwigObj* result;

  cppresult = (inworld::KnowledgeCompileConfig *)new inworld::KnowledgeCompileConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeCompileConfig_delete(SwigObj* carg1) {
  inworld::KnowledgeCompileConfig *arg1 = (inworld::KnowledgeCompileConfig *) 0 ;

  arg1 = (inworld::KnowledgeCompileConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KnowledgeInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::KnowledgeInterface > *smartarg1 = 0 ;
  inworld::KnowledgeInterface *arg1 = (inworld::KnowledgeInterface *) 0 ;


  smartarg1 = (std::shared_ptr< inworld::KnowledgeInterface > *)carg1;
  arg1 = (inworld::KnowledgeInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeInterface_RemoveKnowledge(SwigObj* carg1, const char * carg2) {
  absl::Status cppresult;
  std::shared_ptr< inworld::KnowledgeInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::KnowledgeInterface *arg1 = (inworld::KnowledgeInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::KnowledgeInterface > *)carg1;
  arg1 = (inworld::KnowledgeInterface *)(smartarg1 ? smartarg1->get() : 0);

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  cppresult = ((inworld::KnowledgeInterface const *)arg1)->RemoveKnowledge((std::string const &)*arg2);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_KnowledgeInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::KnowledgeInterface const > *smartarg1 = 0 ;
  inworld::KnowledgeInterface *arg1 = (inworld::KnowledgeInterface *) 0 ;
  bool result;


  smartarg1 = (std::shared_ptr<const inworld::KnowledgeInterface > *)carg1;
  arg1 = (inworld::KnowledgeInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_KnowledgeInterface_is_valid__SWIG((inworld::KnowledgeInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeInterface_GetKnowledge(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::vector< std::string > > cppresult;
  std::shared_ptr< inworld::KnowledgeInterface const > *smartarg1 = 0 ;
  inworld::KnowledgeInterface *arg1 = (inworld::KnowledgeInterface *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< inworld::Event > *arg3 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::KnowledgeInterface > *)carg1;
  arg1 = (inworld::KnowledgeInterface *)(smartarg1 ? smartarg1->get() : 0);

  arg2 = (std::vector< std::string > *) carg2;


  arg3 = (std::vector< inworld::Event > *) carg3;

  cppresult = inworld_inworld_KnowledgeInterface_GetKnowledge__SWIG((inworld::KnowledgeInterface const *)arg1,(std::vector< std::string > const &)*arg2,(std::vector< inworld::Event > const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::vector< std::string > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeInterface_CompileKnowledge_rcstd_string_rcstd_vector_Sl_std_string_Sg_(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::StatusOr< std::vector< std::string > > cppresult;
  std::shared_ptr< inworld::KnowledgeInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::KnowledgeInterface *arg1 = (inworld::KnowledgeInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::KnowledgeInterface > *)carg1;
  arg1 = (inworld::KnowledgeInterface *)(smartarg1 ? smartarg1->get() : 0);

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;


  arg3 = (std::vector< std::string > *) carg3;

  cppresult = inworld_inworld_KnowledgeInterface_CompileKnowledge__SWIG_0((inworld::KnowledgeInterface const *)arg1,(std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::vector< std::string > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeInterface_CompileKnowledge_rcstd_string_cstd_vector_Sl_char_Sg__ceType(SwigObj* carg1, const char * carg2, SwigObj* carg3, int carg4) {
  absl::StatusOr< std::vector< std::string > > cppresult;
  std::shared_ptr< inworld::KnowledgeInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::KnowledgeInterface *arg1 = (inworld::KnowledgeInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< char > arg3 ;
  inworld::File::Type arg4 ;
  SwigObj* result;


  smartarg1 = (std::shared_ptr<const inworld::KnowledgeInterface > *)carg1;
  arg1 = (inworld::KnowledgeInterface *)(smartarg1 ? smartarg1->get() : 0);

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  arg3 = *(std::vector< char > *)carg3;
  arg4 = (inworld::File::Type) carg4;
  cppresult = inworld_inworld_KnowledgeInterface_CompileKnowledge__SWIG_1((inworld::KnowledgeInterface const *)arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3),arg4);
  result = (SwigObj*)new absl::StatusOr< std::vector< std::string > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Language_new() {
  absl::StatusOr< inworld::library::Language > *cppresult;
  SwigObj* result;

  cppresult = (absl::StatusOr< inworld::library::Language > *)new absl::StatusOr< inworld::library::Language >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Language_new_rcinworld_library_Language(SwigObj* carg1) {
  absl::StatusOr< inworld::library::Language > *cppresult;
  inworld::library::Language *arg1 = 0 ;
  SwigObj* result;


  arg1 = (inworld::library::Language *) carg1;

  cppresult = (absl::StatusOr< inworld::library::Language > *)new absl::StatusOr< inworld::library::Language >((inworld::library::Language const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Language_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::library::Language > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;


  arg1 = (absl::Status *) carg1;

  cppresult = (absl::StatusOr< inworld::library::Language > *)new absl::StatusOr< inworld::library::Language >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_Language_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::library::Language > *arg1 = (absl::StatusOr< inworld::library::Language > *) 0 ;
  bool result;

  arg1 = (absl::StatusOr< inworld::library::Language > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::library::Language > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Language_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::library::Language > *arg1 = (absl::StatusOr< inworld::library::Language > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::library::Language > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::library::Language > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_Language_value(SwigObj* carg1) {
  inworld::library::Language cppresult;
  absl::StatusOr< inworld::library::Language > *arg1 = (absl::StatusOr< inworld::library::Language > *) 0 ;
  SwigObj* result;

  arg1 = (absl::StatusOr< inworld::library::Language > *) carg1;
  cppresult = ((absl::StatusOr< inworld::library::Language > const *)arg1)->value();
  result = (SwigObj*)new inworld::library::Language(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_Language_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::library::Language > *arg1 = (absl::StatusOr< inworld::library::Language > *) 0 ;

  arg1 = (absl::StatusOr< inworld::library::Language > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Language_lang_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::library::Language *arg1 = (inworld::library::Language *) 0 ;
  std::string *arg2 = 0 ;

  arg1 = (inworld::library::Language *) carg1;

  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;

  if (arg1) (arg1)->lang = *arg2;
}


SWIGEXPORTC const char * inworld_Language_lang_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::library::Language *arg1 = (inworld::library::Language *) 0 ;
  const char * result;

  arg1 = (inworld::library::Language *) carg1;
  cppresult = (std::string *) & ((arg1)->lang);

  result = (const char *)strdup(cppresult->c_str());

  return result;
}


SWIGEXPORTC void inworld_Language_locale_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::library::Language *arg1 = (inworld::library::Language *) 0 ;
  std::optional< std::string > *arg2 = (std::optional< std::string > *) 0 ;

  arg1 = (inworld::library::Language *) carg1;
  arg2 = (std::optional< std::string > *) carg2;
  if (arg1) (arg1)->locale = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Language_locale_get(SwigObj* carg1) {
  std::optional< std::string > *cppresult;
  inworld::library::Language *arg1 = (inworld::library::Language *) 0 ;
  SwigObj* result;

  arg1 = (inworld::library::Language *) carg1;
  cppresult = (std::optional< std::string > *)& ((arg1)->locale);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_FromString(const char * carg1) {
  absl::StatusOr< inworld::library::Language > cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  SwigObj* result;


  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;

  cppresult = inworld::library::Language::FromString((std::string const &)*arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::library::Language >(cppresult);
  return result;
}


SWIGEXPORTC const char * inworld_Language_ToString(SwigObj* carg1) {
  std::string cppresult;
  inworld::library::Language *arg1 = (inworld::library::Language *) 0 ;
  const char * result;

  arg1 = (inworld::library::Language *) carg1;
  cppresult = ((inworld::library::Language const *)arg1)->ToString();

  result = (const char *)strdup(cppresult.c_str());

  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_English() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::English();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Chinese() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Chinese();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Korean() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Korean();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Japanese() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Japanese();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Russian() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Russian();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Spanish() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Spanish();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_French() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::French();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_German() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::German();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Italian() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Italian();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Portuguese() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Portuguese();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Arabic() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Arabic();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Hindi() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Hindi();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Dutch() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Dutch();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Swedish() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Swedish();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Norwegian() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Norwegian();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Danish() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Danish();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Finnish() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Finnish();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Polish() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Polish();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Turkish() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Turkish();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Thai() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Thai();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Vietnamese() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Vietnamese();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Indonesian() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Indonesian();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Malay() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Malay();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Hebrew() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Hebrew();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_Ukrainian() {
  inworld::library::Language *cppresult;
  SwigObj* result;

  cppresult = (inworld::library::Language *) &inworld::library::Language::Ukrainian();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Language_new() {
  inworld::library::Language *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::library::Language *)new inworld::library::Language();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Language_delete(SwigObj* carg1) {
  inworld::library::Language *arg1 = (inworld::library::Language *) 0 ;
  
  arg1 = (inworld::library::Language *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_new() {
  std::optional< inworld::LocalKnowledgeConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::LocalKnowledgeConfig > *)new std::optional< inworld::LocalKnowledgeConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_new_rcinworld_LocalKnowledgeConfig(SwigObj* carg1) {
  std::optional< inworld::LocalKnowledgeConfig > *cppresult;
  inworld::LocalKnowledgeConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::LocalKnowledgeConfig *) carg1;
  
  cppresult = (std::optional< inworld::LocalKnowledgeConfig > *)new std::optional< inworld::LocalKnowledgeConfig >((inworld::LocalKnowledgeConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_copy(SwigObj* carg1) {
  std::optional< inworld::LocalKnowledgeConfig > *cppresult;
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  
  cppresult = (std::optional< inworld::LocalKnowledgeConfig > *)new std::optional< inworld::LocalKnowledgeConfig >((std::optional< inworld::LocalKnowledgeConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LocalKnowledgeConfig_delete(SwigObj* carg1) {
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_LocalKnowledgeConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::LocalKnowledgeConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_value(SwigObj* carg1) {
  inworld::LocalKnowledgeConfig *cppresult;
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  cppresult = (inworld::LocalKnowledgeConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_valueConst(SwigObj* carg1) {
  inworld::LocalKnowledgeConfig *cppresult;
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  cppresult = (inworld::LocalKnowledgeConfig *) &((std::optional< inworld::LocalKnowledgeConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalKnowledgeConfig cppresult;
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  inworld::LocalKnowledgeConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  
  arg2 = (inworld::LocalKnowledgeConfig *) carg2;
  
  cppresult = ((std::optional< inworld::LocalKnowledgeConfig > const *)arg1)->value_or((inworld::LocalKnowledgeConfig const &)*arg2);
  result = (SwigObj*)new inworld::LocalKnowledgeConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_LocalKnowledgeConfig_reset(SwigObj* carg1) {
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_get(SwigObj* carg1) {
  inworld::LocalKnowledgeConfig *cppresult;
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  cppresult = (inworld::LocalKnowledgeConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_getConst(SwigObj* carg1) {
  inworld::LocalKnowledgeConfig *cppresult;
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  cppresult = (inworld::LocalKnowledgeConfig *) &((std::optional< inworld::LocalKnowledgeConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalKnowledgeConfig_get_value(SwigObj* carg1) {
  inworld::LocalKnowledgeConfig *cppresult;
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  cppresult = (inworld::LocalKnowledgeConfig *) &inworld_std_optional_Sl_inworld_LocalKnowledgeConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LocalKnowledgeConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::LocalKnowledgeConfig > *arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) 0 ;
  inworld::LocalKnowledgeConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::LocalKnowledgeConfig > *) carg1;
  
  arg2 = (inworld::LocalKnowledgeConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_LocalKnowledgeConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_new() {
  std::optional< inworld::RemoteKnowledgeConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::RemoteKnowledgeConfig > *)new std::optional< inworld::RemoteKnowledgeConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_new_rcinworld_RemoteKnowledgeConfig(SwigObj* carg1) {
  std::optional< inworld::RemoteKnowledgeConfig > *cppresult;
  inworld::RemoteKnowledgeConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::RemoteKnowledgeConfig *) carg1;
  
  cppresult = (std::optional< inworld::RemoteKnowledgeConfig > *)new std::optional< inworld::RemoteKnowledgeConfig >((inworld::RemoteKnowledgeConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_copy(SwigObj* carg1) {
  std::optional< inworld::RemoteKnowledgeConfig > *cppresult;
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  
  cppresult = (std::optional< inworld::RemoteKnowledgeConfig > *)new std::optional< inworld::RemoteKnowledgeConfig >((std::optional< inworld::RemoteKnowledgeConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteKnowledgeConfig_delete(SwigObj* carg1) {
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_RemoteKnowledgeConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::RemoteKnowledgeConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_value(SwigObj* carg1) {
  inworld::RemoteKnowledgeConfig *cppresult;
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  cppresult = (inworld::RemoteKnowledgeConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_valueConst(SwigObj* carg1) {
  inworld::RemoteKnowledgeConfig *cppresult;
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  cppresult = (inworld::RemoteKnowledgeConfig *) &((std::optional< inworld::RemoteKnowledgeConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteKnowledgeConfig cppresult;
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  inworld::RemoteKnowledgeConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  
  arg2 = (inworld::RemoteKnowledgeConfig *) carg2;
  
  cppresult = ((std::optional< inworld::RemoteKnowledgeConfig > const *)arg1)->value_or((inworld::RemoteKnowledgeConfig const &)*arg2);
  result = (SwigObj*)new inworld::RemoteKnowledgeConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteKnowledgeConfig_reset(SwigObj* carg1) {
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_get(SwigObj* carg1) {
  inworld::RemoteKnowledgeConfig *cppresult;
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  cppresult = (inworld::RemoteKnowledgeConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_getConst(SwigObj* carg1) {
  inworld::RemoteKnowledgeConfig *cppresult;
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  cppresult = (inworld::RemoteKnowledgeConfig *) &((std::optional< inworld::RemoteKnowledgeConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteKnowledgeConfig_get_value(SwigObj* carg1) {
  inworld::RemoteKnowledgeConfig *cppresult;
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  cppresult = (inworld::RemoteKnowledgeConfig *) &inworld_std_optional_Sl_inworld_RemoteKnowledgeConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteKnowledgeConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::RemoteKnowledgeConfig > *arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) 0 ;
  inworld::RemoteKnowledgeConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::RemoteKnowledgeConfig > *) carg1;
  
  arg2 = (inworld::RemoteKnowledgeConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_RemoteKnowledgeConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_LocalKnowledgeConfig_knowledge_compile_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalKnowledgeConfig *arg1 = (inworld::LocalKnowledgeConfig *) 0 ;
  inworld::KnowledgeCompileConfig *arg2 = (inworld::KnowledgeCompileConfig *) 0 ;
  
  arg1 = (inworld::LocalKnowledgeConfig *) carg1;
  arg2 = (inworld::KnowledgeCompileConfig *) carg2;
  if (arg1) (arg1)->knowledge_compile_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LocalKnowledgeConfig_knowledge_compile_config_get(SwigObj* carg1) {
  inworld::KnowledgeCompileConfig *cppresult;
  inworld::LocalKnowledgeConfig *arg1 = (inworld::LocalKnowledgeConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LocalKnowledgeConfig *) carg1;
  cppresult = (inworld::KnowledgeCompileConfig *)& ((arg1)->knowledge_compile_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalKnowledgeConfig_embedder_component_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LocalKnowledgeConfig *arg1 = (inworld::LocalKnowledgeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::LocalKnowledgeConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->embedder_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_LocalKnowledgeConfig_embedder_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::LocalKnowledgeConfig *arg1 = (inworld::LocalKnowledgeConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::LocalKnowledgeConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->embedder_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_LocalKnowledgeConfig_new() {
  inworld::LocalKnowledgeConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LocalKnowledgeConfig *)new inworld::LocalKnowledgeConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalKnowledgeConfig_delete(SwigObj* carg1) {
  inworld::LocalKnowledgeConfig *arg1 = (inworld::LocalKnowledgeConfig *) 0 ;
  
  arg1 = (inworld::LocalKnowledgeConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_RemoteKnowledgeConfig_knowledge_compile_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteKnowledgeConfig *arg1 = (inworld::RemoteKnowledgeConfig *) 0 ;
  inworld::KnowledgeCompileConfig *arg2 = (inworld::KnowledgeCompileConfig *) 0 ;
  
  arg1 = (inworld::RemoteKnowledgeConfig *) carg1;
  arg2 = (inworld::KnowledgeCompileConfig *) carg2;
  if (arg1) (arg1)->knowledge_compile_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_RemoteKnowledgeConfig_knowledge_compile_config_get(SwigObj* carg1) {
  inworld::KnowledgeCompileConfig *cppresult;
  inworld::RemoteKnowledgeConfig *arg1 = (inworld::RemoteKnowledgeConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::RemoteKnowledgeConfig *) carg1;
  cppresult = (inworld::KnowledgeCompileConfig *)& ((arg1)->knowledge_compile_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RemoteKnowledgeConfig_api_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteKnowledgeConfig *arg1 = (inworld::RemoteKnowledgeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::RemoteKnowledgeConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->api_key = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteKnowledgeConfig_api_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteKnowledgeConfig *arg1 = (inworld::RemoteKnowledgeConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::RemoteKnowledgeConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->api_key);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_RemoteKnowledgeConfig_language_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteKnowledgeConfig *arg1 = (inworld::RemoteKnowledgeConfig *) 0 ;
  inworld::library::Language *arg2 = (inworld::library::Language *) 0 ;
  
  arg1 = (inworld::RemoteKnowledgeConfig *) carg1;
  arg2 = (inworld::library::Language *) carg2;
  if (arg1) (arg1)->language = *arg2;
}


SWIGEXPORTC SwigObj* inworld_RemoteKnowledgeConfig_language_get(SwigObj* carg1) {
  inworld::library::Language *cppresult;
  inworld::RemoteKnowledgeConfig *arg1 = (inworld::RemoteKnowledgeConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::RemoteKnowledgeConfig *) carg1;
  cppresult = (inworld::library::Language *)& ((arg1)->language);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RemoteKnowledgeConfig_new() {
  inworld::RemoteKnowledgeConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::RemoteKnowledgeConfig *)new inworld::RemoteKnowledgeConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RemoteKnowledgeConfig_delete(SwigObj* carg1) {
  inworld::RemoteKnowledgeConfig *arg1 = (inworld::RemoteKnowledgeConfig *) 0 ;
  
  arg1 = (inworld::RemoteKnowledgeConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_KnowledgeCreationConfig_has_local_config(SwigObj* carg1) {
  bool cppresult;
  inworld::KnowledgeCreationConfig *arg1 = (inworld::KnowledgeCreationConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::KnowledgeCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_KnowledgeCreationConfig_has_local_config__SWIG(arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_KnowledgeCreationConfig_has_remote_config(SwigObj* carg1) {
  bool cppresult;
  inworld::KnowledgeCreationConfig *arg1 = (inworld::KnowledgeCreationConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::KnowledgeCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_KnowledgeCreationConfig_has_remote_config__SWIG(arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCreationConfig_get_local_config(SwigObj* carg1) {
  std::optional< inworld::LocalKnowledgeConfig > cppresult;
  inworld::KnowledgeCreationConfig *arg1 = (inworld::KnowledgeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::KnowledgeCreationConfig *) carg1;
  cppresult = inworld_inworld_KnowledgeCreationConfig_get_local_config__SWIG(arg1);
  result = (SwigObj*)new std::optional< inworld::LocalKnowledgeConfig >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCreationConfig_get_remote_config(SwigObj* carg1) {
  std::optional< inworld::RemoteKnowledgeConfig > cppresult;
  inworld::KnowledgeCreationConfig *arg1 = (inworld::KnowledgeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::KnowledgeCreationConfig *) carg1;
  cppresult = inworld_inworld_KnowledgeCreationConfig_get_remote_config__SWIG(arg1);
  result = (SwigObj*)new std::optional< inworld::RemoteKnowledgeConfig >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_KnowledgeCreationConfig_set_local_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::KnowledgeCreationConfig *arg1 = (inworld::KnowledgeCreationConfig *) 0 ;
  inworld::LocalKnowledgeConfig *arg2 = 0 ;
  
  arg1 = (inworld::KnowledgeCreationConfig *) carg1;
  
  arg2 = (inworld::LocalKnowledgeConfig *) carg2;
  
  inworld_inworld_KnowledgeCreationConfig_set_local_config__SWIG(arg1,(inworld::LocalKnowledgeConfig const &)*arg2);
}


SWIGEXPORTC void inworld_KnowledgeCreationConfig_set_remote_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::KnowledgeCreationConfig *arg1 = (inworld::KnowledgeCreationConfig *) 0 ;
  inworld::RemoteKnowledgeConfig *arg2 = 0 ;
  
  arg1 = (inworld::KnowledgeCreationConfig *) carg1;
  
  arg2 = (inworld::RemoteKnowledgeConfig *) carg2;
  
  inworld_inworld_KnowledgeCreationConfig_set_remote_config__SWIG(arg1,(inworld::RemoteKnowledgeConfig const &)*arg2);
}


SWIGEXPORTC bool inworld_KnowledgeCreationConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  inworld::KnowledgeCreationConfig *arg1 = (inworld::KnowledgeCreationConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::KnowledgeCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_KnowledgeCreationConfig_is_valid__SWIG((inworld::KnowledgeCreationConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCreationConfig_new() {
  inworld::KnowledgeCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::KnowledgeCreationConfig *)new inworld::KnowledgeCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeCreationConfig_delete(SwigObj* carg1) {
  inworld::KnowledgeCreationConfig *arg1 = (inworld::KnowledgeCreationConfig *) 0 ;
  
  arg1 = (inworld::KnowledgeCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KnowledgeFactory_delete(SwigObj* carg1) {
  inworld::KnowledgeFactory *arg1 = (inworld::KnowledgeFactory *) 0 ;
  
  arg1 = (inworld::KnowledgeFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeFactory_CreateKnowledge_rcinworld_CreationContext_rcinworld_LocalKnowledgeConfig(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > cppresult;
  inworld::KnowledgeFactory *arg1 = (inworld::KnowledgeFactory *) 0 ;
  inworld::CreationContext *arg2 = 0 ;
  inworld::LocalKnowledgeConfig *arg3 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::KnowledgeFactory *) carg1;
  
  arg2 = (inworld::CreationContext *) carg2;
  
  
  arg3 = (inworld::LocalKnowledgeConfig *) carg3;
  
  cppresult = inworld_inworld_KnowledgeFactory_CreateKnowledge__SWIG_0((inworld::KnowledgeFactory const *)arg1,(inworld::CreationContext const &)*arg2,(inworld::LocalKnowledgeConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeFactory_CreateKnowledge_rcinworld_CreationContext_rcinworld_RemoteKnowledgeConfig(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > > cppresult;
  inworld::KnowledgeFactory *arg1 = (inworld::KnowledgeFactory *) 0 ;
  inworld::CreationContext *arg2 = 0 ;
  inworld::RemoteKnowledgeConfig *arg3 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::KnowledgeFactory *) carg1;
  
  arg2 = (inworld::CreationContext *) carg2;
  
  
  arg3 = (inworld::RemoteKnowledgeConfig *) carg3;
  
  cppresult = inworld_inworld_KnowledgeFactory_CreateKnowledge__SWIG_1((inworld::KnowledgeFactory const *)arg1,(inworld::CreationContext const &)*arg2,(inworld::RemoteKnowledgeConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeFactory_new() {
  inworld::KnowledgeFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::KnowledgeFactory *)new inworld::KnowledgeFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeCollectionFactory_delete(SwigObj* carg1) {
  inworld::KnowledgeCollectionFactory *arg1 = (inworld::KnowledgeCollectionFactory *) 0 ;
  
  arg1 = (inworld::KnowledgeCollectionFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCollectionFactory_CreateKnowledgeCollection(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  inworld::KnowledgeCollection cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface > empty2 ;
  inworld::KnowledgeCollectionFactory *arg1 = (inworld::KnowledgeCollectionFactory *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface > > arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::KnowledgeCollectionFactory *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::TextEmbedderInterface>*)carg2 : empty2; 
  
  arg3 = (std::vector< std::string > *) carg3;
  
  cppresult = inworld_inworld_KnowledgeCollectionFactory_CreateKnowledgeCollection__SWIG((inworld::KnowledgeCollectionFactory const *)arg1,SWIG_STD_MOVE(arg2),(std::vector< std::string > const &)*arg3);
  result = (SwigObj*)new inworld::KnowledgeCollection(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeCollectionFactory_new() {
  inworld::KnowledgeCollectionFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::KnowledgeCollectionFactory *)new inworld::KnowledgeCollectionFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeRetrieverFactory_delete(SwigObj* carg1) {
  inworld::KnowledgeRetrieverFactory *arg1 = (inworld::KnowledgeRetrieverFactory *) 0 ;
  
  arg1 = (inworld::KnowledgeRetrieverFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeRetrieverFactory_CreateKnowledgeRetriever(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > > cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface > empty2 ;
  inworld::KnowledgeRetrieverFactory *arg1 = (inworld::KnowledgeRetrieverFactory *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface > > arg2 ;
  SwigObj* result;
  
  arg1 = (inworld::KnowledgeRetrieverFactory *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::TextEmbedderInterface>*)carg2 : empty2; 
  cppresult = inworld_inworld_KnowledgeRetrieverFactory_CreateKnowledgeRetriever__SWIG((inworld::KnowledgeRetrieverFactory const *)arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::KnowledgeRetrieverInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeRetrieverFactory_new() {
  inworld::KnowledgeRetrieverFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::KnowledgeRetrieverFactory *)new inworld::KnowledgeRetrieverFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentCompilerInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::IntentCompilerInterface > *smartarg1 = 0 ;
  inworld::IntentCompilerInterface *arg1 = (inworld::IntentCompilerInterface *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::IntentCompilerInterface > *)carg1;
  arg1 = (inworld::IntentCompilerInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_IntentCompilerInterface_CompileIntents(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::vector< inworld::CompiledIntent > > cppresult;
  std::shared_ptr< inworld::IntentCompilerInterface const > *smartarg1 = 0 ;
  inworld::IntentCompilerInterface *arg1 = (inworld::IntentCompilerInterface *) 0 ;
  std::vector< inworld::Intent > *arg2 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::IntentCompilerInterface > *)carg1;
  arg1 = (inworld::IntentCompilerInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (std::vector< inworld::Intent > *) carg2;
  
  cppresult = ((inworld::IntentCompilerInterface const *)arg1)->CompileIntents((std::vector< inworld::Intent > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::vector< inworld::CompiledIntent > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_IntentCompilerInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::IntentCompilerInterface const > *smartarg1 = 0 ;
  inworld::IntentCompilerInterface *arg1 = (inworld::IntentCompilerInterface *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::IntentCompilerInterface > *)carg1;
  arg1 = (inworld::IntentCompilerInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_IntentCompilerInterface_is_valid__SWIG((inworld::IntentCompilerInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentCompilerFactory_delete(SwigObj* carg1) {
  inworld::IntentCompilerFactory *arg1 = (inworld::IntentCompilerFactory *) 0 ;
  
  arg1 = (inworld::IntentCompilerFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_IntentCompilerFactory_CreateIntentCompiler_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg_(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > empty2 ;
  inworld::IntentCompilerFactory *arg1 = (inworld::IntentCompilerFactory *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface const > > arg2 ;
  SwigObj* result;
  
  arg1 = (inworld::IntentCompilerFactory *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr<const inworld::TextEmbedderInterface>*)carg2 : empty2; 
  cppresult = inworld_inworld_IntentCompilerFactory_CreateIntentCompiler__SWIG_0((inworld::IntentCompilerFactory const *)arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentCompilerFactory_CreateIntentCompiler(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > > cppresult;
  inworld::IntentCompilerFactory *arg1 = (inworld::IntentCompilerFactory *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::IntentCompilerFactory *) carg1;
  cppresult = inworld_inworld_IntentCompilerFactory_CreateIntentCompiler__SWIG_1((inworld::IntentCompilerFactory const *)arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::IntentCompilerInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentCompilerFactory_new() {
  inworld::IntentCompilerFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::IntentCompilerFactory *)new inworld::IntentCompilerFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentMatcherCreationConfig_matcher_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::IntentMatcherCreationConfig *arg1 = (inworld::IntentMatcherCreationConfig *) 0 ;
  inworld::IntentMatcherConfig *arg2 = (inworld::IntentMatcherConfig *) 0 ;
  
  arg1 = (inworld::IntentMatcherCreationConfig *) carg1;
  arg2 = (inworld::IntentMatcherConfig *) carg2;
  if (arg1) (arg1)->matcher_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherCreationConfig_matcher_config_get(SwigObj* carg1) {
  inworld::IntentMatcherConfig *cppresult;
  inworld::IntentMatcherCreationConfig *arg1 = (inworld::IntentMatcherCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::IntentMatcherCreationConfig *) carg1;
  cppresult = (inworld::IntentMatcherConfig *)& ((arg1)->matcher_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentMatcherCreationConfig_compiled_intents_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::IntentMatcherCreationConfig *arg1 = (inworld::IntentMatcherCreationConfig *) 0 ;
  std::vector< inworld::CompiledIntent > *arg2 = (std::vector< inworld::CompiledIntent > *) 0 ;
  
  arg1 = (inworld::IntentMatcherCreationConfig *) carg1;
  arg2 = (std::vector< inworld::CompiledIntent > *) carg2;
  if (arg1) (arg1)->compiled_intents = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherCreationConfig_compiled_intents_get(SwigObj* carg1) {
  std::vector< inworld::CompiledIntent > *cppresult;
  inworld::IntentMatcherCreationConfig *arg1 = (inworld::IntentMatcherCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::IntentMatcherCreationConfig *) carg1;
  cppresult = (std::vector< inworld::CompiledIntent > *)& ((arg1)->compiled_intents);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherCreationConfig_new() {
  inworld::IntentMatcherCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::IntentMatcherCreationConfig *)new inworld::IntentMatcherCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentMatcherCreationConfig_delete(SwigObj* carg1) {
  inworld::IntentMatcherCreationConfig *arg1 = (inworld::IntentMatcherCreationConfig *) 0 ;
  
  arg1 = (inworld::IntentMatcherCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_IntentMatcherFactory_delete(SwigObj* carg1) {
  inworld::IntentMatcherFactory *arg1 = (inworld::IntentMatcherFactory *) 0 ;
  
  arg1 = (inworld::IntentMatcherFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__std_shared_ptr_Sl_inworld_LLMInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > empty2 ;
  std::shared_ptr< inworld::LLMInterface const > empty3 ;
  inworld::IntentMatcherFactory *arg1 = (inworld::IntentMatcherFactory *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface const > > arg2 ;
  SwigValueWrapper< std::shared_ptr< inworld::LLMInterface const > > arg3 ;
  inworld::IntentMatcherCreationConfig *arg4 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::IntentMatcherFactory *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr<const inworld::TextEmbedderInterface>*)carg2 : empty2; 
  
  arg3 = carg3 ? *(std::shared_ptr<const inworld::LLMInterface>*)carg3 : empty3; 
  
  arg4 = (inworld::IntentMatcherCreationConfig *) carg4;
  
  cppresult = inworld_inworld_IntentMatcherFactory_CreateIntentMatcher__SWIG_0((inworld::IntentMatcherFactory const *)arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(inworld::IntentMatcherCreationConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_TextEmbedderInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > empty2 ;
  inworld::IntentMatcherFactory *arg1 = (inworld::IntentMatcherFactory *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface const > > arg2 ;
  inworld::IntentMatcherCreationConfig *arg3 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::IntentMatcherFactory *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr<const inworld::TextEmbedderInterface>*)carg2 : empty2; 
  
  arg3 = (inworld::IntentMatcherCreationConfig *) carg3;
  
  cppresult = inworld_inworld_IntentMatcherFactory_CreateIntentMatcher__SWIG_1((inworld::IntentMatcherFactory const *)arg1,SWIG_STD_MOVE(arg2),(inworld::IntentMatcherCreationConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherFactory_CreateIntentMatcher_std_shared_ptr_Sl_inworld_LLMInterface_SS_const_Sg__rcinworld_IntentMatcherCreationConfig(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > > cppresult;
  std::shared_ptr< inworld::LLMInterface const > empty2 ;
  inworld::IntentMatcherFactory *arg1 = (inworld::IntentMatcherFactory *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::LLMInterface const > > arg2 ;
  inworld::IntentMatcherCreationConfig *arg3 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::IntentMatcherFactory *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr<const inworld::LLMInterface>*)carg2 : empty2; 
  
  arg3 = (inworld::IntentMatcherCreationConfig *) carg3;
  
  cppresult = inworld_inworld_IntentMatcherFactory_CreateIntentMatcher__SWIG_2((inworld::IntentMatcherFactory const *)arg1,SWIG_STD_MOVE(arg2),(inworld::IntentMatcherCreationConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::IntentMatcherInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentMatcherFactory_new() {
  inworld::IntentMatcherFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::IntentMatcherFactory *)new inworld::IntentMatcherFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KeywordMatcherFactory_delete(SwigObj* carg1) {
  inworld::KeywordMatcherFactory *arg1 = (inworld::KeywordMatcherFactory *) 0 ;
  
  arg1 = (inworld::KeywordMatcherFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherFactory_CreateKeywordMatcher(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > > cppresult;
  inworld::KeywordMatcherFactory *arg1 = (inworld::KeywordMatcherFactory *) 0 ;
  std::vector< inworld::KeywordGroup > *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::KeywordMatcherFactory *) carg1;
  
  arg2 = (std::vector< inworld::KeywordGroup > *) carg2;
  
  cppresult = inworld_inworld_KeywordMatcherFactory_CreateKeywordMatcher__SWIG((inworld::KeywordMatcherFactory const *)arg1,(std::vector< inworld::KeywordGroup > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::KeywordMatcherInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherFactory_new() {
  inworld::KeywordMatcherFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::KeywordMatcherFactory *)new inworld::KeywordMatcherFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_DictionaryRule_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::DictionaryRule *arg1 = (inworld::DictionaryRule *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::DictionaryRule *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_DictionaryRule_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::DictionaryRule *arg1 = (inworld::DictionaryRule *) 0 ;
  const char * result;
  
  arg1 = (inworld::DictionaryRule *) carg1;
  cppresult = (std::string *) & ((arg1)->name);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_DictionaryRule_display_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::DictionaryRule *arg1 = (inworld::DictionaryRule *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::DictionaryRule *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->display_name = *arg2;
}


SWIGEXPORTC const char * inworld_DictionaryRule_display_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::DictionaryRule *arg1 = (inworld::DictionaryRule *) 0 ;
  const char * result;
  
  arg1 = (inworld::DictionaryRule *) carg1;
  cppresult = (std::string *) & ((arg1)->display_name);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_DictionaryRule_synonyms_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::DictionaryRule *arg1 = (inworld::DictionaryRule *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (inworld::DictionaryRule *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->synonyms = *arg2;
}


SWIGEXPORTC SwigObj* inworld_DictionaryRule_synonyms_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::DictionaryRule *arg1 = (inworld::DictionaryRule *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::DictionaryRule *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->synonyms);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DictionaryRule_new() {
  inworld::DictionaryRule *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::DictionaryRule *)new inworld::DictionaryRule();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_DictionaryRule_delete(SwigObj* carg1) {
  inworld::DictionaryRule *arg1 = (inworld::DictionaryRule *) 0 ;
  
  arg1 = (inworld::DictionaryRule *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Entity_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::Entity *arg1 = (inworld::Entity *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::Entity *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_Entity_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::Entity *arg1 = (inworld::Entity *) 0 ;
  const char * result;
  
  arg1 = (inworld::Entity *) carg1;
  cppresult = (std::string *) & ((arg1)->name);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_Entity_rules_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::Entity *arg1 = (inworld::Entity *) 0 ;
  std::vector< inworld::DictionaryRule > *arg2 = (std::vector< inworld::DictionaryRule > *) 0 ;
  
  arg1 = (inworld::Entity *) carg1;
  arg2 = (std::vector< inworld::DictionaryRule > *) carg2;
  if (arg1) (arg1)->rules = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Entity_rules_get(SwigObj* carg1) {
  std::vector< inworld::DictionaryRule > *cppresult;
  inworld::Entity *arg1 = (inworld::Entity *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::Entity *) carg1;
  cppresult = (std::vector< inworld::DictionaryRule > *)& ((arg1)->rules);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Entity_new() {
  inworld::Entity *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::Entity *)new inworld::Entity();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Entity_delete(SwigObj* carg1) {
  inworld::Entity *arg1 = (inworld::Entity *) 0 ;
  
  arg1 = (inworld::Entity *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_EntityMatch_entity_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::EntityMatch *arg1 = (inworld::EntityMatch *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::EntityMatch *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->entity_name = *arg2;
}


SWIGEXPORTC const char * inworld_EntityMatch_entity_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::EntityMatch *arg1 = (inworld::EntityMatch *) 0 ;
  const char * result;
  
  arg1 = (inworld::EntityMatch *) carg1;
  cppresult = (std::string *) & ((arg1)->entity_name);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_EntityMatch_rule_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::EntityMatch *arg1 = (inworld::EntityMatch *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::EntityMatch *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->rule_name = *arg2;
}


SWIGEXPORTC const char * inworld_EntityMatch_rule_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::EntityMatch *arg1 = (inworld::EntityMatch *) 0 ;
  const char * result;
  
  arg1 = (inworld::EntityMatch *) carg1;
  cppresult = (std::string *) & ((arg1)->rule_name);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_EntityMatch_text_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::EntityMatch *arg1 = (inworld::EntityMatch *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::EntityMatch *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->text = *arg2;
}


SWIGEXPORTC const char * inworld_EntityMatch_text_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::EntityMatch *arg1 = (inworld::EntityMatch *) 0 ;
  const char * result;
  
  arg1 = (inworld::EntityMatch *) carg1;
  cppresult = (std::string *) & ((arg1)->text);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_EntityMatch_new() {
  inworld::EntityMatch *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::EntityMatch *)new inworld::EntityMatch();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_EntityMatch_delete(SwigObj* carg1) {
  inworld::EntityMatch *arg1 = (inworld::EntityMatch *) 0 ;
  
  arg1 = (inworld::EntityMatch *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_NERInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::NERInterface > *smartarg1 = 0 ;
  inworld::NERInterface *arg1 = (inworld::NERInterface *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::NERInterface > *)carg1;
  arg1 = (inworld::NERInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_NERInterface_ExtractEntities(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::vector< inworld::EntityMatch > > cppresult;
  std::shared_ptr< inworld::NERInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::NERInterface *arg1 = (inworld::NERInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::NERInterface > *)carg1;
  arg1 = (inworld::NERInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = ((inworld::NERInterface const *)arg1)->ExtractEntities((std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::vector< inworld::EntityMatch > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_NERInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::NERInterface const > *smartarg1 = 0 ;
  inworld::NERInterface *arg1 = (inworld::NERInterface *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::NERInterface > *)carg1;
  arg1 = (inworld::NERInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_NERInterface_is_valid__SWIG((inworld::NERInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_NERCreationConfig_entities_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::NERCreationConfig *arg1 = (inworld::NERCreationConfig *) 0 ;
  std::vector< inworld::Entity > *arg2 = (std::vector< inworld::Entity > *) 0 ;
  
  arg1 = (inworld::NERCreationConfig *) carg1;
  arg2 = (std::vector< inworld::Entity > *) carg2;
  if (arg1) (arg1)->entities = *arg2;
}


SWIGEXPORTC SwigObj* inworld_NERCreationConfig_entities_get(SwigObj* carg1) {
  std::vector< inworld::Entity > *cppresult;
  inworld::NERCreationConfig *arg1 = (inworld::NERCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::NERCreationConfig *) carg1;
  cppresult = (std::vector< inworld::Entity > *)& ((arg1)->entities);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_NERCreationConfig_new() {
  inworld::NERCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::NERCreationConfig *)new inworld::NERCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_NERCreationConfig_delete(SwigObj* carg1) {
  inworld::NERCreationConfig *arg1 = (inworld::NERCreationConfig *) 0 ;
  
  arg1 = (inworld::NERCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_NERFactory_CreateNER(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::NERInterface > > cppresult;
  inworld::NERCreationConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::NERCreationConfig *) carg1;
  
  cppresult = inworld_inworld_NERFactory_CreateNER__SWIG((inworld::NERCreationConfig const &)*arg1);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::NERInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_NERFactory_new() {
  inworld::NERFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::NERFactory *)new inworld::NERFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_NERFactory_delete(SwigObj* carg1) {
  inworld::NERFactory *arg1 = (inworld::NERFactory *) 0 ;
  
  arg1 = (inworld::NERFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_RenderJinja(const char * carg1, const char * carg2) {
  absl::StatusOr< std::string > cppresult;
  std::string arg1 ;
  std::string arg2 ;
  SwigObj* result;
  
  
  if (carg1)
  arg1 = carg1;
  
  
  if (carg2)
  arg2 = carg2;
  
  cppresult = RenderJinja(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMRoutingHelper_CreateLLMRouting(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > > cppresult;
  inworld::CreationContext *arg1 = 0 ;
  inworld::LLMRoutingCreationConfig *arg2 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::CreationContext *) carg1;
  
  
  arg2 = (inworld::LLMRoutingCreationConfig *) carg2;
  
  cppresult = inworld::swig_helpers::LLMRoutingHelper::CreateLLMRouting((inworld::CreationContext const &)*arg1,(inworld::LLMRoutingCreationConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::LLMRouting const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMRoutingHelper_new() {
  inworld::swig_helpers::LLMRoutingHelper *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::swig_helpers::LLMRoutingHelper *)new inworld::swig_helpers::LLMRoutingHelper();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMRoutingHelper_delete(SwigObj* carg1) {
  inworld::swig_helpers::LLMRoutingHelper *arg1 = (inworld::swig_helpers::LLMRoutingHelper *) 0 ;
  
  arg1 = (inworld::swig_helpers::LLMRoutingHelper *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LLMRoutingConfig_llm_component_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->llm_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_LLMRoutingConfig_llm_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->llm_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_LLMRoutingConfig_priority_set(SwigObj* carg1, int carg2) {
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORTC int inworld_LLMRoutingConfig_priority_get(SwigObj* carg1) {
  int cppresult;
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  int result;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  cppresult = (int) ((arg1)->priority);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMRoutingConfig_error_cooldown_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  absl::Duration *arg2 = (absl::Duration *) 0 ;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  arg2 = (absl::Duration *) carg2;
  if (arg1) (arg1)->error_cooldown = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMRoutingConfig_error_cooldown_get(SwigObj* carg1) {
  absl::Duration *cppresult;
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  cppresult = (absl::Duration *)& ((arg1)->error_cooldown);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMRoutingConfig_min_errors_set(SwigObj* carg1, int carg2) {
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->min_errors = arg2;
}


SWIGEXPORTC int inworld_LLMRoutingConfig_min_errors_get(SwigObj* carg1) {
  int cppresult;
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  int result;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  cppresult = (int) ((arg1)->min_errors);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMRoutingConfig_new() {
  inworld::LLMRoutingConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LLMRoutingConfig *)new inworld::LLMRoutingConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMRoutingConfig_delete(SwigObj* carg1) {
  inworld::LLMRoutingConfig *arg1 = (inworld::LLMRoutingConfig *) 0 ;
  
  arg1 = (inworld::LLMRoutingConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LLMRoutingCreationConfig_routing_configs_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LLMRoutingCreationConfig *arg1 = (inworld::LLMRoutingCreationConfig *) 0 ;
  std::vector< inworld::LLMRoutingConfig > *arg2 = (std::vector< inworld::LLMRoutingConfig > *) 0 ;
  
  arg1 = (inworld::LLMRoutingCreationConfig *) carg1;
  arg2 = (std::vector< inworld::LLMRoutingConfig > *) carg2;
  if (arg1) (arg1)->routing_configs = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMRoutingCreationConfig_routing_configs_get(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *cppresult;
  inworld::LLMRoutingCreationConfig *arg1 = (inworld::LLMRoutingCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LLMRoutingCreationConfig *) carg1;
  cppresult = (std::vector< inworld::LLMRoutingConfig > *)& ((arg1)->routing_configs);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMRoutingCreationConfig_new() {
  inworld::LLMRoutingCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LLMRoutingCreationConfig *)new inworld::LLMRoutingCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMRoutingCreationConfig_delete(SwigObj* carg1) {
  inworld::LLMRoutingCreationConfig *arg1 = (inworld::LLMRoutingCreationConfig *) 0 ;
  
  arg1 = (inworld::LLMRoutingCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LLMRouting_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::LLMRouting > *smartarg1 = 0 ;
  inworld::LLMRouting *arg1 = (inworld::LLMRouting *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::LLMRouting > *)carg1;
  arg1 = (inworld::LLMRouting *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_LLMRouting_model_properties(SwigObj* carg1) {
  inworld::ModelProperties cppresult;
  std::shared_ptr< inworld::LLMRouting const > *smartarg1 = 0 ;
  inworld::LLMRouting *arg1 = (inworld::LLMRouting *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::LLMRouting > *)carg1;
  arg1 = (inworld::LLMRouting *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::LLMRouting const *)arg1)->model_properties();
  result = (SwigObj*)new inworld::ModelProperties(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_LLMRouting_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::LLMRouting const > *smartarg1 = 0 ;
  inworld::LLMRouting *arg1 = (inworld::LLMRouting *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::LLMRouting > *)carg1;
  arg1 = (inworld::LLMRouting *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_LLMRouting_is_valid__SWIG((inworld::LLMRouting const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_new() {
  std::optional< inworld::LocalLLMConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::LocalLLMConfig > *)new std::optional< inworld::LocalLLMConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_new_rcinworld_LocalLLMConfig(SwigObj* carg1) {
  std::optional< inworld::LocalLLMConfig > *cppresult;
  inworld::LocalLLMConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::LocalLLMConfig *) carg1;
  
  cppresult = (std::optional< inworld::LocalLLMConfig > *)new std::optional< inworld::LocalLLMConfig >((inworld::LocalLLMConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_copy(SwigObj* carg1) {
  std::optional< inworld::LocalLLMConfig > *cppresult;
  std::optional< inworld::LocalLLMConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  
  cppresult = (std::optional< inworld::LocalLLMConfig > *)new std::optional< inworld::LocalLLMConfig >((std::optional< inworld::LocalLLMConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LocalLLMConfig_delete(SwigObj* carg1) {
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_LocalLLMConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::LocalLLMConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_value(SwigObj* carg1) {
  inworld::LocalLLMConfig *cppresult;
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  cppresult = (inworld::LocalLLMConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_valueConst(SwigObj* carg1) {
  inworld::LocalLLMConfig *cppresult;
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  cppresult = (inworld::LocalLLMConfig *) &((std::optional< inworld::LocalLLMConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalLLMConfig cppresult;
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  inworld::LocalLLMConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  
  arg2 = (inworld::LocalLLMConfig *) carg2;
  
  cppresult = ((std::optional< inworld::LocalLLMConfig > const *)arg1)->value_or((inworld::LocalLLMConfig const &)*arg2);
  result = (SwigObj*)new inworld::LocalLLMConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_LocalLLMConfig_reset(SwigObj* carg1) {
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_get(SwigObj* carg1) {
  inworld::LocalLLMConfig *cppresult;
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  cppresult = (inworld::LocalLLMConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_getConst(SwigObj* carg1) {
  inworld::LocalLLMConfig *cppresult;
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  cppresult = (inworld::LocalLLMConfig *) &((std::optional< inworld::LocalLLMConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalLLMConfig_get_value(SwigObj* carg1) {
  inworld::LocalLLMConfig *cppresult;
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  cppresult = (inworld::LocalLLMConfig *) &inworld_std_optional_Sl_inworld_LocalLLMConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LocalLLMConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::LocalLLMConfig > *arg1 = (std::optional< inworld::LocalLLMConfig > *) 0 ;
  inworld::LocalLLMConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::LocalLLMConfig > *) carg1;
  
  arg2 = (inworld::LocalLLMConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_LocalLLMConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_new() {
  std::optional< inworld::RemoteLLMConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::RemoteLLMConfig > *)new std::optional< inworld::RemoteLLMConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_new_rcinworld_RemoteLLMConfig(SwigObj* carg1) {
  std::optional< inworld::RemoteLLMConfig > *cppresult;
  inworld::RemoteLLMConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  
  cppresult = (std::optional< inworld::RemoteLLMConfig > *)new std::optional< inworld::RemoteLLMConfig >((inworld::RemoteLLMConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_copy(SwigObj* carg1) {
  std::optional< inworld::RemoteLLMConfig > *cppresult;
  std::optional< inworld::RemoteLLMConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  
  cppresult = (std::optional< inworld::RemoteLLMConfig > *)new std::optional< inworld::RemoteLLMConfig >((std::optional< inworld::RemoteLLMConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteLLMConfig_delete(SwigObj* carg1) {
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_RemoteLLMConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::RemoteLLMConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_value(SwigObj* carg1) {
  inworld::RemoteLLMConfig *cppresult;
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  cppresult = (inworld::RemoteLLMConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_valueConst(SwigObj* carg1) {
  inworld::RemoteLLMConfig *cppresult;
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  cppresult = (inworld::RemoteLLMConfig *) &((std::optional< inworld::RemoteLLMConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteLLMConfig cppresult;
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  inworld::RemoteLLMConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  
  arg2 = (inworld::RemoteLLMConfig *) carg2;
  
  cppresult = ((std::optional< inworld::RemoteLLMConfig > const *)arg1)->value_or((inworld::RemoteLLMConfig const &)*arg2);
  result = (SwigObj*)new inworld::RemoteLLMConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteLLMConfig_reset(SwigObj* carg1) {
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_get(SwigObj* carg1) {
  inworld::RemoteLLMConfig *cppresult;
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  cppresult = (inworld::RemoteLLMConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_getConst(SwigObj* carg1) {
  inworld::RemoteLLMConfig *cppresult;
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  cppresult = (inworld::RemoteLLMConfig *) &((std::optional< inworld::RemoteLLMConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteLLMConfig_get_value(SwigObj* carg1) {
  inworld::RemoteLLMConfig *cppresult;
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  cppresult = (inworld::RemoteLLMConfig *) &inworld_std_optional_Sl_inworld_RemoteLLMConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteLLMConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::RemoteLLMConfig > *arg1 = (std::optional< inworld::RemoteLLMConfig > *) 0 ;
  inworld::RemoteLLMConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::RemoteLLMConfig > *) carg1;
  
  arg2 = (inworld::RemoteLLMConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_RemoteLLMConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_LocalLLMConfig_model_path_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LocalLLMConfig *arg1 = (inworld::LocalLLMConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::LocalLLMConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->model_path = *arg2;
}


SWIGEXPORTC const char * inworld_LocalLLMConfig_model_path_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::LocalLLMConfig *arg1 = (inworld::LocalLLMConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::LocalLLMConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->model_path);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_LocalLLMConfig_device_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalLLMConfig *arg1 = (inworld::LocalLLMConfig *) 0 ;
  inworld::Device *arg2 = (inworld::Device *) 0 ;
  
  arg1 = (inworld::LocalLLMConfig *) carg1;
  arg2 = (inworld::Device *) carg2;
  if (arg1) (arg1)->device = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LocalLLMConfig_device_get(SwigObj* carg1) {
  inworld::Device *cppresult;
  inworld::LocalLLMConfig *arg1 = (inworld::LocalLLMConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LocalLLMConfig *) carg1;
  cppresult = (inworld::Device *)& ((arg1)->device);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalLLMConfig_default_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalLLMConfig *arg1 = (inworld::LocalLLMConfig *) 0 ;
  inworld::TextGenerationConfig *arg2 = (inworld::TextGenerationConfig *) 0 ;
  
  arg1 = (inworld::LocalLLMConfig *) carg1;
  arg2 = (inworld::TextGenerationConfig *) carg2;
  if (arg1) (arg1)->default_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LocalLLMConfig_default_config_get(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  inworld::LocalLLMConfig *arg1 = (inworld::LocalLLMConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LocalLLMConfig *) carg1;
  cppresult = (inworld::TextGenerationConfig *)& ((arg1)->default_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LocalLLMConfig_new() {
  inworld::LocalLLMConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LocalLLMConfig *)new inworld::LocalLLMConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalLLMConfig_delete(SwigObj* carg1) {
  inworld::LocalLLMConfig *arg1 = (inworld::LocalLLMConfig *) 0 ;
  
  arg1 = (inworld::LocalLLMConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_RemoteLLMConfig_provider_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->provider = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteLLMConfig_provider_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->provider);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_RemoteLLMConfig_model_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->model_name = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteLLMConfig_model_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->model_name);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_RemoteLLMConfig_api_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->api_key = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteLLMConfig_api_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->api_key);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_RemoteLLMConfig_default_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  inworld::TextGenerationConfig *arg2 = (inworld::TextGenerationConfig *) 0 ;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  arg2 = (inworld::TextGenerationConfig *) carg2;
  if (arg1) (arg1)->default_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_RemoteLLMConfig_default_config_get(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  cppresult = (inworld::TextGenerationConfig *)& ((arg1)->default_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RemoteLLMConfig_new() {
  inworld::RemoteLLMConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::RemoteLLMConfig *)new inworld::RemoteLLMConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RemoteLLMConfig_delete(SwigObj* carg1) {
  inworld::RemoteLLMConfig *arg1 = (inworld::RemoteLLMConfig *) 0 ;
  
  arg1 = (inworld::RemoteLLMConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_LLMCreationConfig_has_local_llm_config(SwigObj* carg1) {
  bool cppresult;
  inworld::LLMCreationConfig *arg1 = (inworld::LLMCreationConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::LLMCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_LLMCreationConfig_has_local_llm_config__SWIG((inworld::LLMCreationConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMCreationConfig_has_remote_llm_config(SwigObj* carg1) {
  bool cppresult;
  inworld::LLMCreationConfig *arg1 = (inworld::LLMCreationConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::LLMCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_LLMCreationConfig_has_remote_llm_config__SWIG((inworld::LLMCreationConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMCreationConfig_get_local_llm_config(SwigObj* carg1) {
  std::optional< inworld::LocalLLMConfig > cppresult;
  inworld::LLMCreationConfig *arg1 = (inworld::LLMCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LLMCreationConfig *) carg1;
  cppresult = inworld_inworld_LLMCreationConfig_get_local_llm_config__SWIG((inworld::LLMCreationConfig const *)arg1);
  result = (SwigObj*)new std::optional< inworld::LocalLLMConfig >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMCreationConfig_get_remote_llm_config(SwigObj* carg1) {
  std::optional< inworld::RemoteLLMConfig > cppresult;
  inworld::LLMCreationConfig *arg1 = (inworld::LLMCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LLMCreationConfig *) carg1;
  cppresult = inworld_inworld_LLMCreationConfig_get_remote_llm_config__SWIG((inworld::LLMCreationConfig const *)arg1);
  result = (SwigObj*)new std::optional< inworld::RemoteLLMConfig >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_LLMCreationConfig_set_local_llm_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::LLMCreationConfig *arg1 = (inworld::LLMCreationConfig *) 0 ;
  inworld::LocalLLMConfig *arg2 = 0 ;
  
  arg1 = (inworld::LLMCreationConfig *) carg1;
  
  arg2 = (inworld::LocalLLMConfig *) carg2;
  
  inworld_inworld_LLMCreationConfig_set_local_llm_config__SWIG(arg1,(inworld::LocalLLMConfig const &)*arg2);
}


SWIGEXPORTC void inworld_LLMCreationConfig_set_remote_llm_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::LLMCreationConfig *arg1 = (inworld::LLMCreationConfig *) 0 ;
  inworld::RemoteLLMConfig *arg2 = 0 ;
  
  arg1 = (inworld::LLMCreationConfig *) carg1;
  
  arg2 = (inworld::RemoteLLMConfig *) carg2;
  
  inworld_inworld_LLMCreationConfig_set_remote_llm_config__SWIG(arg1,(inworld::RemoteLLMConfig const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_LLMCreationConfig_new() {
  inworld::LLMCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LLMCreationConfig *)new inworld::LLMCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMCreationConfig_delete(SwigObj* carg1) {
  inworld::LLMCreationConfig *arg1 = (inworld::LLMCreationConfig *) 0 ;
  
  arg1 = (inworld::LLMCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LLMFactory_delete(SwigObj* carg1) {
  inworld::LLMFactory *arg1 = (inworld::LLMFactory *) 0 ;
  
  arg1 = (inworld::LLMFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_LLMFactory_CreateLLM_rcinworld_LocalLLMConfig(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > cppresult;
  inworld::LLMFactory *arg1 = (inworld::LLMFactory *) 0 ;
  inworld::LocalLLMConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LLMFactory *) carg1;
  
  arg2 = (inworld::LocalLLMConfig *) carg2;
  
  cppresult = inworld_inworld_LLMFactory_CreateLLM__SWIG_0((inworld::LLMFactory const *)arg1,(inworld::LocalLLMConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMFactory_CreateLLM_rcinworld_RemoteLLMConfig(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > > cppresult;
  inworld::LLMFactory *arg1 = (inworld::LLMFactory *) 0 ;
  inworld::RemoteLLMConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LLMFactory *) carg1;
  
  arg2 = (inworld::RemoteLLMConfig *) carg2;
  
  cppresult = inworld_inworld_LLMFactory_CreateLLM__SWIG_1((inworld::LLMFactory const *)arg1,(inworld::RemoteLLMConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::LLMInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMFactory_new() {
  inworld::LLMFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LLMFactory *)new inworld::LLMFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_new() {
  std::optional< inworld::RollingSummaryConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::RollingSummaryConfig > *)new std::optional< inworld::RollingSummaryConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_new_rcinworld_RollingSummaryConfig(SwigObj* carg1) {
  std::optional< inworld::RollingSummaryConfig > *cppresult;
  inworld::RollingSummaryConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  
  cppresult = (std::optional< inworld::RollingSummaryConfig > *)new std::optional< inworld::RollingSummaryConfig >((inworld::RollingSummaryConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_copy(SwigObj* carg1) {
  std::optional< inworld::RollingSummaryConfig > *cppresult;
  std::optional< inworld::RollingSummaryConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  
  cppresult = (std::optional< inworld::RollingSummaryConfig > *)new std::optional< inworld::RollingSummaryConfig >((std::optional< inworld::RollingSummaryConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RollingSummaryConfig_delete(SwigObj* carg1) {
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_RollingSummaryConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::RollingSummaryConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_value(SwigObj* carg1) {
  inworld::RollingSummaryConfig *cppresult;
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  cppresult = (inworld::RollingSummaryConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_valueConst(SwigObj* carg1) {
  inworld::RollingSummaryConfig *cppresult;
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  cppresult = (inworld::RollingSummaryConfig *) &((std::optional< inworld::RollingSummaryConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::RollingSummaryConfig cppresult;
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  inworld::RollingSummaryConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  
  arg2 = (inworld::RollingSummaryConfig *) carg2;
  
  cppresult = ((std::optional< inworld::RollingSummaryConfig > const *)arg1)->value_or((inworld::RollingSummaryConfig const &)*arg2);
  result = (SwigObj*)new inworld::RollingSummaryConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_RollingSummaryConfig_reset(SwigObj* carg1) {
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_get(SwigObj* carg1) {
  inworld::RollingSummaryConfig *cppresult;
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  cppresult = (inworld::RollingSummaryConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_getConst(SwigObj* carg1) {
  inworld::RollingSummaryConfig *cppresult;
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  cppresult = (inworld::RollingSummaryConfig *) &((std::optional< inworld::RollingSummaryConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RollingSummaryConfig_get_value(SwigObj* carg1) {
  inworld::RollingSummaryConfig *cppresult;
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  cppresult = (inworld::RollingSummaryConfig *) &inworld_std_optional_Sl_inworld_RollingSummaryConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RollingSummaryConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::RollingSummaryConfig > *arg1 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  inworld::RollingSummaryConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::RollingSummaryConfig > *) carg1;
  
  arg2 = (inworld::RollingSummaryConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_RollingSummaryConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_new() {
  std::optional< inworld::FlashMemoryConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::FlashMemoryConfig > *)new std::optional< inworld::FlashMemoryConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_new_rcinworld_FlashMemoryConfig(SwigObj* carg1) {
  std::optional< inworld::FlashMemoryConfig > *cppresult;
  inworld::FlashMemoryConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  
  cppresult = (std::optional< inworld::FlashMemoryConfig > *)new std::optional< inworld::FlashMemoryConfig >((inworld::FlashMemoryConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_copy(SwigObj* carg1) {
  std::optional< inworld::FlashMemoryConfig > *cppresult;
  std::optional< inworld::FlashMemoryConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  
  cppresult = (std::optional< inworld::FlashMemoryConfig > *)new std::optional< inworld::FlashMemoryConfig >((std::optional< inworld::FlashMemoryConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_FlashMemoryConfig_delete(SwigObj* carg1) {
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_FlashMemoryConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::FlashMemoryConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_value(SwigObj* carg1) {
  inworld::FlashMemoryConfig *cppresult;
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  cppresult = (inworld::FlashMemoryConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_valueConst(SwigObj* carg1) {
  inworld::FlashMemoryConfig *cppresult;
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  cppresult = (inworld::FlashMemoryConfig *) &((std::optional< inworld::FlashMemoryConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::FlashMemoryConfig cppresult;
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  inworld::FlashMemoryConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  
  arg2 = (inworld::FlashMemoryConfig *) carg2;
  
  cppresult = ((std::optional< inworld::FlashMemoryConfig > const *)arg1)->value_or((inworld::FlashMemoryConfig const &)*arg2);
  result = (SwigObj*)new inworld::FlashMemoryConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_FlashMemoryConfig_reset(SwigObj* carg1) {
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_get(SwigObj* carg1) {
  inworld::FlashMemoryConfig *cppresult;
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  cppresult = (inworld::FlashMemoryConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_getConst(SwigObj* carg1) {
  inworld::FlashMemoryConfig *cppresult;
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  cppresult = (inworld::FlashMemoryConfig *) &((std::optional< inworld::FlashMemoryConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_FlashMemoryConfig_get_value(SwigObj* carg1) {
  inworld::FlashMemoryConfig *cppresult;
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  cppresult = (inworld::FlashMemoryConfig *) &inworld_std_optional_Sl_inworld_FlashMemoryConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_FlashMemoryConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::FlashMemoryConfig > *arg1 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  inworld::FlashMemoryConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::FlashMemoryConfig > *) carg1;
  
  arg2 = (inworld::FlashMemoryConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_FlashMemoryConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_new() {
  std::optional< inworld::LongTermMemoryConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::LongTermMemoryConfig > *)new std::optional< inworld::LongTermMemoryConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_new_rcinworld_LongTermMemoryConfig(SwigObj* carg1) {
  std::optional< inworld::LongTermMemoryConfig > *cppresult;
  inworld::LongTermMemoryConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  
  cppresult = (std::optional< inworld::LongTermMemoryConfig > *)new std::optional< inworld::LongTermMemoryConfig >((inworld::LongTermMemoryConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_copy(SwigObj* carg1) {
  std::optional< inworld::LongTermMemoryConfig > *cppresult;
  std::optional< inworld::LongTermMemoryConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  
  cppresult = (std::optional< inworld::LongTermMemoryConfig > *)new std::optional< inworld::LongTermMemoryConfig >((std::optional< inworld::LongTermMemoryConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LongTermMemoryConfig_delete(SwigObj* carg1) {
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_LongTermMemoryConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::LongTermMemoryConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_value(SwigObj* carg1) {
  inworld::LongTermMemoryConfig *cppresult;
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  cppresult = (inworld::LongTermMemoryConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_valueConst(SwigObj* carg1) {
  inworld::LongTermMemoryConfig *cppresult;
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  cppresult = (inworld::LongTermMemoryConfig *) &((std::optional< inworld::LongTermMemoryConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::LongTermMemoryConfig cppresult;
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  inworld::LongTermMemoryConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  
  arg2 = (inworld::LongTermMemoryConfig *) carg2;
  
  cppresult = ((std::optional< inworld::LongTermMemoryConfig > const *)arg1)->value_or((inworld::LongTermMemoryConfig const &)*arg2);
  result = (SwigObj*)new inworld::LongTermMemoryConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_LongTermMemoryConfig_reset(SwigObj* carg1) {
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_get(SwigObj* carg1) {
  inworld::LongTermMemoryConfig *cppresult;
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  cppresult = (inworld::LongTermMemoryConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_getConst(SwigObj* carg1) {
  inworld::LongTermMemoryConfig *cppresult;
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  cppresult = (inworld::LongTermMemoryConfig *) &((std::optional< inworld::LongTermMemoryConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LongTermMemoryConfig_get_value(SwigObj* carg1) {
  inworld::LongTermMemoryConfig *cppresult;
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  cppresult = (inworld::LongTermMemoryConfig *) &inworld_std_optional_Sl_inworld_LongTermMemoryConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LongTermMemoryConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::LongTermMemoryConfig > *arg1 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  inworld::LongTermMemoryConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::LongTermMemoryConfig > *) carg1;
  
  arg2 = (inworld::LongTermMemoryConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_LongTermMemoryConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_RollingSummary_summarized_text_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RollingSummary *arg1 = (inworld::RollingSummary *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::RollingSummary *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->summarized_text = *arg2;
}


SWIGEXPORTC const char * inworld_RollingSummary_summarized_text_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RollingSummary *arg1 = (inworld::RollingSummary *) 0 ;
  const char * result;
  
  arg1 = (inworld::RollingSummary *) carg1;
  cppresult = (std::string *) & ((arg1)->summarized_text);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_RollingSummary_turns_since_last_update_set(SwigObj* carg1, int carg2) {
  inworld::RollingSummary *arg1 = (inworld::RollingSummary *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::RollingSummary *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->turns_since_last_update = arg2;
}


SWIGEXPORTC int inworld_RollingSummary_turns_since_last_update_get(SwigObj* carg1) {
  int cppresult;
  inworld::RollingSummary *arg1 = (inworld::RollingSummary *) 0 ;
  int result;
  
  arg1 = (inworld::RollingSummary *) carg1;
  cppresult = (int) ((arg1)->turns_since_last_update);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RollingSummary_new() {
  inworld::RollingSummary *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::RollingSummary *)new inworld::RollingSummary();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RollingSummary_delete(SwigObj* carg1) {
  inworld::RollingSummary *arg1 = (inworld::RollingSummary *) 0 ;
  
  arg1 = (inworld::RollingSummary *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_FlashMemory_knowledge_collection_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::FlashMemory *arg1 = (inworld::FlashMemory *) 0 ;
  inworld::KnowledgeCollection *arg2 = (inworld::KnowledgeCollection *) 0 ;
  
  arg1 = (inworld::FlashMemory *) carg1;
  arg2 = (inworld::KnowledgeCollection *) carg2;
  if (arg1) (arg1)->knowledge_collection = *arg2;
}


SWIGEXPORTC SwigObj* inworld_FlashMemory_knowledge_collection_get(SwigObj* carg1) {
  inworld::KnowledgeCollection *cppresult;
  inworld::FlashMemory *arg1 = (inworld::FlashMemory *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::FlashMemory *) carg1;
  cppresult = (inworld::KnowledgeCollection *)& ((arg1)->knowledge_collection);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_FlashMemory_new() {
  inworld::FlashMemory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::FlashMemory *)new inworld::FlashMemory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_FlashMemory_delete(SwigObj* carg1) {
  inworld::FlashMemory *arg1 = (inworld::FlashMemory *) 0 ;
  
  arg1 = (inworld::FlashMemory *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LongTermMemory_knowledge_collection_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LongTermMemory *arg1 = (inworld::LongTermMemory *) 0 ;
  inworld::KnowledgeCollection *arg2 = (inworld::KnowledgeCollection *) 0 ;
  
  arg1 = (inworld::LongTermMemory *) carg1;
  arg2 = (inworld::KnowledgeCollection *) carg2;
  if (arg1) (arg1)->knowledge_collection = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LongTermMemory_knowledge_collection_get(SwigObj* carg1) {
  inworld::KnowledgeCollection *cppresult;
  inworld::LongTermMemory *arg1 = (inworld::LongTermMemory *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LongTermMemory *) carg1;
  cppresult = (inworld::KnowledgeCollection *)& ((arg1)->knowledge_collection);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LongTermMemory_new() {
  inworld::LongTermMemory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LongTermMemory *)new inworld::LongTermMemory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LongTermMemory_delete(SwigObj* carg1) {
  inworld::LongTermMemory *arg1 = (inworld::LongTermMemory *) 0 ;
  
  arg1 = (inworld::LongTermMemory *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MemorySnapshot_rolling_summary_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::MemorySnapshot *arg1 = (inworld::MemorySnapshot *) 0 ;
  inworld::RollingSummary *arg2 = (inworld::RollingSummary *) 0 ;
  
  arg1 = (inworld::MemorySnapshot *) carg1;
  arg2 = (inworld::RollingSummary *) carg2;
  if (arg1) (arg1)->rolling_summary = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemorySnapshot_rolling_summary_get(SwigObj* carg1) {
  inworld::RollingSummary *cppresult;
  inworld::MemorySnapshot *arg1 = (inworld::MemorySnapshot *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::MemorySnapshot *) carg1;
  cppresult = (inworld::RollingSummary *)& ((arg1)->rolling_summary);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemorySnapshot_flash_memory_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::MemorySnapshot *arg1 = (inworld::MemorySnapshot *) 0 ;
  inworld::FlashMemory *arg2 = (inworld::FlashMemory *) 0 ;
  
  arg1 = (inworld::MemorySnapshot *) carg1;
  arg2 = (inworld::FlashMemory *) carg2;
  if (arg1) (arg1)->flash_memory = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemorySnapshot_flash_memory_get(SwigObj* carg1) {
  inworld::FlashMemory *cppresult;
  inworld::MemorySnapshot *arg1 = (inworld::MemorySnapshot *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::MemorySnapshot *) carg1;
  cppresult = (inworld::FlashMemory *)& ((arg1)->flash_memory);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemorySnapshot_long_term_memory_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::MemorySnapshot *arg1 = (inworld::MemorySnapshot *) 0 ;
  inworld::LongTermMemory *arg2 = (inworld::LongTermMemory *) 0 ;
  
  arg1 = (inworld::MemorySnapshot *) carg1;
  arg2 = (inworld::LongTermMemory *) carg2;
  if (arg1) (arg1)->long_term_memory = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemorySnapshot_long_term_memory_get(SwigObj* carg1) {
  inworld::LongTermMemory *cppresult;
  inworld::MemorySnapshot *arg1 = (inworld::MemorySnapshot *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::MemorySnapshot *) carg1;
  cppresult = (inworld::LongTermMemory *)& ((arg1)->long_term_memory);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemorySnapshot_new() {
  inworld::MemorySnapshot *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::MemorySnapshot *)new inworld::MemorySnapshot();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemorySnapshot_delete(SwigObj* carg1) {
  inworld::MemorySnapshot *arg1 = (inworld::MemorySnapshot *) 0 ;
  
  arg1 = (inworld::MemorySnapshot *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_RollingSummaryConfig_number_of_turns_before_summary_set(SwigObj* carg1, int carg2) {
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->number_of_turns_before_summary = arg2;
}


SWIGEXPORTC int inworld_RollingSummaryConfig_number_of_turns_before_summary_get(SwigObj* carg1) {
  int cppresult;
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  cppresult = (int) ((arg1)->number_of_turns_before_summary);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_RollingSummaryConfig_start_window_size_set(SwigObj* carg1, int carg2) {
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->start_window_size = arg2;
}


SWIGEXPORTC int inworld_RollingSummaryConfig_start_window_size_get(SwigObj* carg1) {
  int cppresult;
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  cppresult = (int) ((arg1)->start_window_size);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_RollingSummaryConfig_text_generation_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  inworld::TextGenerationConfig *arg2 = (inworld::TextGenerationConfig *) 0 ;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  arg2 = (inworld::TextGenerationConfig *) carg2;
  if (arg1) (arg1)->text_generation_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_RollingSummaryConfig_text_generation_config_get(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  cppresult = (inworld::TextGenerationConfig *)& ((arg1)->text_generation_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RollingSummaryConfig_max_summary_sentences_set(SwigObj* carg1, int carg2) {
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_summary_sentences = arg2;
}


SWIGEXPORTC int inworld_RollingSummaryConfig_max_summary_sentences_get(SwigObj* carg1) {
  int cppresult;
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  cppresult = (int) ((arg1)->max_summary_sentences);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RollingSummaryConfig_new() {
  inworld::RollingSummaryConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::RollingSummaryConfig *)new inworld::RollingSummaryConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RollingSummaryConfig_delete(SwigObj* carg1) {
  inworld::RollingSummaryConfig *arg1 = (inworld::RollingSummaryConfig *) 0 ;
  
  arg1 = (inworld::RollingSummaryConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_FlashMemoryConfig_dialogue_cutoff_size_set(SwigObj* carg1, int carg2) {
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->dialogue_cutoff_size = arg2;
}


SWIGEXPORTC int inworld_FlashMemoryConfig_dialogue_cutoff_size_get(SwigObj* carg1) {
  int cppresult;
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  cppresult = (int) ((arg1)->dialogue_cutoff_size);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_FlashMemoryConfig_n_history_turns_set(SwigObj* carg1, int carg2) {
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->n_history_turns = arg2;
}


SWIGEXPORTC int inworld_FlashMemoryConfig_n_history_turns_get(SwigObj* carg1) {
  int cppresult;
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  cppresult = (int) ((arg1)->n_history_turns);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_FlashMemoryConfig_memories_similarity_threshold_set(SwigObj* carg1, float carg2) {
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  float arg2 ;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->memories_similarity_threshold = arg2;
}


SWIGEXPORTC float inworld_FlashMemoryConfig_memories_similarity_threshold_get(SwigObj* carg1) {
  float cppresult;
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  float result;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  cppresult = (float) ((arg1)->memories_similarity_threshold);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_FlashMemoryConfig_max_flash_memory_set(SwigObj* carg1, int carg2) {
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_flash_memory = arg2;
}


SWIGEXPORTC int inworld_FlashMemoryConfig_max_flash_memory_get(SwigObj* carg1) {
  int cppresult;
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  cppresult = (int) ((arg1)->max_flash_memory);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_FlashMemoryConfig_max_topics_per_memory_set(SwigObj* carg1, int carg2) {
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_topics_per_memory = arg2;
}


SWIGEXPORTC int inworld_FlashMemoryConfig_max_topics_per_memory_get(SwigObj* carg1) {
  int cppresult;
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  cppresult = (int) ((arg1)->max_topics_per_memory);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_FlashMemoryConfig_text_generation_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  inworld::TextGenerationConfig *arg2 = (inworld::TextGenerationConfig *) 0 ;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  arg2 = (inworld::TextGenerationConfig *) carg2;
  if (arg1) (arg1)->text_generation_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_FlashMemoryConfig_text_generation_config_get(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  cppresult = (inworld::TextGenerationConfig *)& ((arg1)->text_generation_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_FlashMemoryConfig_new() {
  inworld::FlashMemoryConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::FlashMemoryConfig *)new inworld::FlashMemoryConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_FlashMemoryConfig_delete(SwigObj* carg1) {
  inworld::FlashMemoryConfig *arg1 = (inworld::FlashMemoryConfig *) 0 ;
  
  arg1 = (inworld::FlashMemoryConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LongTermMemoryConfig_max_topic_summary_len_to_append_set(SwigObj* carg1, int carg2) {
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_topic_summary_len_to_append = arg2;
}


SWIGEXPORTC int inworld_LongTermMemoryConfig_max_topic_summary_len_to_append_get(SwigObj* carg1) {
  int cppresult;
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  cppresult = (int) ((arg1)->max_topic_summary_len_to_append);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_LongTermMemoryConfig_max_number_of_flash_memory_set(SwigObj* carg1, int carg2) {
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_number_of_flash_memory = arg2;
}


SWIGEXPORTC int inworld_LongTermMemoryConfig_max_number_of_flash_memory_get(SwigObj* carg1) {
  int cppresult;
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  cppresult = (int) ((arg1)->max_number_of_flash_memory);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_LongTermMemoryConfig_max_number_of_topics_set(SwigObj* carg1, int carg2) {
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->max_number_of_topics = arg2;
}


SWIGEXPORTC int inworld_LongTermMemoryConfig_max_number_of_topics_get(SwigObj* carg1) {
  int cppresult;
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  int result;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  cppresult = (int) ((arg1)->max_number_of_topics);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_LongTermMemoryConfig_text_generation_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  inworld::TextGenerationConfig *arg2 = (inworld::TextGenerationConfig *) 0 ;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  arg2 = (inworld::TextGenerationConfig *) carg2;
  if (arg1) (arg1)->text_generation_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LongTermMemoryConfig_text_generation_config_get(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  cppresult = (inworld::TextGenerationConfig *)& ((arg1)->text_generation_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LongTermMemoryConfig_new() {
  inworld::LongTermMemoryConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LongTermMemoryConfig *)new inworld::LongTermMemoryConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LongTermMemoryConfig_delete(SwigObj* carg1) {
  inworld::LongTermMemoryConfig *arg1 = (inworld::LongTermMemoryConfig *) 0 ;
  
  arg1 = (inworld::LongTermMemoryConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MemoryUpdateConfig_rolling_summary_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::MemoryUpdateConfig *arg1 = (inworld::MemoryUpdateConfig *) 0 ;
  std::optional< inworld::RollingSummaryConfig > *arg2 = (std::optional< inworld::RollingSummaryConfig > *) 0 ;
  
  arg1 = (inworld::MemoryUpdateConfig *) carg1;
  arg2 = (std::optional< inworld::RollingSummaryConfig > *) carg2;
  if (arg1) (arg1)->rolling_summary_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateConfig_rolling_summary_config_get(SwigObj* carg1) {
  std::optional< inworld::RollingSummaryConfig > *cppresult;
  inworld::MemoryUpdateConfig *arg1 = (inworld::MemoryUpdateConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::MemoryUpdateConfig *) carg1;
  cppresult = (std::optional< inworld::RollingSummaryConfig > *)& ((arg1)->rolling_summary_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemoryUpdateConfig_flash_memory_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::MemoryUpdateConfig *arg1 = (inworld::MemoryUpdateConfig *) 0 ;
  std::optional< inworld::FlashMemoryConfig > *arg2 = (std::optional< inworld::FlashMemoryConfig > *) 0 ;
  
  arg1 = (inworld::MemoryUpdateConfig *) carg1;
  arg2 = (std::optional< inworld::FlashMemoryConfig > *) carg2;
  if (arg1) (arg1)->flash_memory_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateConfig_flash_memory_config_get(SwigObj* carg1) {
  std::optional< inworld::FlashMemoryConfig > *cppresult;
  inworld::MemoryUpdateConfig *arg1 = (inworld::MemoryUpdateConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::MemoryUpdateConfig *) carg1;
  cppresult = (std::optional< inworld::FlashMemoryConfig > *)& ((arg1)->flash_memory_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemoryUpdateConfig_long_term_memory_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::MemoryUpdateConfig *arg1 = (inworld::MemoryUpdateConfig *) 0 ;
  std::optional< inworld::LongTermMemoryConfig > *arg2 = (std::optional< inworld::LongTermMemoryConfig > *) 0 ;
  
  arg1 = (inworld::MemoryUpdateConfig *) carg1;
  arg2 = (std::optional< inworld::LongTermMemoryConfig > *) carg2;
  if (arg1) (arg1)->long_term_memory_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateConfig_long_term_memory_config_get(SwigObj* carg1) {
  std::optional< inworld::LongTermMemoryConfig > *cppresult;
  inworld::MemoryUpdateConfig *arg1 = (inworld::MemoryUpdateConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::MemoryUpdateConfig *) carg1;
  cppresult = (std::optional< inworld::LongTermMemoryConfig > *)& ((arg1)->long_term_memory_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateConfig_new() {
  inworld::MemoryUpdateConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::MemoryUpdateConfig *)new inworld::MemoryUpdateConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemoryUpdateConfig_delete(SwigObj* carg1) {
  inworld::MemoryUpdateConfig *arg1 = (inworld::MemoryUpdateConfig *) 0 ;
  
  arg1 = (inworld::MemoryUpdateConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MemoryInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::MemoryInterface > *smartarg1 = 0 ;
  inworld::MemoryInterface *arg1 = (inworld::MemoryInterface *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::MemoryInterface > *)carg1;
  arg1 = (inworld::MemoryInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_MemoryInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::MemoryInterface const > *smartarg1 = 0 ;
  inworld::MemoryInterface *arg1 = (inworld::MemoryInterface *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::MemoryInterface > *)carg1;
  arg1 = (inworld::MemoryInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_MemoryInterface_is_valid__SWIG((inworld::MemoryInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryInterface_GetMemory_rcstd_vector_Sl_inworld_Event_Sg__rcinworld_MemorySnapshot_rcinworld_RetrievalConfig_b(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4, bool carg5) {
  absl::StatusOr< std::vector< std::string > > cppresult;
  std::shared_ptr< inworld::MemoryInterface const > *smartarg1 = 0 ;
  inworld::MemoryInterface *arg1 = (inworld::MemoryInterface *) 0 ;
  std::vector< inworld::Event > *arg2 = 0 ;
  inworld::MemorySnapshot *arg3 = 0 ;
  inworld::RetrievalConfig *arg4 = 0 ;
  bool arg5 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::MemoryInterface > *)carg1;
  arg1 = (inworld::MemoryInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (std::vector< inworld::Event > *) carg2;
  
  
  arg3 = (inworld::MemorySnapshot *) carg3;
  
  
  arg4 = (inworld::RetrievalConfig *) carg4;
  
  arg5 = (bool) carg5;
  cppresult = inworld_inworld_MemoryInterface_GetMemory__SWIG_0((inworld::MemoryInterface const *)arg1,(std::vector< inworld::Event > const &)*arg2,(inworld::MemorySnapshot const &)*arg3,(inworld::RetrievalConfig const &)*arg4,arg5);
  result = (SwigObj*)new absl::StatusOr< std::vector< std::string > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryInterface_GetMemory_rcstd_vector_Sl_inworld_Event_Sg__rcinworld_MemorySnapshot_rcinworld_RetrievalConfig(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::vector< std::string > > cppresult;
  std::shared_ptr< inworld::MemoryInterface const > *smartarg1 = 0 ;
  inworld::MemoryInterface *arg1 = (inworld::MemoryInterface *) 0 ;
  std::vector< inworld::Event > *arg2 = 0 ;
  inworld::MemorySnapshot *arg3 = 0 ;
  inworld::RetrievalConfig *arg4 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::MemoryInterface > *)carg1;
  arg1 = (inworld::MemoryInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (std::vector< inworld::Event > *) carg2;
  
  
  arg3 = (inworld::MemorySnapshot *) carg3;
  
  
  arg4 = (inworld::RetrievalConfig *) carg4;
  
  cppresult = inworld_inworld_MemoryInterface_GetMemory__SWIG_0((inworld::MemoryInterface const *)arg1,(std::vector< inworld::Event > const &)*arg2,(inworld::MemorySnapshot const &)*arg3,(inworld::RetrievalConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::vector< std::string > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryInterface_UpdateMemory(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< inworld::MemorySnapshot > cppresult;
  std::shared_ptr< inworld::MemoryInterface const > *smartarg1 = 0 ;
  inworld::MemoryInterface *arg1 = (inworld::MemoryInterface *) 0 ;
  std::vector< inworld::Event > *arg2 = 0 ;
  inworld::MemorySnapshot *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::MemoryInterface > *)carg1;
  arg1 = (inworld::MemoryInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (std::vector< inworld::Event > *) carg2;
  
  
  arg3 = (inworld::MemorySnapshot *) carg3;
  
  cppresult = inworld_inworld_MemoryInterface_UpdateMemory__SWIG((inworld::MemoryInterface const *)arg1,(std::vector< inworld::Event > const &)*arg2,(inworld::MemorySnapshot const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< inworld::MemorySnapshot >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_MemoryFactory_delete(SwigObj* carg1) {
  inworld::MemoryFactory *arg1 = (inworld::MemoryFactory *) 0 ;
  
  arg1 = (inworld::MemoryFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_MemoryFactory_CreateMemory(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4, SwigObj* carg5, SwigObj* carg6, SwigObj* carg7, bool carg8) {
  absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > > cppresult;
  std::shared_ptr< inworld::LLMInterface > empty2 ;
  std::shared_ptr< inworld::TextEmbedderInterface > empty3 ;
  inworld::MemoryFactory *arg1 = (inworld::MemoryFactory *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::LLMInterface > > arg2 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface > > arg3 ;
  inworld::RollingSummaryConfig *arg4 = 0 ;
  inworld::FlashMemoryConfig *arg5 = 0 ;
  inworld::LongTermMemoryConfig *arg6 = 0 ;
  inworld::RetrievalConfig *arg7 = 0 ;
  bool arg8 ;
  SwigObj* result;
  
  arg1 = (inworld::MemoryFactory *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::LLMInterface>*)carg2 : empty2; 
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::TextEmbedderInterface>*)carg3 : empty3; 
  
  arg4 = (inworld::RollingSummaryConfig *) carg4;
  
  
  arg5 = (inworld::FlashMemoryConfig *) carg5;
  
  
  arg6 = (inworld::LongTermMemoryConfig *) carg6;
  
  
  arg7 = (inworld::RetrievalConfig *) carg7;
  
  arg8 = (bool) carg8;
  cppresult = inworld_inworld_MemoryFactory_CreateMemory__SWIG((inworld::MemoryFactory const *)arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),*arg4,*arg5,*arg6,*arg7,arg8);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::MemoryInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryFactory_new() {
  inworld::MemoryFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::MemoryFactory *)new inworld::MemoryFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TopicThreshold_topic_name_set(SwigObj* carg1, int carg2) {
  inworld::TopicThreshold *arg1 = (inworld::TopicThreshold *) 0 ;
  enum inworld::TopicName arg2 ;
  
  arg1 = (inworld::TopicThreshold *) carg1;
  arg2 = (enum inworld::TopicName) carg2;
  if (arg1) (arg1)->topic_name = arg2;
}


SWIGEXPORTC int inworld_TopicThreshold_topic_name_get(SwigObj* carg1) {
  enum inworld::TopicName cppresult;
  inworld::TopicThreshold *arg1 = (inworld::TopicThreshold *) 0 ;
  int result;
  
  arg1 = (inworld::TopicThreshold *) carg1;
  cppresult = (enum inworld::TopicName) ((arg1)->topic_name);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TopicThreshold_threshold_set(SwigObj* carg1, float carg2) {
  inworld::TopicThreshold *arg1 = (inworld::TopicThreshold *) 0 ;
  float arg2 ;
  
  arg1 = (inworld::TopicThreshold *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORTC float inworld_TopicThreshold_threshold_get(SwigObj* carg1) {
  float cppresult;
  inworld::TopicThreshold *arg1 = (inworld::TopicThreshold *) 0 ;
  float result;
  
  arg1 = (inworld::TopicThreshold *) carg1;
  cppresult = (float) ((arg1)->threshold);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TopicThreshold_new() {
  inworld::TopicThreshold *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::TopicThreshold *)new inworld::TopicThreshold();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TopicThreshold_delete(SwigObj* carg1) {
  inworld::TopicThreshold *arg1 = (inworld::TopicThreshold *) 0 ;
  
  arg1 = (inworld::TopicThreshold *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_SafetyConfig_forbidden_topics_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::SafetyConfig *arg1 = (inworld::SafetyConfig *) 0 ;
  std::vector< inworld::TopicThreshold > *arg2 = (std::vector< inworld::TopicThreshold > *) 0 ;
  
  arg1 = (inworld::SafetyConfig *) carg1;
  arg2 = (std::vector< inworld::TopicThreshold > *) carg2;
  if (arg1) (arg1)->forbidden_topics = *arg2;
}


SWIGEXPORTC SwigObj* inworld_SafetyConfig_forbidden_topics_get(SwigObj* carg1) {
  std::vector< inworld::TopicThreshold > *cppresult;
  inworld::SafetyConfig *arg1 = (inworld::SafetyConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::SafetyConfig *) carg1;
  cppresult = (std::vector< inworld::TopicThreshold > *)& ((arg1)->forbidden_topics);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyConfig_new() {
  inworld::SafetyConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::SafetyConfig *)new inworld::SafetyConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SafetyConfig_delete(SwigObj* carg1) {
  inworld::SafetyConfig *arg1 = (inworld::SafetyConfig *) 0 ;
  
  arg1 = (inworld::SafetyConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_DetectedTopic_topic_name_set(SwigObj* carg1, int carg2) {
  inworld::DetectedTopic *arg1 = (inworld::DetectedTopic *) 0 ;
  enum inworld::TopicName arg2 ;
  
  arg1 = (inworld::DetectedTopic *) carg1;
  arg2 = (enum inworld::TopicName) carg2;
  if (arg1) (arg1)->topic_name = arg2;
}


SWIGEXPORTC int inworld_DetectedTopic_topic_name_get(SwigObj* carg1) {
  enum inworld::TopicName cppresult;
  inworld::DetectedTopic *arg1 = (inworld::DetectedTopic *) 0 ;
  int result;
  
  arg1 = (inworld::DetectedTopic *) carg1;
  cppresult = (enum inworld::TopicName) ((arg1)->topic_name);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void inworld_DetectedTopic_confidence_set(SwigObj* carg1, float carg2) {
  inworld::DetectedTopic *arg1 = (inworld::DetectedTopic *) 0 ;
  float arg2 ;
  
  arg1 = (inworld::DetectedTopic *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->confidence = arg2;
}


SWIGEXPORTC float inworld_DetectedTopic_confidence_get(SwigObj* carg1) {
  float cppresult;
  inworld::DetectedTopic *arg1 = (inworld::DetectedTopic *) 0 ;
  float result;
  
  arg1 = (inworld::DetectedTopic *) carg1;
  cppresult = (float) ((arg1)->confidence);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DetectedTopic_new() {
  inworld::DetectedTopic *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::DetectedTopic *)new inworld::DetectedTopic();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_DetectedTopic_delete(SwigObj* carg1) {
  inworld::DetectedTopic *arg1 = (inworld::DetectedTopic *) 0 ;
  
  arg1 = (inworld::DetectedTopic *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_CheckSafetyResponse_is_safe_set(SwigObj* carg1, bool carg2) {
  inworld::CheckSafetyResponse *arg1 = (inworld::CheckSafetyResponse *) 0 ;
  bool arg2 ;
  
  arg1 = (inworld::CheckSafetyResponse *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->is_safe = arg2;
}


SWIGEXPORTC bool inworld_CheckSafetyResponse_is_safe_get(SwigObj* carg1) {
  bool cppresult;
  inworld::CheckSafetyResponse *arg1 = (inworld::CheckSafetyResponse *) 0 ;
  bool result;
  
  arg1 = (inworld::CheckSafetyResponse *) carg1;
  cppresult = (bool) ((arg1)->is_safe);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CheckSafetyResponse_detected_topics_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::CheckSafetyResponse *arg1 = (inworld::CheckSafetyResponse *) 0 ;
  std::vector< inworld::DetectedTopic > *arg2 = (std::vector< inworld::DetectedTopic > *) 0 ;
  
  arg1 = (inworld::CheckSafetyResponse *) carg1;
  arg2 = (std::vector< inworld::DetectedTopic > *) carg2;
  if (arg1) (arg1)->detected_topics = *arg2;
}


SWIGEXPORTC SwigObj* inworld_CheckSafetyResponse_detected_topics_get(SwigObj* carg1) {
  std::vector< inworld::DetectedTopic > *cppresult;
  inworld::CheckSafetyResponse *arg1 = (inworld::CheckSafetyResponse *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::CheckSafetyResponse *) carg1;
  cppresult = (std::vector< inworld::DetectedTopic > *)& ((arg1)->detected_topics);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CheckSafetyResponse_new() {
  inworld::CheckSafetyResponse *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::CheckSafetyResponse *)new inworld::CheckSafetyResponse();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CheckSafetyResponse_delete(SwigObj* carg1) {
  inworld::CheckSafetyResponse *arg1 = (inworld::CheckSafetyResponse *) 0 ;
  
  arg1 = (inworld::CheckSafetyResponse *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_SafetyCheckerInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::SafetyCheckerInterface > *smartarg1 = 0 ;
  inworld::SafetyCheckerInterface *arg1 = (inworld::SafetyCheckerInterface *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::SafetyCheckerInterface > *)carg1;
  arg1 = (inworld::SafetyCheckerInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_SafetyCheckerInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::SafetyCheckerInterface const > *smartarg1 = 0 ;
  inworld::SafetyCheckerInterface *arg1 = (inworld::SafetyCheckerInterface *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::SafetyCheckerInterface > *)carg1;
  arg1 = (inworld::SafetyCheckerInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_SafetyCheckerInterface_is_valid__SWIG((inworld::SafetyCheckerInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerInterface_CheckSafety_rcstd_string(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< inworld::CheckSafetyResponse > cppresult;
  std::shared_ptr< inworld::SafetyCheckerInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::SafetyCheckerInterface *arg1 = (inworld::SafetyCheckerInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::SafetyCheckerInterface > *)carg1;
  arg1 = (inworld::SafetyCheckerInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = inworld_inworld_SafetyCheckerInterface_CheckSafety__SWIG_0((inworld::SafetyCheckerInterface const *)arg1,(std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< inworld::CheckSafetyResponse >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerInterface_CheckSafety_rcstd_string_rcinworld_SafetyConfig(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::StatusOr< inworld::CheckSafetyResponse > cppresult;
  std::shared_ptr< inworld::SafetyCheckerInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::SafetyCheckerInterface *arg1 = (inworld::SafetyCheckerInterface *) 0 ;
  std::string *arg2 = 0 ;
  inworld::SafetyConfig *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::SafetyCheckerInterface > *)carg1;
  arg1 = (inworld::SafetyCheckerInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = (inworld::SafetyConfig *) carg3;
  
  cppresult = inworld_inworld_SafetyCheckerInterface_CheckSafety__SWIG_1((inworld::SafetyCheckerInterface const *)arg1,(std::string const &)*arg2,(inworld::SafetyConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< inworld::CheckSafetyResponse >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_SafetyCheckerCreationConfig_model_weights_path_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::SafetyCheckerCreationConfig *arg1 = (inworld::SafetyCheckerCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::SafetyCheckerCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->model_weights_path = *arg2;
}


SWIGEXPORTC const char * inworld_SafetyCheckerCreationConfig_model_weights_path_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::SafetyCheckerCreationConfig *arg1 = (inworld::SafetyCheckerCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::SafetyCheckerCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->model_weights_path);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerCreationConfig_new() {
  inworld::SafetyCheckerCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::SafetyCheckerCreationConfig *)new inworld::SafetyCheckerCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SafetyCheckerCreationConfig_delete(SwigObj* carg1) {
  inworld::SafetyCheckerCreationConfig *arg1 = (inworld::SafetyCheckerCreationConfig *) 0 ;
  
  arg1 = (inworld::SafetyCheckerCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_SafetyCheckerFactory_delete(SwigObj* carg1) {
  inworld::SafetyCheckerFactory *arg1 = (inworld::SafetyCheckerFactory *) 0 ;
  
  arg1 = (inworld::SafetyCheckerFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerFactory_CreateSafetyChecker(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > > cppresult;
  std::shared_ptr< inworld::TextEmbedderInterface const > empty2 ;
  inworld::SafetyCheckerFactory *arg1 = (inworld::SafetyCheckerFactory *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface const > > arg2 ;
  inworld::SafetyCheckerCreationConfig *arg3 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::SafetyCheckerFactory *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr<const inworld::TextEmbedderInterface>*)carg2 : empty2; 
  
  arg3 = (inworld::SafetyCheckerCreationConfig *) carg3;
  
  cppresult = inworld_inworld_SafetyCheckerFactory_CreateSafetyChecker__SWIG((inworld::SafetyCheckerFactory const *)arg1,SWIG_STD_MOVE(arg2),(inworld::SafetyCheckerCreationConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::SafetyCheckerInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerFactory_new() {
  inworld::SafetyCheckerFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::SafetyCheckerFactory *)new inworld::SafetyCheckerFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechRecognitionConfig_language_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::SpeechRecognitionConfig *arg1 = (inworld::SpeechRecognitionConfig *) 0 ;
  std::optional< inworld::library::Language > *arg2 = (std::optional< inworld::library::Language > *) 0 ;
  
  arg1 = (inworld::SpeechRecognitionConfig *) carg1;
  arg2 = (std::optional< inworld::library::Language > *) carg2;
  if (arg1) (arg1)->language = *arg2;
}


SWIGEXPORTC SwigObj* inworld_SpeechRecognitionConfig_language_get(SwigObj* carg1) {
  std::optional< inworld::library::Language > *cppresult;
  inworld::SpeechRecognitionConfig *arg1 = (inworld::SpeechRecognitionConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::SpeechRecognitionConfig *) carg1;
  cppresult = (std::optional< inworld::library::Language > *)& ((arg1)->language);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SpeechRecognitionConfig_new() {
  inworld::SpeechRecognitionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::SpeechRecognitionConfig *)new inworld::SpeechRecognitionConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SpeechRecognitionConfig_delete(SwigObj* carg1) {
  inworld::SpeechRecognitionConfig *arg1 = (inworld::SpeechRecognitionConfig *) 0 ;
  
  arg1 = (inworld::SpeechRecognitionConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_STTInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::STTInterface > *smartarg1 = 0 ;
  inworld::STTInterface *arg1 = (inworld::STTInterface *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::STTInterface > *)carg1;
  arg1 = (inworld::STTInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_STTInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::STTInterface const > *smartarg1 = 0 ;
  inworld::STTInterface *arg1 = (inworld::STTInterface *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::STTInterface > *)carg1;
  arg1 = (inworld::STTInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_STTInterface_is_valid__SWIG((inworld::STTInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTInterface_RecognizeSpeech(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::STTInterface const > *smartarg1 = 0 ;
  inworld::STTInterface *arg1 = (inworld::STTInterface *) 0 ;
  inworld::AudioChunk *arg2 = 0 ;
  inworld::SpeechRecognitionConfig *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::STTInterface > *)carg1;
  arg1 = (inworld::STTInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (inworld::AudioChunk *) carg2;
  
  
  arg3 = (inworld::SpeechRecognitionConfig *) carg3;
  
  cppresult = inworld_inworld_STTInterface_RecognizeSpeech__SWIG((inworld::STTInterface const *)arg1,*arg2,(inworld::SpeechRecognitionConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::InputStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTInterface_model_properties(SwigObj* carg1) {
  inworld::ModelProperties cppresult;
  std::shared_ptr< inworld::STTInterface const > *smartarg1 = 0 ;
  inworld::STTInterface *arg1 = (inworld::STTInterface *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::STTInterface > *)carg1;
  arg1 = (inworld::STTInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::STTInterface const *)arg1)->model_properties();
  result = (SwigObj*)new inworld::ModelProperties(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_new() {
  std::optional< inworld::LocalSTTConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::LocalSTTConfig > *)new std::optional< inworld::LocalSTTConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_new_rcinworld_LocalSTTConfig(SwigObj* carg1) {
  std::optional< inworld::LocalSTTConfig > *cppresult;
  inworld::LocalSTTConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::LocalSTTConfig *) carg1;
  
  cppresult = (std::optional< inworld::LocalSTTConfig > *)new std::optional< inworld::LocalSTTConfig >((inworld::LocalSTTConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_copy(SwigObj* carg1) {
  std::optional< inworld::LocalSTTConfig > *cppresult;
  std::optional< inworld::LocalSTTConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  
  cppresult = (std::optional< inworld::LocalSTTConfig > *)new std::optional< inworld::LocalSTTConfig >((std::optional< inworld::LocalSTTConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LocalSTTConfig_delete(SwigObj* carg1) {
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_LocalSTTConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::LocalSTTConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_value(SwigObj* carg1) {
  inworld::LocalSTTConfig *cppresult;
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  cppresult = (inworld::LocalSTTConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_valueConst(SwigObj* carg1) {
  inworld::LocalSTTConfig *cppresult;
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  cppresult = (inworld::LocalSTTConfig *) &((std::optional< inworld::LocalSTTConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalSTTConfig cppresult;
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  inworld::LocalSTTConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  
  arg2 = (inworld::LocalSTTConfig *) carg2;
  
  cppresult = ((std::optional< inworld::LocalSTTConfig > const *)arg1)->value_or((inworld::LocalSTTConfig const &)*arg2);
  result = (SwigObj*)new inworld::LocalSTTConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_LocalSTTConfig_reset(SwigObj* carg1) {
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_get(SwigObj* carg1) {
  inworld::LocalSTTConfig *cppresult;
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  cppresult = (inworld::LocalSTTConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_getConst(SwigObj* carg1) {
  inworld::LocalSTTConfig *cppresult;
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  cppresult = (inworld::LocalSTTConfig *) &((std::optional< inworld::LocalSTTConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LocalSTTConfig_get_value(SwigObj* carg1) {
  inworld::LocalSTTConfig *cppresult;
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  cppresult = (inworld::LocalSTTConfig *) &inworld_std_optional_Sl_inworld_LocalSTTConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LocalSTTConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::LocalSTTConfig > *arg1 = (std::optional< inworld::LocalSTTConfig > *) 0 ;
  inworld::LocalSTTConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::LocalSTTConfig > *) carg1;
  
  arg2 = (inworld::LocalSTTConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_LocalSTTConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_new() {
  std::optional< inworld::RemoteSTTConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::RemoteSTTConfig > *)new std::optional< inworld::RemoteSTTConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_new_rcinworld_RemoteSTTConfig(SwigObj* carg1) {
  std::optional< inworld::RemoteSTTConfig > *cppresult;
  inworld::RemoteSTTConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::RemoteSTTConfig *) carg1;
  
  cppresult = (std::optional< inworld::RemoteSTTConfig > *)new std::optional< inworld::RemoteSTTConfig >((inworld::RemoteSTTConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_copy(SwigObj* carg1) {
  std::optional< inworld::RemoteSTTConfig > *cppresult;
  std::optional< inworld::RemoteSTTConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  
  cppresult = (std::optional< inworld::RemoteSTTConfig > *)new std::optional< inworld::RemoteSTTConfig >((std::optional< inworld::RemoteSTTConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteSTTConfig_delete(SwigObj* carg1) {
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_RemoteSTTConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::RemoteSTTConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_value(SwigObj* carg1) {
  inworld::RemoteSTTConfig *cppresult;
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  cppresult = (inworld::RemoteSTTConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_valueConst(SwigObj* carg1) {
  inworld::RemoteSTTConfig *cppresult;
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  cppresult = (inworld::RemoteSTTConfig *) &((std::optional< inworld::RemoteSTTConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteSTTConfig cppresult;
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  inworld::RemoteSTTConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  
  arg2 = (inworld::RemoteSTTConfig *) carg2;
  
  cppresult = ((std::optional< inworld::RemoteSTTConfig > const *)arg1)->value_or((inworld::RemoteSTTConfig const &)*arg2);
  result = (SwigObj*)new inworld::RemoteSTTConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteSTTConfig_reset(SwigObj* carg1) {
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_get(SwigObj* carg1) {
  inworld::RemoteSTTConfig *cppresult;
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  cppresult = (inworld::RemoteSTTConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_getConst(SwigObj* carg1) {
  inworld::RemoteSTTConfig *cppresult;
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  cppresult = (inworld::RemoteSTTConfig *) &((std::optional< inworld::RemoteSTTConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteSTTConfig_get_value(SwigObj* carg1) {
  inworld::RemoteSTTConfig *cppresult;
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  cppresult = (inworld::RemoteSTTConfig *) &inworld_std_optional_Sl_inworld_RemoteSTTConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteSTTConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::RemoteSTTConfig > *arg1 = (std::optional< inworld::RemoteSTTConfig > *) 0 ;
  inworld::RemoteSTTConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::RemoteSTTConfig > *) carg1;
  
  arg2 = (inworld::RemoteSTTConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_RemoteSTTConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_Language_new() {
  std::optional< inworld::library::Language > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::library::Language > *)new std::optional< inworld::library::Language >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Language_new_rcinworld_library_Language(SwigObj* carg1) {
  std::optional< inworld::library::Language > *cppresult;
  inworld::library::Language *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::library::Language *) carg1;
  
  cppresult = (std::optional< inworld::library::Language > *)new std::optional< inworld::library::Language >((inworld::library::Language const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Language_copy(SwigObj* carg1) {
  std::optional< inworld::library::Language > *cppresult;
  std::optional< inworld::library::Language > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  
  cppresult = (std::optional< inworld::library::Language > *)new std::optional< inworld::library::Language >((std::optional< inworld::library::Language > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_Language_delete(SwigObj* carg1) {
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_Language_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  cppresult = (bool)((std::optional< inworld::library::Language > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Language_value(SwigObj* carg1) {
  inworld::library::Language *cppresult;
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  cppresult = (inworld::library::Language *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Language_valueConst(SwigObj* carg1) {
  inworld::library::Language *cppresult;
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  cppresult = (inworld::library::Language *) &((std::optional< inworld::library::Language > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Language_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::library::Language cppresult;
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  inworld::library::Language *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  
  arg2 = (inworld::library::Language *) carg2;
  
  cppresult = ((std::optional< inworld::library::Language > const *)arg1)->value_or((inworld::library::Language const &)*arg2);
  result = (SwigObj*)new inworld::library::Language(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_Language_reset(SwigObj* carg1) {
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_Language_get(SwigObj* carg1) {
  inworld::library::Language *cppresult;
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  cppresult = (inworld::library::Language *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Language_getConst(SwigObj* carg1) {
  inworld::library::Language *cppresult;
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  cppresult = (inworld::library::Language *) &((std::optional< inworld::library::Language > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Language_get_value(SwigObj* carg1) {
  inworld::library::Language *cppresult;
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  cppresult = (inworld::library::Language *) &inworld_std_optional_Sl_inworld_library_Language_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_Language_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::library::Language > *arg1 = (std::optional< inworld::library::Language > *) 0 ;
  inworld::library::Language *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::library::Language > *) carg1;
  
  arg2 = (inworld::library::Language *) carg2;
  
  inworld_std_optional_Sl_inworld_library_Language_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_LocalSTTConfig_model_path_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LocalSTTConfig *arg1 = (inworld::LocalSTTConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::LocalSTTConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->model_path = *arg2;
}


SWIGEXPORTC const char * inworld_LocalSTTConfig_model_path_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::LocalSTTConfig *arg1 = (inworld::LocalSTTConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::LocalSTTConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->model_path);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_LocalSTTConfig_device_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalSTTConfig *arg1 = (inworld::LocalSTTConfig *) 0 ;
  inworld::Device *arg2 = (inworld::Device *) 0 ;
  
  arg1 = (inworld::LocalSTTConfig *) carg1;
  arg2 = (inworld::Device *) carg2;
  if (arg1) (arg1)->device = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LocalSTTConfig_device_get(SwigObj* carg1) {
  inworld::Device *cppresult;
  inworld::LocalSTTConfig *arg1 = (inworld::LocalSTTConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LocalSTTConfig *) carg1;
  cppresult = (inworld::Device *)& ((arg1)->device);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalSTTConfig_default_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalSTTConfig *arg1 = (inworld::LocalSTTConfig *) 0 ;
  inworld::SpeechRecognitionConfig *arg2 = (inworld::SpeechRecognitionConfig *) 0 ;
  
  arg1 = (inworld::LocalSTTConfig *) carg1;
  arg2 = (inworld::SpeechRecognitionConfig *) carg2;
  if (arg1) (arg1)->default_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LocalSTTConfig_default_config_get(SwigObj* carg1) {
  inworld::SpeechRecognitionConfig *cppresult;
  inworld::LocalSTTConfig *arg1 = (inworld::LocalSTTConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LocalSTTConfig *) carg1;
  cppresult = (inworld::SpeechRecognitionConfig *)& ((arg1)->default_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LocalSTTConfig_new() {
  inworld::LocalSTTConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LocalSTTConfig *)new inworld::LocalSTTConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalSTTConfig_delete(SwigObj* carg1) {
  inworld::LocalSTTConfig *arg1 = (inworld::LocalSTTConfig *) 0 ;
  
  arg1 = (inworld::LocalSTTConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_RemoteSTTConfig_api_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteSTTConfig *arg1 = (inworld::RemoteSTTConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::RemoteSTTConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->api_key = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteSTTConfig_api_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteSTTConfig *arg1 = (inworld::RemoteSTTConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::RemoteSTTConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->api_key);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_RemoteSTTConfig_default_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteSTTConfig *arg1 = (inworld::RemoteSTTConfig *) 0 ;
  inworld::SpeechRecognitionConfig *arg2 = (inworld::SpeechRecognitionConfig *) 0 ;
  
  arg1 = (inworld::RemoteSTTConfig *) carg1;
  arg2 = (inworld::SpeechRecognitionConfig *) carg2;
  if (arg1) (arg1)->default_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_RemoteSTTConfig_default_config_get(SwigObj* carg1) {
  inworld::SpeechRecognitionConfig *cppresult;
  inworld::RemoteSTTConfig *arg1 = (inworld::RemoteSTTConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::RemoteSTTConfig *) carg1;
  cppresult = (inworld::SpeechRecognitionConfig *)& ((arg1)->default_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RemoteSTTConfig_new() {
  inworld::RemoteSTTConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::RemoteSTTConfig *)new inworld::RemoteSTTConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RemoteSTTConfig_delete(SwigObj* carg1) {
  inworld::RemoteSTTConfig *arg1 = (inworld::RemoteSTTConfig *) 0 ;
  
  arg1 = (inworld::RemoteSTTConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_STTCreationConfig_has_local_config(SwigObj* carg1) {
  bool cppresult;
  inworld::STTCreationConfig *arg1 = (inworld::STTCreationConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::STTCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_STTCreationConfig_has_local_config__SWIG(arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_STTCreationConfig_has_remote_config(SwigObj* carg1) {
  bool cppresult;
  inworld::STTCreationConfig *arg1 = (inworld::STTCreationConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::STTCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_STTCreationConfig_has_remote_config__SWIG(arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTCreationConfig_get_local_config(SwigObj* carg1) {
  std::optional< inworld::LocalSTTConfig > cppresult;
  inworld::STTCreationConfig *arg1 = (inworld::STTCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::STTCreationConfig *) carg1;
  cppresult = inworld_inworld_STTCreationConfig_get_local_config__SWIG(arg1);
  result = (SwigObj*)new std::optional< inworld::LocalSTTConfig >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTCreationConfig_get_remote_config(SwigObj* carg1) {
  std::optional< inworld::RemoteSTTConfig > cppresult;
  inworld::STTCreationConfig *arg1 = (inworld::STTCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::STTCreationConfig *) carg1;
  cppresult = inworld_inworld_STTCreationConfig_get_remote_config__SWIG(arg1);
  result = (SwigObj*)new std::optional< inworld::RemoteSTTConfig >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_STTCreationConfig_set_local_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::STTCreationConfig *arg1 = (inworld::STTCreationConfig *) 0 ;
  inworld::LocalSTTConfig *arg2 = 0 ;
  
  arg1 = (inworld::STTCreationConfig *) carg1;
  
  arg2 = (inworld::LocalSTTConfig *) carg2;
  
  inworld_inworld_STTCreationConfig_set_local_config__SWIG(arg1,(inworld::LocalSTTConfig const &)*arg2);
}


SWIGEXPORTC void inworld_STTCreationConfig_set_remote_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::STTCreationConfig *arg1 = (inworld::STTCreationConfig *) 0 ;
  inworld::RemoteSTTConfig *arg2 = 0 ;
  
  arg1 = (inworld::STTCreationConfig *) carg1;
  
  arg2 = (inworld::RemoteSTTConfig *) carg2;
  
  inworld_inworld_STTCreationConfig_set_remote_config__SWIG(arg1,(inworld::RemoteSTTConfig const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_STTCreationConfig_new() {
  inworld::STTCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::STTCreationConfig *)new inworld::STTCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_STTCreationConfig_delete(SwigObj* carg1) {
  inworld::STTCreationConfig *arg1 = (inworld::STTCreationConfig *) 0 ;
  
  arg1 = (inworld::STTCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_STTFactory_delete(SwigObj* carg1) {
  inworld::STTFactory *arg1 = (inworld::STTFactory *) 0 ;
  
  arg1 = (inworld::STTFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_STTFactory_CreateSTT_rcinworld_LocalSTTConfig(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > cppresult;
  inworld::STTFactory *arg1 = (inworld::STTFactory *) 0 ;
  inworld::LocalSTTConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::STTFactory *) carg1;
  
  arg2 = (inworld::LocalSTTConfig *) carg2;
  
  cppresult = inworld_inworld_STTFactory_CreateSTT__SWIG_0((inworld::STTFactory const *)arg1,(inworld::LocalSTTConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTFactory_CreateSTT_rcinworld_RemoteSTTConfig(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::STTInterface const > > cppresult;
  inworld::STTFactory *arg1 = (inworld::STTFactory *) 0 ;
  inworld::RemoteSTTConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::STTFactory *) carg1;
  
  arg2 = (inworld::RemoteSTTConfig *) carg2;
  
  cppresult = inworld_inworld_STTFactory_CreateSTT__SWIG_1((inworld::STTFactory const *)arg1,(inworld::RemoteSTTConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::STTInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTFactory_new() {
  inworld::STTFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::STTFactory *)new inworld::STTFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_new() {
  std::optional< inworld::RemoteTTSConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::RemoteTTSConfig > *)new std::optional< inworld::RemoteTTSConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_new_rcinworld_RemoteTTSConfig(SwigObj* carg1) {
  std::optional< inworld::RemoteTTSConfig > *cppresult;
  inworld::RemoteTTSConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::RemoteTTSConfig *) carg1;
  
  cppresult = (std::optional< inworld::RemoteTTSConfig > *)new std::optional< inworld::RemoteTTSConfig >((inworld::RemoteTTSConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_copy(SwigObj* carg1) {
  std::optional< inworld::RemoteTTSConfig > *cppresult;
  std::optional< inworld::RemoteTTSConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  
  cppresult = (std::optional< inworld::RemoteTTSConfig > *)new std::optional< inworld::RemoteTTSConfig >((std::optional< inworld::RemoteTTSConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteTTSConfig_delete(SwigObj* carg1) {
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_RemoteTTSConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::RemoteTTSConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_value(SwigObj* carg1) {
  inworld::RemoteTTSConfig *cppresult;
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  cppresult = (inworld::RemoteTTSConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_valueConst(SwigObj* carg1) {
  inworld::RemoteTTSConfig *cppresult;
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  cppresult = (inworld::RemoteTTSConfig *) &((std::optional< inworld::RemoteTTSConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteTTSConfig cppresult;
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  inworld::RemoteTTSConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  
  arg2 = (inworld::RemoteTTSConfig *) carg2;
  
  cppresult = ((std::optional< inworld::RemoteTTSConfig > const *)arg1)->value_or((inworld::RemoteTTSConfig const &)*arg2);
  result = (SwigObj*)new inworld::RemoteTTSConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteTTSConfig_reset(SwigObj* carg1) {
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_get(SwigObj* carg1) {
  inworld::RemoteTTSConfig *cppresult;
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  cppresult = (inworld::RemoteTTSConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_getConst(SwigObj* carg1) {
  inworld::RemoteTTSConfig *cppresult;
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  cppresult = (inworld::RemoteTTSConfig *) &((std::optional< inworld::RemoteTTSConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_RemoteTTSConfig_get_value(SwigObj* carg1) {
  inworld::RemoteTTSConfig *cppresult;
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  cppresult = (inworld::RemoteTTSConfig *) &inworld_std_optional_Sl_inworld_RemoteTTSConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_RemoteTTSConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::RemoteTTSConfig > *arg1 = (std::optional< inworld::RemoteTTSConfig > *) 0 ;
  inworld::RemoteTTSConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::RemoteTTSConfig > *) carg1;
  
  arg2 = (inworld::RemoteTTSConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_RemoteTTSConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_new() {
  std::optional< inworld::SpeechSynthesisConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::SpeechSynthesisConfig > *)new std::optional< inworld::SpeechSynthesisConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_new_rcinworld_SpeechSynthesisConfig(SwigObj* carg1) {
  std::optional< inworld::SpeechSynthesisConfig > *cppresult;
  inworld::SpeechSynthesisConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::SpeechSynthesisConfig *) carg1;
  
  cppresult = (std::optional< inworld::SpeechSynthesisConfig > *)new std::optional< inworld::SpeechSynthesisConfig >((inworld::SpeechSynthesisConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_copy(SwigObj* carg1) {
  std::optional< inworld::SpeechSynthesisConfig > *cppresult;
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  
  cppresult = (std::optional< inworld::SpeechSynthesisConfig > *)new std::optional< inworld::SpeechSynthesisConfig >((std::optional< inworld::SpeechSynthesisConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_SpeechSynthesisConfig_delete(SwigObj* carg1) {
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_SpeechSynthesisConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::SpeechSynthesisConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_value(SwigObj* carg1) {
  inworld::SpeechSynthesisConfig *cppresult;
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  cppresult = (inworld::SpeechSynthesisConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_valueConst(SwigObj* carg1) {
  inworld::SpeechSynthesisConfig *cppresult;
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  cppresult = (inworld::SpeechSynthesisConfig *) &((std::optional< inworld::SpeechSynthesisConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::SpeechSynthesisConfig cppresult;
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  inworld::SpeechSynthesisConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  
  arg2 = (inworld::SpeechSynthesisConfig *) carg2;
  
  cppresult = ((std::optional< inworld::SpeechSynthesisConfig > const *)arg1)->value_or((inworld::SpeechSynthesisConfig const &)*arg2);
  result = (SwigObj*)new inworld::SpeechSynthesisConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_SpeechSynthesisConfig_reset(SwigObj* carg1) {
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_get(SwigObj* carg1) {
  inworld::SpeechSynthesisConfig *cppresult;
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  cppresult = (inworld::SpeechSynthesisConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_getConst(SwigObj* carg1) {
  inworld::SpeechSynthesisConfig *cppresult;
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  cppresult = (inworld::SpeechSynthesisConfig *) &((std::optional< inworld::SpeechSynthesisConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SpeechSynthesisConfig_get_value(SwigObj* carg1) {
  inworld::SpeechSynthesisConfig *cppresult;
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  cppresult = (inworld::SpeechSynthesisConfig *) &inworld_std_optional_Sl_inworld_SpeechSynthesisConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_SpeechSynthesisConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::SpeechSynthesisConfig > *arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  inworld::SpeechSynthesisConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::SpeechSynthesisConfig > *) carg1;
  
  arg2 = (inworld::SpeechSynthesisConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_SpeechSynthesisConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_RemoteTTSConfig_api_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::RemoteTTSConfig *arg1 = (inworld::RemoteTTSConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::RemoteTTSConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->api_key = *arg2;
}


SWIGEXPORTC const char * inworld_RemoteTTSConfig_api_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::RemoteTTSConfig *arg1 = (inworld::RemoteTTSConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::RemoteTTSConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->api_key);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_RemoteTTSConfig_synthesis_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::RemoteTTSConfig *arg1 = (inworld::RemoteTTSConfig *) 0 ;
  inworld::SpeechSynthesisConfig *arg2 = (inworld::SpeechSynthesisConfig *) 0 ;
  
  arg1 = (inworld::RemoteTTSConfig *) carg1;
  arg2 = (inworld::SpeechSynthesisConfig *) carg2;
  if (arg1) (arg1)->synthesis_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_RemoteTTSConfig_synthesis_config_get(SwigObj* carg1) {
  inworld::SpeechSynthesisConfig *cppresult;
  inworld::RemoteTTSConfig *arg1 = (inworld::RemoteTTSConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::RemoteTTSConfig *) carg1;
  cppresult = (inworld::SpeechSynthesisConfig *)& ((arg1)->synthesis_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RemoteTTSConfig_new() {
  inworld::RemoteTTSConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::RemoteTTSConfig *)new inworld::RemoteTTSConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RemoteTTSConfig_delete(SwigObj* carg1) {
  inworld::RemoteTTSConfig *arg1 = (inworld::RemoteTTSConfig *) 0 ;
  
  arg1 = (inworld::RemoteTTSConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_TTSCreationConfig_has_remote_config(SwigObj* carg1) {
  bool cppresult;
  inworld::TTSCreationConfig *arg1 = (inworld::TTSCreationConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::TTSCreationConfig *) carg1;
  cppresult = (bool)inworld_inworld_TTSCreationConfig_has_remote_config__SWIG(arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSCreationConfig_get_remote_config(SwigObj* carg1) {
  std::optional< inworld::RemoteTTSConfig > cppresult;
  inworld::TTSCreationConfig *arg1 = (inworld::TTSCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::TTSCreationConfig *) carg1;
  cppresult = inworld_inworld_TTSCreationConfig_get_remote_config__SWIG(arg1);
  result = (SwigObj*)new std::optional< inworld::RemoteTTSConfig >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TTSCreationConfig_set_remote_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::TTSCreationConfig *arg1 = (inworld::TTSCreationConfig *) 0 ;
  inworld::RemoteTTSConfig *arg2 = 0 ;
  
  arg1 = (inworld::TTSCreationConfig *) carg1;
  
  arg2 = (inworld::RemoteTTSConfig *) carg2;
  
  inworld_inworld_TTSCreationConfig_set_remote_config__SWIG(arg1,(inworld::RemoteTTSConfig const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_TTSCreationConfig_new() {
  inworld::TTSCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::TTSCreationConfig *)new inworld::TTSCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TTSCreationConfig_delete(SwigObj* carg1) {
  inworld::TTSCreationConfig *arg1 = (inworld::TTSCreationConfig *) 0 ;
  
  arg1 = (inworld::TTSCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TTSFactory_delete(SwigObj* carg1) {
  inworld::TTSFactory *arg1 = (inworld::TTSFactory *) 0 ;
  
  arg1 = (inworld::TTSFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TTSFactory_CreateTTS(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > > cppresult;
  inworld::TTSFactory *arg1 = (inworld::TTSFactory *) 0 ;
  inworld::RemoteTTSConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::TTSFactory *) carg1;
  
  arg2 = (inworld::RemoteTTSConfig *) carg2;
  
  cppresult = inworld_inworld_TTSFactory_CreateTTS__SWIG((inworld::TTSFactory const *)arg1,(inworld::RemoteTTSConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::TTSInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSFactory_new() {
  inworld::TTSFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::TTSFactory *)new inworld::TTSFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_AudioChunk_data_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::AudioChunk *arg1 = (inworld::AudioChunk *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (inworld::AudioChunk *) carg1;
  arg2 = (std::vector< float > *) carg2;
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORTC SwigObj* inworld_AudioChunk_data_get(SwigObj* carg1) {
  std::vector< float > *cppresult;
  inworld::AudioChunk *arg1 = (inworld::AudioChunk *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::AudioChunk *) carg1;
  cppresult = (std::vector< float > *)& ((arg1)->data);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_AudioChunk_sample_rate_set(SwigObj* carg1, int carg2) {
  inworld::AudioChunk *arg1 = (inworld::AudioChunk *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::AudioChunk *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->sample_rate = arg2;
}


SWIGEXPORTC int inworld_AudioChunk_sample_rate_get(SwigObj* carg1) {
  int cppresult;
  inworld::AudioChunk *arg1 = (inworld::AudioChunk *) 0 ;
  int result;
  
  arg1 = (inworld::AudioChunk *) carg1;
  cppresult = (int) ((arg1)->sample_rate);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_AudioChunk_new() {
  inworld::AudioChunk *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::AudioChunk *)new inworld::AudioChunk();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_AudioChunk_delete(SwigObj* carg1) {
  inworld::AudioChunk *arg1 = (inworld::AudioChunk *) 0 ;
  
  arg1 = (inworld::AudioChunk *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_SilenceIntervals_new() {
  std::vector< std::pair< int,int > > *cppresult;
  SwigObj* result;
  
  cppresult = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< std::vector<std::pair<int,int>> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SilenceIntervals_copy(SwigObj* carg1) {
  std::vector< std::pair< int,int > > *cppresult;
  std::shared_ptr< std::vector< std::pair< int,int > > const > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const std::vector<std::pair<int,int>> > *)carg1;
  if (!smartarg1 || !smartarg1->get()) {
    SWIG_exception(SWIG_RuntimeError, "std::vector< std::pair< int,int > > const & reference is null");
    return 0;
  }
  arg1 = (std::vector<std::pair<int,int>> *)smartarg1->get();
  cppresult = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >((std::vector< std::pair< int,int > > const &)*arg1);
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< std::vector<std::pair<int,int>> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC size_t inworld_SilenceIntervals_size(SwigObj* carg1) {
  std::vector< std::pair< int,int > >::size_type cppresult;
  std::shared_ptr< std::vector< std::pair< int,int > > const > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<const std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((std::vector< std::pair< int,int > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_SilenceIntervals_capacity(SwigObj* carg1) {
  std::vector< std::pair< int,int > >::size_type cppresult;
  std::shared_ptr< std::vector< std::pair< int,int > > const > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<const std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((std::vector< std::pair< int,int > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_SilenceIntervals_reserve(SwigObj* carg1, size_t carg2) {
  std::shared_ptr< std::vector< std::pair< int,int > > > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  
  
  smartarg1 = (std::shared_ptr< std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::vector< std::pair< int,int > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_SilenceIntervals_empty(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< std::vector< std::pair< int,int > > const > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)((std::vector< std::pair< int,int > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SilenceIntervals_clear(SwigObj* carg1) {
  std::shared_ptr< std::vector< std::pair< int,int > > > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  (arg1)->clear();
}


SWIGEXPORTC void inworld_SilenceIntervals_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< std::vector< std::pair< int,int > > > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (std::vector< std::pair< int,int > >::value_type *) carg2;
  
  (arg1)->push_back((std::vector< std::pair< int,int > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_SilenceIntervals_get(SwigObj* carg1, int carg2) {
  std::vector< std::pair< int,int > >::value_type *cppresult;
  std::shared_ptr< std::vector< std::pair< int,int > > > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (int) carg2;
  cppresult = (std::vector< std::pair< int,int > >::value_type *) &inworld_std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SilenceIntervals_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::shared_ptr< std::vector< std::pair< int,int > > > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (int) carg2;
  
  arg3 = (std::vector< std::pair< int,int > >::value_type *) carg3;
  
  inworld_std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__set__SWIG(arg1,arg2,(std::pair< int,int > const &)*arg3);
}


SWIGEXPORTC void inworld_SilenceIntervals_delete(SwigObj* carg1) {
  std::shared_ptr< std::vector< std::pair< int,int > > > *smartarg1 = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< std::vector<std::pair<int,int>> > *)carg1;
  arg1 = (std::vector<std::pair<int,int>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_IntPair_new() {
  std::pair< int,int > *cppresult;
  SwigObj* result;
  
  cppresult = (std::pair< int,int > *)new std::pair< int,int >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntPair_new_i_i(int carg1, int carg2) {
  std::pair< int,int > *cppresult;
  int arg1 ;
  int arg2 ;
  SwigObj* result;
  
  arg1 = (int) carg1;
  arg2 = (int) carg2;
  cppresult = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntPair_copy(SwigObj* carg1) {
  std::pair< int,int > *cppresult;
  std::pair< int,int > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::pair< int,int > *) carg1;
  
  cppresult = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntPair_first_set(SwigObj* carg1, int carg2) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< int,int > *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORTC int inworld_IntPair_first_get(SwigObj* carg1) {
  int cppresult;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  arg1 = (std::pair< int,int > *) carg1;
  cppresult = (int) ((arg1)->first);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntPair_second_set(SwigObj* carg1, int carg2) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< int,int > *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORTC int inworld_IntPair_second_get(SwigObj* carg1) {
  int cppresult;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  arg1 = (std::pair< int,int > *) carg1;
  cppresult = (int) ((arg1)->second);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntPair_delete(SwigObj* carg1) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  
  arg1 = (std::pair< int,int > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_VoiceActivityDetectionConfig_speech_threshold_set(SwigObj* carg1, float carg2) {
  inworld::VoiceActivityDetectionConfig *arg1 = (inworld::VoiceActivityDetectionConfig *) 0 ;
  float arg2 ;
  
  arg1 = (inworld::VoiceActivityDetectionConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->speech_threshold = arg2;
}


SWIGEXPORTC float inworld_VoiceActivityDetectionConfig_speech_threshold_get(SwigObj* carg1) {
  float cppresult;
  inworld::VoiceActivityDetectionConfig *arg1 = (inworld::VoiceActivityDetectionConfig *) 0 ;
  float result;
  
  arg1 = (inworld::VoiceActivityDetectionConfig *) carg1;
  cppresult = (float) ((arg1)->speech_threshold);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_VoiceActivityDetectionConfig_new() {
  inworld::VoiceActivityDetectionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::VoiceActivityDetectionConfig *)new inworld::VoiceActivityDetectionConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_VoiceActivityDetectionConfig_delete(SwigObj* carg1) {
  inworld::VoiceActivityDetectionConfig *arg1 = (inworld::VoiceActivityDetectionConfig *) 0 ;
  
  arg1 = (inworld::VoiceActivityDetectionConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_VADInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::VADInterface > *smartarg1 = 0 ;
  inworld::VADInterface *arg1 = (inworld::VADInterface *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::VADInterface > *)carg1;
  arg1 = (inworld::VADInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC bool inworld_VADInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::VADInterface const > *smartarg1 = 0 ;
  inworld::VADInterface *arg1 = (inworld::VADInterface *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::VADInterface > *)carg1;
  arg1 = (inworld::VADInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_VADInterface_is_valid__SWIG((inworld::VADInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_VADInterface_DetectVoiceActivity(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< int > cppresult;
  std::shared_ptr< inworld::VADInterface > *smartarg1 = 0 ;
  inworld::VADInterface *arg1 = (inworld::VADInterface *) 0 ;
  inworld::AudioChunk *arg2 = 0 ;
  inworld::VoiceActivityDetectionConfig *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::VADInterface > *)carg1;
  arg1 = (inworld::VADInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (inworld::AudioChunk *) carg2;
  
  
  arg3 = (inworld::VoiceActivityDetectionConfig *) carg3;
  
  cppresult = inworld_inworld_VADInterface_DetectVoiceActivity__SWIG(arg1,*arg2,(inworld::VoiceActivityDetectionConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< int >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_VADInterface_DetectSilence(SwigObj* carg1, SwigObj* carg2, int carg3, SwigObj* carg4) {
  absl::StatusOr< std::vector< std::pair< int,int > > > cppresult;
  std::shared_ptr< inworld::VADInterface > *smartarg1 = 0 ;
  inworld::VADInterface *arg1 = (inworld::VADInterface *) 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  inworld::VoiceActivityDetectionConfig *arg4 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::VADInterface > *)carg1;
  arg1 = (inworld::VADInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (std::vector< float > *) carg2;
  
  arg3 = (int) carg3;
  
  arg4 = (inworld::VoiceActivityDetectionConfig *) carg4;
  
  cppresult = inworld_inworld_VADInterface_DetectSilence__SWIG(arg1,(std::vector< float > const &)*arg2,arg3,(inworld::VoiceActivityDetectionConfig const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::vector< std::pair< int,int > > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_VADInterface_model_properties(SwigObj* carg1) {
  inworld::ModelProperties cppresult;
  std::shared_ptr< inworld::VADInterface const > *smartarg1 = 0 ;
  inworld::VADInterface *arg1 = (inworld::VADInterface *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::VADInterface > *)carg1;
  arg1 = (inworld::VADInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::VADInterface const *)arg1)->model_properties();
  result = (SwigObj*)new inworld::ModelProperties(cppresult);
  return result;
}


SWIGEXPORTC void inworld_LocalVADConfig_model_path_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::LocalVADConfig *arg1 = (inworld::LocalVADConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::LocalVADConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->model_path = *arg2;
}


SWIGEXPORTC const char * inworld_LocalVADConfig_model_path_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::LocalVADConfig *arg1 = (inworld::LocalVADConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::LocalVADConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->model_path);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_LocalVADConfig_device_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalVADConfig *arg1 = (inworld::LocalVADConfig *) 0 ;
  inworld::Device *arg2 = (inworld::Device *) 0 ;
  
  arg1 = (inworld::LocalVADConfig *) carg1;
  arg2 = (inworld::Device *) carg2;
  if (arg1) (arg1)->device = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LocalVADConfig_device_get(SwigObj* carg1) {
  inworld::Device *cppresult;
  inworld::LocalVADConfig *arg1 = (inworld::LocalVADConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LocalVADConfig *) carg1;
  cppresult = (inworld::Device *)& ((arg1)->device);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalVADConfig_default_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::LocalVADConfig *arg1 = (inworld::LocalVADConfig *) 0 ;
  inworld::VoiceActivityDetectionConfig *arg2 = (inworld::VoiceActivityDetectionConfig *) 0 ;
  
  arg1 = (inworld::LocalVADConfig *) carg1;
  arg2 = (inworld::VoiceActivityDetectionConfig *) carg2;
  if (arg1) (arg1)->default_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LocalVADConfig_default_config_get(SwigObj* carg1) {
  inworld::VoiceActivityDetectionConfig *cppresult;
  inworld::LocalVADConfig *arg1 = (inworld::LocalVADConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::LocalVADConfig *) carg1;
  cppresult = (inworld::VoiceActivityDetectionConfig *)& ((arg1)->default_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LocalVADConfig_new() {
  inworld::LocalVADConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::LocalVADConfig *)new inworld::LocalVADConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LocalVADConfig_delete(SwigObj* carg1) {
  inworld::LocalVADConfig *arg1 = (inworld::LocalVADConfig *) 0 ;
  
  arg1 = (inworld::LocalVADConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_VADFactory_delete(SwigObj* carg1) {
  inworld::VADFactory *arg1 = (inworld::VADFactory *) 0 ;
  
  arg1 = (inworld::VADFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_VADFactory_CreateVAD(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::VADInterface > > cppresult;
  inworld::VADFactory *arg1 = (inworld::VADFactory *) 0 ;
  inworld::LocalVADConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::VADFactory *) carg1;
  
  arg2 = (inworld::LocalVADConfig *) carg2;
  
  cppresult = inworld_inworld_VADFactory_CreateVAD__SWIG((inworld::VADFactory const *)arg1,(inworld::LocalVADConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::VADInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_VADFactory_new() {
  inworld::VADFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::VADFactory *)new inworld::VADFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CompiledGraphInterfacePtr_new() {
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *)new absl::StatusOr< inworld::graphs::CompiledGraphInterface * >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CompiledGraphInterfacePtr_new_rcpinworld_graphs_CompiledGraphInterface(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *cppresult;
  inworld::graphs::CompiledGraphInterface **arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::graphs::CompiledGraphInterface **) carg1;
  
  cppresult = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *)new absl::StatusOr< inworld::graphs::CompiledGraphInterface * >((inworld::graphs::CompiledGraphInterface *const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CompiledGraphInterfacePtr_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *)new absl::StatusOr< inworld::graphs::CompiledGraphInterface * >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_CompiledGraphInterfacePtr_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *arg1 = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::graphs::CompiledGraphInterface * > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CompiledGraphInterfacePtr_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *arg1 = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::graphs::CompiledGraphInterface * > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CompiledGraphInterfacePtr_value(SwigObj* carg1) {
  inworld::graphs::CompiledGraphInterface *cppresult;
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *arg1 = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *) carg1;
  cppresult = (inworld::graphs::CompiledGraphInterface *)((absl::StatusOr< inworld::graphs::CompiledGraphInterface * > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_StatusOr_CompiledGraphInterfacePtr_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *arg1 = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *) 0 ;
  
  arg1 = (absl::StatusOr< inworld::graphs::CompiledGraphInterface * > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ConfigParserPtr_new() {
  absl::StatusOr< inworld::graphs::ConfigParser * > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< inworld::graphs::ConfigParser * > *)new absl::StatusOr< inworld::graphs::ConfigParser * >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ConfigParserPtr_new_rcpinworld_graphs_ConfigParser(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::ConfigParser * > *cppresult;
  inworld::graphs::ConfigParser **arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::graphs::ConfigParser **) carg1;
  
  cppresult = (absl::StatusOr< inworld::graphs::ConfigParser * > *)new absl::StatusOr< inworld::graphs::ConfigParser * >((inworld::graphs::ConfigParser *const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ConfigParserPtr_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::ConfigParser * > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< inworld::graphs::ConfigParser * > *)new absl::StatusOr< inworld::graphs::ConfigParser * >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_ConfigParserPtr_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::graphs::ConfigParser * > *arg1 = (absl::StatusOr< inworld::graphs::ConfigParser * > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< inworld::graphs::ConfigParser * > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::graphs::ConfigParser * > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ConfigParserPtr_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::graphs::ConfigParser * > *arg1 = (absl::StatusOr< inworld::graphs::ConfigParser * > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< inworld::graphs::ConfigParser * > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::graphs::ConfigParser * > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_ConfigParserPtr_value(SwigObj* carg1) {
  inworld::graphs::ConfigParser *cppresult;
  absl::StatusOr< inworld::graphs::ConfigParser * > *arg1 = (absl::StatusOr< inworld::graphs::ConfigParser * > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< inworld::graphs::ConfigParser * > *) carg1;
  cppresult = (inworld::graphs::ConfigParser *)((absl::StatusOr< inworld::graphs::ConfigParser * > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_StatusOr_ConfigParserPtr_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::ConfigParser * > *arg1 = (absl::StatusOr< inworld::graphs::ConfigParser * > *) 0 ;
  
  arg1 = (absl::StatusOr< inworld::graphs::ConfigParser * > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ConfigParser_delete(SwigObj* carg1) {
  inworld::graphs::ConfigParser *arg1 = (inworld::graphs::ConfigParser *) 0 ;
  
  arg1 = (inworld::graphs::ConfigParser *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_ConfigParser_CreateConfigParser() {
  absl::StatusOr< inworld::graphs::ConfigParser * > cppresult;
  SwigObj* result;
  
  cppresult = inworld_inworld_graphs_ConfigParser_CreateConfigParser__SWIG();
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::ConfigParser * >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigParser_CreateConfigParserWithDefaults(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::ConfigParser * > cppresult;
  absl::flat_hash_map< std::string,std::string > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::flat_hash_map< std::string,std::string > *) carg1;
  
  cppresult = inworld_inworld_graphs_ConfigParser_CreateConfigParserWithDefaults__SWIG((absl::flat_hash_map< std::string,std::string > const &)*arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::ConfigParser * >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigParser_ParseGraphFromJsonString(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > cppresult;
  inworld::graphs::ConfigParser *arg1 = (inworld::graphs::ConfigParser *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::ConfigParser *) carg1;
  arg2 = (char *) carg2;
  cppresult = inworld_inworld_graphs_ConfigParser_ParseGraphFromJsonString__SWIG(arg1,(char const *)arg2);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::CompiledGraphInterface * >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ConfigParser_ParseGraphFromJsonStringWithSubstitutions(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > cppresult;
  inworld::graphs::ConfigParser *arg1 = (inworld::graphs::ConfigParser *) 0 ;
  char *arg2 = (char *) 0 ;
  absl::flat_hash_map< std::string,std::string > *arg3 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::ConfigParser *) carg1;
  arg2 = (char *) carg2;
  
  arg3 = (absl::flat_hash_map< std::string,std::string > *) carg3;
  
  cppresult = inworld_inworld_graphs_ConfigParser_ParseGraphFromJsonStringWithSubstitutions__SWIG(arg1,(char const *)arg2,(absl::flat_hash_map< std::string,std::string > const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::CompiledGraphInterface * >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_HashSet_String_new() {
  absl::flat_hash_set< std::string > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::flat_hash_set< std::string > *)new absl::flat_hash_set< std::string >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashSet_String_delete(SwigObj* carg1) {
  absl::flat_hash_set< std::string > *arg1 = (absl::flat_hash_set< std::string > *) 0 ;
  
  arg1 = (absl::flat_hash_set< std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC size_t inworld_HashSet_String_size(SwigObj* carg1) {
  size_t cppresult;
  absl::flat_hash_set< std::string > *arg1 = (absl::flat_hash_set< std::string > *) 0 ;
  size_t result;
  
  arg1 = (absl::flat_hash_set< std::string > *) carg1;
  cppresult = ((absl::flat_hash_set< std::string > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_HashSet_String_empty(SwigObj* carg1) {
  bool cppresult;
  absl::flat_hash_set< std::string > *arg1 = (absl::flat_hash_set< std::string > *) 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_set< std::string > *) carg1;
  cppresult = (bool)((absl::flat_hash_set< std::string > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashSet_String_clear(SwigObj* carg1) {
  absl::flat_hash_set< std::string > *arg1 = (absl::flat_hash_set< std::string > *) 0 ;
  
  arg1 = (absl::flat_hash_set< std::string > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC bool inworld_HashSet_String___contains__(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  absl::flat_hash_set< std::string > *arg1 = (absl::flat_hash_set< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_set< std::string > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (bool)inworld_absl_flat_hash_set_Sl_std_string_Sg____contains____SWIG(arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashSet_String_add(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  absl::flat_hash_set< std::string > *arg1 = (absl::flat_hash_set< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (absl::flat_hash_set< std::string > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  inworld_absl_flat_hash_set_Sl_std_string_Sg__add__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_HashMap_StringToHashSetString_new() {
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *)new absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToHashSetString_delete(SwigObj* carg1) {
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) carg1;
  delete arg1;
}


SWIGEXPORTC size_t inworld_HashMap_StringToHashSetString_size(SwigObj* carg1) {
  size_t cppresult;
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) 0 ;
  size_t result;
  
  arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) carg1;
  cppresult = ((absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_HashMap_StringToHashSetString_empty(SwigObj* carg1) {
  bool cppresult;
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) carg1;
  cppresult = (bool)((absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToHashSetString_clear(SwigObj* carg1) {
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC SwigObj* inworld_HashMap_StringToHashSetString___getitem__(SwigObj* carg1, const char * carg2) {
  absl::flat_hash_set< std::string > *cppresult;
  std::string temp2 ;
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (absl::flat_hash_set< std::string > *) &inworld_absl_flat_hash_map_Sl_std_string_Sc_absl_flat_hash_set_Sl_std_string_Sg__Sg____getitem____SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToHashSetString___setitem__(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  std::string temp2 ;
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  absl::flat_hash_set< std::string > *arg3 = 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = (absl::flat_hash_set< std::string > *) carg3;
  
  inworld_absl_flat_hash_map_Sl_std_string_Sc_absl_flat_hash_set_Sl_std_string_Sg__Sg____setitem____SWIG(arg1,(std::string const &)*arg2,(absl::flat_hash_set< std::string > const &)*arg3);
}


SWIGEXPORTC bool inworld_HashMap_StringToHashSetString___contains__(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (bool)inworld_absl_flat_hash_map_Sl_std_string_Sc_absl_flat_hash_set_Sl_std_string_Sg__Sg____contains____SWIG(arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Edge_to_node_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::Edge *arg1 = (inworld::graphs::Edge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::Edge *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->to_node_id = *arg2;
}


SWIGEXPORTC const char * inworld_Edge_to_node_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::Edge *arg1 = (inworld::graphs::Edge *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::Edge *) carg1;
  cppresult = (std::string *) & ((arg1)->to_node_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_Edge_is_required_set(SwigObj* carg1, bool carg2) {
  inworld::graphs::Edge *arg1 = (inworld::graphs::Edge *) 0 ;
  bool arg2 ;
  
  arg1 = (inworld::graphs::Edge *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->is_required = arg2;
}


SWIGEXPORTC bool inworld_Edge_is_required_get(SwigObj* carg1) {
  bool cppresult;
  inworld::graphs::Edge *arg1 = (inworld::graphs::Edge *) 0 ;
  bool result;
  
  arg1 = (inworld::graphs::Edge *) carg1;
  cppresult = (bool) ((arg1)->is_required);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Edge_is_loop_edge_set(SwigObj* carg1, bool carg2) {
  inworld::graphs::Edge *arg1 = (inworld::graphs::Edge *) 0 ;
  bool arg2 ;
  
  arg1 = (inworld::graphs::Edge *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->is_loop_edge = arg2;
}


SWIGEXPORTC bool inworld_Edge_is_loop_edge_get(SwigObj* carg1) {
  bool cppresult;
  inworld::graphs::Edge *arg1 = (inworld::graphs::Edge *) 0 ;
  bool result;
  
  arg1 = (inworld::graphs::Edge *) carg1;
  cppresult = (bool) ((arg1)->is_loop_edge);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Edge_new() {
  inworld::graphs::Edge *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::Edge *)new inworld::graphs::Edge();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Edge_delete(SwigObj* carg1) {
  inworld::graphs::Edge *arg1 = (inworld::graphs::Edge *) 0 ;
  
  arg1 = (inworld::graphs::Edge *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Loop_entry_node_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::Loop *arg1 = (inworld::graphs::Loop *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::Loop *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->entry_node_id = *arg2;
}


SWIGEXPORTC const char * inworld_Loop_entry_node_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::Loop *arg1 = (inworld::graphs::Loop *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::Loop *) carg1;
  cppresult = (std::string *) & ((arg1)->entry_node_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_Loop_loop_paths_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::Loop *arg1 = (inworld::graphs::Loop *) 0 ;
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *arg2 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) 0 ;
  
  arg1 = (inworld::graphs::Loop *) carg1;
  arg2 = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *) carg2;
  if (arg1) (arg1)->loop_paths = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Loop_loop_paths_get(SwigObj* carg1) {
  absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *cppresult;
  inworld::graphs::Loop *arg1 = (inworld::graphs::Loop *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Loop *) carg1;
  cppresult = (absl::flat_hash_map< std::string,absl::flat_hash_set< std::string > > *)& ((arg1)->loop_paths);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Loop_new() {
  inworld::graphs::Loop *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::Loop *)new inworld::graphs::Loop();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Loop_delete(SwigObj* carg1) {
  inworld::graphs::Loop *arg1 = (inworld::graphs::Loop *) 0 ;
  
  arg1 = (inworld::graphs::Loop *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_HashMap_StringToNode_new() {
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *)new absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToNode_delete(SwigObj* carg1) {
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) carg1;
  delete arg1;
}


SWIGEXPORTC size_t inworld_HashMap_StringToNode_size(SwigObj* carg1) {
  size_t cppresult;
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  size_t result;
  
  arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) carg1;
  cppresult = ((absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_HashMap_StringToNode_empty(SwigObj* carg1) {
  bool cppresult;
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) carg1;
  cppresult = (bool)((absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToNode_clear(SwigObj* carg1) {
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC SwigObj* inworld_HashMap_StringToNode___getitem__(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::Node > *cppresult;
  std::string temp2 ;
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (std::shared_ptr< inworld::graphs::Node > *) &inworld_absl_flat_hash_map_Sl_std_string_Sc_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg____getitem____SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToNode___setitem__(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  std::string temp2 ;
  std::shared_ptr< inworld::graphs::Node > empty3 ;
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::Node > *arg3 = 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Node>*)carg3 : &empty3; 
  inworld_absl_flat_hash_map_Sl_std_string_Sc_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg____setitem____SWIG(arg1,(std::string const &)*arg2,(std::shared_ptr< inworld::graphs::Node > const &)*arg3);
}


SWIGEXPORTC bool inworld_HashMap_StringToNode___contains__(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (bool)inworld_absl_flat_hash_map_Sl_std_string_Sc_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg____contains____SWIG(arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_HashMap_StringToLoop_new() {
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *)new absl::flat_hash_map< std::string,inworld::graphs::Loop >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToLoop_delete(SwigObj* carg1) {
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) carg1;
  delete arg1;
}


SWIGEXPORTC size_t inworld_HashMap_StringToLoop_size(SwigObj* carg1) {
  size_t cppresult;
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) 0 ;
  size_t result;
  
  arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) carg1;
  cppresult = ((absl::flat_hash_map< std::string,inworld::graphs::Loop > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_HashMap_StringToLoop_empty(SwigObj* carg1) {
  bool cppresult;
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) carg1;
  cppresult = (bool)((absl::flat_hash_map< std::string,inworld::graphs::Loop > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToLoop_clear(SwigObj* carg1) {
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC SwigObj* inworld_HashMap_StringToLoop___getitem__(SwigObj* carg1, const char * carg2) {
  inworld::graphs::Loop *cppresult;
  std::string temp2 ;
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (inworld::graphs::Loop *) &inworld_absl_flat_hash_map_Sl_std_string_Sc_inworld_graphs_Loop_Sg____getitem____SWIG(arg1,(std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToLoop___setitem__(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  std::string temp2 ;
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) 0 ;
  std::string *arg2 = 0 ;
  inworld::graphs::Loop *arg3 = 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = (inworld::graphs::Loop *) carg3;
  
  inworld_absl_flat_hash_map_Sl_std_string_Sc_inworld_graphs_Loop_Sg____setitem____SWIG(arg1,(std::string const &)*arg2,(inworld::graphs::Loop const &)*arg3);
}


SWIGEXPORTC bool inworld_HashMap_StringToLoop___contains__(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (bool)inworld_absl_flat_hash_map_Sl_std_string_Sc_inworld_graphs_Loop_Sg____contains____SWIG(arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CompiledGraphInterface_delete(SwigObj* carg1) {
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  delete arg1;
}


SWIGEXPORTC const char * inworld_CompiledGraphInterface_id(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  cppresult = (std::string *) &((inworld::graphs::CompiledGraphInterface const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_CompiledGraphInterface_Nodes(SwigObj* carg1) {
  absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *cppresult;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  cppresult = (absl::flat_hash_map< std::string,std::shared_ptr< inworld::graphs::Node > > *) &((inworld::graphs::CompiledGraphInterface const *)arg1)->Nodes();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CompiledGraphInterface_StartNodes(SwigObj* carg1) {
  absl::flat_hash_set< std::string > *cppresult;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  cppresult = (absl::flat_hash_set< std::string > *) &((inworld::graphs::CompiledGraphInterface const *)arg1)->StartNodes();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CompiledGraphInterface_EndNodes(SwigObj* carg1) {
  absl::flat_hash_set< std::string > *cppresult;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  cppresult = (absl::flat_hash_set< std::string > *) &((inworld::graphs::CompiledGraphInterface const *)arg1)->EndNodes();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CompiledGraphInterface_Loops(SwigObj* carg1) {
  absl::flat_hash_map< std::string,inworld::graphs::Loop > *cppresult;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  cppresult = (absl::flat_hash_map< std::string,inworld::graphs::Loop > *) &((inworld::graphs::CompiledGraphInterface const *)arg1)->Loops();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CompiledGraphInterface_Edges(SwigObj* carg1, const char * carg2) {
  std::vector< inworld::graphs::Edge > *cppresult;
  std::string temp2 ;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (std::vector< inworld::graphs::Edge > *) &((inworld::graphs::CompiledGraphInterface const *)arg1)->Edges((std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CompiledGraphInterface_ParentNodeIds(SwigObj* carg1, const char * carg2) {
  std::vector< std::string > *cppresult;
  std::string temp2 ;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (std::vector< std::string > *) &((inworld::graphs::CompiledGraphInterface const *)arg1)->ParentNodeIds((std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_CompiledGraphInterface_Visualize(SwigObj* carg1, const char * carg2) {
  absl::Status cppresult;
  std::string temp2 ;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = ((inworld::graphs::CompiledGraphInterface const *)arg1)->Visualize((std::string const &)*arg2);
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_new(const char * carg1) {
  inworld::graphs::Graph *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  cppresult = (inworld::graphs::Graph *)new inworld::graphs::Graph((std::string const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Graph_delete(SwigObj* carg1) {
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Graph_AddNode(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::Node > empty2 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Node > > arg2 ;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::Node>*)carg2 : empty2; 
  (arg1)->AddNode(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_Graph_SetAsStart(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::Node > empty2 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Node > > arg2 ;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::Node>*)carg2 : empty2; 
  (arg1)->SetAsStart(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_Graph_SetAsEnd(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::Node > empty2 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Node > > arg2 ;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::Node>*)carg2 : empty2; 
  (arg1)->SetAsEnd(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* inworld_Graph_CompileAndReturnRaw(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::CompiledGraphInterface * > cppresult;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  cppresult = inworld_inworld_graphs_Graph_CompileAndReturnRaw__SWIG(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::graphs::CompiledGraphInterface * >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_CreateEdge(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  SwigValueWrapper< inworld::swig_helpers::EdgeWrapper > cppresult;
  std::shared_ptr< inworld::graphs::Node > empty2 ;
  std::shared_ptr< inworld::graphs::Node > empty3 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Node > > arg2 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Node > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::Node>*)carg2 : empty2; 
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::graphs::Node>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_Graph_CreateEdge__SWIG(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new inworld::swig_helpers::EdgeWrapper(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_GetCreationContextHelper(SwigObj* carg1) {
  absl::StatusOr< inworld::CreationContext > cppresult;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  cppresult = inworld_inworld_graphs_Graph_GetCreationContextHelper__SWIG(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::CreationContext >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_AddComponent_LLMInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::LLMInterface > empty3 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::LLMInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::LLMInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_Graph_AddComponent_LLMInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_AddComponent_STTInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::STTInterface > empty3 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::STTInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::STTInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_Graph_AddComponent_STTInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_AddComponent_TTSInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::TTSInterface > empty3 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TTSInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::TTSInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_Graph_AddComponent_TTSInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_AddComponent_TextEmbedderInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::TextEmbedderInterface > empty3 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::TextEmbedderInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_Graph_AddComponent_TextEmbedderInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_AddComponent_KnowledgeInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::KnowledgeInterface > empty3 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::KnowledgeInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::KnowledgeInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_Graph_AddComponent_KnowledgeInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_Graph_AddComponent_MCPClientInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::graphs::MCPClientInterface const > empty3 ;
  inworld::graphs::Graph *arg1 = (inworld::graphs::Graph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MCPClientInterface const > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Graph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr<const inworld::graphs::MCPClientInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_Graph_AddComponent_MCPClientInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_EdgeConditionExecutor_new_pv(void * carg1) {
  inworld::swig_helpers::EdgeConditionExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  SwigObj* result;
  
  arg1 = (void *) carg1;
  cppresult = (inworld::swig_helpers::EdgeConditionExecutor *)new inworld::swig_helpers::EdgeConditionExecutor(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_EdgeConditionExecutor_copy(SwigObj* carg1) {
  inworld::swig_helpers::EdgeConditionExecutor *cppresult;
  inworld::swig_helpers::EdgeConditionExecutor *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::swig_helpers::EdgeConditionExecutor *) carg1;
  
  cppresult = (inworld::swig_helpers::EdgeConditionExecutor *)new inworld::swig_helpers::EdgeConditionExecutor((inworld::swig_helpers::EdgeConditionExecutor const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_EdgeConditionExecutor_GetLastInput() {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  SwigObj* result;
  
  cppresult = inworld::swig_helpers::EdgeConditionExecutor::GetLastInput();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::BaseData >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_EdgeConditionExecutor_SetNextOutput(bool carg1) {
  bool arg1 ;
  
  arg1 = (bool) carg1;
  inworld::swig_helpers::EdgeConditionExecutor::SetNextOutput(arg1);
}


SWIGEXPORTC void inworld_EdgeConditionExecutor_SetNextError(const char * carg1) {
  std::string temp1 ;
  std::string *arg1 = 0 ;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  inworld::swig_helpers::EdgeConditionExecutor::SetNextError((std::string const &)*arg1);
}


SWIGEXPORTC void inworld_EdgeConditionExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::EdgeConditionExecutor *arg1 = (inworld::swig_helpers::EdgeConditionExecutor *) 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeConditionExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_EdgeConditionThreadedExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::EdgeConditionThreadedExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;
  
  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::EdgeConditionThreadedExecutor *)new inworld::swig_helpers::EdgeConditionThreadedExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_EdgeConditionThreadedExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::EdgeConditionThreadedExecutor *arg1 = (inworld::swig_helpers::EdgeConditionThreadedExecutor *) 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeConditionThreadedExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_EdgeConditionThreadedExecutor_GetInput(int carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  int arg1 ;
  SwigObj* result;
  
  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::EdgeConditionThreadedExecutor::GetInput(arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::BaseData >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_EdgeConditionThreadedExecutor_SetupInputs(int carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::BaseData > empty2 ;
  int arg1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;
  
  arg1 = (int) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg2 : empty2; 
  inworld::swig_helpers::EdgeConditionThreadedExecutor::SetupInputs(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void inworld_EdgeConditionThreadedExecutor_SetOutput(int carg1, bool carg2) {
  int arg1 ;
  bool arg2 ;
  
  arg1 = (int) carg1;
  arg2 = (bool) carg2;
  inworld::swig_helpers::EdgeConditionThreadedExecutor::SetOutput(arg1,arg2);
}


SWIGEXPORTC void inworld_EdgeConditionThreadedExecutor_SetError(int carg1, const char * carg2) {
  std::string temp2 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  
  arg1 = (int) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  inworld::swig_helpers::EdgeConditionThreadedExecutor::SetError(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_EdgeWrapper_copy(SwigObj* carg1) {
  inworld::swig_helpers::EdgeWrapper *cppresult;
  inworld::swig_helpers::EdgeWrapper *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::swig_helpers::EdgeWrapper *) carg1;
  
  cppresult = (inworld::swig_helpers::EdgeWrapper *)new inworld::swig_helpers::EdgeWrapper((inworld::swig_helpers::EdgeWrapper const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_EdgeWrapper_SetCondition_rcinworld_swig_helpers_EdgeConditionExecutor(SwigObj* carg1, SwigObj* carg2) {
  inworld::swig_helpers::EdgeWrapper *arg1 = (inworld::swig_helpers::EdgeWrapper *) 0 ;
  inworld::swig_helpers::EdgeConditionExecutor *arg2 = 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeWrapper *) carg1;
  
  arg2 = (inworld::swig_helpers::EdgeConditionExecutor *) carg2;
  
  (arg1)->SetCondition((inworld::swig_helpers::EdgeConditionExecutor const &)*arg2);
}


SWIGEXPORTC void inworld_EdgeWrapper_SetCondition_rcinworld_swig_helpers_EdgeConditionThreadedExecutor(SwigObj* carg1, SwigObj* carg2) {
  inworld::swig_helpers::EdgeWrapper *arg1 = (inworld::swig_helpers::EdgeWrapper *) 0 ;
  inworld::swig_helpers::EdgeConditionThreadedExecutor *arg2 = 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeWrapper *) carg1;
  
  arg2 = (inworld::swig_helpers::EdgeConditionThreadedExecutor *) carg2;
  
  (arg1)->SetCondition((inworld::swig_helpers::EdgeConditionThreadedExecutor const &)*arg2);
}


SWIGEXPORTC void inworld_EdgeWrapper_SetConditionCallback(SwigObj* carg1, void * carg2) {
  inworld::swig_helpers::EdgeWrapper *arg1 = (inworld::swig_helpers::EdgeWrapper *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeWrapper *) carg1;
  arg2 = (void *) carg2;
  (arg1)->SetConditionCallback(arg2);
}


SWIGEXPORTC void inworld_EdgeWrapper_SetToOptional(SwigObj* carg1) {
  inworld::swig_helpers::EdgeWrapper *arg1 = (inworld::swig_helpers::EdgeWrapper *) 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeWrapper *) carg1;
  (arg1)->SetToOptional();
}


SWIGEXPORTC void inworld_EdgeWrapper_SetToLoop(SwigObj* carg1) {
  inworld::swig_helpers::EdgeWrapper *arg1 = (inworld::swig_helpers::EdgeWrapper *) 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeWrapper *) carg1;
  (arg1)->SetToLoop();
}


SWIGEXPORTC void inworld_EdgeWrapper_Build(SwigObj* carg1) {
  inworld::swig_helpers::EdgeWrapper *arg1 = (inworld::swig_helpers::EdgeWrapper *) 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeWrapper *) carg1;
  (arg1)->Build();
}


SWIGEXPORTC void inworld_EdgeWrapper_delete(SwigObj* carg1) {
  inworld::swig_helpers::EdgeWrapper *arg1 = (inworld::swig_helpers::EdgeWrapper *) 0 ;
  
  arg1 = (inworld::swig_helpers::EdgeWrapper *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPClientInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MCPClientInterface > *smartarg1 = 0 ;
  inworld::graphs::MCPClientInterface *arg1 = (inworld::graphs::MCPClientInterface *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPClientInterface > *)carg1;
  arg1 = (inworld::graphs::MCPClientInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_MCPClientInterface_ListTools(SwigObj* carg1) {
  absl::StatusOr< std::vector< inworld::Tool > > cppresult;
  std::shared_ptr< inworld::graphs::MCPClientInterface const > *smartarg1 = 0 ;
  inworld::graphs::MCPClientInterface *arg1 = (inworld::graphs::MCPClientInterface *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPClientInterface > *)carg1;
  arg1 = (inworld::graphs::MCPClientInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::MCPClientInterface const *)arg1)->ListTools();
  result = (SwigObj*)new absl::StatusOr< std::vector< inworld::Tool > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_MCPClientInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MCPClientInterface const > *smartarg1 = 0 ;
  inworld::graphs::MCPClientInterface *arg1 = (inworld::graphs::MCPClientInterface *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPClientInterface > *)carg1;
  arg1 = (inworld::graphs::MCPClientInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MCPClientInterface_is_valid__SWIG((inworld::graphs::MCPClientInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPClientInterface_Call(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::graphs::MCPClientInterface const > *smartarg1 = 0 ;
  inworld::graphs::MCPClientInterface *arg1 = (inworld::graphs::MCPClientInterface *) 0 ;
  inworld::ToolCall *arg2 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPClientInterface > *)carg1;
  arg1 = (inworld::graphs::MCPClientInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (inworld::ToolCall *) carg2;
  
  cppresult = inworld_inworld_graphs_MCPClientInterface_Call__SWIG((inworld::graphs::MCPClientInterface const *)arg1,(inworld::ToolCall const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Node_new() {
  std::vector< std::shared_ptr< inworld::graphs::Node > > *cppresult;
  SwigObj* result;
  
  cppresult = (std::vector< std::shared_ptr< inworld::graphs::Node > > *)new std::vector< std::shared_ptr< inworld::graphs::Node > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Node_copy(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Node > > *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  
  cppresult = (std::vector< std::shared_ptr< inworld::graphs::Node > > *)new std::vector< std::shared_ptr< inworld::graphs::Node > >((std::vector< std::shared_ptr< inworld::graphs::Node > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Node_size(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Node > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  size_t result;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::Node > > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Node_capacity(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Node > >::size_type cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  size_t result;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  cppresult = ((std::vector< std::shared_ptr< inworld::graphs::Node > > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Node_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::Node > >::size_type arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  arg2 = (std::vector< std::shared_ptr< inworld::graphs::Node > >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_Node_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  cppresult = (bool)((std::vector< std::shared_ptr< inworld::graphs::Node > > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Node_clear(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_Node_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::Node > empty2 ;
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  std::vector< std::shared_ptr< inworld::graphs::Node > >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::Node>*)carg2 : &empty2; 
  (arg1)->push_back((std::vector< std::shared_ptr< inworld::graphs::Node > >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_Node_get(SwigObj* carg1, int carg2) {
  std::vector< std::shared_ptr< inworld::graphs::Node > >::value_type *cppresult;
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  int arg2 ;
  SwigObj* result;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< std::shared_ptr< inworld::graphs::Node > >::value_type *) &inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*)(*cppresult ? cppresult : 0); 
  return result;
}


SWIGEXPORTC void inworld_vector_Node_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::shared_ptr< inworld::graphs::Node > empty3 ;
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< inworld::graphs::Node > >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  arg2 = (int) carg2;
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Node>*)carg3 : &empty3; 
  inworld_std_vector_Sl_std_shared_ptr_Sl_inworld_graphs_Node_Sg__Sg__set__SWIG(arg1,arg2,(std::shared_ptr< inworld::graphs::Node > const &)*arg3);
}


SWIGEXPORTC void inworld_vector_Node_delete(SwigObj* carg1) {
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_LinearGraph_new(const char * carg1, SwigObj* carg2) {
  inworld::graphs::LinearGraph *cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  std::vector< std::shared_ptr< inworld::graphs::Node > > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (std::vector< std::shared_ptr< inworld::graphs::Node > > *) carg2;
  
  cppresult = (inworld::graphs::LinearGraph *)new inworld::graphs::LinearGraph((std::string const &)*arg1,(std::vector< std::shared_ptr< inworld::graphs::Node > > const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LinearGraph_delete(SwigObj* carg1) {
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LinearGraph_AddNode(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::Node > empty2 ;
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Node > > arg2 ;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::Node>*)carg2 : empty2; 
  (arg1)->AddNode(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* inworld_LinearGraph_GetCreationContextHelper(SwigObj* carg1) {
  absl::StatusOr< inworld::CreationContext > cppresult;
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  cppresult = inworld_inworld_graphs_LinearGraph_GetCreationContextHelper__SWIG((inworld::graphs::LinearGraph const *)arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::CreationContext >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LinearGraph_AddComponent_LLMInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::LLMInterface > empty3 ;
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::LLMInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::LLMInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_LinearGraph_AddComponent_LLMInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LinearGraph_AddComponent_STTInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::STTInterface > empty3 ;
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::STTInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::STTInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_LinearGraph_AddComponent_STTInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LinearGraph_AddComponent_TTSInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::TTSInterface > empty3 ;
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TTSInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::TTSInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_LinearGraph_AddComponent_TTSInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LinearGraph_AddComponent_TextEmbedderInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::TextEmbedderInterface > empty3 ;
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::TextEmbedderInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::TextEmbedderInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_LinearGraph_AddComponent_TextEmbedderInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LinearGraph_AddComponent_KnowledgeInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::KnowledgeInterface > empty3 ;
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::KnowledgeInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::KnowledgeInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_LinearGraph_AddComponent_KnowledgeInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LinearGraph_AddComponent_MCPClientInterface(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  absl::Status cppresult;
  std::string temp2 ;
  std::shared_ptr< inworld::graphs::MCPClientInterface > empty3 ;
  inworld::graphs::LinearGraph *arg1 = (inworld::graphs::LinearGraph *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MCPClientInterface > > arg3 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::LinearGraph *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  arg3 = carg3 ? *(std::shared_ptr< inworld::graphs::MCPClientInterface>*)carg3 : empty3; 
  cppresult = inworld_inworld_graphs_LinearGraph_AddComponent_MCPClientInterface__SWIG(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new absl::Status(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomNodeWrapper_new() {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomNodeWrapper_new_rcstd_shared_ptr_Sl_inworld_swig_helpers_CustomNodeWrapper_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *cppresult;
  std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > empty1 ;
  std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > >((std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomNodeWrapper_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *)new absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_CustomNodeWrapper_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomNodeWrapper_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_CustomNodeWrapper_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_CustomNodeWrapper_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeThreadedCreateExecutor_new(void * carg1, void * carg2) {
  inworld::swig_helpers::CustomNodeThreadedCreateExecutor *cppresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigObj* result;
  
  arg1 = (void *) carg1;
  arg2 = (void *) carg2;
  cppresult = (inworld::swig_helpers::CustomNodeThreadedCreateExecutor *)new inworld::swig_helpers::CustomNodeThreadedCreateExecutor(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_CustomNodeThreadedCreateExecutor_delete(SwigObj* carg1) {
  inworld::swig_helpers::CustomNodeThreadedCreateExecutor *arg1 = (inworld::swig_helpers::CustomNodeThreadedCreateExecutor *) 0 ;
  
  arg1 = (inworld::swig_helpers::CustomNodeThreadedCreateExecutor *) carg1;
  delete arg1;
}


SWIGEXPORTC const char * inworld_CustomNodeThreadedCreateExecutor_GetInputId(int carg1) {
  std::string cppresult;
  int arg1 ;
  const char * result;
  
  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::CustomNodeThreadedCreateExecutor::GetInputId(arg1);
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeThreadedCreateExecutor_GetInputExecutionConfig(int carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::NodeExecutionConfig > > cppresult;
  int arg1 ;
  SwigObj* result;
  
  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::CustomNodeThreadedCreateExecutor::GetInputExecutionConfig(arg1);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::NodeExecutionConfig >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_CustomNodeThreadedCreateExecutor_GetInputConfigs(int carg1) {
  std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > > cppresult;
  int arg1 ;
  SwigObj* result;
  
  arg1 = (int) carg1;
  cppresult = inworld::swig_helpers::CustomNodeThreadedCreateExecutor::GetInputConfigs(arg1);
  result = (SwigObj*)new std::vector< std::shared_ptr< inworld::swig_helpers::CustomConfigWrapper > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_CustomNodeThreadedCreateExecutor_SetOutput(int carg1, SwigObj* carg2) {
  int arg1 ;
  absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *arg2 = 0 ;
  
  arg1 = (int) carg1;
  
  arg2 = (absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > *) carg2;
  
  inworld::swig_helpers::CustomNodeThreadedCreateExecutor::SetOutput(arg1,(absl::StatusOr< std::shared_ptr< inworld::swig_helpers::CustomNodeWrapper > > const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSOutput_new() {
  absl::StatusOr< inworld::graphs::TTSOutput > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< inworld::graphs::TTSOutput > *)new absl::StatusOr< inworld::graphs::TTSOutput >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSOutput_new_rcinworld_graphs_TTSOutput(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > *cppresult;
  inworld::graphs::TTSOutput *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::graphs::TTSOutput *) carg1;
  
  cppresult = (absl::StatusOr< inworld::graphs::TTSOutput > *)new absl::StatusOr< inworld::graphs::TTSOutput >((inworld::graphs::TTSOutput const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSOutput_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< inworld::graphs::TTSOutput > *)new absl::StatusOr< inworld::graphs::TTSOutput >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_TTSOutput_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< inworld::graphs::TTSOutput > *arg1 = (absl::StatusOr< inworld::graphs::TTSOutput > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< inworld::graphs::TTSOutput > *) carg1;
  cppresult = (bool)((absl::StatusOr< inworld::graphs::TTSOutput > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSOutput_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< inworld::graphs::TTSOutput > *arg1 = (absl::StatusOr< inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< inworld::graphs::TTSOutput > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< inworld::graphs::TTSOutput > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_TTSOutput_value(SwigObj* carg1) {
  SwigValueWrapper< inworld::graphs::TTSOutput > cppresult;
  absl::StatusOr< inworld::graphs::TTSOutput > *arg1 = (absl::StatusOr< inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< inworld::graphs::TTSOutput > *) carg1;
  cppresult = ((absl::StatusOr< inworld::graphs::TTSOutput > const *)arg1)->value();
  result = (SwigObj*)new inworld::graphs::TTSOutput(cppresult);
  return result;
}


SWIGEXPORTC void inworld_StatusOr_TTSOutput_delete(SwigObj* carg1) {
  absl::StatusOr< inworld::graphs::TTSOutput > *arg1 = (absl::StatusOr< inworld::graphs::TTSOutput > *) 0 ;
  
  arg1 = (absl::StatusOr< inworld::graphs::TTSOutput > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_DataStream_TTSOutput_new_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_graphs_TTSOutput_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::DataStream< inworld::graphs::TTSOutput > *cppresult;
  std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > empty1 ;
  std::shared_ptr< inworld::graphs::CancellationContext > empty2 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > arg2 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::graphs::TTSOutput>>*)carg1 : empty1; 
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::CancellationContext>*)carg2 : empty2; 
  cppresult = (inworld::graphs::DataStream< inworld::graphs::TTSOutput > *)new inworld::graphs::DataStream< inworld::graphs::TTSOutput >(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<inworld::graphs::TTSOutput> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_DataStream_TTSOutput_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::graphs::TTSOutput > *arg1 = (inworld::graphs::DataStream< inworld::graphs::TTSOutput > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::DataStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_DataStream_TTSOutput_copy(SwigObj* carg1) {
  inworld::graphs::DataStream< inworld::graphs::TTSOutput > *cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::graphs::TTSOutput > *arg1 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::graphs::TTSOutput> > *)carg1;
  if (!smartarg1 || !smartarg1->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::DataStream< inworld::graphs::TTSOutput > const & reference is null");
    return 0;
  }
  arg1 = (inworld::graphs::DataStream<inworld::graphs::TTSOutput> *)smartarg1->get();
  cppresult = (inworld::graphs::DataStream< inworld::graphs::TTSOutput > *)new inworld::graphs::DataStream< inworld::graphs::TTSOutput >((inworld::graphs::DataStream< inworld::graphs::TTSOutput > const &)*arg1);
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<inworld::graphs::TTSOutput> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_TTSOutput_stream(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::graphs::TTSOutput > *arg1 = (inworld::graphs::DataStream< inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::graphs::TTSOutput > const *)arg1)->stream();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< inworld::graphs::TTSOutput > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_TTSOutput_cancellation_context(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::graphs::TTSOutput > *arg1 = (inworld::graphs::DataStream< inworld::graphs::TTSOutput > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::graphs::TTSOutput > const *)arg1)->cancellation_context();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::CancellationContext >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC bool inworld_DataStream_TTSOutput_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::graphs::TTSOutput > *arg1 = (inworld::graphs::DataStream< inworld::graphs::TTSOutput > *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_DataStream_Sl_inworld_graphs_TTSOutput_Sg__is_valid__SWIG((inworld::graphs::DataStream< inworld::graphs::TTSOutput > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_DataStream_TTSOutput_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::graphs::TTSOutput > *arg1 = (inworld::graphs::DataStream< inworld::graphs::TTSOutput > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::graphs::TTSOutput> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::graphs::TTSOutput> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::graphs::TTSOutput > const *)arg1)->ToString();
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_string_new_std_shared_ptr_Sl_inworld_InputStream_Sl_std_string_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::DataStream< std::string > *cppresult;
  std::shared_ptr< inworld::InputStream< std::string > > empty1 ;
  std::shared_ptr< inworld::graphs::CancellationContext > empty2 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > arg2 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::string>>*)carg1 : empty1; 
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::CancellationContext>*)carg2 : empty2; 
  cppresult = (inworld::graphs::DataStream< std::string > *)new inworld::graphs::DataStream< std::string >(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<std::string> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_DataStream_string_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::DataStream< std::string > > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::string > *arg1 = (inworld::graphs::DataStream< std::string > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::DataStream<std::string> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_DataStream_string_copy(SwigObj* carg1) {
  inworld::graphs::DataStream< std::string > *cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::string > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::string > *arg1 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::string> > *)carg1;
  if (!smartarg1 || !smartarg1->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::DataStream< std::string > const & reference is null");
    return 0;
  }
  arg1 = (inworld::graphs::DataStream<std::string> *)smartarg1->get();
  cppresult = (inworld::graphs::DataStream< std::string > *)new inworld::graphs::DataStream< std::string >((inworld::graphs::DataStream< std::string > const &)*arg1);
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<std::string> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_string_stream(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::string > > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::string > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::string > *arg1 = (inworld::graphs::DataStream< std::string > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::string> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< std::string > const *)arg1)->stream();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< std::string > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_string_cancellation_context(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::string > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::string > *arg1 = (inworld::graphs::DataStream< std::string > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::string> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< std::string > const *)arg1)->cancellation_context();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::CancellationContext >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC bool inworld_DataStream_string_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::string > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::string > *arg1 = (inworld::graphs::DataStream< std::string > *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::string> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_DataStream_Sl_std_string_Sg__is_valid__SWIG((inworld::graphs::DataStream< std::string > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_DataStream_string_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::string > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::string > *arg1 = (inworld::graphs::DataStream< std::string > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::string> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::string> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< std::string > const *)arg1)->ToString();
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_Content_new_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_Content_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::DataStream< inworld::Content > *cppresult;
  std::shared_ptr< inworld::InputStream< inworld::Content > > empty1 ;
  std::shared_ptr< inworld::graphs::CancellationContext > empty2 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > arg2 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::Content>>*)carg1 : empty1; 
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::CancellationContext>*)carg2 : empty2; 
  cppresult = (inworld::graphs::DataStream< inworld::Content > *)new inworld::graphs::DataStream< inworld::Content >(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<inworld::Content> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_DataStream_Content_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::DataStream< inworld::Content > > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::Content > *arg1 = (inworld::graphs::DataStream< inworld::Content > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::DataStream<inworld::Content> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_DataStream_Content_copy(SwigObj* carg1) {
  inworld::graphs::DataStream< inworld::Content > *cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::Content > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::Content > *arg1 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::Content> > *)carg1;
  if (!smartarg1 || !smartarg1->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::DataStream< inworld::Content > const & reference is null");
    return 0;
  }
  arg1 = (inworld::graphs::DataStream<inworld::Content> *)smartarg1->get();
  cppresult = (inworld::graphs::DataStream< inworld::Content > *)new inworld::graphs::DataStream< inworld::Content >((inworld::graphs::DataStream< inworld::Content > const &)*arg1);
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<inworld::Content> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_Content_stream(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::Content > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::Content > *arg1 = (inworld::graphs::DataStream< inworld::Content > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::Content> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::Content > const *)arg1)->stream();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< inworld::Content > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_Content_cancellation_context(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::Content > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::Content > *arg1 = (inworld::graphs::DataStream< inworld::Content > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::Content> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::Content > const *)arg1)->cancellation_context();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::CancellationContext >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC bool inworld_DataStream_Content_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::Content > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::Content > *arg1 = (inworld::graphs::DataStream< inworld::Content > *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::Content> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_DataStream_Sl_inworld_Content_Sg__is_valid__SWIG((inworld::graphs::DataStream< inworld::Content > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_DataStream_Content_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::Content > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::Content > *arg1 = (inworld::graphs::DataStream< inworld::Content > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::Content> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::Content> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::Content > const *)arg1)->ToString();
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_SpeechChunk_new_std_shared_ptr_Sl_inworld_InputStream_Sl_inworld_SpeechChunk_Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::DataStream< inworld::SpeechChunk > *cppresult;
  std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > empty1 ;
  std::shared_ptr< inworld::graphs::CancellationContext > empty2 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > arg2 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<inworld::SpeechChunk>>*)carg1 : empty1; 
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::CancellationContext>*)carg2 : empty2; 
  cppresult = (inworld::graphs::DataStream< inworld::SpeechChunk > *)new inworld::graphs::DataStream< inworld::SpeechChunk >(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<inworld::SpeechChunk> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_DataStream_SpeechChunk_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::DataStream< inworld::SpeechChunk > > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::SpeechChunk > *arg1 = (inworld::graphs::DataStream< inworld::SpeechChunk > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::DataStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_DataStream_SpeechChunk_copy(SwigObj* carg1) {
  inworld::graphs::DataStream< inworld::SpeechChunk > *cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::SpeechChunk > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::SpeechChunk > *arg1 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::SpeechChunk> > *)carg1;
  if (!smartarg1 || !smartarg1->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::DataStream< inworld::SpeechChunk > const & reference is null");
    return 0;
  }
  arg1 = (inworld::graphs::DataStream<inworld::SpeechChunk> *)smartarg1->get();
  cppresult = (inworld::graphs::DataStream< inworld::SpeechChunk > *)new inworld::graphs::DataStream< inworld::SpeechChunk >((inworld::graphs::DataStream< inworld::SpeechChunk > const &)*arg1);
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<inworld::SpeechChunk> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_SpeechChunk_stream(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::SpeechChunk > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::SpeechChunk > *arg1 = (inworld::graphs::DataStream< inworld::SpeechChunk > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::SpeechChunk > const *)arg1)->stream();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< inworld::SpeechChunk > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_SpeechChunk_cancellation_context(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::SpeechChunk > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::SpeechChunk > *arg1 = (inworld::graphs::DataStream< inworld::SpeechChunk > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::SpeechChunk > const *)arg1)->cancellation_context();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::CancellationContext >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC bool inworld_DataStream_SpeechChunk_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::SpeechChunk > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::SpeechChunk > *arg1 = (inworld::graphs::DataStream< inworld::SpeechChunk > *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_DataStream_Sl_inworld_SpeechChunk_Sg__is_valid__SWIG((inworld::graphs::DataStream< inworld::SpeechChunk > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_DataStream_SpeechChunk_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::DataStream< inworld::SpeechChunk > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< inworld::SpeechChunk > *arg1 = (inworld::graphs::DataStream< inworld::SpeechChunk > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<inworld::SpeechChunk> > *)carg1;
  arg1 = (inworld::graphs::DataStream<inworld::SpeechChunk> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< inworld::SpeechChunk > const *)arg1)->ToString();
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_BaseData_new_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  std::shared_ptr< inworld::graphs::CancellationContext > empty2 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > arg2 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1; 
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::CancellationContext>*)carg2 : empty2; 
  cppresult = (inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *)new inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > >(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_DataStream_BaseData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_DataStream_BaseData_copy(SwigObj* carg1) {
  inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  if (!smartarg1 || !smartarg1->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const & reference is null");
    return 0;
  }
  arg1 = (inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> *)smartarg1->get();
  cppresult = (inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *)new inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > >((inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg1);
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_BaseData_stream(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->stream();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_DataStream_BaseData_cancellation_context(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->cancellation_context();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::CancellationContext >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC bool inworld_DataStream_BaseData_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_DataStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__is_valid__SWIG((inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_DataStream_BaseData_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const > *smartarg1 = 0 ;
  inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *arg1 = (inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> > *)carg1;
  arg1 = (inworld::graphs::DataStream<std::shared_ptr<inworld::graphs::BaseData>> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > const *)arg1)->ToString();
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_DataStream_TTSOutput(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1; 
  cppresult = BaseDataAs< inworld::graphs::DataStream< inworld::graphs::TTSOutput > >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_DataStream_String(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::DataStream< std::string > > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1; 
  cppresult = BaseDataAs< inworld::graphs::DataStream< std::string > >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::DataStream< std::string > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_DataStream_Content(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::DataStream< inworld::Content > > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1; 
  cppresult = BaseDataAs< inworld::graphs::DataStream< inworld::Content > >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::DataStream< inworld::Content > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_DataStream_SpeechChunk(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::DataStream< inworld::SpeechChunk > > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1; 
  cppresult = BaseDataAs< inworld::graphs::DataStream< inworld::SpeechChunk > >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::DataStream< inworld::SpeechChunk > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_DataStream_BaseData(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1; 
  cppresult = BaseDataAs< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::DataStream< std::shared_ptr< inworld::graphs::BaseData > > >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_EventHistory_new(SwigObj* carg1) {
  inworld::graphs::EventHistory *cppresult;
  std::vector< inworld::Event > arg1 ;
  SwigObj* result;
  
  arg1 = *(std::vector< inworld::Event > *)carg1;
  cppresult = (inworld::graphs::EventHistory *)new inworld::graphs::EventHistory(SWIG_STD_MOVE(arg1));
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::EventHistory >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_EventHistory_events(SwigObj* carg1) {
  std::vector< inworld::Event > *cppresult;
  std::shared_ptr< inworld::graphs::EventHistory const > *smartarg1 = 0 ;
  inworld::graphs::EventHistory *arg1 = (inworld::graphs::EventHistory *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::EventHistory > *)carg1;
  arg1 = (inworld::graphs::EventHistory *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< inworld::Event > *) &((inworld::graphs::EventHistory const *)arg1)->events();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_EventHistory_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::EventHistory const > *smartarg1 = 0 ;
  inworld::graphs::EventHistory *arg1 = (inworld::graphs::EventHistory *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::EventHistory > *)carg1;
  arg1 = (inworld::graphs::EventHistory *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_EventHistory_is_valid__SWIG((inworld::graphs::EventHistory const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_EventHistory_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::EventHistory > *smartarg1 = 0 ;
  inworld::graphs::EventHistory *arg1 = (inworld::graphs::EventHistory *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::EventHistory > *)carg1;
  arg1 = (inworld::graphs::EventHistory *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_EventHistory_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::EventHistory const > *smartarg1 = 0 ;
  inworld::graphs::EventHistory *arg1 = (inworld::graphs::EventHistory *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::EventHistory > *)carg1;
  arg1 = (inworld::graphs::EventHistory *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::EventHistory const *)arg1)->ToString();
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_BaseDataAs_EventHistory(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::EventHistory > > cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg1 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg1 : empty1; 
  cppresult = BaseDataAs< inworld::graphs::EventHistory >(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::EventHistory >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC SwigObj* inworld_HashMap_StringToString_new() {
  absl::flat_hash_map< std::string,std::string > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::flat_hash_map< std::string,std::string > *)new absl::flat_hash_map< std::string,std::string >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToString_delete(SwigObj* carg1) {
  absl::flat_hash_map< std::string,std::string > *arg1 = (absl::flat_hash_map< std::string,std::string > *) 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC size_t inworld_HashMap_StringToString_size(SwigObj* carg1) {
  size_t cppresult;
  absl::flat_hash_map< std::string,std::string > *arg1 = (absl::flat_hash_map< std::string,std::string > *) 0 ;
  size_t result;
  
  arg1 = (absl::flat_hash_map< std::string,std::string > *) carg1;
  cppresult = ((absl::flat_hash_map< std::string,std::string > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_HashMap_StringToString_empty(SwigObj* carg1) {
  bool cppresult;
  absl::flat_hash_map< std::string,std::string > *arg1 = (absl::flat_hash_map< std::string,std::string > *) 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_map< std::string,std::string > *) carg1;
  cppresult = (bool)((absl::flat_hash_map< std::string,std::string > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToString_clear(SwigObj* carg1) {
  absl::flat_hash_map< std::string,std::string > *arg1 = (absl::flat_hash_map< std::string,std::string > *) 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,std::string > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC char * inworld_HashMap_StringToString___getitem__(SwigObj* carg1, const char * carg2) {
  std::string *cppresult;
  std::string temp2 ;
  absl::flat_hash_map< std::string,std::string > *arg1 = (absl::flat_hash_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  char * result;
  
  arg1 = (absl::flat_hash_map< std::string,std::string > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (std::string *) &inworld_absl_flat_hash_map_Sl_std_string_Sc_std_string_Sg____getitem____SWIG(arg1,(std::string const &)*arg2);
  
  result = (char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_HashMap_StringToString___setitem__(SwigObj* carg1, const char * carg2, const char * carg3) {
  std::string temp2 ;
  std::string temp3 ;
  absl::flat_hash_map< std::string,std::string > *arg1 = (absl::flat_hash_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (absl::flat_hash_map< std::string,std::string > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  inworld_absl_flat_hash_map_Sl_std_string_Sc_std_string_Sg____setitem____SWIG(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORTC bool inworld_HashMap_StringToString___contains__(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  absl::flat_hash_map< std::string,std::string > *arg1 = (absl::flat_hash_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (absl::flat_hash_map< std::string,std::string > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (bool)inworld_absl_flat_hash_map_Sl_std_string_Sc_std_string_Sg____contains____SWIG(arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_BTreeMap_StringToString_new() {
  absl::btree_map< std::string,std::string > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::btree_map< std::string,std::string > *)new absl::btree_map< std::string,std::string >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_BTreeMap_StringToString_delete(SwigObj* carg1) {
  absl::btree_map< std::string,std::string > *arg1 = (absl::btree_map< std::string,std::string > *) 0 ;
  
  arg1 = (absl::btree_map< std::string,std::string > *) carg1;
  delete arg1;
}


SWIGEXPORTC size_t inworld_BTreeMap_StringToString_size(SwigObj* carg1) {
  size_t cppresult;
  absl::btree_map< std::string,std::string > *arg1 = (absl::btree_map< std::string,std::string > *) 0 ;
  size_t result;
  
  arg1 = (absl::btree_map< std::string,std::string > *) carg1;
  cppresult = ((absl::btree_map< std::string,std::string > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC bool inworld_BTreeMap_StringToString_empty(SwigObj* carg1) {
  bool cppresult;
  absl::btree_map< std::string,std::string > *arg1 = (absl::btree_map< std::string,std::string > *) 0 ;
  bool result;
  
  arg1 = (absl::btree_map< std::string,std::string > *) carg1;
  cppresult = (bool)((absl::btree_map< std::string,std::string > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_BTreeMap_StringToString_clear(SwigObj* carg1) {
  absl::btree_map< std::string,std::string > *arg1 = (absl::btree_map< std::string,std::string > *) 0 ;
  
  arg1 = (absl::btree_map< std::string,std::string > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC char * inworld_BTreeMap_StringToString___getitem__(SwigObj* carg1, const char * carg2) {
  std::string *cppresult;
  std::string temp2 ;
  absl::btree_map< std::string,std::string > *arg1 = (absl::btree_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  char * result;
  
  arg1 = (absl::btree_map< std::string,std::string > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (std::string *) &inworld_absl_btree_map_Sl_std_string_Sc_std_string_Sg____getitem____SWIG(arg1,(std::string const &)*arg2);
  
  result = (char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_BTreeMap_StringToString___setitem__(SwigObj* carg1, const char * carg2, const char * carg3) {
  std::string temp2 ;
  std::string temp3 ;
  absl::btree_map< std::string,std::string > *arg1 = (absl::btree_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (absl::btree_map< std::string,std::string > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  inworld_absl_btree_map_Sl_std_string_Sc_std_string_Sg____setitem____SWIG(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORTC bool inworld_BTreeMap_StringToString___contains__(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  std::string temp2 ;
  absl::btree_map< std::string,std::string > *arg1 = (absl::btree_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (absl::btree_map< std::string,std::string > *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = (bool)inworld_absl_btree_map_Sl_std_string_Sc_std_string_Sg____contains____SWIG(arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_UserContext_attributes_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::UserContext *arg1 = (inworld::graphs::UserContext *) 0 ;
  absl::btree_map< std::string,std::string > *arg2 = (absl::btree_map< std::string,std::string > *) 0 ;
  
  arg1 = (inworld::graphs::UserContext *) carg1;
  arg2 = (absl::btree_map< std::string,std::string > *) carg2;
  if (arg1) (arg1)->attributes = *arg2;
}


SWIGEXPORTC SwigObj* inworld_UserContext_attributes_get(SwigObj* carg1) {
  absl::btree_map< std::string,std::string > *cppresult;
  inworld::graphs::UserContext *arg1 = (inworld::graphs::UserContext *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::UserContext *) carg1;
  cppresult = (absl::btree_map< std::string,std::string > *)& ((arg1)->attributes);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_UserContext_targeting_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::UserContext *arg1 = (inworld::graphs::UserContext *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::UserContext *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->targeting_key = *arg2;
}


SWIGEXPORTC const char * inworld_UserContext_targeting_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::UserContext *arg1 = (inworld::graphs::UserContext *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::UserContext *) carg1;
  cppresult = (std::string *) & ((arg1)->targeting_key);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_UserContext_new() {
  inworld::graphs::UserContext *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::UserContext *)new inworld::graphs::UserContext();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_UserContext_delete(SwigObj* carg1) {
  inworld::graphs::UserContext *arg1 = (inworld::graphs::UserContext *) 0 ;
  
  arg1 = (inworld::graphs::UserContext *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_ExecutionResult_new_std_shared_ptr_Sl_inworld_InputStream_Sl_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__Sg__Sg__std_string(SwigObj* carg1, const char * carg2) {
  inworld::graphs::ExecutionResult *cppresult;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > empty1 ;
  SwigValueWrapper< std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > > arg1 ;
  std::string arg2 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? *(std::shared_ptr< inworld::InputStream<std::shared_ptr<inworld::graphs::BaseData>>>*)carg1 : empty1; 
  
  if (carg2)
  arg2 = carg2;
  
  cppresult = (inworld::graphs::ExecutionResult *)new inworld::graphs::ExecutionResult(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ExecutionResult_new() {
  inworld::graphs::ExecutionResult *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::ExecutionResult *)new inworld::graphs::ExecutionResult();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ExecutionResult_result_stream_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::ExecutionResult *arg1 = (inworld::graphs::ExecutionResult *) 0 ;
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *arg2 = (std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *) 0 ;
  
  arg1 = (inworld::graphs::ExecutionResult *) carg1;
  arg2 = (std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *) carg2;
  if (arg1) (arg1)->result_stream = *arg2;
}


SWIGEXPORTC SwigObj* inworld_ExecutionResult_result_stream_get(SwigObj* carg1) {
  std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *cppresult;
  inworld::graphs::ExecutionResult *arg1 = (inworld::graphs::ExecutionResult *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::ExecutionResult *) carg1;
  cppresult = (std::shared_ptr< inworld::InputStream< std::shared_ptr< inworld::graphs::BaseData > > > *)& ((arg1)->result_stream);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ExecutionResult_variant_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ExecutionResult *arg1 = (inworld::graphs::ExecutionResult *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ExecutionResult *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->variant = *arg2;
}


SWIGEXPORTC const char * inworld_ExecutionResult_variant_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::ExecutionResult *arg1 = (inworld::graphs::ExecutionResult *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::ExecutionResult *) carg1;
  cppresult = (std::string *) & ((arg1)->variant);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_ExecutionResult_delete(SwigObj* carg1) {
  inworld::graphs::ExecutionResult *arg1 = (inworld::graphs::ExecutionResult *) 0 ;
  
  arg1 = (inworld::graphs::ExecutionResult *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ExecutorInterface_delete(SwigObj* carg1) {
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ExecutorInterface_Start(SwigObj* carg1) {
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  (arg1)->Start();
}


SWIGEXPORTC SwigObj* inworld_ExecutorInterface_Execute_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__rcstd_string(SwigObj* carg1, SwigObj* carg2, const char * carg3) {
  inworld::graphs::ExecutionResult cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty2 ;
  std::string temp3 ;
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;
  std::string *arg3 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg2 : empty2; 
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  cppresult = (arg1)->Execute(SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  result = (SwigObj*)new inworld::graphs::ExecutionResult(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_ExecutorInterface_Execute_std_shared_ptr_Sl_inworld_graphs_BaseData_Sg__rcstd_string_rcinworld_graphs_UserContext(SwigObj* carg1, SwigObj* carg2, const char * carg3, SwigObj* carg4) {
  inworld::graphs::ExecutionResult cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty2 ;
  std::string temp3 ;
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;
  std::string *arg3 = 0 ;
  inworld::graphs::UserContext *arg4 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg2 : empty2; 
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  
  arg4 = (inworld::graphs::UserContext *) carg4;
  
  cppresult = (arg1)->Execute(SWIG_STD_MOVE(arg2),(std::string const &)*arg3,(inworld::graphs::UserContext const &)*arg4);
  result = (SwigObj*)new inworld::graphs::ExecutionResult(cppresult);
  return result;
}


SWIGEXPORTC void inworld_ExecutorInterface_CancelExecution(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  (arg1)->CancelExecution((std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ExecutorInterface_Stop(SwigObj* carg1) {
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  (arg1)->Stop();
}


SWIGEXPORTC int inworld_ExecutorInterface_ExecuteSimplified(SwigObj* carg1, SwigObj* carg2, const char * carg3) {
  int cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty2 ;
  std::string temp3 ;
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg2 : empty2; 
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  cppresult = (int)inworld_inworld_graphs_ExecutorInterface_ExecuteSimplified__SWIG(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int inworld_ExecutorInterface_ExecuteSimplifiedWithUserContext(SwigObj* carg1, SwigObj* carg2, const char * carg3, SwigObj* carg4) {
  int cppresult;
  std::shared_ptr< inworld::graphs::BaseData > empty2 ;
  std::string temp3 ;
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > arg2 ;
  std::string *arg3 = 0 ;
  inworld::graphs::UserContext *arg4 = 0 ;
  int result;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::BaseData>*)carg2 : empty2; 
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  
  arg4 = (inworld::graphs::UserContext *) carg4;
  
  cppresult = (int)inworld_inworld_graphs_ExecutorInterface_ExecuteSimplifiedWithUserContext__SWIG(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3,(inworld::graphs::UserContext const &)*arg4);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ExecutorInterface_GetNextResult(SwigObj* carg1, int carg2) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  int arg2 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  arg2 = (int) carg2;
  cppresult = inworld_inworld_graphs_ExecutorInterface_GetNextResult__SWIG(arg1,arg2);
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::BaseData >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC bool inworld_ExecutorInterface_HasMoreResults(SwigObj* carg1, int carg2) {
  bool cppresult;
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  arg2 = (int) carg2;
  cppresult = (bool)inworld_inworld_graphs_ExecutorInterface_HasMoreResults__SWIG(arg1,arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_ExecutorInterface_GetExecutionVariant(SwigObj* carg1, int carg2) {
  std::string cppresult;
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  int arg2 ;
  const char * result;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  arg2 = (int) carg2;
  cppresult = inworld_inworld_graphs_ExecutorInterface_GetExecutionVariant__SWIG(arg1,arg2);
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC void inworld_ExecutorInterface_CloseExecution(SwigObj* carg1, int carg2) {
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  arg2 = (int) carg2;
  inworld_inworld_graphs_ExecutorInterface_CloseExecution__SWIG(arg1,arg2);
}


SWIGEXPORTC void inworld_ExecutorInterface_CleanupAllExecutions(SwigObj* carg1) {
  inworld::graphs::ExecutorInterface *arg1 = (inworld::graphs::ExecutorInterface *) 0 ;
  
  arg1 = (inworld::graphs::ExecutorInterface *) carg1;
  inworld_inworld_graphs_ExecutorInterface_CleanupAllExecutions__SWIG(arg1);
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorFactoryHelper_Create_pinworld_graphs_CompiledGraphInterface(SwigObj* carg1) {
  inworld::graphs::ExecutorInterface *cppresult;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  cppresult = (inworld::graphs::ExecutorInterface *)inworld::graphs::swig_helpers::GraphExecutorFactoryHelper::Create(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorFactoryHelper_Create_pinworld_graphs_CompiledGraphInterface_rcinworld_graphs_GraphExecutorConfig(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::ExecutorInterface *cppresult;
  inworld::graphs::CompiledGraphInterface *arg1 = (inworld::graphs::CompiledGraphInterface *) 0 ;
  inworld::graphs::GraphExecutorConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::CompiledGraphInterface *) carg1;
  
  arg2 = (inworld::graphs::GraphExecutorConfig *) carg2;
  
  cppresult = (inworld::graphs::ExecutorInterface *)inworld::graphs::swig_helpers::GraphExecutorFactoryHelper::Create(arg1,(inworld::graphs::GraphExecutorConfig const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorFactoryHelper_new() {
  inworld::graphs::swig_helpers::GraphExecutorFactoryHelper *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::swig_helpers::GraphExecutorFactoryHelper *)new inworld::graphs::swig_helpers::GraphExecutorFactoryHelper();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphExecutorFactoryHelper_delete(SwigObj* carg1) {
  inworld::graphs::swig_helpers::GraphExecutorFactoryHelper *arg1 = (inworld::graphs::swig_helpers::GraphExecutorFactoryHelper *) 0 ;
  
  arg1 = (inworld::graphs::swig_helpers::GraphExecutorFactoryHelper *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_GraphManagerConfig_enable_remote_config_set(SwigObj* carg1, bool carg2) {
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->enable_remote_config = arg2;
}


SWIGEXPORTC bool inworld_GraphManagerConfig_enable_remote_config_get(SwigObj* carg1) {
  bool cppresult;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  bool result;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  cppresult = (bool) ((arg1)->enable_remote_config);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphManagerConfig_poll_interval_seconds_set(SwigObj* carg1, int carg2) {
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  int arg2 ;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->poll_interval_seconds = arg2;
}


SWIGEXPORTC int inworld_GraphManagerConfig_poll_interval_seconds_get(SwigObj* carg1) {
  int cppresult;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  int result;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  cppresult = (int) ((arg1)->poll_interval_seconds);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphManagerConfig_address_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORTC const char * inworld_GraphManagerConfig_address_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->address);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_GraphManagerConfig_targeting_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->targeting_key = *arg2;
}


SWIGEXPORTC const char * inworld_GraphManagerConfig_targeting_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->targeting_key);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_GraphManagerConfig_inworld_api_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->inworld_api_key = *arg2;
}


SWIGEXPORTC const char * inworld_GraphManagerConfig_inworld_api_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->inworld_api_key);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_GraphManagerConfig_mode_set(SwigObj* carg1, int carg2) {
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  enum inworld::graphs::GraphManagerConfig::Mode arg2 ;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  arg2 = (enum inworld::graphs::GraphManagerConfig::Mode) carg2;
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORTC int inworld_GraphManagerConfig_mode_get(SwigObj* carg1) {
  enum inworld::graphs::GraphManagerConfig::Mode cppresult;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  int result;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  cppresult = (enum inworld::graphs::GraphManagerConfig::Mode) ((arg1)->mode);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphManagerConfig_config_environment_variables_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  absl::flat_hash_map< std::string,std::string > *arg2 = (absl::flat_hash_map< std::string,std::string > *) 0 ;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  arg2 = (absl::flat_hash_map< std::string,std::string > *) carg2;
  if (arg1) (arg1)->config_environment_variables = *arg2;
}


SWIGEXPORTC SwigObj* inworld_GraphManagerConfig_config_environment_variables_get(SwigObj* carg1) {
  absl::flat_hash_map< std::string,std::string > *cppresult;
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  cppresult = (absl::flat_hash_map< std::string,std::string > *)& ((arg1)->config_environment_variables);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphManagerConfig_Default() {
  inworld::graphs::GraphManagerConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::GraphManagerConfig *) &inworld::graphs::GraphManagerConfig::Default();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphManagerConfig_WithDisabledRemoteConfig() {
  inworld::graphs::GraphManagerConfig cppresult;
  SwigObj* result;
  
  cppresult = inworld::graphs::GraphManagerConfig::WithDisabledRemoteConfig();
  result = (SwigObj*)new inworld::graphs::GraphManagerConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphManagerConfig_WithRemoteConfig_rcstd_string_rcstd_string_i_rcstd_string_eMode(const char * carg1, const char * carg2, int carg3, const char * carg4, int carg5) {
  inworld::graphs::GraphManagerConfig cppresult;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp4 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  inworld::graphs::GraphManagerConfig::Mode arg5 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  arg3 = (int) carg3;
  
  if (carg4)
  temp4 = carg4;
  arg4 = &temp4;
  
  arg5 = (inworld::graphs::GraphManagerConfig::Mode) carg5;
  cppresult = inworld::graphs::GraphManagerConfig::WithRemoteConfig((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
  result = (SwigObj*)new inworld::graphs::GraphManagerConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphManagerConfig_WithRemoteConfig_rcstd_string_rcstd_string_i_rcstd_string(const char * carg1, const char * carg2, int carg3, const char * carg4) {
  inworld::graphs::GraphManagerConfig cppresult;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp4 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  arg3 = (int) carg3;
  
  if (carg4)
  temp4 = carg4;
  arg4 = &temp4;
  
  cppresult = inworld::graphs::GraphManagerConfig::WithRemoteConfig((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
  result = (SwigObj*)new inworld::graphs::GraphManagerConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphManagerConfig_WithRemoteConfig_rcstd_string_rcstd_string_i(const char * carg1, const char * carg2, int carg3) {
  inworld::graphs::GraphManagerConfig cppresult;
  std::string temp1 ;
  std::string temp2 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  arg3 = (int) carg3;
  cppresult = inworld::graphs::GraphManagerConfig::WithRemoteConfig((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  result = (SwigObj*)new inworld::graphs::GraphManagerConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphManagerConfig_WithRemoteConfig_rcstd_string_rcstd_string(const char * carg1, const char * carg2) {
  inworld::graphs::GraphManagerConfig cppresult;
  std::string temp1 ;
  std::string temp2 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = inworld::graphs::GraphManagerConfig::WithRemoteConfig((std::string const &)*arg1,(std::string const &)*arg2);
  result = (SwigObj*)new inworld::graphs::GraphManagerConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphManagerConfig_new() {
  inworld::graphs::GraphManagerConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::GraphManagerConfig *)new inworld::graphs::GraphManagerConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphManagerConfig_delete(SwigObj* carg1) {
  inworld::graphs::GraphManagerConfig *arg1 = (inworld::graphs::GraphManagerConfig *) 0 ;
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_GraphExecutorConfig_worker_strategy_set(SwigObj* carg1, int carg2) {
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  enum inworld::graphs::GraphExecutorConfig::WorkerCountStrategy arg2 ;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  arg2 = (enum inworld::graphs::GraphExecutorConfig::WorkerCountStrategy) carg2;
  if (arg1) (arg1)->worker_strategy = arg2;
}


SWIGEXPORTC int inworld_GraphExecutorConfig_worker_strategy_get(SwigObj* carg1) {
  enum inworld::graphs::GraphExecutorConfig::WorkerCountStrategy cppresult;
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  int result;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  cppresult = (enum inworld::graphs::GraphExecutorConfig::WorkerCountStrategy) ((arg1)->worker_strategy);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphExecutorConfig_worker_count_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  std::optional< size_t > *arg2 = (std::optional< size_t > *) 0 ;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  arg2 = (std::optional< size_t > *) carg2;
  if (arg1) (arg1)->worker_count = *arg2;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_worker_count_get(SwigObj* carg1) {
  std::optional< size_t > *cppresult;
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  cppresult = (std::optional< size_t > *)& ((arg1)->worker_count);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphExecutorConfig_core_multiplier_set(SwigObj* carg1, float carg2) {
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  float arg2 ;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->core_multiplier = arg2;
}


SWIGEXPORTC float inworld_GraphExecutorConfig_core_multiplier_get(SwigObj* carg1) {
  float cppresult;
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  float result;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  cppresult = (float) ((arg1)->core_multiplier);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphExecutorConfig_graph_manager_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  inworld::graphs::GraphManagerConfig *arg2 = (inworld::graphs::GraphManagerConfig *) 0 ;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  arg2 = (inworld::graphs::GraphManagerConfig *) carg2;
  if (arg1) (arg1)->graph_manager_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_graph_manager_config_get(SwigObj* carg1) {
  inworld::graphs::GraphManagerConfig *cppresult;
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  cppresult = (inworld::graphs::GraphManagerConfig *)& ((arg1)->graph_manager_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_Default() {
  inworld::graphs::GraphExecutorConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::GraphExecutorConfig *) &inworld::graphs::GraphExecutorConfig::Default();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_WithFixedWorkers(size_t carg1) {
  inworld::graphs::GraphExecutorConfig cppresult;
  size_t arg1 ;
  SwigObj* result;
  
  arg1 = (size_t) carg1;
  cppresult = inworld::graphs::GraphExecutorConfig::WithFixedWorkers(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new inworld::graphs::GraphExecutorConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_WithSystemCores_f(float carg1) {
  inworld::graphs::GraphExecutorConfig cppresult;
  float arg1 ;
  SwigObj* result;
  
  arg1 = (float) carg1;
  cppresult = inworld::graphs::GraphExecutorConfig::WithSystemCores(arg1);
  result = (SwigObj*)new inworld::graphs::GraphExecutorConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_WithSystemCores() {
  inworld::graphs::GraphExecutorConfig cppresult;
  SwigObj* result;
  
  cppresult = inworld::graphs::GraphExecutorConfig::WithSystemCores();
  result = (SwigObj*)new inworld::graphs::GraphExecutorConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_WithGraphManager(SwigObj* carg1) {
  inworld::graphs::GraphExecutorConfig cppresult;
  inworld::graphs::GraphManagerConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::graphs::GraphManagerConfig *) carg1;
  
  cppresult = inworld::graphs::GraphExecutorConfig::WithGraphManager((inworld::graphs::GraphManagerConfig const &)*arg1);
  result = (SwigObj*)new inworld::graphs::GraphExecutorConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_WithLocalGraphManager() {
  inworld::graphs::GraphExecutorConfig cppresult;
  SwigObj* result;
  
  cppresult = inworld::graphs::GraphExecutorConfig::WithLocalGraphManager();
  result = (SwigObj*)new inworld::graphs::GraphExecutorConfig(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_GraphExecutorConfig_new() {
  inworld::graphs::GraphExecutorConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::GraphExecutorConfig *)new inworld::graphs::GraphExecutorConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GraphExecutorConfig_delete(SwigObj* carg1) {
  inworld::graphs::GraphExecutorConfig *arg1 = (inworld::graphs::GraphExecutorConfig *) 0 ;
  
  arg1 = (inworld::graphs::GraphExecutorConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPHttpAuthConfig_api_key_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::MCPHttpAuthConfig *arg1 = (inworld::graphs::MCPHttpAuthConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MCPHttpAuthConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->api_key = *arg2;
}


SWIGEXPORTC const char * inworld_MCPHttpAuthConfig_api_key_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::MCPHttpAuthConfig *arg1 = (inworld::graphs::MCPHttpAuthConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::MCPHttpAuthConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->api_key);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPHttpAuthConfig_new() {
  inworld::graphs::MCPHttpAuthConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPHttpAuthConfig *)new inworld::graphs::MCPHttpAuthConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MCPHttpAuthConfig_delete(SwigObj* carg1) {
  inworld::graphs::MCPHttpAuthConfig *arg1 = (inworld::graphs::MCPHttpAuthConfig *) 0 ;
  
  arg1 = (inworld::graphs::MCPHttpAuthConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPStdioAuthConfig_set(SwigObj* carg1, const char * carg2, const char * carg3) {
  std::string temp2 ;
  std::string temp3 ;
  inworld::graphs::MCPStdioAuthConfig *arg1 = (inworld::graphs::MCPStdioAuthConfig *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (inworld::graphs::MCPStdioAuthConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  inworld_inworld_graphs_MCPStdioAuthConfig_set__SWIG(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORTC SwigObj* inworld_MCPStdioAuthConfig_new() {
  inworld::graphs::MCPStdioAuthConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPStdioAuthConfig *)new inworld::graphs::MCPStdioAuthConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MCPStdioAuthConfig_delete(SwigObj* carg1) {
  inworld::graphs::MCPStdioAuthConfig *arg1 = (inworld::graphs::MCPStdioAuthConfig *) 0 ;
  
  arg1 = (inworld::graphs::MCPStdioAuthConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPAuthConfig_set_http_auth_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::MCPAuthConfig *arg1 = (inworld::graphs::MCPAuthConfig *) 0 ;
  inworld::graphs::MCPHttpAuthConfig *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MCPAuthConfig *) carg1;
  
  arg2 = (inworld::graphs::MCPHttpAuthConfig *) carg2;
  
  inworld_inworld_graphs_MCPAuthConfig_set_http_auth_config__SWIG(arg1,(inworld::graphs::MCPHttpAuthConfig const &)*arg2);
}


SWIGEXPORTC void inworld_MCPAuthConfig_set_stdio_auth_config(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::MCPAuthConfig *arg1 = (inworld::graphs::MCPAuthConfig *) 0 ;
  inworld::graphs::MCPStdioAuthConfig *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MCPAuthConfig *) carg1;
  
  arg2 = (inworld::graphs::MCPStdioAuthConfig *) carg2;
  
  inworld_inworld_graphs_MCPAuthConfig_set_stdio_auth_config__SWIG(arg1,(inworld::graphs::MCPStdioAuthConfig const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_MCPAuthConfig_new() {
  inworld::graphs::MCPAuthConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPAuthConfig *)new inworld::graphs::MCPAuthConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MCPAuthConfig_delete(SwigObj* carg1) {
  inworld::graphs::MCPAuthConfig *arg1 = (inworld::graphs::MCPAuthConfig *) 0 ;
  
  arg1 = (inworld::graphs::MCPAuthConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPSessionCreationConfig_transport_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::MCPSessionCreationConfig *arg1 = (inworld::graphs::MCPSessionCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MCPSessionCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->transport = *arg2;
}


SWIGEXPORTC const char * inworld_MCPSessionCreationConfig_transport_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::MCPSessionCreationConfig *arg1 = (inworld::graphs::MCPSessionCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::MCPSessionCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->transport);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_MCPSessionCreationConfig_endpoint_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::MCPSessionCreationConfig *arg1 = (inworld::graphs::MCPSessionCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MCPSessionCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->endpoint = *arg2;
}


SWIGEXPORTC const char * inworld_MCPSessionCreationConfig_endpoint_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::MCPSessionCreationConfig *arg1 = (inworld::graphs::MCPSessionCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::MCPSessionCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->endpoint);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_MCPSessionCreationConfig_auth_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::MCPSessionCreationConfig *arg1 = (inworld::graphs::MCPSessionCreationConfig *) 0 ;
  inworld::graphs::MCPAuthConfig *arg2 = (inworld::graphs::MCPAuthConfig *) 0 ;
  
  arg1 = (inworld::graphs::MCPSessionCreationConfig *) carg1;
  arg2 = (inworld::graphs::MCPAuthConfig *) carg2;
  if (arg1) (arg1)->auth_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MCPSessionCreationConfig_auth_config_get(SwigObj* carg1) {
  inworld::graphs::MCPAuthConfig *cppresult;
  inworld::graphs::MCPSessionCreationConfig *arg1 = (inworld::graphs::MCPSessionCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::MCPSessionCreationConfig *) carg1;
  cppresult = (inworld::graphs::MCPAuthConfig *)& ((arg1)->auth_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPSessionCreationConfig_new() {
  inworld::graphs::MCPSessionCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPSessionCreationConfig *)new inworld::graphs::MCPSessionCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MCPSessionCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::MCPSessionCreationConfig *arg1 = (inworld::graphs::MCPSessionCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::MCPSessionCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPClientCreationConfig_session_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::MCPClientCreationConfig *arg1 = (inworld::graphs::MCPClientCreationConfig *) 0 ;
  inworld::graphs::MCPSessionCreationConfig *arg2 = (inworld::graphs::MCPSessionCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::MCPClientCreationConfig *) carg1;
  arg2 = (inworld::graphs::MCPSessionCreationConfig *) carg2;
  if (arg1) (arg1)->session_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MCPClientCreationConfig_session_config_get(SwigObj* carg1) {
  inworld::graphs::MCPSessionCreationConfig *cppresult;
  inworld::graphs::MCPClientCreationConfig *arg1 = (inworld::graphs::MCPClientCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::MCPClientCreationConfig *) carg1;
  cppresult = (inworld::graphs::MCPSessionCreationConfig *)& ((arg1)->session_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPClientCreationConfig_new() {
  inworld::graphs::MCPClientCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPClientCreationConfig *)new inworld::graphs::MCPClientCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MCPClientCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::MCPClientCreationConfig *arg1 = (inworld::graphs::MCPClientCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::MCPClientCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPClientFactory_delete(SwigObj* carg1) {
  inworld::graphs::MCPClientFactory *arg1 = (inworld::graphs::MCPClientFactory *) 0 ;
  
  arg1 = (inworld::graphs::MCPClientFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_MCPClientFactory_CreateMCPClient(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > > cppresult;
  inworld::graphs::MCPClientFactory *arg1 = (inworld::graphs::MCPClientFactory *) 0 ;
  inworld::graphs::MCPClientCreationConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::MCPClientFactory *) carg1;
  
  arg2 = (inworld::graphs::MCPClientCreationConfig *) carg2;
  
  cppresult = inworld_inworld_graphs_MCPClientFactory_CreateMCPClient__SWIG(arg1,(inworld::graphs::MCPClientCreationConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPClientInterface const > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPClientFactory_new() {
  inworld::graphs::MCPClientFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPClientFactory *)new inworld::graphs::MCPClientFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPSessionInterface_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPSessionInterface_new_rcstd_shared_ptr_Sl_inworld_graphs_MCPSessionInterface_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *cppresult;
  std::shared_ptr< inworld::graphs::MCPSessionInterface > empty1 ;
  std::shared_ptr< inworld::graphs::MCPSessionInterface > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::MCPSessionInterface>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > >((std::shared_ptr< inworld::graphs::MCPSessionInterface > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPSessionInterface_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_MCPSessionInterface_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPSessionInterface_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_MCPSessionInterface_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MCPSessionInterface > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MCPSessionInterface >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_MCPSessionInterface_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPSessionInterface_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MCPSessionInterface > *smartarg1 = 0 ;
  inworld::graphs::MCPSessionInterface *arg1 = (inworld::graphs::MCPSessionInterface *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPSessionInterface > *)carg1;
  arg1 = (inworld::graphs::MCPSessionInterface *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC SwigObj* inworld_MCPSessionInterface_GetResponse(SwigObj* carg1, const char * carg2) {
  absl::StatusOr< std::string > cppresult;
  std::shared_ptr< inworld::graphs::MCPSessionInterface const > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::MCPSessionInterface *arg1 = (inworld::graphs::MCPSessionInterface *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPSessionInterface > *)carg1;
  arg1 = (inworld::graphs::MCPSessionInterface *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  cppresult = ((inworld::graphs::MCPSessionInterface const *)arg1)->GetResponse((std::string const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::string >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_MCPSessionInterface_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MCPSessionInterface const > *smartarg1 = 0 ;
  inworld::graphs::MCPSessionInterface *arg1 = (inworld::graphs::MCPSessionInterface *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPSessionInterface > *)carg1;
  arg1 = (inworld::graphs::MCPSessionInterface *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MCPSessionInterface_is_valid__SWIG((inworld::graphs::MCPSessionInterface const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MCPSessionFactory_delete(SwigObj* carg1) {
  inworld::graphs::MCPSessionFactory *arg1 = (inworld::graphs::MCPSessionFactory *) 0 ;
  
  arg1 = (inworld::graphs::MCPSessionFactory *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_MCPSessionFactory_CreateMCPSession(SwigObj* carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > > cppresult;
  inworld::graphs::MCPSessionFactory *arg1 = (inworld::graphs::MCPSessionFactory *) 0 ;
  inworld::graphs::MCPSessionCreationConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::MCPSessionFactory *) carg1;
  
  arg2 = (inworld::graphs::MCPSessionCreationConfig *) carg2;
  
  cppresult = inworld_inworld_graphs_MCPSessionFactory_CreateMCPSession__SWIG(arg1,(inworld::graphs::MCPSessionCreationConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPSessionInterface > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPSessionFactory_new() {
  inworld::graphs::MCPSessionFactory *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPSessionFactory *)new inworld::graphs::MCPSessionFactory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TypedNode_ListToolCallsResults_ListToolCallData_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_ListToolCallsResults_ListToolCallData_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::ListToolCallsResults,inworld::graphs::ListToolCallData > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_TypedNode_ListToolsData_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::ListToolsData,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::ListToolsData,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::ListToolsData,inworld::graphs::Text > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::ListToolsData,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::ListToolsData,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_ListToolsData_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::ListToolsData,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::ListToolsData,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::ListToolsData,inworld::graphs::Text > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::ListToolsData,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::ListToolsData,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::ListToolsData,inworld::graphs::Text > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPListToolsNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPListToolsNode_new_rcstd_shared_ptr_Sl_inworld_graphs_MCPListToolsNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *cppresult;
  std::shared_ptr< inworld::graphs::MCPListToolsNode > empty1 ;
  std::shared_ptr< inworld::graphs::MCPListToolsNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::MCPListToolsNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > >((std::shared_ptr< inworld::graphs::MCPListToolsNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPListToolsNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_MCPListToolsNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPListToolsNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPListToolsNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MCPListToolsNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MCPListToolsNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_MCPListToolsNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPCallToolNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPCallToolNode_new_rcstd_shared_ptr_Sl_inworld_graphs_MCPCallToolNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *cppresult;
  std::shared_ptr< inworld::graphs::MCPCallToolNode > empty1 ;
  std::shared_ptr< inworld::graphs::MCPCallToolNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::MCPCallToolNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > >((std::shared_ptr< inworld::graphs::MCPCallToolNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPCallToolNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_MCPCallToolNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPCallToolNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MCPCallToolNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MCPCallToolNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MCPCallToolNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_MCPCallToolNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_ListToolCallsResults_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_ListToolCallsResults_new_rcstd_shared_ptr_Sl_inworld_graphs_ListToolCallsResults_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *cppresult;
  std::shared_ptr< inworld::graphs::ListToolCallsResults > empty1 ;
  std::shared_ptr< inworld::graphs::ListToolCallsResults > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::ListToolCallsResults>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > >((std::shared_ptr< inworld::graphs::ListToolCallsResults > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_ListToolCallsResults_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_ListToolCallsResults_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_ListToolCallsResults_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_ListToolCallsResults_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::ListToolCallsResults > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::ListToolCallsResults >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_ListToolCallsResults_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MCPListToolsNodeExecutionConfig_mcp_component_id_set(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::MCPListToolsNodeExecutionConfig *arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->mcp_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_MCPListToolsNodeExecutionConfig_mcp_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNodeExecutionConfig *arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) & ((arg1)->mcp_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC bool inworld_MCPListToolsNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNodeExecutionConfig *arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPListToolsNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MCPListToolsNodeExecutionConfig_is_valid__SWIG((inworld::graphs::MCPListToolsNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPListToolsNodeExecutionConfig_new() {
  inworld::graphs::MCPListToolsNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPListToolsNodeExecutionConfig *)new inworld::graphs::MCPListToolsNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_MCPListToolsNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNodeExecutionConfig *arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_MCPListToolsNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNodeExecutionConfig *arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_MCPListToolsNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNodeExecutionConfig *arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MCPListToolsNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNodeExecutionConfig *arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MCPListToolsNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNodeExecutionConfig *arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPListToolsNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::graphs::MCPListToolsNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  inworld::graphs::MCPListToolsNode *arg1 = (inworld::graphs::MCPListToolsNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPListToolsNode > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;
  
  try {
    cppresult = ((inworld::graphs::MCPListToolsNode const *)arg1)->Process(*arg2,(std::vector< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_MCPListToolsNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MCPListToolsNode const > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNode *arg1 = (inworld::graphs::MCPListToolsNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPListToolsNode > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MCPListToolsNode_is_valid__SWIG((inworld::graphs::MCPListToolsNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPListToolsNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_MCPListToolsNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::MCPListToolsNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPListToolsNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_MCPListToolsNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MCPListToolsNode > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNode *arg1 = (inworld::graphs::MCPListToolsNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPListToolsNode > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_MCPListToolsNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::MCPListToolsNode const > *smartarg1 = 0 ;
  inworld::graphs::MCPListToolsNode *arg1 = (inworld::graphs::MCPListToolsNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPListToolsNode > *)carg1;
  arg1 = (inworld::graphs::MCPListToolsNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::MCPListToolsNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_MCPCallToolNodeExecutionConfig_mcp_component_id_set(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::MCPCallToolNodeExecutionConfig *arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->mcp_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_MCPCallToolNodeExecutionConfig_mcp_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNodeExecutionConfig *arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) & ((arg1)->mcp_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC bool inworld_MCPCallToolNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNodeExecutionConfig *arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPCallToolNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MCPCallToolNodeExecutionConfig_is_valid__SWIG((inworld::graphs::MCPCallToolNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPCallToolNodeExecutionConfig_new() {
  inworld::graphs::MCPCallToolNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MCPCallToolNodeExecutionConfig *)new inworld::graphs::MCPCallToolNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_MCPCallToolNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNodeExecutionConfig *arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_MCPCallToolNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNodeExecutionConfig *arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_MCPCallToolNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNodeExecutionConfig *arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MCPCallToolNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNodeExecutionConfig *arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MCPCallToolNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNodeExecutionConfig *arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPCallToolNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > > cppresult;
  std::shared_ptr< inworld::graphs::MCPCallToolNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::ListToolCallData > empty3 ;
  inworld::graphs::MCPCallToolNode *arg1 = (inworld::graphs::MCPCallToolNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::ListToolCallData > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPCallToolNode > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::ListToolCallData>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::MCPCallToolNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::ListToolCallData > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::ListToolCallsResults > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_MCPCallToolNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MCPCallToolNode const > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNode *arg1 = (inworld::graphs::MCPCallToolNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPCallToolNode > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MCPCallToolNode_is_valid__SWIG((inworld::graphs::MCPCallToolNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MCPCallToolNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_MCPCallToolNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::MCPCallToolNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MCPCallToolNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_MCPCallToolNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MCPCallToolNode > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNode *arg1 = (inworld::graphs::MCPCallToolNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MCPCallToolNode > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_MCPCallToolNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::MCPCallToolNode const > *smartarg1 = 0 ;
  inworld::graphs::MCPCallToolNode *arg1 = (inworld::graphs::MCPCallToolNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MCPCallToolNode > *)carg1;
  arg1 = (inworld::graphs::MCPCallToolNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::MCPCallToolNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatNode_new_rcstd_shared_ptr_Sl_inworld_graphs_LLMChatNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNode > empty1 ;
  std::shared_ptr< inworld::graphs::LLMChatNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::LLMChatNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > >((std::shared_ptr< inworld::graphs::LLMChatNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_LLMChatNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMChatNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMChatNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_LLMChatNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatResponse_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatResponse_new_rcstd_shared_ptr_Sl_inworld_graphs_LLMChatResponse_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatResponse > empty1 ;
  std::shared_ptr< inworld::graphs::LLMChatResponse > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::LLMChatResponse>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > >((std::shared_ptr< inworld::graphs::LLMChatResponse > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatResponse_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_LLMChatResponse_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatResponse_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatResponse_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMChatResponse > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMChatResponse >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_LLMChatResponse_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_new() {
  std::optional< inworld::LLMCreationConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::LLMCreationConfig > *)new std::optional< inworld::LLMCreationConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_new_rcinworld_LLMCreationConfig(SwigObj* carg1) {
  std::optional< inworld::LLMCreationConfig > *cppresult;
  inworld::LLMCreationConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::LLMCreationConfig *) carg1;
  
  cppresult = (std::optional< inworld::LLMCreationConfig > *)new std::optional< inworld::LLMCreationConfig >((inworld::LLMCreationConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_copy(SwigObj* carg1) {
  std::optional< inworld::LLMCreationConfig > *cppresult;
  std::optional< inworld::LLMCreationConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  
  cppresult = (std::optional< inworld::LLMCreationConfig > *)new std::optional< inworld::LLMCreationConfig >((std::optional< inworld::LLMCreationConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LLMCreationConfig_delete(SwigObj* carg1) {
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_LLMCreationConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::LLMCreationConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_value(SwigObj* carg1) {
  inworld::LLMCreationConfig *cppresult;
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  cppresult = (inworld::LLMCreationConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_valueConst(SwigObj* carg1) {
  inworld::LLMCreationConfig *cppresult;
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  cppresult = (inworld::LLMCreationConfig *) &((std::optional< inworld::LLMCreationConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::LLMCreationConfig cppresult;
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  inworld::LLMCreationConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  
  arg2 = (inworld::LLMCreationConfig *) carg2;
  
  cppresult = ((std::optional< inworld::LLMCreationConfig > const *)arg1)->value_or((inworld::LLMCreationConfig const &)*arg2);
  result = (SwigObj*)new inworld::LLMCreationConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_LLMCreationConfig_reset(SwigObj* carg1) {
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_get(SwigObj* carg1) {
  inworld::LLMCreationConfig *cppresult;
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  cppresult = (inworld::LLMCreationConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_getConst(SwigObj* carg1) {
  inworld::LLMCreationConfig *cppresult;
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  cppresult = (inworld::LLMCreationConfig *) &((std::optional< inworld::LLMCreationConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_LLMCreationConfig_get_value(SwigObj* carg1) {
  inworld::LLMCreationConfig *cppresult;
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  cppresult = (inworld::LLMCreationConfig *) &inworld_std_optional_Sl_inworld_LLMCreationConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_LLMCreationConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::LLMCreationConfig > *arg1 = (std::optional< inworld::LLMCreationConfig > *) 0 ;
  inworld::LLMCreationConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::LLMCreationConfig > *) carg1;
  
  arg2 = (inworld::LLMCreationConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_LLMCreationConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_new() {
  std::optional< std::vector< inworld::LLMRoutingConfig > > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< std::vector< inworld::LLMRoutingConfig > > *)new std::optional< std::vector< inworld::LLMRoutingConfig > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_new_rcstd_vector_Sl_inworld_LLMRoutingConfig_Sg_(SwigObj* carg1) {
  std::optional< std::vector< inworld::LLMRoutingConfig > > *cppresult;
  std::vector< inworld::LLMRoutingConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::vector< inworld::LLMRoutingConfig > *) carg1;
  
  cppresult = (std::optional< std::vector< inworld::LLMRoutingConfig > > *)new std::optional< std::vector< inworld::LLMRoutingConfig > >((std::vector< inworld::LLMRoutingConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_copy(SwigObj* carg1) {
  std::optional< std::vector< inworld::LLMRoutingConfig > > *cppresult;
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  
  cppresult = (std::optional< std::vector< inworld::LLMRoutingConfig > > *)new std::optional< std::vector< inworld::LLMRoutingConfig > >((std::optional< std::vector< inworld::LLMRoutingConfig > > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_vector_LLMRoutingConfig_delete(SwigObj* carg1) {
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_vector_LLMRoutingConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  bool result;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  cppresult = (bool)((std::optional< std::vector< inworld::LLMRoutingConfig > > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_value(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *cppresult;
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  cppresult = (std::vector< inworld::LLMRoutingConfig > *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_valueConst(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *cppresult;
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  cppresult = (std::vector< inworld::LLMRoutingConfig > *) &((std::optional< std::vector< inworld::LLMRoutingConfig > > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::LLMRoutingConfig > cppresult;
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  std::vector< inworld::LLMRoutingConfig > *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  
  arg2 = (std::vector< inworld::LLMRoutingConfig > *) carg2;
  
  cppresult = ((std::optional< std::vector< inworld::LLMRoutingConfig > > const *)arg1)->value_or((std::vector< inworld::LLMRoutingConfig > const &)*arg2);
  result = (SwigObj*)new std::vector< inworld::LLMRoutingConfig >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_vector_LLMRoutingConfig_reset(SwigObj* carg1) {
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_get(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *cppresult;
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  cppresult = (std::vector< inworld::LLMRoutingConfig > *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_getConst(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *cppresult;
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  cppresult = (std::vector< inworld::LLMRoutingConfig > *) &((std::optional< std::vector< inworld::LLMRoutingConfig > > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_vector_LLMRoutingConfig_get_value(SwigObj* carg1) {
  std::vector< inworld::LLMRoutingConfig > *cppresult;
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  cppresult = (std::vector< inworld::LLMRoutingConfig > *) &inworld_std_optional_Sl_std_vector_Sl_inworld_LLMRoutingConfig_Sg__Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_vector_LLMRoutingConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< std::vector< inworld::LLMRoutingConfig > > *arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) 0 ;
  std::vector< inworld::LLMRoutingConfig > *arg2 = 0 ;
  
  arg1 = (std::optional< std::vector< inworld::LLMRoutingConfig > > *) carg1;
  
  arg2 = (std::vector< inworld::LLMRoutingConfig > *) carg2;
  
  inworld_std_optional_Sl_std_vector_Sl_inworld_LLMRoutingConfig_Sg__Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_TypedNode_LLMChatResponse_LLMChatRequest_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_LLMChatResponse_LLMChatRequest_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::LLMChatResponse,inworld::graphs::LLMChatRequest > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_LLMChatNodeExecutionConfig_llm_component_id_set(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->llm_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_LLMChatNodeExecutionConfig_llm_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) & ((arg1)->llm_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_LLMChatNodeExecutionConfig_text_generation_config_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  std::optional< inworld::TextGenerationConfig > *arg2 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::optional< inworld::TextGenerationConfig > *) carg2;
  if (arg1) (arg1)->text_generation_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMChatNodeExecutionConfig_text_generation_config_get(SwigObj* carg1) {
  std::optional< inworld::TextGenerationConfig > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::optional< inworld::TextGenerationConfig > *)& ((arg1)->text_generation_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMChatNodeExecutionConfig_stream_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->stream = arg2;
}


SWIGEXPORTC bool inworld_LLMChatNodeExecutionConfig_stream_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->stream);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMChatNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMChatNodeExecutionConfig_is_valid__SWIG((inworld::graphs::LLMChatNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatNodeExecutionConfig_new() {
  inworld::graphs::LLMChatNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::LLMChatNodeExecutionConfig *)new inworld::graphs::LLMChatNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_LLMChatNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_LLMChatNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_LLMChatNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMChatNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMChatNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > > cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::LLMChatRequest > empty3 ;
  inworld::graphs::LLMChatNode *arg1 = (inworld::graphs::LLMChatNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::LLMChatRequest > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatNode > *)carg1;
  arg1 = (inworld::graphs::LLMChatNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::LLMChatRequest>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::LLMChatNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::LLMChatRequest > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatResponse > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_LLMChatNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNode const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNode *arg1 = (inworld::graphs::LLMChatNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatNode > *)carg1;
  arg1 = (inworld::graphs::LLMChatNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMChatNode_is_valid__SWIG((inworld::graphs::LLMChatNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_LLMChatNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::LLMChatNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_LLMChatNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMChatNode > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNode *arg1 = (inworld::graphs::LLMChatNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatNode > *)carg1;
  arg1 = (inworld::graphs::LLMChatNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_LLMChatNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatNode const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatNode *arg1 = (inworld::graphs::LLMChatNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatNode > *)carg1;
  arg1 = (inworld::graphs::LLMChatNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::LLMChatNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionNode_new_rcstd_shared_ptr_Sl_inworld_graphs_LLMCompletionNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNode > empty1 ;
  std::shared_ptr< inworld::graphs::LLMCompletionNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::LLMCompletionNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > >((std::shared_ptr< inworld::graphs::LLMCompletionNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_LLMCompletionNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMCompletionNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMCompletionNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_LLMCompletionNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionResponse_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionResponse_new_rcstd_shared_ptr_Sl_inworld_graphs_LLMCompletionResponse_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionResponse > empty1 ;
  std::shared_ptr< inworld::graphs::LLMCompletionResponse > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::LLMCompletionResponse>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > >((std::shared_ptr< inworld::graphs::LLMCompletionResponse > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionResponse_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_LLMCompletionResponse_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionResponse_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMCompletionResponse_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMCompletionResponse >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_LLMCompletionResponse_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TypedNode_LLMCompletionResponse_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::LLMCompletionResponse,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::LLMCompletionResponse,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::LLMCompletionResponse,inworld::graphs::Text > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::LLMCompletionResponse,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::LLMCompletionResponse,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_LLMCompletionResponse_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::LLMCompletionResponse,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::LLMCompletionResponse,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::LLMCompletionResponse,inworld::graphs::Text > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::LLMCompletionResponse,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::LLMCompletionResponse,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::LLMCompletionResponse,inworld::graphs::Text > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_LLMCompletionNodeExecutionConfig_llm_component_id_set(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->llm_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_LLMCompletionNodeExecutionConfig_llm_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) & ((arg1)->llm_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_LLMCompletionNodeExecutionConfig_text_generation_config_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  std::optional< inworld::TextGenerationConfig > *arg2 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::optional< inworld::TextGenerationConfig > *) carg2;
  if (arg1) (arg1)->text_generation_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMCompletionNodeExecutionConfig_text_generation_config_get(SwigObj* carg1) {
  std::optional< inworld::TextGenerationConfig > *cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::optional< inworld::TextGenerationConfig > *)& ((arg1)->text_generation_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMCompletionNodeExecutionConfig_stream_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->stream = arg2;
}


SWIGEXPORTC bool inworld_LLMCompletionNodeExecutionConfig_stream_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->stream);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMCompletionNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMCompletionNodeExecutionConfig_is_valid__SWIG((inworld::graphs::LLMCompletionNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMCompletionNodeExecutionConfig_new() {
  inworld::graphs::LLMCompletionNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::LLMCompletionNodeExecutionConfig *)new inworld::graphs::LLMCompletionNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_LLMCompletionNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_LLMCompletionNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_LLMCompletionNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMCompletionNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMCompletionNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNodeExecutionConfig *arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMCompletionNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > > cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > empty3 ;
  inworld::graphs::LLMCompletionNode *arg1 = (inworld::graphs::LLMCompletionNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionNode > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Text>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::LLMCompletionNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::Text > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionResponse > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_LLMCompletionNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNode const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNode *arg1 = (inworld::graphs::LLMCompletionNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionNode > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMCompletionNode_is_valid__SWIG((inworld::graphs::LLMCompletionNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMCompletionNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_LLMCompletionNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::LLMCompletionNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMCompletionNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_LLMCompletionNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMCompletionNode > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNode *arg1 = (inworld::graphs::LLMCompletionNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMCompletionNode > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_LLMCompletionNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::LLMCompletionNode const > *smartarg1 = 0 ;
  inworld::graphs::LLMCompletionNode *arg1 = (inworld::graphs::LLMCompletionNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMCompletionNode > *)carg1;
  arg1 = (inworld::graphs::LLMCompletionNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::LLMCompletionNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_new() {
  std::optional< inworld::graphs::Condition > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::graphs::Condition > *)new std::optional< inworld::graphs::Condition >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_new_rcinworld_graphs_Condition(SwigObj* carg1) {
  std::optional< inworld::graphs::Condition > *cppresult;
  inworld::graphs::Condition *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::graphs::Condition *) carg1;
  
  cppresult = (std::optional< inworld::graphs::Condition > *)new std::optional< inworld::graphs::Condition >((inworld::graphs::Condition const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_copy(SwigObj* carg1) {
  std::optional< inworld::graphs::Condition > *cppresult;
  std::optional< inworld::graphs::Condition > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  
  cppresult = (std::optional< inworld::graphs::Condition > *)new std::optional< inworld::graphs::Condition >((std::optional< inworld::graphs::Condition > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_Condition_delete(SwigObj* carg1) {
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_Condition_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  cppresult = (bool)((std::optional< inworld::graphs::Condition > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_value(SwigObj* carg1) {
  inworld::graphs::Condition *cppresult;
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  cppresult = (inworld::graphs::Condition *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_valueConst(SwigObj* carg1) {
  inworld::graphs::Condition *cppresult;
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  cppresult = (inworld::graphs::Condition *) &((std::optional< inworld::graphs::Condition > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::Condition cppresult;
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  inworld::graphs::Condition *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  
  arg2 = (inworld::graphs::Condition *) carg2;
  
  cppresult = ((std::optional< inworld::graphs::Condition > const *)arg1)->value_or((inworld::graphs::Condition const &)*arg2);
  result = (SwigObj*)new inworld::graphs::Condition(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_Condition_reset(SwigObj* carg1) {
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_get(SwigObj* carg1) {
  inworld::graphs::Condition *cppresult;
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  cppresult = (inworld::graphs::Condition *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_getConst(SwigObj* carg1) {
  inworld::graphs::Condition *cppresult;
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  cppresult = (inworld::graphs::Condition *) &((std::optional< inworld::graphs::Condition > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_Condition_get_value(SwigObj* carg1) {
  inworld::graphs::Condition *cppresult;
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  cppresult = (inworld::graphs::Condition *) &inworld_std_optional_Sl_inworld_graphs_Condition_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_Condition_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::graphs::Condition > *arg1 = (std::optional< inworld::graphs::Condition > *) 0 ;
  inworld::graphs::Condition *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::graphs::Condition > *) carg1;
  
  arg2 = (inworld::graphs::Condition *) carg2;
  
  inworld_std_optional_Sl_inworld_graphs_Condition_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_Condition_intents_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::Condition *arg1 = (inworld::graphs::Condition *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (inworld::graphs::Condition *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->intents = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Condition_intents_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::graphs::Condition *arg1 = (inworld::graphs::Condition *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Condition *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->intents);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Condition_detect_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::Condition *arg1 = (inworld::graphs::Condition *) 0 ;
  std::optional< std::string > *arg2 = (std::optional< std::string > *) 0 ;
  
  arg1 = (inworld::graphs::Condition *) carg1;
  arg2 = (std::optional< std::string > *) carg2;
  if (arg1) (arg1)->detect = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Condition_detect_get(SwigObj* carg1) {
  std::optional< std::string > *cppresult;
  inworld::graphs::Condition *arg1 = (inworld::graphs::Condition *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Condition *) carg1;
  cppresult = (std::optional< std::string > *)& ((arg1)->detect);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Condition_required_goals_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::Condition *arg1 = (inworld::graphs::Condition *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (inworld::graphs::Condition *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->required_goals = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Condition_required_goals_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::graphs::Condition *arg1 = (inworld::graphs::Condition *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Condition *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->required_goals);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Condition_new() {
  inworld::graphs::Condition *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::Condition *)new inworld::graphs::Condition();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Condition_delete(SwigObj* carg1) {
  inworld::graphs::Condition *arg1 = (inworld::graphs::Condition *) 0 ;
  
  arg1 = (inworld::graphs::Condition *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_Goal_name_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORTC const char * inworld_Goal_name_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  cppresult = (std::string *) & ((arg1)->name);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_Goal_motivation_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  std::optional< std::string > *arg2 = (std::optional< std::string > *) 0 ;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  arg2 = (std::optional< std::string > *) carg2;
  if (arg1) (arg1)->motivation = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Goal_motivation_get(SwigObj* carg1) {
  std::optional< std::string > *cppresult;
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  cppresult = (std::optional< std::string > *)& ((arg1)->motivation);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Goal_repeatable_set(SwigObj* carg1, bool carg2) {
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  bool arg2 ;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->repeatable = arg2;
}


SWIGEXPORTC bool inworld_Goal_repeatable_get(SwigObj* carg1) {
  bool cppresult;
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  bool result;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  cppresult = (bool) ((arg1)->repeatable);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Goal_activation_condition_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  std::optional< inworld::graphs::Condition > *arg2 = (std::optional< inworld::graphs::Condition > *) 0 ;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  arg2 = (std::optional< inworld::graphs::Condition > *) carg2;
  if (arg1) (arg1)->activation_condition = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Goal_activation_condition_get(SwigObj* carg1) {
  std::optional< inworld::graphs::Condition > *cppresult;
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  cppresult = (std::optional< inworld::graphs::Condition > *)& ((arg1)->activation_condition);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Goal_completion_condition_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  std::optional< inworld::graphs::Condition > *arg2 = (std::optional< inworld::graphs::Condition > *) 0 ;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  arg2 = (std::optional< inworld::graphs::Condition > *) carg2;
  if (arg1) (arg1)->completion_condition = *arg2;
}


SWIGEXPORTC SwigObj* inworld_Goal_completion_condition_get(SwigObj* carg1) {
  std::optional< inworld::graphs::Condition > *cppresult;
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  cppresult = (std::optional< inworld::graphs::Condition > *)& ((arg1)->completion_condition);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Goal_new() {
  inworld::graphs::Goal *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::Goal *)new inworld::graphs::Goal();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Goal_delete(SwigObj* carg1) {
  inworld::graphs::Goal *arg1 = (inworld::graphs::Goal *) 0 ;
  
  arg1 = (inworld::graphs::Goal *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_GoalAdvancementNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_GoalAdvancementNode_new_rcstd_shared_ptr_Sl_inworld_graphs_GoalAdvancementNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNode > empty1 ;
  std::shared_ptr< inworld::graphs::GoalAdvancementNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::GoalAdvancementNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > >((std::shared_ptr< inworld::graphs::GoalAdvancementNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_GoalAdvancementNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_GoalAdvancementNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_GoalAdvancementNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_GoalAdvancementNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::GoalAdvancementNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_GoalAdvancementNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_vector_Goal_new() {
  std::vector< inworld::graphs::Goal > *cppresult;
  SwigObj* result;
  
  cppresult = (std::vector< inworld::graphs::Goal > *)new std::vector< inworld::graphs::Goal >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_vector_Goal_copy(SwigObj* carg1) {
  std::vector< inworld::graphs::Goal > *cppresult;
  std::vector< inworld::graphs::Goal > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  
  cppresult = (std::vector< inworld::graphs::Goal > *)new std::vector< inworld::graphs::Goal >((std::vector< inworld::graphs::Goal > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Goal_size(SwigObj* carg1) {
  std::vector< inworld::graphs::Goal >::size_type cppresult;
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  size_t result;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  cppresult = ((std::vector< inworld::graphs::Goal > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_vector_Goal_capacity(SwigObj* carg1) {
  std::vector< inworld::graphs::Goal >::size_type cppresult;
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  size_t result;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  cppresult = ((std::vector< inworld::graphs::Goal > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Goal_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  std::vector< inworld::graphs::Goal >::size_type arg2 ;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  arg2 = (std::vector< inworld::graphs::Goal >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_vector_Goal_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  bool result;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  cppresult = (bool)((std::vector< inworld::graphs::Goal > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Goal_clear(SwigObj* carg1) {
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_vector_Goal_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  std::vector< inworld::graphs::Goal >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  
  arg2 = (std::vector< inworld::graphs::Goal >::value_type *) carg2;
  
  (arg1)->push_back((std::vector< inworld::graphs::Goal >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_vector_Goal_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::graphs::Goal >::value_type *cppresult;
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  int arg2 ;
  SwigObj* result;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::graphs::Goal >::value_type *) &inworld_std_vector_Sl_inworld_graphs_Goal_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_vector_Goal_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  int arg2 ;
  std::vector< inworld::graphs::Goal >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  arg2 = (int) carg2;
  
  arg3 = (std::vector< inworld::graphs::Goal >::value_type *) carg3;
  
  inworld_std_vector_Sl_inworld_graphs_Goal_Sg__set__SWIG(arg1,arg2,(inworld::graphs::Goal const &)*arg3);
}


SWIGEXPORTC void inworld_vector_Goal_delete(SwigObj* carg1) {
  std::vector< inworld::graphs::Goal > *arg1 = (std::vector< inworld::graphs::Goal > *) 0 ;
  
  arg1 = (std::vector< inworld::graphs::Goal > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_new() {
  std::optional< inworld::TextGenerationConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::TextGenerationConfig > *)new std::optional< inworld::TextGenerationConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_new_rcinworld_TextGenerationConfig(SwigObj* carg1) {
  std::optional< inworld::TextGenerationConfig > *cppresult;
  inworld::TextGenerationConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::TextGenerationConfig *) carg1;
  
  cppresult = (std::optional< inworld::TextGenerationConfig > *)new std::optional< inworld::TextGenerationConfig >((inworld::TextGenerationConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_copy(SwigObj* carg1) {
  std::optional< inworld::TextGenerationConfig > *cppresult;
  std::optional< inworld::TextGenerationConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  
  cppresult = (std::optional< inworld::TextGenerationConfig > *)new std::optional< inworld::TextGenerationConfig >((std::optional< inworld::TextGenerationConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_TextGenerationConfig_delete(SwigObj* carg1) {
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_TextGenerationConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::TextGenerationConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_value(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  cppresult = (inworld::TextGenerationConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_valueConst(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  cppresult = (inworld::TextGenerationConfig *) &((std::optional< inworld::TextGenerationConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::TextGenerationConfig cppresult;
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  inworld::TextGenerationConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  
  arg2 = (inworld::TextGenerationConfig *) carg2;
  
  cppresult = ((std::optional< inworld::TextGenerationConfig > const *)arg1)->value_or((inworld::TextGenerationConfig const &)*arg2);
  result = (SwigObj*)new inworld::TextGenerationConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_TextGenerationConfig_reset(SwigObj* carg1) {
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_get(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  cppresult = (inworld::TextGenerationConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_getConst(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  cppresult = (inworld::TextGenerationConfig *) &((std::optional< inworld::TextGenerationConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextGenerationConfig_get_value(SwigObj* carg1) {
  inworld::TextGenerationConfig *cppresult;
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  cppresult = (inworld::TextGenerationConfig *) &inworld_std_optional_Sl_inworld_TextGenerationConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_TextGenerationConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::TextGenerationConfig > *arg1 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  inworld::TextGenerationConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::TextGenerationConfig > *) carg1;
  
  arg2 = (inworld::TextGenerationConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_TextGenerationConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_GoalAdvancementNodeCreationConfig_goals_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::GoalAdvancementNodeCreationConfig *arg1 = (inworld::graphs::GoalAdvancementNodeCreationConfig *) 0 ;
  std::vector< inworld::graphs::Goal > *arg2 = (std::vector< inworld::graphs::Goal > *) 0 ;
  
  arg1 = (inworld::graphs::GoalAdvancementNodeCreationConfig *) carg1;
  arg2 = (std::vector< inworld::graphs::Goal > *) carg2;
  if (arg1) (arg1)->goals = *arg2;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancementNodeCreationConfig_goals_get(SwigObj* carg1) {
  std::vector< inworld::graphs::Goal > *cppresult;
  inworld::graphs::GoalAdvancementNodeCreationConfig *arg1 = (inworld::graphs::GoalAdvancementNodeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::GoalAdvancementNodeCreationConfig *) carg1;
  cppresult = (std::vector< inworld::graphs::Goal > *)& ((arg1)->goals);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancementNodeCreationConfig_new() {
  inworld::graphs::GoalAdvancementNodeCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::GoalAdvancementNodeCreationConfig *)new inworld::graphs::GoalAdvancementNodeCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GoalAdvancementNodeCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::GoalAdvancementNodeCreationConfig *arg1 = (inworld::graphs::GoalAdvancementNodeCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::GoalAdvancementNodeCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_GoalAdvancementNodeExecutionConfig_llm_component_id_set(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->llm_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_GoalAdvancementNodeExecutionConfig_llm_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) & ((arg1)->llm_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_GoalAdvancementNodeExecutionConfig_text_generation_config_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  std::optional< inworld::TextGenerationConfig > *arg2 = (std::optional< inworld::TextGenerationConfig > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::optional< inworld::TextGenerationConfig > *) carg2;
  if (arg1) (arg1)->text_generation_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancementNodeExecutionConfig_text_generation_config_get(SwigObj* carg1) {
  std::optional< inworld::TextGenerationConfig > *cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::optional< inworld::TextGenerationConfig > *)& ((arg1)->text_generation_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_GoalAdvancementNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_GoalAdvancementNodeExecutionConfig_is_valid__SWIG((inworld::graphs::GoalAdvancementNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancementNodeExecutionConfig_new() {
  inworld::graphs::GoalAdvancementNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)new inworld::graphs::GoalAdvancementNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_GoalAdvancementNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_GoalAdvancementNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_GoalAdvancementNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_GoalAdvancementNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancementNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeExecutionConfig *arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancementNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4, SwigObj* carg5, SwigObj* carg6, SwigObj* carg7, SwigObj* carg8, SwigObj* carg9, SwigObj* carg10, SwigObj* carg11) {
  SwigValueWrapper< absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancement > > > cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::EventHistory > empty3 ;
  std::shared_ptr< inworld::graphs::Json > empty4 ;
  std::shared_ptr< inworld::graphs::Text > empty5 ;
  std::shared_ptr< inworld::graphs::Text > empty6 ;
  std::shared_ptr< inworld::graphs::Text > empty7 ;
  std::shared_ptr< inworld::graphs::Text > empty8 ;
  std::shared_ptr< inworld::graphs::Text > empty9 ;
  inworld::graphs::GoalAdvancementNode *arg1 = (inworld::graphs::GoalAdvancementNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::EventHistory > *arg3 = 0 ;
  std::shared_ptr< inworld::graphs::Json > *arg4 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg5 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg6 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg7 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg8 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg9 = 0 ;
  std::shared_ptr< std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text > > *arg10 = 0 ;
  std::shared_ptr< std::optional< inworld::graphs::Text > > *arg11 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancementNode > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::EventHistory>*)carg3 : &empty3; 
  
  arg4 = carg4 ? (std::shared_ptr< inworld::graphs::Json>*)carg4 : &empty4; 
  
  arg5 = carg5 ? (std::shared_ptr< inworld::graphs::Text>*)carg5 : &empty5; 
  
  arg6 = carg6 ? (std::shared_ptr< inworld::graphs::Text>*)carg6 : &empty6; 
  
  arg7 = carg7 ? (std::shared_ptr< inworld::graphs::Text>*)carg7 : &empty7; 
  
  arg8 = carg8 ? (std::shared_ptr< inworld::graphs::Text>*)carg8 : &empty8; 
  
  arg9 = carg9 ? (std::shared_ptr< inworld::graphs::Text>*)carg9 : &empty9; 
  
  arg10 = (std::shared_ptr< std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text > > *) carg10;
  
  
  arg11 = (std::shared_ptr< std::optional< inworld::graphs::Text > > *) carg11;
  
  try {
    cppresult = ((inworld::graphs::GoalAdvancementNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::EventHistory > const &)*arg3,(std::shared_ptr< inworld::graphs::Json > const &)*arg4,(std::shared_ptr< inworld::graphs::Text > const &)*arg5,(std::shared_ptr< inworld::graphs::Text > const &)*arg6,(std::shared_ptr< inworld::graphs::Text > const &)*arg7,(std::shared_ptr< inworld::graphs::Text > const &)*arg8,(std::shared_ptr< inworld::graphs::Text > const &)*arg9,(std::shared_ptr< std::variant< inworld::graphs::MatchedIntents,inworld::graphs::Text > > const &)*arg10,(std::shared_ptr< std::optional< inworld::graphs::Text > > const &)*arg11);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancement > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_GoalAdvancementNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNode const > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNode *arg1 = (inworld::graphs::GoalAdvancementNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancementNode > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_GoalAdvancementNode_is_valid__SWIG((inworld::graphs::GoalAdvancementNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_GoalAdvancementNode_Create(const char * carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > empty3 ;
  std::string *arg1 = 0 ;
  inworld::graphs::GoalAdvancementNodeCreationConfig *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > *arg3 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::graphs::GoalAdvancementNodeCreationConfig *) carg2;
  
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig>*)carg3 : &empty3; 
  cppresult = inworld_inworld_graphs_GoalAdvancementNode_Create__SWIG((std::string const &)*arg1,(inworld::graphs::GoalAdvancementNodeCreationConfig const &)*arg2,(std::shared_ptr< inworld::graphs::GoalAdvancementNodeExecutionConfig > const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::GoalAdvancementNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_GoalAdvancementNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::GoalAdvancementNode > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNode *arg1 = (inworld::graphs::GoalAdvancementNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::GoalAdvancementNode > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_GoalAdvancementNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::GoalAdvancementNode const > *smartarg1 = 0 ;
  inworld::graphs::GoalAdvancementNode *arg1 = (inworld::graphs::GoalAdvancementNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::GoalAdvancementNode > *)carg1;
  arg1 = (inworld::graphs::GoalAdvancementNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::GoalAdvancementNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_TypedNode_MatchedIntents_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::MatchedIntents,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::MatchedIntents,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::MatchedIntents,inworld::graphs::Text > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::MatchedIntents,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::MatchedIntents,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_MatchedIntents_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::MatchedIntents,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::MatchedIntents,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::MatchedIntents,inworld::graphs::Text > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::MatchedIntents,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::MatchedIntents,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::MatchedIntents,inworld::graphs::Text > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_IntentNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_IntentNode_new_rcstd_shared_ptr_Sl_inworld_graphs_IntentNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *cppresult;
  std::shared_ptr< inworld::graphs::IntentNode > empty1 ;
  std::shared_ptr< inworld::graphs::IntentNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::IntentNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > >((std::shared_ptr< inworld::graphs::IntentNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_IntentNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_IntentNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_IntentNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_IntentNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::IntentNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::IntentNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_IntentNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedIntents_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedIntents_new_rcstd_shared_ptr_Sl_inworld_graphs_MatchedIntents_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *cppresult;
  std::shared_ptr< inworld::graphs::MatchedIntents > empty1 ;
  std::shared_ptr< inworld::graphs::MatchedIntents > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::MatchedIntents>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > >((std::shared_ptr< inworld::graphs::MatchedIntents > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedIntents_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_MatchedIntents_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedIntents_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedIntents_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MatchedIntents > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MatchedIntents >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_MatchedIntents_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_new() {
  std::optional< inworld::TextEmbedderCreationConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::TextEmbedderCreationConfig > *)new std::optional< inworld::TextEmbedderCreationConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_new_rcinworld_TextEmbedderCreationConfig(SwigObj* carg1) {
  std::optional< inworld::TextEmbedderCreationConfig > *cppresult;
  inworld::TextEmbedderCreationConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::TextEmbedderCreationConfig *) carg1;
  
  cppresult = (std::optional< inworld::TextEmbedderCreationConfig > *)new std::optional< inworld::TextEmbedderCreationConfig >((inworld::TextEmbedderCreationConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_copy(SwigObj* carg1) {
  std::optional< inworld::TextEmbedderCreationConfig > *cppresult;
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  
  cppresult = (std::optional< inworld::TextEmbedderCreationConfig > *)new std::optional< inworld::TextEmbedderCreationConfig >((std::optional< inworld::TextEmbedderCreationConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_TextEmbedderCreationConfig_delete(SwigObj* carg1) {
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_TextEmbedderCreationConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::TextEmbedderCreationConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_value(SwigObj* carg1) {
  inworld::TextEmbedderCreationConfig *cppresult;
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  cppresult = (inworld::TextEmbedderCreationConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_valueConst(SwigObj* carg1) {
  inworld::TextEmbedderCreationConfig *cppresult;
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  cppresult = (inworld::TextEmbedderCreationConfig *) &((std::optional< inworld::TextEmbedderCreationConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::TextEmbedderCreationConfig cppresult;
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  inworld::TextEmbedderCreationConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  
  arg2 = (inworld::TextEmbedderCreationConfig *) carg2;
  
  cppresult = ((std::optional< inworld::TextEmbedderCreationConfig > const *)arg1)->value_or((inworld::TextEmbedderCreationConfig const &)*arg2);
  result = (SwigObj*)new inworld::TextEmbedderCreationConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_TextEmbedderCreationConfig_reset(SwigObj* carg1) {
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_get(SwigObj* carg1) {
  inworld::TextEmbedderCreationConfig *cppresult;
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  cppresult = (inworld::TextEmbedderCreationConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_getConst(SwigObj* carg1) {
  inworld::TextEmbedderCreationConfig *cppresult;
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  cppresult = (inworld::TextEmbedderCreationConfig *) &((std::optional< inworld::TextEmbedderCreationConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_TextEmbedderCreationConfig_get_value(SwigObj* carg1) {
  inworld::TextEmbedderCreationConfig *cppresult;
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  cppresult = (inworld::TextEmbedderCreationConfig *) &inworld_std_optional_Sl_inworld_TextEmbedderCreationConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_TextEmbedderCreationConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::TextEmbedderCreationConfig > *arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) 0 ;
  inworld::TextEmbedderCreationConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::TextEmbedderCreationConfig > *) carg1;
  
  arg2 = (inworld::TextEmbedderCreationConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_TextEmbedderCreationConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_IntentNodeExecutionConfig_matcher_config_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::IntentNodeExecutionConfig *arg1 = (inworld::graphs::IntentNodeExecutionConfig *) 0 ;
  inworld::IntentMatcherConfig *arg2 = (inworld::IntentMatcherConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::IntentNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (inworld::IntentMatcherConfig *) carg2;
  if (arg1) (arg1)->matcher_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentNodeExecutionConfig_matcher_config_get(SwigObj* carg1) {
  inworld::IntentMatcherConfig *cppresult;
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::IntentNodeExecutionConfig *arg1 = (inworld::graphs::IntentNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::IntentNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (inworld::IntentMatcherConfig *)& ((arg1)->matcher_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_IntentNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::IntentNodeExecutionConfig *arg1 = (inworld::graphs::IntentNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::IntentNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::IntentNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_IntentNodeExecutionConfig_is_valid__SWIG((inworld::graphs::IntentNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentNodeExecutionConfig_new() {
  inworld::graphs::IntentNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::IntentNodeExecutionConfig *)new inworld::graphs::IntentNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_IntentNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::IntentNodeExecutionConfig *arg1 = (inworld::graphs::IntentNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::IntentNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_IntentNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::IntentNodeExecutionConfig *arg1 = (inworld::graphs::IntentNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::IntentNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_IntentNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::IntentNodeExecutionConfig *arg1 = (inworld::graphs::IntentNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::IntentNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::IntentNodeExecutionConfig *arg1 = (inworld::graphs::IntentNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::IntentNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::IntentNodeExecutionConfig *arg1 = (inworld::graphs::IntentNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::IntentNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentNodeCreationConfig_intents_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::IntentNodeCreationConfig *arg1 = (inworld::graphs::IntentNodeCreationConfig *) 0 ;
  std::vector< inworld::Intent > *arg2 = (std::vector< inworld::Intent > *) 0 ;
  
  arg1 = (inworld::graphs::IntentNodeCreationConfig *) carg1;
  arg2 = (std::vector< inworld::Intent > *) carg2;
  if (arg1) (arg1)->intents = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentNodeCreationConfig_intents_get(SwigObj* carg1) {
  std::vector< inworld::Intent > *cppresult;
  inworld::graphs::IntentNodeCreationConfig *arg1 = (inworld::graphs::IntentNodeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::IntentNodeCreationConfig *) carg1;
  cppresult = (std::vector< inworld::Intent > *)& ((arg1)->intents);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentNodeCreationConfig_embedder_component_id_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::IntentNodeCreationConfig *arg1 = (inworld::graphs::IntentNodeCreationConfig *) 0 ;
  std::optional< std::string > *arg2 = (std::optional< std::string > *) 0 ;
  
  arg1 = (inworld::graphs::IntentNodeCreationConfig *) carg1;
  arg2 = (std::optional< std::string > *) carg2;
  if (arg1) (arg1)->embedder_component_id = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentNodeCreationConfig_embedder_component_id_get(SwigObj* carg1) {
  std::optional< std::string > *cppresult;
  inworld::graphs::IntentNodeCreationConfig *arg1 = (inworld::graphs::IntentNodeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::IntentNodeCreationConfig *) carg1;
  cppresult = (std::optional< std::string > *)& ((arg1)->embedder_component_id);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentNodeCreationConfig_llm_component_id_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::IntentNodeCreationConfig *arg1 = (inworld::graphs::IntentNodeCreationConfig *) 0 ;
  std::optional< std::string > *arg2 = (std::optional< std::string > *) 0 ;
  
  arg1 = (inworld::graphs::IntentNodeCreationConfig *) carg1;
  arg2 = (std::optional< std::string > *) carg2;
  if (arg1) (arg1)->llm_component_id = *arg2;
}


SWIGEXPORTC SwigObj* inworld_IntentNodeCreationConfig_llm_component_id_get(SwigObj* carg1) {
  std::optional< std::string > *cppresult;
  inworld::graphs::IntentNodeCreationConfig *arg1 = (inworld::graphs::IntentNodeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::IntentNodeCreationConfig *) carg1;
  cppresult = (std::optional< std::string > *)& ((arg1)->llm_component_id);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentNodeCreationConfig_new() {
  inworld::graphs::IntentNodeCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::IntentNodeCreationConfig *)new inworld::graphs::IntentNodeCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_IntentNodeCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::IntentNodeCreationConfig *arg1 = (inworld::graphs::IntentNodeCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::IntentNodeCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_IntentNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > > cppresult;
  std::shared_ptr< inworld::graphs::IntentNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > empty3 ;
  inworld::graphs::IntentNode *arg1 = (inworld::graphs::IntentNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::IntentNode > *)carg1;
  arg1 = (inworld::graphs::IntentNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Text>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::IntentNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::Text > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedIntents > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_IntentNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::IntentNode const > *smartarg1 = 0 ;
  inworld::graphs::IntentNode *arg1 = (inworld::graphs::IntentNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::IntentNode > *)carg1;
  arg1 = (inworld::graphs::IntentNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_IntentNode_is_valid__SWIG((inworld::graphs::IntentNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_IntentNode_Create(const char * carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > empty4 ;
  std::string *arg1 = 0 ;
  inworld::CreationContext *arg2 = 0 ;
  inworld::graphs::IntentNodeCreationConfig *arg3 = 0 ;
  std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > *arg4 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::CreationContext *) carg2;
  
  
  arg3 = (inworld::graphs::IntentNodeCreationConfig *) carg3;
  
  
  arg4 = carg4 ? (std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig>*)carg4 : &empty4; 
  cppresult = inworld_inworld_graphs_IntentNode_Create__SWIG((std::string const &)*arg1,(inworld::CreationContext const &)*arg2,(inworld::graphs::IntentNodeCreationConfig const &)*arg3,(std::shared_ptr< inworld::graphs::IntentNodeExecutionConfig > const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::IntentNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_IntentNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::IntentNode > *smartarg1 = 0 ;
  inworld::graphs::IntentNode *arg1 = (inworld::graphs::IntentNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::IntentNode > *)carg1;
  arg1 = (inworld::graphs::IntentNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_IntentNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::IntentNode const > *smartarg1 = 0 ;
  inworld::graphs::IntentNode *arg1 = (inworld::graphs::IntentNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::IntentNode > *)carg1;
  arg1 = (inworld::graphs::IntentNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::IntentNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_TypedNode_KnowledgeRecords_Text_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_KnowledgeRecords_Text_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::Text,inworld::graphs::Text > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeNode_new_rcstd_shared_ptr_Sl_inworld_graphs_KnowledgeNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNode > empty1 ;
  std::shared_ptr< inworld::graphs::KnowledgeNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::KnowledgeNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > >((std::shared_ptr< inworld::graphs::KnowledgeNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_KnowledgeNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::KnowledgeNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::KnowledgeNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_KnowledgeNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeRecords_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeRecords_new_rcstd_shared_ptr_Sl_inworld_graphs_KnowledgeRecords_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeRecords > empty1 ;
  std::shared_ptr< inworld::graphs::KnowledgeRecords > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::KnowledgeRecords>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > >((std::shared_ptr< inworld::graphs::KnowledgeRecords > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeRecords_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_KnowledgeRecords_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeRecords_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KnowledgeRecords_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::KnowledgeRecords > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::KnowledgeRecords >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_KnowledgeRecords_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KnowledgeNodeCreationConfig_knowledge_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::KnowledgeNodeCreationConfig *arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->knowledge_id = *arg2;
}


SWIGEXPORTC const char * inworld_KnowledgeNodeCreationConfig_knowledge_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::KnowledgeNodeCreationConfig *arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->knowledge_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_KnowledgeNodeCreationConfig_knowledge_records_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::KnowledgeNodeCreationConfig *arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) carg1;
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->knowledge_records = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeNodeCreationConfig_knowledge_records_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  inworld::graphs::KnowledgeNodeCreationConfig *arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) carg1;
  cppresult = (std::vector< std::string > *)& ((arg1)->knowledge_records);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeNodeCreationConfig_knowledge_component_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::KnowledgeNodeCreationConfig *arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->knowledge_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_KnowledgeNodeCreationConfig_knowledge_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::KnowledgeNodeCreationConfig *arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->knowledge_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeNodeCreationConfig_new() {
  inworld::graphs::KnowledgeNodeCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::KnowledgeNodeCreationConfig *)new inworld::graphs::KnowledgeNodeCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeNodeCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::KnowledgeNodeCreationConfig *arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::KnowledgeNodeCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KnowledgeNodeExecutionConfig_knowledge_ids_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->knowledge_ids = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeNodeExecutionConfig_knowledge_ids_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< std::string > *)& ((arg1)->knowledge_ids);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeNodeExecutionConfig_retrieval_config_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  inworld::RetrievalConfig *arg2 = (inworld::RetrievalConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (inworld::RetrievalConfig *) carg2;
  if (arg1) (arg1)->retrieval_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeNodeExecutionConfig_retrieval_config_get(SwigObj* carg1) {
  inworld::RetrievalConfig *cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (inworld::RetrievalConfig *)& ((arg1)->retrieval_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_KnowledgeNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_KnowledgeNodeExecutionConfig_is_valid__SWIG((inworld::graphs::KnowledgeNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeNodeExecutionConfig_new() {
  inworld::graphs::KnowledgeNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::KnowledgeNodeExecutionConfig *)new inworld::graphs::KnowledgeNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_KnowledgeNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_KnowledgeNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KnowledgeNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNodeExecutionConfig *arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > empty3 ;
  inworld::graphs::KnowledgeNode *arg1 = (inworld::graphs::KnowledgeNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::KnowledgeNode > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Text>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::KnowledgeNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::Text > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_KnowledgeNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNode const > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNode *arg1 = (inworld::graphs::KnowledgeNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::KnowledgeNode > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_KnowledgeNode_is_valid__SWIG((inworld::graphs::KnowledgeNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KnowledgeNode_Create(const char * carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > empty4 ;
  std::string *arg1 = 0 ;
  inworld::CreationContext *arg2 = 0 ;
  inworld::graphs::KnowledgeNodeCreationConfig *arg3 = 0 ;
  std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > *arg4 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::CreationContext *) carg2;
  
  
  arg3 = (inworld::graphs::KnowledgeNodeCreationConfig *) carg3;
  
  
  arg4 = carg4 ? (std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig>*)carg4 : &empty4; 
  cppresult = inworld_inworld_graphs_KnowledgeNode_Create__SWIG((std::string const &)*arg1,(inworld::CreationContext const &)*arg2,(inworld::graphs::KnowledgeNodeCreationConfig const &)*arg3,(std::shared_ptr< inworld::graphs::KnowledgeNodeExecutionConfig > const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_KnowledgeNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::KnowledgeNode > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNode *arg1 = (inworld::graphs::KnowledgeNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KnowledgeNode > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_KnowledgeNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::KnowledgeNode const > *smartarg1 = 0 ;
  inworld::graphs::KnowledgeNode *arg1 = (inworld::graphs::KnowledgeNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::KnowledgeNode > *)carg1;
  arg1 = (inworld::graphs::KnowledgeNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::KnowledgeNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_TypedNode_MemoryState_EventHistory_MemoryState_Text_Text_Text_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_MemoryState_EventHistory_MemoryState_Text_Text_Text_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::MemoryState,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text,inworld::graphs::Text > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_TypedNode_KnowledgeRecords_EventHistory_MemoryState_Text_Text_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_KnowledgeRecords_EventHistory_MemoryState_Text_Text_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::KnowledgeRecords,inworld::graphs::EventHistory,inworld::graphs::MemoryState,inworld::graphs::Text,inworld::graphs::Text > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryUpdateNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryUpdateNode_new_rcstd_shared_ptr_Sl_inworld_graphs_MemoryUpdateNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *cppresult;
  std::shared_ptr< inworld::graphs::MemoryUpdateNode > empty1 ;
  std::shared_ptr< inworld::graphs::MemoryUpdateNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::MemoryUpdateNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > >((std::shared_ptr< inworld::graphs::MemoryUpdateNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryUpdateNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_MemoryUpdateNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryUpdateNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryUpdateNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MemoryUpdateNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_MemoryUpdateNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryRetrieveNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryRetrieveNode_new_rcstd_shared_ptr_Sl_inworld_graphs_MemoryRetrieveNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNode > empty1 ;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::MemoryRetrieveNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > >((std::shared_ptr< inworld::graphs::MemoryRetrieveNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryRetrieveNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_MemoryRetrieveNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryRetrieveNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MemoryRetrieveNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MemoryRetrieveNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_MemoryRetrieveNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MemoryUpdateNodeCreationConfig_llm_component_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->llm_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_MemoryUpdateNodeCreationConfig_llm_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->llm_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_MemoryUpdateNodeCreationConfig_embedder_component_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->embedder_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_MemoryUpdateNodeCreationConfig_embedder_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->embedder_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_MemoryUpdateNodeCreationConfig_memory_update_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) 0 ;
  inworld::MemoryUpdateConfig *arg2 = (inworld::MemoryUpdateConfig *) 0 ;
  
  arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg1;
  arg2 = (inworld::MemoryUpdateConfig *) carg2;
  if (arg1) (arg1)->memory_update_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateNodeCreationConfig_memory_update_config_get(SwigObj* carg1) {
  inworld::MemoryUpdateConfig *cppresult;
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg1;
  cppresult = (inworld::MemoryUpdateConfig *)& ((arg1)->memory_update_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateNodeCreationConfig_new() {
  inworld::graphs::MemoryUpdateNodeCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MemoryUpdateNodeCreationConfig *)new inworld::graphs::MemoryUpdateNodeCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemoryUpdateNodeCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MemoryRetrieveNodeCreationConfig_llm_component_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::MemoryRetrieveNodeCreationConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->llm_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_MemoryRetrieveNodeCreationConfig_llm_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::MemoryRetrieveNodeCreationConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->llm_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_MemoryRetrieveNodeCreationConfig_embedder_component_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::MemoryRetrieveNodeCreationConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->embedder_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_MemoryRetrieveNodeCreationConfig_embedder_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::MemoryRetrieveNodeCreationConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->embedder_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryRetrieveNodeCreationConfig_new() {
  inworld::graphs::MemoryRetrieveNodeCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MemoryRetrieveNodeCreationConfig *)new inworld::graphs::MemoryRetrieveNodeCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemoryRetrieveNodeCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::MemoryRetrieveNodeCreationConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_MemoryRetrieveNodeExecutionConfig_retrieval_config_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  inworld::RetrievalConfig *arg2 = (inworld::RetrievalConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (inworld::RetrievalConfig *) carg2;
  if (arg1) (arg1)->retrieval_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemoryRetrieveNodeExecutionConfig_retrieval_config_get(SwigObj* carg1) {
  inworld::RetrievalConfig *cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (inworld::RetrievalConfig *)& ((arg1)->retrieval_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemoryRetrieveNodeExecutionConfig_return_rolling_summary_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->return_rolling_summary = arg2;
}


SWIGEXPORTC bool inworld_MemoryRetrieveNodeExecutionConfig_return_rolling_summary_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->return_rolling_summary);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_MemoryRetrieveNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MemoryRetrieveNodeExecutionConfig_is_valid__SWIG((inworld::graphs::MemoryRetrieveNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryRetrieveNodeExecutionConfig_new() {
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)new inworld::graphs::MemoryRetrieveNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_MemoryRetrieveNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_MemoryRetrieveNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_MemoryRetrieveNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_MemoryRetrieveNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_MemoryRetrieveNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNodeExecutionConfig *arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4, SwigObj* carg5, SwigObj* carg6, SwigObj* carg7, SwigObj* carg8) {
  SwigValueWrapper< absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryState > > > cppresult;
  std::shared_ptr< inworld::graphs::MemoryUpdateNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::EventHistory > empty3 ;
  std::shared_ptr< inworld::graphs::MemoryState > empty4 ;
  std::shared_ptr< inworld::graphs::Text > empty5 ;
  std::shared_ptr< inworld::graphs::Text > empty6 ;
  std::shared_ptr< inworld::graphs::Text > empty7 ;
  std::shared_ptr< inworld::graphs::Text > empty8 ;
  inworld::graphs::MemoryUpdateNode *arg1 = (inworld::graphs::MemoryUpdateNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::EventHistory > *arg3 = 0 ;
  std::shared_ptr< inworld::graphs::MemoryState > *arg4 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg5 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg6 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg7 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg8 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryUpdateNode > *)carg1;
  arg1 = (inworld::graphs::MemoryUpdateNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::EventHistory>*)carg3 : &empty3; 
  
  arg4 = carg4 ? (std::shared_ptr< inworld::graphs::MemoryState>*)carg4 : &empty4; 
  
  arg5 = carg5 ? (std::shared_ptr< inworld::graphs::Text>*)carg5 : &empty5; 
  
  arg6 = carg6 ? (std::shared_ptr< inworld::graphs::Text>*)carg6 : &empty6; 
  
  arg7 = carg7 ? (std::shared_ptr< inworld::graphs::Text>*)carg7 : &empty7; 
  
  arg8 = carg8 ? (std::shared_ptr< inworld::graphs::Text>*)carg8 : &empty8; 
  try {
    cppresult = ((inworld::graphs::MemoryUpdateNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::EventHistory > const &)*arg3,(std::shared_ptr< inworld::graphs::MemoryState > const &)*arg4,(std::shared_ptr< inworld::graphs::Text > const &)*arg5,(std::shared_ptr< inworld::graphs::Text > const &)*arg6,(std::shared_ptr< inworld::graphs::Text > const &)*arg7,(std::shared_ptr< inworld::graphs::Text > const &)*arg8);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryState > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_MemoryUpdateNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MemoryUpdateNode const > *smartarg1 = 0 ;
  inworld::graphs::MemoryUpdateNode *arg1 = (inworld::graphs::MemoryUpdateNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryUpdateNode > *)carg1;
  arg1 = (inworld::graphs::MemoryUpdateNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MemoryUpdateNode_is_valid__SWIG((inworld::graphs::MemoryUpdateNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateNode_Create_rcstd_string_rcinworld_CreationContext_rcinworld_graphs_MemoryUpdateNodeCreationConfig(const char * carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  inworld::CreationContext *arg2 = 0 ;
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg3 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::CreationContext *) carg2;
  
  
  arg3 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg3;
  
  cppresult = inworld_inworld_graphs_MemoryUpdateNode_Create__SWIG_0((std::string const &)*arg1,(inworld::CreationContext const &)*arg2,(inworld::graphs::MemoryUpdateNodeCreationConfig const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryUpdateNode_Create_rcstd_string_rcinworld_CreationContext_rcinworld_graphs_MemoryUpdateNodeCreationConfig_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg_(const char * carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty4 ;
  std::string *arg1 = 0 ;
  inworld::CreationContext *arg2 = 0 ;
  inworld::graphs::MemoryUpdateNodeCreationConfig *arg3 = 0 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *arg4 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::CreationContext *) carg2;
  
  
  arg3 = (inworld::graphs::MemoryUpdateNodeCreationConfig *) carg3;
  
  
  arg4 = carg4 ? (std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg4 : &empty4; 
  cppresult = inworld_inworld_graphs_MemoryUpdateNode_Create__SWIG_1((std::string const &)*arg1,(inworld::CreationContext const &)*arg2,(inworld::graphs::MemoryUpdateNodeCreationConfig const &)*arg3,(std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryUpdateNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_MemoryUpdateNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MemoryUpdateNode > *smartarg1 = 0 ;
  inworld::graphs::MemoryUpdateNode *arg1 = (inworld::graphs::MemoryUpdateNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryUpdateNode > *)carg1;
  arg1 = (inworld::graphs::MemoryUpdateNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_MemoryUpdateNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::MemoryUpdateNode const > *smartarg1 = 0 ;
  inworld::graphs::MemoryUpdateNode *arg1 = (inworld::graphs::MemoryUpdateNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryUpdateNode > *)carg1;
  arg1 = (inworld::graphs::MemoryUpdateNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::MemoryUpdateNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryRetrieveNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4, SwigObj* carg5, SwigObj* carg6) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > > cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::EventHistory > empty3 ;
  std::shared_ptr< inworld::graphs::MemoryState > empty4 ;
  std::shared_ptr< inworld::graphs::Text > empty5 ;
  std::shared_ptr< inworld::graphs::Text > empty6 ;
  inworld::graphs::MemoryRetrieveNode *arg1 = (inworld::graphs::MemoryRetrieveNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::EventHistory > *arg3 = 0 ;
  std::shared_ptr< inworld::graphs::MemoryState > *arg4 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg5 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg6 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryRetrieveNode > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::EventHistory>*)carg3 : &empty3; 
  
  arg4 = carg4 ? (std::shared_ptr< inworld::graphs::MemoryState>*)carg4 : &empty4; 
  
  arg5 = carg5 ? (std::shared_ptr< inworld::graphs::Text>*)carg5 : &empty5; 
  
  arg6 = carg6 ? (std::shared_ptr< inworld::graphs::Text>*)carg6 : &empty6; 
  try {
    cppresult = ((inworld::graphs::MemoryRetrieveNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::EventHistory > const &)*arg3,(std::shared_ptr< inworld::graphs::MemoryState > const &)*arg4,(std::shared_ptr< inworld::graphs::Text > const &)*arg5,(std::shared_ptr< inworld::graphs::Text > const &)*arg6);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KnowledgeRecords > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_MemoryRetrieveNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNode const > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNode *arg1 = (inworld::graphs::MemoryRetrieveNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryRetrieveNode > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MemoryRetrieveNode_is_valid__SWIG((inworld::graphs::MemoryRetrieveNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryRetrieveNode_Create(const char * carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > empty4 ;
  std::string *arg1 = 0 ;
  inworld::CreationContext *arg2 = 0 ;
  inworld::graphs::MemoryRetrieveNodeCreationConfig *arg3 = 0 ;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > *arg4 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::CreationContext *) carg2;
  
  
  arg3 = (inworld::graphs::MemoryRetrieveNodeCreationConfig *) carg3;
  
  
  arg4 = carg4 ? (std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig>*)carg4 : &empty4; 
  cppresult = inworld_inworld_graphs_MemoryRetrieveNode_Create__SWIG((std::string const &)*arg1,(inworld::CreationContext const &)*arg2,(inworld::graphs::MemoryRetrieveNodeCreationConfig const &)*arg3,(std::shared_ptr< inworld::graphs::MemoryRetrieveNodeExecutionConfig > const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MemoryRetrieveNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_MemoryRetrieveNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MemoryRetrieveNode > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNode *arg1 = (inworld::graphs::MemoryRetrieveNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryRetrieveNode > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_MemoryRetrieveNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::MemoryRetrieveNode const > *smartarg1 = 0 ;
  inworld::graphs::MemoryRetrieveNode *arg1 = (inworld::graphs::MemoryRetrieveNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryRetrieveNode > *)carg1;
  arg1 = (inworld::graphs::MemoryRetrieveNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::MemoryRetrieveNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_RandomCannedTextNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_RandomCannedTextNode_new_rcstd_shared_ptr_Sl_inworld_graphs_RandomCannedTextNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *cppresult;
  std::shared_ptr< inworld::graphs::RandomCannedTextNode > empty1 ;
  std::shared_ptr< inworld::graphs::RandomCannedTextNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::RandomCannedTextNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > >((std::shared_ptr< inworld::graphs::RandomCannedTextNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_RandomCannedTextNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_RandomCannedTextNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_RandomCannedTextNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_RandomCannedTextNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::RandomCannedTextNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_RandomCannedTextNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_RandomCannedTextNodeExecutionConfig_canned_phrases_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNodeExecutionConfig *arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::vector< std::string > *) carg2;
  if (arg1) (arg1)->canned_phrases = *arg2;
}


SWIGEXPORTC SwigObj* inworld_RandomCannedTextNodeExecutionConfig_canned_phrases_get(SwigObj* carg1) {
  std::vector< std::string > *cppresult;
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNodeExecutionConfig *arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< std::string > *)& ((arg1)->canned_phrases);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_RandomCannedTextNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNodeExecutionConfig *arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::RandomCannedTextNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_RandomCannedTextNodeExecutionConfig_is_valid__SWIG((inworld::graphs::RandomCannedTextNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RandomCannedTextNodeExecutionConfig_new() {
  inworld::graphs::RandomCannedTextNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)new inworld::graphs::RandomCannedTextNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_RandomCannedTextNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNodeExecutionConfig *arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_RandomCannedTextNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNodeExecutionConfig *arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_RandomCannedTextNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNodeExecutionConfig *arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_RandomCannedTextNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNodeExecutionConfig *arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_RandomCannedTextNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNodeExecutionConfig *arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RandomCannedTextNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > > cppresult;
  std::shared_ptr< inworld::graphs::RandomCannedTextNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  inworld::graphs::RandomCannedTextNode *arg1 = (inworld::graphs::RandomCannedTextNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::vector< std::shared_ptr< inworld::graphs::BaseData > > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::RandomCannedTextNode > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = (std::vector< std::shared_ptr< inworld::graphs::BaseData > > *) carg3;
  
  try {
    cppresult = ((inworld::graphs::RandomCannedTextNode const *)arg1)->Process(*arg2,(std::vector< std::shared_ptr< inworld::graphs::BaseData > > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::BaseData > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_RandomCannedTextNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::RandomCannedTextNode const > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNode *arg1 = (inworld::graphs::RandomCannedTextNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::RandomCannedTextNode > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_RandomCannedTextNode_is_valid__SWIG((inworld::graphs::RandomCannedTextNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_RandomCannedTextNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_RandomCannedTextNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::RandomCannedTextNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::RandomCannedTextNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_RandomCannedTextNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::RandomCannedTextNode > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNode *arg1 = (inworld::graphs::RandomCannedTextNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::RandomCannedTextNode > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_RandomCannedTextNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::RandomCannedTextNode const > *smartarg1 = 0 ;
  inworld::graphs::RandomCannedTextNode *arg1 = (inworld::graphs::RandomCannedTextNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::RandomCannedTextNode > *)carg1;
  arg1 = (inworld::graphs::RandomCannedTextNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::RandomCannedTextNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_TypedNode_SafetyResult_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::SafetyResult,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::SafetyResult,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::SafetyResult,inworld::graphs::Text > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::SafetyResult,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::SafetyResult,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_SafetyResult_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::SafetyResult,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::SafetyResult,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::SafetyResult,inworld::graphs::Text > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::SafetyResult,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::SafetyResult,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::SafetyResult,inworld::graphs::Text > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyCheckerNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyCheckerNode_new_rcstd_shared_ptr_Sl_inworld_graphs_SafetyCheckerNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *cppresult;
  std::shared_ptr< inworld::graphs::SafetyCheckerNode > empty1 ;
  std::shared_ptr< inworld::graphs::SafetyCheckerNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::SafetyCheckerNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > >((std::shared_ptr< inworld::graphs::SafetyCheckerNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyCheckerNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_SafetyCheckerNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyCheckerNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyCheckerNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::SafetyCheckerNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_SafetyCheckerNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyResult_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyResult_new_rcstd_shared_ptr_Sl_inworld_graphs_SafetyResult_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *cppresult;
  std::shared_ptr< inworld::graphs::SafetyResult > empty1 ;
  std::shared_ptr< inworld::graphs::SafetyResult > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::SafetyResult>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > >((std::shared_ptr< inworld::graphs::SafetyResult > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyResult_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_SafetyResult_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyResult_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_SafetyResult_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::SafetyResult > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::SafetyResult >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_SafetyResult_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_new() {
  std::optional< inworld::SafetyConfig > *cppresult;
  SwigObj* result;
  
  cppresult = (std::optional< inworld::SafetyConfig > *)new std::optional< inworld::SafetyConfig >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_new_rcinworld_SafetyConfig(SwigObj* carg1) {
  std::optional< inworld::SafetyConfig > *cppresult;
  inworld::SafetyConfig *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (inworld::SafetyConfig *) carg1;
  
  cppresult = (std::optional< inworld::SafetyConfig > *)new std::optional< inworld::SafetyConfig >((inworld::SafetyConfig const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_copy(SwigObj* carg1) {
  std::optional< inworld::SafetyConfig > *cppresult;
  std::optional< inworld::SafetyConfig > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  
  cppresult = (std::optional< inworld::SafetyConfig > *)new std::optional< inworld::SafetyConfig >((std::optional< inworld::SafetyConfig > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_SafetyConfig_delete(SwigObj* carg1) {
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  delete arg1;
}


SWIGEXPORTC bool inworld_optional_SafetyConfig_has_value(SwigObj* carg1) {
  bool cppresult;
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  bool result;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  cppresult = (bool)((std::optional< inworld::SafetyConfig > const *)arg1)->has_value();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_value(SwigObj* carg1) {
  inworld::SafetyConfig *cppresult;
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  cppresult = (inworld::SafetyConfig *) &(arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_valueConst(SwigObj* carg1) {
  inworld::SafetyConfig *cppresult;
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  cppresult = (inworld::SafetyConfig *) &((std::optional< inworld::SafetyConfig > const *)arg1)->value();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_value_or(SwigObj* carg1, SwigObj* carg2) {
  inworld::SafetyConfig cppresult;
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  inworld::SafetyConfig *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  
  arg2 = (inworld::SafetyConfig *) carg2;
  
  cppresult = ((std::optional< inworld::SafetyConfig > const *)arg1)->value_or((inworld::SafetyConfig const &)*arg2);
  result = (SwigObj*)new inworld::SafetyConfig(cppresult);
  return result;
}


SWIGEXPORTC void inworld_optional_SafetyConfig_reset(SwigObj* carg1) {
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  (arg1)->reset();
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_get(SwigObj* carg1) {
  inworld::SafetyConfig *cppresult;
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  cppresult = (inworld::SafetyConfig *) &(arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_getConst(SwigObj* carg1) {
  inworld::SafetyConfig *cppresult;
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  cppresult = (inworld::SafetyConfig *) &((std::optional< inworld::SafetyConfig > const *)arg1)->operator *();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_optional_SafetyConfig_get_value(SwigObj* carg1) {
  inworld::SafetyConfig *cppresult;
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  SwigObj* result;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  cppresult = (inworld::SafetyConfig *) &inworld_std_optional_Sl_inworld_SafetyConfig_Sg__get_value__SWIG(arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_optional_SafetyConfig_set_value(SwigObj* carg1, SwigObj* carg2) {
  std::optional< inworld::SafetyConfig > *arg1 = (std::optional< inworld::SafetyConfig > *) 0 ;
  inworld::SafetyConfig *arg2 = 0 ;
  
  arg1 = (std::optional< inworld::SafetyConfig > *) carg1;
  
  arg2 = (inworld::SafetyConfig *) carg2;
  
  inworld_std_optional_Sl_inworld_SafetyConfig_Sg__set_value__SWIG(arg1,*arg2);
}


SWIGEXPORTC void inworld_SafetyCheckerNodeCreationConfig_embedder_component_id_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::SafetyCheckerNodeCreationConfig *arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->embedder_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_SafetyCheckerNodeCreationConfig_embedder_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::SafetyCheckerNodeCreationConfig *arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) carg1;
  cppresult = (std::string *) & ((arg1)->embedder_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_SafetyCheckerNodeCreationConfig_safety_config_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::SafetyCheckerNodeCreationConfig *arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) 0 ;
  inworld::SafetyCheckerCreationConfig *arg2 = (inworld::SafetyCheckerCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) carg1;
  arg2 = (inworld::SafetyCheckerCreationConfig *) carg2;
  if (arg1) (arg1)->safety_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerNodeCreationConfig_safety_config_get(SwigObj* carg1) {
  inworld::SafetyCheckerCreationConfig *cppresult;
  inworld::graphs::SafetyCheckerNodeCreationConfig *arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) carg1;
  cppresult = (inworld::SafetyCheckerCreationConfig *)& ((arg1)->safety_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerNodeCreationConfig_new() {
  inworld::graphs::SafetyCheckerNodeCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::SafetyCheckerNodeCreationConfig *)new inworld::graphs::SafetyCheckerNodeCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SafetyCheckerNodeCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::SafetyCheckerNodeCreationConfig *arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_SafetyCheckerNodeExecutionConfig_safety_config_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNodeExecutionConfig *arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *) 0 ;
  std::optional< inworld::SafetyConfig > *arg2 = (std::optional< inworld::SafetyConfig > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::optional< inworld::SafetyConfig > *) carg2;
  if (arg1) (arg1)->safety_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerNodeExecutionConfig_safety_config_get(SwigObj* carg1) {
  std::optional< inworld::SafetyConfig > *cppresult;
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNodeExecutionConfig *arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::optional< inworld::SafetyConfig > *)& ((arg1)->safety_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_SafetyCheckerNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNodeExecutionConfig *arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::SafetyCheckerNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_SafetyCheckerNodeExecutionConfig_is_valid__SWIG((inworld::graphs::SafetyCheckerNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerNodeExecutionConfig_new() {
  inworld::graphs::SafetyCheckerNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)new inworld::graphs::SafetyCheckerNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_SafetyCheckerNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNodeExecutionConfig *arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_SafetyCheckerNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNodeExecutionConfig *arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_SafetyCheckerNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNodeExecutionConfig *arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_SafetyCheckerNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNodeExecutionConfig *arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNodeExecutionConfig *arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > > cppresult;
  std::shared_ptr< inworld::graphs::SafetyCheckerNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > empty3 ;
  inworld::graphs::SafetyCheckerNode *arg1 = (inworld::graphs::SafetyCheckerNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::SafetyCheckerNode > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Text>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::SafetyCheckerNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::Text > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyResult > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_SafetyCheckerNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::SafetyCheckerNode const > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNode *arg1 = (inworld::graphs::SafetyCheckerNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::SafetyCheckerNode > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_SafetyCheckerNode_is_valid__SWIG((inworld::graphs::SafetyCheckerNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_SafetyCheckerNode_Create(const char * carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > empty4 ;
  std::string *arg1 = 0 ;
  inworld::CreationContext *arg2 = 0 ;
  inworld::graphs::SafetyCheckerNodeCreationConfig *arg3 = 0 ;
  std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > *arg4 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::CreationContext *) carg2;
  
  
  arg3 = (inworld::graphs::SafetyCheckerNodeCreationConfig *) carg3;
  
  
  arg4 = carg4 ? (std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig>*)carg4 : &empty4; 
  cppresult = inworld_inworld_graphs_SafetyCheckerNode_Create__SWIG((std::string const &)*arg1,(inworld::CreationContext const &)*arg2,(inworld::graphs::SafetyCheckerNodeCreationConfig const &)*arg3,(std::shared_ptr< inworld::graphs::SafetyCheckerNodeExecutionConfig > const &)*arg4);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::SafetyCheckerNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_SafetyCheckerNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::SafetyCheckerNode > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNode *arg1 = (inworld::graphs::SafetyCheckerNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::SafetyCheckerNode > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_SafetyCheckerNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::SafetyCheckerNode const > *smartarg1 = 0 ;
  inworld::graphs::SafetyCheckerNode *arg1 = (inworld::graphs::SafetyCheckerNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::SafetyCheckerNode > *)carg1;
  arg1 = (inworld::graphs::SafetyCheckerNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::SafetyCheckerNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_TypedNode_MatchedKeywords_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::MatchedKeywords,inworld::graphs::Text > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::MatchedKeywords,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::MatchedKeywords,inworld::graphs::Text > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::MatchedKeywords,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::MatchedKeywords,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_MatchedKeywords_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::MatchedKeywords,inworld::graphs::Text > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::MatchedKeywords,inworld::graphs::Text > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::MatchedKeywords,inworld::graphs::Text > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::MatchedKeywords,inworld::graphs::Text> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::MatchedKeywords,inworld::graphs::Text> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::MatchedKeywords,inworld::graphs::Text > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KeywordMatcherNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KeywordMatcherNode_new_rcstd_shared_ptr_Sl_inworld_graphs_KeywordMatcherNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *cppresult;
  std::shared_ptr< inworld::graphs::KeywordMatcherNode > empty1 ;
  std::shared_ptr< inworld::graphs::KeywordMatcherNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::KeywordMatcherNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > >((std::shared_ptr< inworld::graphs::KeywordMatcherNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KeywordMatcherNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_KeywordMatcherNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KeywordMatcherNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_KeywordMatcherNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::KeywordMatcherNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_KeywordMatcherNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedKeywords_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedKeywords_new_rcstd_shared_ptr_Sl_inworld_graphs_MatchedKeywords_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *cppresult;
  std::shared_ptr< inworld::graphs::MatchedKeywords > empty1 ;
  std::shared_ptr< inworld::graphs::MatchedKeywords > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::MatchedKeywords>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > >((std::shared_ptr< inworld::graphs::MatchedKeywords > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedKeywords_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_MatchedKeywords_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedKeywords_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_MatchedKeywords_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::MatchedKeywords > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::MatchedKeywords >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_MatchedKeywords_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_KeywordMatcherNodeCreationConfig_keyword_groups_set(SwigObj* carg1, SwigObj* carg2) {
  inworld::graphs::KeywordMatcherNodeCreationConfig *arg1 = (inworld::graphs::KeywordMatcherNodeCreationConfig *) 0 ;
  std::vector< inworld::KeywordGroup > *arg2 = (std::vector< inworld::KeywordGroup > *) 0 ;
  
  arg1 = (inworld::graphs::KeywordMatcherNodeCreationConfig *) carg1;
  arg2 = (std::vector< inworld::KeywordGroup > *) carg2;
  if (arg1) (arg1)->keyword_groups = *arg2;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherNodeCreationConfig_keyword_groups_get(SwigObj* carg1) {
  std::vector< inworld::KeywordGroup > *cppresult;
  inworld::graphs::KeywordMatcherNodeCreationConfig *arg1 = (inworld::graphs::KeywordMatcherNodeCreationConfig *) 0 ;
  SwigObj* result;
  
  arg1 = (inworld::graphs::KeywordMatcherNodeCreationConfig *) carg1;
  cppresult = (std::vector< inworld::KeywordGroup > *)& ((arg1)->keyword_groups);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherNodeCreationConfig_new() {
  inworld::graphs::KeywordMatcherNodeCreationConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::KeywordMatcherNodeCreationConfig *)new inworld::graphs::KeywordMatcherNodeCreationConfig();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_KeywordMatcherNodeCreationConfig_delete(SwigObj* carg1) {
  inworld::graphs::KeywordMatcherNodeCreationConfig *arg1 = (inworld::graphs::KeywordMatcherNodeCreationConfig *) 0 ;
  
  arg1 = (inworld::graphs::KeywordMatcherNodeCreationConfig *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > > cppresult;
  std::shared_ptr< inworld::graphs::KeywordMatcherNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > empty3 ;
  inworld::graphs::KeywordMatcherNode *arg1 = (inworld::graphs::KeywordMatcherNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::Text > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::KeywordMatcherNode > *)carg1;
  arg1 = (inworld::graphs::KeywordMatcherNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Text>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::KeywordMatcherNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::Text > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::MatchedKeywords > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_KeywordMatcherNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::KeywordMatcherNode const > *smartarg1 = 0 ;
  inworld::graphs::KeywordMatcherNode *arg1 = (inworld::graphs::KeywordMatcherNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::KeywordMatcherNode > *)carg1;
  arg1 = (inworld::graphs::KeywordMatcherNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_KeywordMatcherNode_is_valid__SWIG((inworld::graphs::KeywordMatcherNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherNode_Create_rcstd_string_rcinworld_graphs_KeywordMatcherNodeCreationConfig(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > cppresult;
  std::string temp1 ;
  std::string *arg1 = 0 ;
  inworld::graphs::KeywordMatcherNodeCreationConfig *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::graphs::KeywordMatcherNodeCreationConfig *) carg2;
  
  cppresult = inworld_inworld_graphs_KeywordMatcherNode_Create__SWIG_0((std::string const &)*arg1,(inworld::graphs::KeywordMatcherNodeCreationConfig const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_KeywordMatcherNode_Create_rcstd_string_rcinworld_graphs_KeywordMatcherNodeCreationConfig_rcstd_shared_ptr_Sl_inworld_graphs_NodeExecutionConfig_Sg_(const char * carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty3 ;
  std::string *arg1 = 0 ;
  inworld::graphs::KeywordMatcherNodeCreationConfig *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *arg3 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = (inworld::graphs::KeywordMatcherNodeCreationConfig *) carg2;
  
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg3 : &empty3; 
  cppresult = inworld_inworld_graphs_KeywordMatcherNode_Create__SWIG_1((std::string const &)*arg1,(inworld::graphs::KeywordMatcherNodeCreationConfig const &)*arg2,(std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &)*arg3);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::KeywordMatcherNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_KeywordMatcherNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::KeywordMatcherNode > *smartarg1 = 0 ;
  inworld::graphs::KeywordMatcherNode *arg1 = (inworld::graphs::KeywordMatcherNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::KeywordMatcherNode > *)carg1;
  arg1 = (inworld::graphs::KeywordMatcherNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_KeywordMatcherNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::KeywordMatcherNode const > *smartarg1 = 0 ;
  inworld::graphs::KeywordMatcherNode *arg1 = (inworld::graphs::KeywordMatcherNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::KeywordMatcherNode > *)carg1;
  arg1 = (inworld::graphs::KeywordMatcherNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::KeywordMatcherNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_STTNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_STTNode_new_rcstd_shared_ptr_Sl_inworld_graphs_STTNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *cppresult;
  std::shared_ptr< inworld::graphs::STTNode > empty1 ;
  std::shared_ptr< inworld::graphs::STTNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::STTNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > >((std::shared_ptr< inworld::graphs::STTNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_STTNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_STTNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_STTNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_STTNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::STTNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::STTNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_STTNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_STTNodeExecutionConfig_stt_component_id_set(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::STTNodeExecutionConfig *arg1 = (inworld::graphs::STTNodeExecutionConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::STTNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->stt_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_STTNodeExecutionConfig_stt_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::STTNodeExecutionConfig *arg1 = (inworld::graphs::STTNodeExecutionConfig *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::STTNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) & ((arg1)->stt_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC bool inworld_STTNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::STTNodeExecutionConfig *arg1 = (inworld::graphs::STTNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::STTNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::STTNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_STTNodeExecutionConfig_is_valid__SWIG((inworld::graphs::STTNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTNodeExecutionConfig_new() {
  inworld::graphs::STTNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::STTNodeExecutionConfig *)new inworld::graphs::STTNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::STTNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_STTNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::STTNodeExecutionConfig *arg1 = (inworld::graphs::STTNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::STTNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_STTNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::STTNodeExecutionConfig *arg1 = (inworld::graphs::STTNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::STTNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_STTNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::STTNodeExecutionConfig *arg1 = (inworld::graphs::STTNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::STTNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_STTNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::STTNodeExecutionConfig *arg1 = (inworld::graphs::STTNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::STTNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_STTNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::STTNodeExecutionConfig *arg1 = (inworld::graphs::STTNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::STTNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > cppresult;
  std::shared_ptr< inworld::graphs::STTNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  inworld::graphs::STTNode *arg1 = (inworld::graphs::STTNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::STTNode > *)carg1;
  arg1 = (inworld::graphs::STTNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = (std::shared_ptr< std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > *) carg3;
  
  try {
    cppresult = ((inworld::graphs::STTNode const *)arg1)->Process(*arg2,(std::shared_ptr< std::variant< inworld::graphs::Audio,inworld::graphs::DataStream< inworld::AudioChunk > > > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::Text > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_STTNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::STTNode const > *smartarg1 = 0 ;
  inworld::graphs::STTNode *arg1 = (inworld::graphs::STTNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::STTNode > *)carg1;
  arg1 = (inworld::graphs::STTNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_STTNode_is_valid__SWIG((inworld::graphs::STTNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_STTNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::STTNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_STTNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::STTNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::STTNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_STTNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::STTNode > *smartarg1 = 0 ;
  inworld::graphs::STTNode *arg1 = (inworld::graphs::STTNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::STTNode > *)carg1;
  arg1 = (inworld::graphs::STTNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_STTNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::STTNode const > *smartarg1 = 0 ;
  inworld::graphs::STTNode *arg1 = (inworld::graphs::STTNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::STTNode > *)carg1;
  arg1 = (inworld::graphs::STTNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::STTNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextAggregatorNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextAggregatorNode_new_rcstd_shared_ptr_Sl_inworld_graphs_TextAggregatorNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *cppresult;
  std::shared_ptr< inworld::graphs::TextAggregatorNode > empty1 ;
  std::shared_ptr< inworld::graphs::TextAggregatorNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::TextAggregatorNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > >((std::shared_ptr< inworld::graphs::TextAggregatorNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextAggregatorNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_TextAggregatorNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextAggregatorNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextAggregatorNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::TextAggregatorNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::TextAggregatorNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_TextAggregatorNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TextAggregatorNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > cppresult;
  std::shared_ptr< inworld::graphs::TextAggregatorNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  inworld::graphs::TextAggregatorNode *arg1 = (inworld::graphs::TextAggregatorNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TextAggregatorNode > *)carg1;
  arg1 = (inworld::graphs::TextAggregatorNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = (std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *) carg3;
  
  try {
    cppresult = ((inworld::graphs::TextAggregatorNode const *)arg1)->Process(*arg2,(std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::Text > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TextAggregatorNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TextAggregatorNode const > *smartarg1 = 0 ;
  inworld::graphs::TextAggregatorNode *arg1 = (inworld::graphs::TextAggregatorNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TextAggregatorNode > *)carg1;
  arg1 = (inworld::graphs::TextAggregatorNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_TextAggregatorNode_is_valid__SWIG((inworld::graphs::TextAggregatorNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextAggregatorNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_TextAggregatorNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextAggregatorNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TextAggregatorNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TextAggregatorNode > *smartarg1 = 0 ;
  inworld::graphs::TextAggregatorNode *arg1 = (inworld::graphs::TextAggregatorNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TextAggregatorNode > *)carg1;
  arg1 = (inworld::graphs::TextAggregatorNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TextAggregatorNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TextAggregatorNode const > *smartarg1 = 0 ;
  inworld::graphs::TextAggregatorNode *arg1 = (inworld::graphs::TextAggregatorNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TextAggregatorNode > *)carg1;
  arg1 = (inworld::graphs::TextAggregatorNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TextAggregatorNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextChunkingNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextChunkingNode_new_rcstd_shared_ptr_Sl_inworld_graphs_TextChunkingNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *cppresult;
  std::shared_ptr< inworld::graphs::TextChunkingNode > empty1 ;
  std::shared_ptr< inworld::graphs::TextChunkingNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::TextChunkingNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > >((std::shared_ptr< inworld::graphs::TextChunkingNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextChunkingNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_TextChunkingNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextChunkingNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TextChunkingNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::TextChunkingNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::TextChunkingNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_TextChunkingNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TextChunkingNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  SwigValueWrapper< absl::StatusOr< std::shared_ptr< inworld::graphs::DataStream< std::string > > > > cppresult;
  std::shared_ptr< inworld::graphs::TextChunkingNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  inworld::graphs::TextChunkingNode *arg1 = (inworld::graphs::TextChunkingNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TextChunkingNode > *)carg1;
  arg1 = (inworld::graphs::TextChunkingNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = (std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > *) carg3;
  
  try {
    cppresult = ((inworld::graphs::TextChunkingNode const *)arg1)->Process(*arg2,(std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::LLMCompletionResponse,inworld::graphs::LLMChatResponse > > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::DataStream< std::string > > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TextChunkingNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TextChunkingNode const > *smartarg1 = 0 ;
  inworld::graphs::TextChunkingNode *arg1 = (inworld::graphs::TextChunkingNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TextChunkingNode > *)carg1;
  arg1 = (inworld::graphs::TextChunkingNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_TextChunkingNode_is_valid__SWIG((inworld::graphs::TextChunkingNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TextChunkingNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_TextChunkingNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::NodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TextChunkingNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TextChunkingNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TextChunkingNode > *smartarg1 = 0 ;
  inworld::graphs::TextChunkingNode *arg1 = (inworld::graphs::TextChunkingNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TextChunkingNode > *)carg1;
  arg1 = (inworld::graphs::TextChunkingNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TextChunkingNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TextChunkingNode const > *smartarg1 = 0 ;
  inworld::graphs::TextChunkingNode *arg1 = (inworld::graphs::TextChunkingNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TextChunkingNode > *)carg1;
  arg1 = (inworld::graphs::TextChunkingNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TextChunkingNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TTSNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TTSNode_new_rcstd_shared_ptr_Sl_inworld_graphs_TTSNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *cppresult;
  std::shared_ptr< inworld::graphs::TTSNode > empty1 ;
  std::shared_ptr< inworld::graphs::TTSNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::TTSNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > >((std::shared_ptr< inworld::graphs::TTSNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TTSNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_TTSNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TTSNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_TTSNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::TTSNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::TTSNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_TTSNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TTSNodeExecutionConfig_tts_component_id_set(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->tts_component_id = *arg2;
}


SWIGEXPORTC const char * inworld_TTSNodeExecutionConfig_tts_component_id_get(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) & ((arg1)->tts_component_id);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_TTSNodeExecutionConfig_voice_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  inworld::Voice *arg2 = (inworld::Voice *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (inworld::Voice *) carg2;
  if (arg1) (arg1)->voice = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TTSNodeExecutionConfig_voice_get(SwigObj* carg1) {
  inworld::Voice *cppresult;
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (inworld::Voice *)& ((arg1)->voice);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TTSNodeExecutionConfig_synthesis_config_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  std::optional< inworld::SpeechSynthesisConfig > *arg2 = (std::optional< inworld::SpeechSynthesisConfig > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::optional< inworld::SpeechSynthesisConfig > *) carg2;
  if (arg1) (arg1)->synthesis_config = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TTSNodeExecutionConfig_synthesis_config_get(SwigObj* carg1) {
  std::optional< inworld::SpeechSynthesisConfig > *cppresult;
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::optional< inworld::SpeechSynthesisConfig > *)& ((arg1)->synthesis_config);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_TTSNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_TTSNodeExecutionConfig_is_valid__SWIG((inworld::graphs::TTSNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSNodeExecutionConfig_new() {
  inworld::graphs::TTSNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::TTSNodeExecutionConfig *)new inworld::graphs::TTSNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_TTSNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_TTSNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_TTSNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TTSNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_TTSNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::TTSNodeExecutionConfig *arg1 = (inworld::graphs::TTSNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::TTSNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  SwigValueWrapper< absl::StatusOr< std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > > > > cppresult;
  std::shared_ptr< inworld::graphs::TTSNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  inworld::graphs::TTSNode *arg1 = (inworld::graphs::TTSNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSNode > *)carg1;
  arg1 = (inworld::graphs::TTSNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = (std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > *) carg3;
  
  try {
    cppresult = ((inworld::graphs::TTSNode const *)arg1)->Process(*arg2,(std::shared_ptr< std::variant< inworld::graphs::Text,inworld::graphs::DataStream< std::string >,inworld::graphs::TTSRequest > > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::DataStream< inworld::graphs::TTSOutput > > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_TTSNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::TTSNode const > *smartarg1 = 0 ;
  inworld::graphs::TTSNode *arg1 = (inworld::graphs::TTSNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSNode > *)carg1;
  arg1 = (inworld::graphs::TTSNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_TTSNode_is_valid__SWIG((inworld::graphs::TTSNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_TTSNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_TTSNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::TTSNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::TTSNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_TTSNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TTSNode > *smartarg1 = 0 ;
  inworld::graphs::TTSNode *arg1 = (inworld::graphs::TTSNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TTSNode > *)carg1;
  arg1 = (inworld::graphs::TTSNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TTSNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TTSNode const > *smartarg1 = 0 ;
  inworld::graphs::TTSNode *arg1 = (inworld::graphs::TTSNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TTSNode > *)carg1;
  arg1 = (inworld::graphs::TTSNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TTSNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_new_rcstd_shared_ptr_Sl_inworld_graphs_LLMChatRequestBuilderNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > empty1 ;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > >((std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_LLMChatRequestBuilderNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequest_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequest_new_rcstd_shared_ptr_Sl_inworld_graphs_LLMChatRequest_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequest > empty1 ;
  std::shared_ptr< inworld::graphs::LLMChatRequest > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::LLMChatRequest>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > >((std::shared_ptr< inworld::graphs::LLMChatRequest > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequest_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_LLMChatRequest_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequest_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMChatRequest_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMChatRequest > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMChatRequest >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_LLMChatRequest_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_Vector_ChatMessage_new() {
  std::vector< inworld::graphs::ChatMessage > *cppresult;
  SwigObj* result;
  
  cppresult = (std::vector< inworld::graphs::ChatMessage > *)new std::vector< inworld::graphs::ChatMessage >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_Vector_ChatMessage_copy(SwigObj* carg1) {
  std::vector< inworld::graphs::ChatMessage > *cppresult;
  std::vector< inworld::graphs::ChatMessage > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  
  cppresult = (std::vector< inworld::graphs::ChatMessage > *)new std::vector< inworld::graphs::ChatMessage >((std::vector< inworld::graphs::ChatMessage > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_Vector_ChatMessage_size(SwigObj* carg1) {
  std::vector< inworld::graphs::ChatMessage >::size_type cppresult;
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  size_t result;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  cppresult = ((std::vector< inworld::graphs::ChatMessage > const *)arg1)->size();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t inworld_Vector_ChatMessage_capacity(SwigObj* carg1) {
  std::vector< inworld::graphs::ChatMessage >::size_type cppresult;
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  size_t result;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  cppresult = ((std::vector< inworld::graphs::ChatMessage > const *)arg1)->capacity();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void inworld_Vector_ChatMessage_reserve(SwigObj* carg1, size_t carg2) {
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  std::vector< inworld::graphs::ChatMessage >::size_type arg2 ;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  arg2 = (std::vector< inworld::graphs::ChatMessage >::size_type) carg2;
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool inworld_Vector_ChatMessage_empty(SwigObj* carg1) {
  bool cppresult;
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  bool result;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  cppresult = (bool)((std::vector< inworld::graphs::ChatMessage > const *)arg1)->empty();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Vector_ChatMessage_clear(SwigObj* carg1) {
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void inworld_Vector_ChatMessage_push_back(SwigObj* carg1, SwigObj* carg2) {
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  std::vector< inworld::graphs::ChatMessage >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  
  arg2 = (std::vector< inworld::graphs::ChatMessage >::value_type *) carg2;
  
  (arg1)->push_back((std::vector< inworld::graphs::ChatMessage >::value_type const &)*arg2);
}


SWIGEXPORTC SwigObj* inworld_Vector_ChatMessage_get(SwigObj* carg1, int carg2) {
  std::vector< inworld::graphs::ChatMessage >::value_type *cppresult;
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  int arg2 ;
  SwigObj* result;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  arg2 = (int) carg2;
  cppresult = (std::vector< inworld::graphs::ChatMessage >::value_type *) &inworld_std_vector_Sl_inworld_graphs_ChatMessage_Sg__get__SWIG(arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_Vector_ChatMessage_set(SwigObj* carg1, int carg2, SwigObj* carg3) {
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  int arg2 ;
  std::vector< inworld::graphs::ChatMessage >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  arg2 = (int) carg2;
  
  arg3 = (std::vector< inworld::graphs::ChatMessage >::value_type *) carg3;
  
  inworld_std_vector_Sl_inworld_graphs_ChatMessage_Sg__set__SWIG(arg1,arg2,(inworld::graphs::ChatMessage const &)*arg3);
}


SWIGEXPORTC void inworld_Vector_ChatMessage_delete(SwigObj* carg1) {
  std::vector< inworld::graphs::ChatMessage > *arg1 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  
  arg1 = (std::vector< inworld::graphs::ChatMessage > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_TypedNode_LLMChatRequest_Json_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::LLMChatRequest,inworld::graphs::Json > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::LLMChatRequest,inworld::graphs::Json > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::LLMChatRequest,inworld::graphs::Json > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::LLMChatRequest,inworld::graphs::Json> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::LLMChatRequest,inworld::graphs::Json> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_LLMChatRequest_Json_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::LLMChatRequest,inworld::graphs::Json > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::LLMChatRequest,inworld::graphs::Json > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::LLMChatRequest,inworld::graphs::Json > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::LLMChatRequest,inworld::graphs::Json> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::LLMChatRequest,inworld::graphs::Json> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::LLMChatRequest,inworld::graphs::Json > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC void inworld_StringTemplate_value_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::StringTemplate *arg1 = (inworld::graphs::StringTemplate *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::StringTemplate *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORTC const char * inworld_StringTemplate_value_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::StringTemplate *arg1 = (inworld::graphs::StringTemplate *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::StringTemplate *) carg1;
  cppresult = (std::string *) & ((arg1)->value);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StringTemplate_new() {
  inworld::graphs::StringTemplate *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::StringTemplate *)new inworld::graphs::StringTemplate();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_StringTemplate_delete(SwigObj* carg1) {
  inworld::graphs::StringTemplate *arg1 = (inworld::graphs::StringTemplate *) 0 ;
  
  arg1 = (inworld::graphs::StringTemplate *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_TextContent_new() {
  inworld::graphs::TextContent *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::TextContent *)new inworld::graphs::TextContent();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_TextContent_delete(SwigObj* carg1) {
  inworld::graphs::TextContent *arg1 = (inworld::graphs::TextContent *) 0 ;
  
  arg1 = (inworld::graphs::TextContent *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ImageContent_detail_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ImageContent *arg1 = (inworld::graphs::ImageContent *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ImageContent *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->detail = *arg2;
}


SWIGEXPORTC const char * inworld_ImageContent_detail_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::ImageContent *arg1 = (inworld::graphs::ImageContent *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::ImageContent *) carg1;
  cppresult = (std::string *) & ((arg1)->detail);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_ImageContent_new() {
  inworld::graphs::ImageContent *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::ImageContent *)new inworld::graphs::ImageContent();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ImageContent_delete(SwigObj* carg1) {
  inworld::graphs::ImageContent *arg1 = (inworld::graphs::ImageContent *) 0 ;
  
  arg1 = (inworld::graphs::ImageContent *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_ChatMessageContent_new() {
  inworld::graphs::ChatMessageContent *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::ChatMessageContent *)new inworld::graphs::ChatMessageContent();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ChatMessageContent_delete(SwigObj* carg1) {
  inworld::graphs::ChatMessageContent *arg1 = (inworld::graphs::ChatMessageContent *) 0 ;
  
  arg1 = (inworld::graphs::ChatMessageContent *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_ChatMessage_role_set(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->role = *arg2;
}


SWIGEXPORTC const char * inworld_ChatMessage_role_get(SwigObj* carg1) {
  std::string *cppresult;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  const char * result;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  cppresult = (std::string *) & ((arg1)->role);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC bool inworld_ChatMessage_HasSingleContent(SwigObj* carg1) {
  bool cppresult;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  bool result;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  cppresult = (bool)inworld_inworld_graphs_ChatMessage_HasSingleContent__SWIG((inworld::graphs::ChatMessage const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_ChatMessage_HasMultimodalContent(SwigObj* carg1) {
  bool cppresult;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  bool result;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  cppresult = (bool)inworld_inworld_graphs_ChatMessage_HasMultimodalContent__SWIG((inworld::graphs::ChatMessage const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ChatMessage_SetTextContent(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  inworld_inworld_graphs_ChatMessage_SetTextContent__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ChatMessage_SetTemplateContent(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  inworld_inworld_graphs_ChatMessage_SetTemplateContent__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ChatMessage_InitMultimodalContent(SwigObj* carg1) {
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  inworld_inworld_graphs_ChatMessage_InitMultimodalContent__SWIG(arg1);
}


SWIGEXPORTC void inworld_ChatMessage_AddTextToMultimodal(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  inworld_inworld_graphs_ChatMessage_AddTextToMultimodal__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ChatMessage_AddTemplateToMultimodal(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  inworld_inworld_graphs_ChatMessage_AddTemplateToMultimodal__SWIG(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ChatMessage_AddImageToMultimodal_rcstd_string_rcstd_string(SwigObj* carg1, const char * carg2, const char * carg3) {
  std::string temp2 ;
  std::string temp3 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  inworld_inworld_graphs_ChatMessage_AddImageToMultimodal__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORTC void inworld_ChatMessage_AddImageToMultimodal_rcstd_string(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  inworld_inworld_graphs_ChatMessage_AddImageToMultimodal__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void inworld_ChatMessage_AddImageTemplateToMultimodal_rcstd_string_rcstd_string(SwigObj* carg1, const char * carg2, const char * carg3) {
  std::string temp2 ;
  std::string temp3 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  inworld_inworld_graphs_ChatMessage_AddImageTemplateToMultimodal__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORTC void inworld_ChatMessage_AddImageTemplateToMultimodal_rcstd_string(SwigObj* carg1, const char * carg2) {
  std::string temp2 ;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  inworld_inworld_graphs_ChatMessage_AddImageTemplateToMultimodal__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORTC int inworld_ChatMessage_GetMultimodalItemCount(SwigObj* carg1) {
  int cppresult;
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  int result;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  cppresult = (int)inworld_inworld_graphs_ChatMessage_GetMultimodalItemCount__SWIG((inworld::graphs::ChatMessage const *)arg1);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_ChatMessage_new() {
  inworld::graphs::ChatMessage *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::ChatMessage *)new inworld::graphs::ChatMessage();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_ChatMessage_delete(SwigObj* carg1) {
  inworld::graphs::ChatMessage *arg1 = (inworld::graphs::ChatMessage *) 0 ;
  
  arg1 = (inworld::graphs::ChatMessage *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LLMChatRequestBuilderNodeExecutionConfig_messages_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  std::vector< inworld::graphs::ChatMessage > *arg2 = (std::vector< inworld::graphs::ChatMessage > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::vector< inworld::graphs::ChatMessage > *) carg2;
  if (arg1) (arg1)->messages = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequestBuilderNodeExecutionConfig_messages_get(SwigObj* carg1) {
  std::vector< inworld::graphs::ChatMessage > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< inworld::graphs::ChatMessage > *)& ((arg1)->messages);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMChatRequestBuilderNodeExecutionConfig_tools_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  std::vector< inworld::Tool > *arg2 = (std::vector< inworld::Tool > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::vector< inworld::Tool > *) carg2;
  if (arg1) (arg1)->tools = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequestBuilderNodeExecutionConfig_tools_get(SwigObj* carg1) {
  std::vector< inworld::Tool > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::vector< inworld::Tool > *)& ((arg1)->tools);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMChatRequestBuilderNodeExecutionConfig_tool_choice_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  std::optional< inworld::ToolChoice > *arg2 = (std::optional< inworld::ToolChoice > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::optional< inworld::ToolChoice > *) carg2;
  if (arg1) (arg1)->tool_choice = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequestBuilderNodeExecutionConfig_tool_choice_get(SwigObj* carg1) {
  std::optional< inworld::ToolChoice > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::optional< inworld::ToolChoice > *)& ((arg1)->tool_choice);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMChatRequestBuilderNodeExecutionConfig_response_format_set(SwigObj* carg1, int carg2) {
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  enum inworld::ResponseFormat arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (enum inworld::ResponseFormat) carg2;
  if (arg1) (arg1)->response_format = arg2;
}


SWIGEXPORTC int inworld_LLMChatRequestBuilderNodeExecutionConfig_response_format_get(SwigObj* carg1) {
  enum inworld::ResponseFormat cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (enum inworld::ResponseFormat) ((arg1)->response_format);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_LLMChatRequestBuilderNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMChatRequestBuilderNodeExecutionConfig_is_valid__SWIG((inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequestBuilderNodeExecutionConfig_new() {
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)new inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_LLMChatRequestBuilderNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_LLMChatRequestBuilderNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_LLMChatRequestBuilderNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMChatRequestBuilderNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequestBuilderNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequestBuilderNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > > cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::Json > empty3 ;
  inworld::graphs::LLMChatRequestBuilderNode *arg1 = (inworld::graphs::LLMChatRequestBuilderNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::Json > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequestBuilderNode > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Json>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::LLMChatRequestBuilderNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::Json > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequest > >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMChatRequestBuilderNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_LLMChatRequestBuilderNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_LLMChatRequestBuilderNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNode *arg1 = (inworld::graphs::LLMChatRequestBuilderNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_LLMChatRequestBuilderNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::LLMChatRequestBuilderNode const > *smartarg1 = 0 ;
  inworld::graphs::LLMChatRequestBuilderNode *arg1 = (inworld::graphs::LLMChatRequestBuilderNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMChatRequestBuilderNode > *)carg1;
  arg1 = (inworld::graphs::LLMChatRequestBuilderNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::LLMChatRequestBuilderNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryState_new(SwigObj* carg1) {
  inworld::graphs::MemoryState *cppresult;
  inworld::MemorySnapshot arg1 ;
  SwigObj* result;
  
  arg1 = *(inworld::MemorySnapshot *)carg1;
  cppresult = (inworld::graphs::MemoryState *)new inworld::graphs::MemoryState(SWIG_STD_MOVE(arg1));
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::MemoryState >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC SwigObj* inworld_MemoryState_memory_snapshot(SwigObj* carg1) {
  inworld::MemorySnapshot *cppresult;
  std::shared_ptr< inworld::graphs::MemoryState const > *smartarg1 = 0 ;
  inworld::graphs::MemoryState *arg1 = (inworld::graphs::MemoryState *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryState > *)carg1;
  arg1 = (inworld::graphs::MemoryState *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (inworld::MemorySnapshot *) &((inworld::graphs::MemoryState const *)arg1)->memory_snapshot();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_MemoryState_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::MemoryState const > *smartarg1 = 0 ;
  inworld::graphs::MemoryState *arg1 = (inworld::graphs::MemoryState *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryState > *)carg1;
  arg1 = (inworld::graphs::MemoryState *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_MemoryState_is_valid__SWIG((inworld::graphs::MemoryState const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC const char * inworld_MemoryState_GetJson(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::MemoryState > *smartarg1 = 0 ;
  inworld::graphs::MemoryState *arg1 = (inworld::graphs::MemoryState *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryState > *)carg1;
  arg1 = (inworld::graphs::MemoryState *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = inworld_inworld_graphs_MemoryState_GetJson__SWIG(arg1);
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC void inworld_MemoryState_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::MemoryState > *smartarg1 = 0 ;
  inworld::graphs::MemoryState *arg1 = (inworld::graphs::MemoryState *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::MemoryState > *)carg1;
  arg1 = (inworld::graphs::MemoryState *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_MemoryState_ToString(SwigObj* carg1) {
  std::string cppresult;
  std::shared_ptr< inworld::graphs::MemoryState const > *smartarg1 = 0 ;
  inworld::graphs::MemoryState *arg1 = (inworld::graphs::MemoryState *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::MemoryState > *)carg1;
  arg1 = (inworld::graphs::MemoryState *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = ((inworld::graphs::MemoryState const *)arg1)->ToString();
  
  result = (const char *)strdup(cppresult.c_str());
  
  return result;
}


SWIGEXPORTC void inworld_FeedbackRecorder_RecordFeedback(const char * carg1, const char * carg2, const char * carg3, const char * carg4) {
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  
  if (carg3)
  temp3 = carg3;
  arg3 = &temp3;
  
  
  if (carg4)
  temp4 = carg4;
  arg4 = &temp4;
  
  inworld::graphs::FeedbackRecorder::RecordFeedback((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORTC void inworld_TypedNode_Text_Json_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Json > > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Json > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Json > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Json> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Json> *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_TypedNode_Text_Json_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Json > const > *smartarg1 = 0 ;
  inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Json > *arg1 = (inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Json > *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Json> > *)carg1;
  arg1 = (inworld::graphs::TypedNode<inworld::graphs::Text,inworld::graphs::Json> *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::TypedNode< inworld::graphs::Text,inworld::graphs::Json > const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_new_rcstd_shared_ptr_Sl_inworld_graphs_LLMPromptBuilderNode_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > empty1 ;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::LLMPromptBuilderNode>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > >((std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::LLMPromptBuilderNode >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_LLMPromptBuilderNode_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_Text_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Text > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_Text_new_rcstd_shared_ptr_Sl_inworld_graphs_Text_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *cppresult;
  std::shared_ptr< inworld::graphs::Text > empty1 ;
  std::shared_ptr< inworld::graphs::Text > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::Text>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Text > >((std::shared_ptr< inworld::graphs::Text > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_Text_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Text > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_SharedPtr_Text_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_Text_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_SharedPtr_Text_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Text > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Text >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_SharedPtr_Text_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > *) carg1;
  delete arg1;
}


SWIGEXPORTC void inworld_LLMPromptBuilderNodeExecutionConfig_prompt_template_set(SwigObj* carg1, const char * carg2) {
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  std::string temp2 ;
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  
  if (carg2)
  temp2 = carg2;
  arg2 = &temp2;
  
  if (arg1) (arg1)->prompt_template = *arg2;
}


SWIGEXPORTC const char * inworld_LLMPromptBuilderNodeExecutionConfig_prompt_template_get(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) & ((arg1)->prompt_template);
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC bool inworld_LLMPromptBuilderNodeExecutionConfig_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig const > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMPromptBuilderNodeExecutionConfig_is_valid__SWIG((inworld::graphs::LLMPromptBuilderNodeExecutionConfig const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMPromptBuilderNodeExecutionConfig_new() {
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *cppresult;
  SwigObj* result;
  
  cppresult = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)new inworld::graphs::LLMPromptBuilderNodeExecutionConfig();
  
  result = (SwigObj*)cppresult ? (SwigObj*) new std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig >(cppresult SWIG_NO_NULL_DELETER_1) : 0;
  return result;
}


SWIGEXPORTC void inworld_LLMPromptBuilderNodeExecutionConfig_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC void inworld_LLMPromptBuilderNodeExecutionConfig_report_to_client_set(SwigObj* carg1, bool carg2) {
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *) 0 ;
  bool arg2 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (bool) carg2;
  if (arg1) (arg1)->report_to_client = arg2;
}


SWIGEXPORTC bool inworld_LLMPromptBuilderNodeExecutionConfig_report_to_client_get(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool) ((arg1)->report_to_client);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void inworld_LLMPromptBuilderNodeExecutionConfig_properties_set(SwigObj* carg1, SwigObj* carg2) {
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (std::map< std::string,std::string,std::less< std::string > > *) carg2;
  if (arg1) (arg1)->properties = *arg2;
}


SWIGEXPORTC SwigObj* inworld_LLMPromptBuilderNodeExecutionConfig_properties_get(SwigObj* carg1) {
  std::map< std::string,std::string,std::less< std::string > > *cppresult;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNodeExecutionConfig *arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *) 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNodeExecutionConfig *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->properties);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMPromptBuilderNode_Process(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Text > > cppresult;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNode const > *smartarg1 = 0 ;
  std::shared_ptr< inworld::graphs::ProcessContext > *smartarg2 = 0 ;
  std::shared_ptr< inworld::graphs::Json > empty3 ;
  inworld::graphs::LLMPromptBuilderNode *arg1 = (inworld::graphs::LLMPromptBuilderNode *) 0 ;
  inworld::graphs::ProcessContext *arg2 = 0 ;
  std::shared_ptr< inworld::graphs::Json > *arg3 = 0 ;
  SwigObj* result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMPromptBuilderNode > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNode *)(smartarg1 ? smartarg1->get() : 0);
  
  smartarg2 = (std::shared_ptr< inworld::graphs::ProcessContext > *)carg2;
  if (!smartarg2 || !smartarg2->get()) {
    SWIG_exception(SWIG_RuntimeError, "inworld::graphs::ProcessContext & reference is null");
    return 0;
  }
  arg2 = (inworld::graphs::ProcessContext *)smartarg2->get();
  
  arg3 = carg3 ? (std::shared_ptr< inworld::graphs::Json>*)carg3 : &empty3; 
  try {
    cppresult = ((inworld::graphs::LLMPromptBuilderNode const *)arg1)->Process(*arg2,(std::shared_ptr< inworld::graphs::Json > const &)*arg3);
  } catch(std::exception &_e) {
    SWIG_exception(SWIG_SystemError, (&_e)->what());
  }
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::Text > >(cppresult);
  return result;
}


SWIGEXPORTC bool inworld_LLMPromptBuilderNode_is_valid(SwigObj* carg1) {
  bool cppresult;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNode const > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNode *arg1 = (inworld::graphs::LLMPromptBuilderNode *) 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMPromptBuilderNode > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (bool)inworld_inworld_graphs_LLMPromptBuilderNode_is_valid__SWIG((inworld::graphs::LLMPromptBuilderNode const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_LLMPromptBuilderNode_Create(const char * carg1, SwigObj* carg2) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > > cppresult;
  std::string temp1 ;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > empty2 ;
  std::string *arg1 = 0 ;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > *arg2 = 0 ;
  SwigObj* result;
  
  
  if (carg1)
  temp1 = carg1;
  arg1 = &temp1;
  
  
  arg2 = carg2 ? (std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig>*)carg2 : &empty2; 
  cppresult = inworld_inworld_graphs_LLMPromptBuilderNode_Create__SWIG((std::string const &)*arg1,(std::shared_ptr< inworld::graphs::LLMPromptBuilderNodeExecutionConfig > const &)*arg2);
  result = (SwigObj*)new absl::StatusOr< std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > >(cppresult);
  return result;
}


SWIGEXPORTC void inworld_LLMPromptBuilderNode_delete(SwigObj* carg1) {
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNode *arg1 = (inworld::graphs::LLMPromptBuilderNode *) 0 ;
  
  
  smartarg1 = (std::shared_ptr< inworld::graphs::LLMPromptBuilderNode > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNode *)(smartarg1 ? smartarg1->get() : 0);
  (void)arg1; delete smartarg1;
}


SWIGEXPORTC const char * inworld_LLMPromptBuilderNode_id(SwigObj* carg1) {
  std::string *cppresult;
  std::shared_ptr< inworld::graphs::LLMPromptBuilderNode const > *smartarg1 = 0 ;
  inworld::graphs::LLMPromptBuilderNode *arg1 = (inworld::graphs::LLMPromptBuilderNode *) 0 ;
  const char * result;
  
  
  smartarg1 = (std::shared_ptr<const inworld::graphs::LLMPromptBuilderNode > *)carg1;
  arg1 = (inworld::graphs::LLMPromptBuilderNode *)(smartarg1 ? smartarg1->get() : 0);
  cppresult = (std::string *) &((inworld::graphs::LLMPromptBuilderNode const *)arg1)->id();
  
  result = (const char *)strdup(cppresult->c_str());
  
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NodePtr_new() {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *cppresult;
  SwigObj* result;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Node > >();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NodePtr_new_rcstd_shared_ptr_Sl_inworld_graphs_Node_Sg_(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *cppresult;
  std::shared_ptr< inworld::graphs::Node > empty1 ;
  std::shared_ptr< inworld::graphs::Node > *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = carg1 ? (std::shared_ptr< inworld::graphs::Node>*)carg1 : &empty1; 
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Node > >((std::shared_ptr< inworld::graphs::Node > const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NodePtr_new_rcabsl_Status(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *cppresult;
  absl::Status *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (absl::Status *) carg1;
  
  cppresult = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *)new absl::StatusOr< std::shared_ptr< inworld::graphs::Node > >((absl::Status const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool inworld_StatusOr_NodePtr_ok(SwigObj* carg1) {
  bool cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  bool result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  cppresult = (bool)((absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > const *)arg1)->ok();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NodePtr_status(SwigObj* carg1) {
  absl::Status *cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  cppresult = (absl::Status *) &((absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > const *)arg1)->status();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* inworld_StatusOr_NodePtr_value(SwigObj* carg1) {
  SwigValueWrapper< std::shared_ptr< inworld::graphs::Node > > cppresult;
  absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  SwigObj* result;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  cppresult = ((absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > const *)arg1)->value();
  result = (SwigObj*)(&cppresult ? new std::shared_ptr< inworld::graphs::Node >(cppresult) : 0); 
  return result;
}


SWIGEXPORTC void inworld_StatusOr_NodePtr_delete(SwigObj* carg1) {
  absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *) 0 ;
  
  arg1 = (absl::StatusOr< std::shared_ptr< inworld::graphs::Node > > *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* inworld_graphs_ffi_makeDataStream_pv_std_shared_ptr_Sl_inworld_graphs_CancellationContext_Sg_(void * carg1, SwigObj* carg2) {
  absl::StatusOr< inworld::ffi::BaseDataPtr > cppresult;
  std::shared_ptr< inworld::graphs::CancellationContext > empty2 ;
  void *arg1 = (void *) 0 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::CancellationContext > > arg2 ;
  SwigObj* result;
  
  arg1 = (void *) carg1;
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::CancellationContext>*)carg2 : empty2; 
  cppresult = inworld::ffi::graphs_ffi_makeDataStream(arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new absl::StatusOr< inworld::ffi::BaseDataPtr >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_graphs_ffi_makeDataStream_pv(void * carg1) {
  absl::StatusOr< inworld::ffi::BaseDataPtr > cppresult;
  void *arg1 = (void *) 0 ;
  SwigObj* result;
  
  arg1 = (void *) carg1;
  cppresult = inworld::ffi::graphs_ffi_makeDataStream(arg1);
  result = (SwigObj*)new absl::StatusOr< inworld::ffi::BaseDataPtr >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* inworld_graphs_ffi_makeCustomNode(const char * carg1, SwigObj* carg2, void * carg3) {
  absl::StatusOr< inworld::ffi::NodePtr > cppresult;
  std::shared_ptr< inworld::graphs::NodeExecutionConfig > empty2 ;
  std::string arg1 ;
  SwigValueWrapper< std::shared_ptr< inworld::graphs::NodeExecutionConfig > > arg2 ;
  void *arg3 = (void *) 0 ;
  SwigObj* result;
  
  
  if (carg1)
  arg1 = carg1;
  
  
  arg2 = carg2 ? *(std::shared_ptr< inworld::graphs::NodeExecutionConfig>*)carg2 : empty2; 
  arg3 = (void *) carg3;
  cppresult = inworld::ffi::graphs_ffi_makeCustomNode(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3);
  result = (SwigObj*)new absl::StatusOr< inworld::ffi::NodePtr >(cppresult);
  return result;
}


#ifdef __cplusplus
}
#endif

